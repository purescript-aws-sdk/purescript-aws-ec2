
module AWS.EC2.Types where

import Prelude
import Data.Foreign.Class (class Decode, class Encode)
import Data.Foreign.Generic (defaultOptions, genericDecode, genericEncode)
import Data.Foreign.Generic.Types (Options)
import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.StrMap (StrMap) as StrMap

import AWS.Request.Types as Types

options :: Options
options = defaultOptions { unwrapSingleConstructors = true }


-- | <p>Contains the parameters for accepting the quote.</p>
newtype AcceptReservedInstancesExchangeQuoteRequest = AcceptReservedInstancesExchangeQuoteRequest 
  { "DryRun" :: Maybe (Boolean)
  , "ReservedInstanceIds" :: (ReservedInstanceIdSet)
  , "TargetConfigurations" :: Maybe (TargetConfigurationRequestSet)
  }
derive instance newtypeAcceptReservedInstancesExchangeQuoteRequest :: Newtype AcceptReservedInstancesExchangeQuoteRequest _
derive instance repGenericAcceptReservedInstancesExchangeQuoteRequest :: Generic AcceptReservedInstancesExchangeQuoteRequest _
instance showAcceptReservedInstancesExchangeQuoteRequest :: Show AcceptReservedInstancesExchangeQuoteRequest where show = genericShow
instance decodeAcceptReservedInstancesExchangeQuoteRequest :: Decode AcceptReservedInstancesExchangeQuoteRequest where decode = genericDecode options
instance encodeAcceptReservedInstancesExchangeQuoteRequest :: Encode AcceptReservedInstancesExchangeQuoteRequest where encode = genericEncode options

-- | Constructs AcceptReservedInstancesExchangeQuoteRequest from required parameters
newAcceptReservedInstancesExchangeQuoteRequest :: ReservedInstanceIdSet -> AcceptReservedInstancesExchangeQuoteRequest
newAcceptReservedInstancesExchangeQuoteRequest _ReservedInstanceIds = AcceptReservedInstancesExchangeQuoteRequest { "ReservedInstanceIds": _ReservedInstanceIds, "DryRun": Nothing, "TargetConfigurations": Nothing }

-- | Constructs AcceptReservedInstancesExchangeQuoteRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAcceptReservedInstancesExchangeQuoteRequest' :: ReservedInstanceIdSet -> ( { "DryRun" :: Maybe (Boolean) , "ReservedInstanceIds" :: (ReservedInstanceIdSet) , "TargetConfigurations" :: Maybe (TargetConfigurationRequestSet) } -> {"DryRun" :: Maybe (Boolean) , "ReservedInstanceIds" :: (ReservedInstanceIdSet) , "TargetConfigurations" :: Maybe (TargetConfigurationRequestSet) } ) -> AcceptReservedInstancesExchangeQuoteRequest
newAcceptReservedInstancesExchangeQuoteRequest' _ReservedInstanceIds customize = (AcceptReservedInstancesExchangeQuoteRequest <<< customize) { "ReservedInstanceIds": _ReservedInstanceIds, "DryRun": Nothing, "TargetConfigurations": Nothing }



-- | <p>The result of the exchange and whether it was <code>successful</code>.</p>
newtype AcceptReservedInstancesExchangeQuoteResult = AcceptReservedInstancesExchangeQuoteResult 
  { "ExchangeId" :: Maybe (String)
  }
derive instance newtypeAcceptReservedInstancesExchangeQuoteResult :: Newtype AcceptReservedInstancesExchangeQuoteResult _
derive instance repGenericAcceptReservedInstancesExchangeQuoteResult :: Generic AcceptReservedInstancesExchangeQuoteResult _
instance showAcceptReservedInstancesExchangeQuoteResult :: Show AcceptReservedInstancesExchangeQuoteResult where show = genericShow
instance decodeAcceptReservedInstancesExchangeQuoteResult :: Decode AcceptReservedInstancesExchangeQuoteResult where decode = genericDecode options
instance encodeAcceptReservedInstancesExchangeQuoteResult :: Encode AcceptReservedInstancesExchangeQuoteResult where encode = genericEncode options

-- | Constructs AcceptReservedInstancesExchangeQuoteResult from required parameters
newAcceptReservedInstancesExchangeQuoteResult :: AcceptReservedInstancesExchangeQuoteResult
newAcceptReservedInstancesExchangeQuoteResult  = AcceptReservedInstancesExchangeQuoteResult { "ExchangeId": Nothing }

-- | Constructs AcceptReservedInstancesExchangeQuoteResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAcceptReservedInstancesExchangeQuoteResult' :: ( { "ExchangeId" :: Maybe (String) } -> {"ExchangeId" :: Maybe (String) } ) -> AcceptReservedInstancesExchangeQuoteResult
newAcceptReservedInstancesExchangeQuoteResult'  customize = (AcceptReservedInstancesExchangeQuoteResult <<< customize) { "ExchangeId": Nothing }



newtype AcceptVpcEndpointConnectionsRequest = AcceptVpcEndpointConnectionsRequest 
  { "DryRun" :: Maybe (Boolean)
  , "ServiceId" :: (String)
  , "VpcEndpointIds" :: (ValueStringList)
  }
derive instance newtypeAcceptVpcEndpointConnectionsRequest :: Newtype AcceptVpcEndpointConnectionsRequest _
derive instance repGenericAcceptVpcEndpointConnectionsRequest :: Generic AcceptVpcEndpointConnectionsRequest _
instance showAcceptVpcEndpointConnectionsRequest :: Show AcceptVpcEndpointConnectionsRequest where show = genericShow
instance decodeAcceptVpcEndpointConnectionsRequest :: Decode AcceptVpcEndpointConnectionsRequest where decode = genericDecode options
instance encodeAcceptVpcEndpointConnectionsRequest :: Encode AcceptVpcEndpointConnectionsRequest where encode = genericEncode options

-- | Constructs AcceptVpcEndpointConnectionsRequest from required parameters
newAcceptVpcEndpointConnectionsRequest :: String -> ValueStringList -> AcceptVpcEndpointConnectionsRequest
newAcceptVpcEndpointConnectionsRequest _ServiceId _VpcEndpointIds = AcceptVpcEndpointConnectionsRequest { "ServiceId": _ServiceId, "VpcEndpointIds": _VpcEndpointIds, "DryRun": Nothing }

-- | Constructs AcceptVpcEndpointConnectionsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAcceptVpcEndpointConnectionsRequest' :: String -> ValueStringList -> ( { "DryRun" :: Maybe (Boolean) , "ServiceId" :: (String) , "VpcEndpointIds" :: (ValueStringList) } -> {"DryRun" :: Maybe (Boolean) , "ServiceId" :: (String) , "VpcEndpointIds" :: (ValueStringList) } ) -> AcceptVpcEndpointConnectionsRequest
newAcceptVpcEndpointConnectionsRequest' _ServiceId _VpcEndpointIds customize = (AcceptVpcEndpointConnectionsRequest <<< customize) { "ServiceId": _ServiceId, "VpcEndpointIds": _VpcEndpointIds, "DryRun": Nothing }



newtype AcceptVpcEndpointConnectionsResult = AcceptVpcEndpointConnectionsResult 
  { "Unsuccessful" :: Maybe (UnsuccessfulItemSet)
  }
derive instance newtypeAcceptVpcEndpointConnectionsResult :: Newtype AcceptVpcEndpointConnectionsResult _
derive instance repGenericAcceptVpcEndpointConnectionsResult :: Generic AcceptVpcEndpointConnectionsResult _
instance showAcceptVpcEndpointConnectionsResult :: Show AcceptVpcEndpointConnectionsResult where show = genericShow
instance decodeAcceptVpcEndpointConnectionsResult :: Decode AcceptVpcEndpointConnectionsResult where decode = genericDecode options
instance encodeAcceptVpcEndpointConnectionsResult :: Encode AcceptVpcEndpointConnectionsResult where encode = genericEncode options

-- | Constructs AcceptVpcEndpointConnectionsResult from required parameters
newAcceptVpcEndpointConnectionsResult :: AcceptVpcEndpointConnectionsResult
newAcceptVpcEndpointConnectionsResult  = AcceptVpcEndpointConnectionsResult { "Unsuccessful": Nothing }

-- | Constructs AcceptVpcEndpointConnectionsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAcceptVpcEndpointConnectionsResult' :: ( { "Unsuccessful" :: Maybe (UnsuccessfulItemSet) } -> {"Unsuccessful" :: Maybe (UnsuccessfulItemSet) } ) -> AcceptVpcEndpointConnectionsResult
newAcceptVpcEndpointConnectionsResult'  customize = (AcceptVpcEndpointConnectionsResult <<< customize) { "Unsuccessful": Nothing }



-- | <p>Contains the parameters for AcceptVpcPeeringConnection.</p>
newtype AcceptVpcPeeringConnectionRequest = AcceptVpcPeeringConnectionRequest 
  { "DryRun" :: Maybe (Boolean)
  , "VpcPeeringConnectionId" :: Maybe (String)
  }
derive instance newtypeAcceptVpcPeeringConnectionRequest :: Newtype AcceptVpcPeeringConnectionRequest _
derive instance repGenericAcceptVpcPeeringConnectionRequest :: Generic AcceptVpcPeeringConnectionRequest _
instance showAcceptVpcPeeringConnectionRequest :: Show AcceptVpcPeeringConnectionRequest where show = genericShow
instance decodeAcceptVpcPeeringConnectionRequest :: Decode AcceptVpcPeeringConnectionRequest where decode = genericDecode options
instance encodeAcceptVpcPeeringConnectionRequest :: Encode AcceptVpcPeeringConnectionRequest where encode = genericEncode options

-- | Constructs AcceptVpcPeeringConnectionRequest from required parameters
newAcceptVpcPeeringConnectionRequest :: AcceptVpcPeeringConnectionRequest
newAcceptVpcPeeringConnectionRequest  = AcceptVpcPeeringConnectionRequest { "DryRun": Nothing, "VpcPeeringConnectionId": Nothing }

-- | Constructs AcceptVpcPeeringConnectionRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAcceptVpcPeeringConnectionRequest' :: ( { "DryRun" :: Maybe (Boolean) , "VpcPeeringConnectionId" :: Maybe (String) } -> {"DryRun" :: Maybe (Boolean) , "VpcPeeringConnectionId" :: Maybe (String) } ) -> AcceptVpcPeeringConnectionRequest
newAcceptVpcPeeringConnectionRequest'  customize = (AcceptVpcPeeringConnectionRequest <<< customize) { "DryRun": Nothing, "VpcPeeringConnectionId": Nothing }



-- | <p>Contains the output of AcceptVpcPeeringConnection.</p>
newtype AcceptVpcPeeringConnectionResult = AcceptVpcPeeringConnectionResult 
  { "VpcPeeringConnection" :: Maybe (VpcPeeringConnection)
  }
derive instance newtypeAcceptVpcPeeringConnectionResult :: Newtype AcceptVpcPeeringConnectionResult _
derive instance repGenericAcceptVpcPeeringConnectionResult :: Generic AcceptVpcPeeringConnectionResult _
instance showAcceptVpcPeeringConnectionResult :: Show AcceptVpcPeeringConnectionResult where show = genericShow
instance decodeAcceptVpcPeeringConnectionResult :: Decode AcceptVpcPeeringConnectionResult where decode = genericDecode options
instance encodeAcceptVpcPeeringConnectionResult :: Encode AcceptVpcPeeringConnectionResult where encode = genericEncode options

-- | Constructs AcceptVpcPeeringConnectionResult from required parameters
newAcceptVpcPeeringConnectionResult :: AcceptVpcPeeringConnectionResult
newAcceptVpcPeeringConnectionResult  = AcceptVpcPeeringConnectionResult { "VpcPeeringConnection": Nothing }

-- | Constructs AcceptVpcPeeringConnectionResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAcceptVpcPeeringConnectionResult' :: ( { "VpcPeeringConnection" :: Maybe (VpcPeeringConnection) } -> {"VpcPeeringConnection" :: Maybe (VpcPeeringConnection) } ) -> AcceptVpcPeeringConnectionResult
newAcceptVpcPeeringConnectionResult'  customize = (AcceptVpcPeeringConnectionResult <<< customize) { "VpcPeeringConnection": Nothing }



-- | <p>Describes an account attribute.</p>
newtype AccountAttribute = AccountAttribute 
  { "AttributeName" :: Maybe (String)
  , "AttributeValues" :: Maybe (AccountAttributeValueList)
  }
derive instance newtypeAccountAttribute :: Newtype AccountAttribute _
derive instance repGenericAccountAttribute :: Generic AccountAttribute _
instance showAccountAttribute :: Show AccountAttribute where show = genericShow
instance decodeAccountAttribute :: Decode AccountAttribute where decode = genericDecode options
instance encodeAccountAttribute :: Encode AccountAttribute where encode = genericEncode options

-- | Constructs AccountAttribute from required parameters
newAccountAttribute :: AccountAttribute
newAccountAttribute  = AccountAttribute { "AttributeName": Nothing, "AttributeValues": Nothing }

-- | Constructs AccountAttribute's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAccountAttribute' :: ( { "AttributeName" :: Maybe (String) , "AttributeValues" :: Maybe (AccountAttributeValueList) } -> {"AttributeName" :: Maybe (String) , "AttributeValues" :: Maybe (AccountAttributeValueList) } ) -> AccountAttribute
newAccountAttribute'  customize = (AccountAttribute <<< customize) { "AttributeName": Nothing, "AttributeValues": Nothing }



newtype AccountAttributeList = AccountAttributeList (Array AccountAttribute)
derive instance newtypeAccountAttributeList :: Newtype AccountAttributeList _
derive instance repGenericAccountAttributeList :: Generic AccountAttributeList _
instance showAccountAttributeList :: Show AccountAttributeList where show = genericShow
instance decodeAccountAttributeList :: Decode AccountAttributeList where decode = genericDecode options
instance encodeAccountAttributeList :: Encode AccountAttributeList where encode = genericEncode options



newtype AccountAttributeName = AccountAttributeName String
derive instance newtypeAccountAttributeName :: Newtype AccountAttributeName _
derive instance repGenericAccountAttributeName :: Generic AccountAttributeName _
instance showAccountAttributeName :: Show AccountAttributeName where show = genericShow
instance decodeAccountAttributeName :: Decode AccountAttributeName where decode = genericDecode options
instance encodeAccountAttributeName :: Encode AccountAttributeName where encode = genericEncode options



newtype AccountAttributeNameStringList = AccountAttributeNameStringList (Array AccountAttributeName)
derive instance newtypeAccountAttributeNameStringList :: Newtype AccountAttributeNameStringList _
derive instance repGenericAccountAttributeNameStringList :: Generic AccountAttributeNameStringList _
instance showAccountAttributeNameStringList :: Show AccountAttributeNameStringList where show = genericShow
instance decodeAccountAttributeNameStringList :: Decode AccountAttributeNameStringList where decode = genericDecode options
instance encodeAccountAttributeNameStringList :: Encode AccountAttributeNameStringList where encode = genericEncode options



-- | <p>Describes a value of an account attribute.</p>
newtype AccountAttributeValue = AccountAttributeValue 
  { "AttributeValue" :: Maybe (String)
  }
derive instance newtypeAccountAttributeValue :: Newtype AccountAttributeValue _
derive instance repGenericAccountAttributeValue :: Generic AccountAttributeValue _
instance showAccountAttributeValue :: Show AccountAttributeValue where show = genericShow
instance decodeAccountAttributeValue :: Decode AccountAttributeValue where decode = genericDecode options
instance encodeAccountAttributeValue :: Encode AccountAttributeValue where encode = genericEncode options

-- | Constructs AccountAttributeValue from required parameters
newAccountAttributeValue :: AccountAttributeValue
newAccountAttributeValue  = AccountAttributeValue { "AttributeValue": Nothing }

-- | Constructs AccountAttributeValue's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAccountAttributeValue' :: ( { "AttributeValue" :: Maybe (String) } -> {"AttributeValue" :: Maybe (String) } ) -> AccountAttributeValue
newAccountAttributeValue'  customize = (AccountAttributeValue <<< customize) { "AttributeValue": Nothing }



newtype AccountAttributeValueList = AccountAttributeValueList (Array AccountAttributeValue)
derive instance newtypeAccountAttributeValueList :: Newtype AccountAttributeValueList _
derive instance repGenericAccountAttributeValueList :: Generic AccountAttributeValueList _
instance showAccountAttributeValueList :: Show AccountAttributeValueList where show = genericShow
instance decodeAccountAttributeValueList :: Decode AccountAttributeValueList where decode = genericDecode options
instance encodeAccountAttributeValueList :: Encode AccountAttributeValueList where encode = genericEncode options



-- | <p>Describes a running instance in a Spot Fleet.</p>
newtype ActiveInstance = ActiveInstance 
  { "InstanceId" :: Maybe (String)
  , "InstanceType" :: Maybe (String)
  , "SpotInstanceRequestId" :: Maybe (String)
  , "InstanceHealth" :: Maybe (InstanceHealthStatus)
  }
derive instance newtypeActiveInstance :: Newtype ActiveInstance _
derive instance repGenericActiveInstance :: Generic ActiveInstance _
instance showActiveInstance :: Show ActiveInstance where show = genericShow
instance decodeActiveInstance :: Decode ActiveInstance where decode = genericDecode options
instance encodeActiveInstance :: Encode ActiveInstance where encode = genericEncode options

-- | Constructs ActiveInstance from required parameters
newActiveInstance :: ActiveInstance
newActiveInstance  = ActiveInstance { "InstanceHealth": Nothing, "InstanceId": Nothing, "InstanceType": Nothing, "SpotInstanceRequestId": Nothing }

-- | Constructs ActiveInstance's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newActiveInstance' :: ( { "InstanceId" :: Maybe (String) , "InstanceType" :: Maybe (String) , "SpotInstanceRequestId" :: Maybe (String) , "InstanceHealth" :: Maybe (InstanceHealthStatus) } -> {"InstanceId" :: Maybe (String) , "InstanceType" :: Maybe (String) , "SpotInstanceRequestId" :: Maybe (String) , "InstanceHealth" :: Maybe (InstanceHealthStatus) } ) -> ActiveInstance
newActiveInstance'  customize = (ActiveInstance <<< customize) { "InstanceHealth": Nothing, "InstanceId": Nothing, "InstanceType": Nothing, "SpotInstanceRequestId": Nothing }



newtype ActiveInstanceSet = ActiveInstanceSet (Array ActiveInstance)
derive instance newtypeActiveInstanceSet :: Newtype ActiveInstanceSet _
derive instance repGenericActiveInstanceSet :: Generic ActiveInstanceSet _
instance showActiveInstanceSet :: Show ActiveInstanceSet where show = genericShow
instance decodeActiveInstanceSet :: Decode ActiveInstanceSet where decode = genericDecode options
instance encodeActiveInstanceSet :: Encode ActiveInstanceSet where encode = genericEncode options



newtype ActivityStatus = ActivityStatus String
derive instance newtypeActivityStatus :: Newtype ActivityStatus _
derive instance repGenericActivityStatus :: Generic ActivityStatus _
instance showActivityStatus :: Show ActivityStatus where show = genericShow
instance decodeActivityStatus :: Decode ActivityStatus where decode = genericDecode options
instance encodeActivityStatus :: Encode ActivityStatus where encode = genericEncode options



-- | <p>Describes an Elastic IP address.</p>
newtype Address = Address 
  { "InstanceId" :: Maybe (String)
  , "PublicIp" :: Maybe (String)
  , "AllocationId" :: Maybe (String)
  , "AssociationId" :: Maybe (String)
  , "Domain" :: Maybe (DomainType)
  , "NetworkInterfaceId" :: Maybe (String)
  , "NetworkInterfaceOwnerId" :: Maybe (String)
  , "PrivateIpAddress" :: Maybe (String)
  , "Tags" :: Maybe (TagList)
  }
derive instance newtypeAddress :: Newtype Address _
derive instance repGenericAddress :: Generic Address _
instance showAddress :: Show Address where show = genericShow
instance decodeAddress :: Decode Address where decode = genericDecode options
instance encodeAddress :: Encode Address where encode = genericEncode options

-- | Constructs Address from required parameters
newAddress :: Address
newAddress  = Address { "AllocationId": Nothing, "AssociationId": Nothing, "Domain": Nothing, "InstanceId": Nothing, "NetworkInterfaceId": Nothing, "NetworkInterfaceOwnerId": Nothing, "PrivateIpAddress": Nothing, "PublicIp": Nothing, "Tags": Nothing }

-- | Constructs Address's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAddress' :: ( { "InstanceId" :: Maybe (String) , "PublicIp" :: Maybe (String) , "AllocationId" :: Maybe (String) , "AssociationId" :: Maybe (String) , "Domain" :: Maybe (DomainType) , "NetworkInterfaceId" :: Maybe (String) , "NetworkInterfaceOwnerId" :: Maybe (String) , "PrivateIpAddress" :: Maybe (String) , "Tags" :: Maybe (TagList) } -> {"InstanceId" :: Maybe (String) , "PublicIp" :: Maybe (String) , "AllocationId" :: Maybe (String) , "AssociationId" :: Maybe (String) , "Domain" :: Maybe (DomainType) , "NetworkInterfaceId" :: Maybe (String) , "NetworkInterfaceOwnerId" :: Maybe (String) , "PrivateIpAddress" :: Maybe (String) , "Tags" :: Maybe (TagList) } ) -> Address
newAddress'  customize = (Address <<< customize) { "AllocationId": Nothing, "AssociationId": Nothing, "Domain": Nothing, "InstanceId": Nothing, "NetworkInterfaceId": Nothing, "NetworkInterfaceOwnerId": Nothing, "PrivateIpAddress": Nothing, "PublicIp": Nothing, "Tags": Nothing }



newtype AddressList = AddressList (Array Address)
derive instance newtypeAddressList :: Newtype AddressList _
derive instance repGenericAddressList :: Generic AddressList _
instance showAddressList :: Show AddressList where show = genericShow
instance decodeAddressList :: Decode AddressList where decode = genericDecode options
instance encodeAddressList :: Encode AddressList where encode = genericEncode options



newtype Affinity = Affinity String
derive instance newtypeAffinity :: Newtype Affinity _
derive instance repGenericAffinity :: Generic Affinity _
instance showAffinity :: Show Affinity where show = genericShow
instance decodeAffinity :: Decode Affinity where decode = genericDecode options
instance encodeAffinity :: Encode Affinity where encode = genericEncode options



-- | <p>Contains the parameters for AllocateAddress.</p>
newtype AllocateAddressRequest = AllocateAddressRequest 
  { "Domain" :: Maybe (DomainType)
  , "Address" :: Maybe (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeAllocateAddressRequest :: Newtype AllocateAddressRequest _
derive instance repGenericAllocateAddressRequest :: Generic AllocateAddressRequest _
instance showAllocateAddressRequest :: Show AllocateAddressRequest where show = genericShow
instance decodeAllocateAddressRequest :: Decode AllocateAddressRequest where decode = genericDecode options
instance encodeAllocateAddressRequest :: Encode AllocateAddressRequest where encode = genericEncode options

-- | Constructs AllocateAddressRequest from required parameters
newAllocateAddressRequest :: AllocateAddressRequest
newAllocateAddressRequest  = AllocateAddressRequest { "Address": Nothing, "Domain": Nothing, "DryRun": Nothing }

-- | Constructs AllocateAddressRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAllocateAddressRequest' :: ( { "Domain" :: Maybe (DomainType) , "Address" :: Maybe (String) , "DryRun" :: Maybe (Boolean) } -> {"Domain" :: Maybe (DomainType) , "Address" :: Maybe (String) , "DryRun" :: Maybe (Boolean) } ) -> AllocateAddressRequest
newAllocateAddressRequest'  customize = (AllocateAddressRequest <<< customize) { "Address": Nothing, "Domain": Nothing, "DryRun": Nothing }



-- | <p>Contains the output of AllocateAddress.</p>
newtype AllocateAddressResult = AllocateAddressResult 
  { "PublicIp" :: Maybe (String)
  , "AllocationId" :: Maybe (String)
  , "Domain" :: Maybe (DomainType)
  }
derive instance newtypeAllocateAddressResult :: Newtype AllocateAddressResult _
derive instance repGenericAllocateAddressResult :: Generic AllocateAddressResult _
instance showAllocateAddressResult :: Show AllocateAddressResult where show = genericShow
instance decodeAllocateAddressResult :: Decode AllocateAddressResult where decode = genericDecode options
instance encodeAllocateAddressResult :: Encode AllocateAddressResult where encode = genericEncode options

-- | Constructs AllocateAddressResult from required parameters
newAllocateAddressResult :: AllocateAddressResult
newAllocateAddressResult  = AllocateAddressResult { "AllocationId": Nothing, "Domain": Nothing, "PublicIp": Nothing }

-- | Constructs AllocateAddressResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAllocateAddressResult' :: ( { "PublicIp" :: Maybe (String) , "AllocationId" :: Maybe (String) , "Domain" :: Maybe (DomainType) } -> {"PublicIp" :: Maybe (String) , "AllocationId" :: Maybe (String) , "Domain" :: Maybe (DomainType) } ) -> AllocateAddressResult
newAllocateAddressResult'  customize = (AllocateAddressResult <<< customize) { "AllocationId": Nothing, "Domain": Nothing, "PublicIp": Nothing }



-- | <p>Contains the parameters for AllocateHosts.</p>
newtype AllocateHostsRequest = AllocateHostsRequest 
  { "AutoPlacement" :: Maybe (AutoPlacement)
  , "AvailabilityZone" :: (String)
  , "ClientToken" :: Maybe (String)
  , "InstanceType" :: (String)
  , "Quantity" :: (Int)
  }
derive instance newtypeAllocateHostsRequest :: Newtype AllocateHostsRequest _
derive instance repGenericAllocateHostsRequest :: Generic AllocateHostsRequest _
instance showAllocateHostsRequest :: Show AllocateHostsRequest where show = genericShow
instance decodeAllocateHostsRequest :: Decode AllocateHostsRequest where decode = genericDecode options
instance encodeAllocateHostsRequest :: Encode AllocateHostsRequest where encode = genericEncode options

-- | Constructs AllocateHostsRequest from required parameters
newAllocateHostsRequest :: String -> String -> Int -> AllocateHostsRequest
newAllocateHostsRequest _AvailabilityZone _InstanceType _Quantity = AllocateHostsRequest { "AvailabilityZone": _AvailabilityZone, "InstanceType": _InstanceType, "Quantity": _Quantity, "AutoPlacement": Nothing, "ClientToken": Nothing }

-- | Constructs AllocateHostsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAllocateHostsRequest' :: String -> String -> Int -> ( { "AutoPlacement" :: Maybe (AutoPlacement) , "AvailabilityZone" :: (String) , "ClientToken" :: Maybe (String) , "InstanceType" :: (String) , "Quantity" :: (Int) } -> {"AutoPlacement" :: Maybe (AutoPlacement) , "AvailabilityZone" :: (String) , "ClientToken" :: Maybe (String) , "InstanceType" :: (String) , "Quantity" :: (Int) } ) -> AllocateHostsRequest
newAllocateHostsRequest' _AvailabilityZone _InstanceType _Quantity customize = (AllocateHostsRequest <<< customize) { "AvailabilityZone": _AvailabilityZone, "InstanceType": _InstanceType, "Quantity": _Quantity, "AutoPlacement": Nothing, "ClientToken": Nothing }



-- | <p>Contains the output of AllocateHosts.</p>
newtype AllocateHostsResult = AllocateHostsResult 
  { "HostIds" :: Maybe (ResponseHostIdList)
  }
derive instance newtypeAllocateHostsResult :: Newtype AllocateHostsResult _
derive instance repGenericAllocateHostsResult :: Generic AllocateHostsResult _
instance showAllocateHostsResult :: Show AllocateHostsResult where show = genericShow
instance decodeAllocateHostsResult :: Decode AllocateHostsResult where decode = genericDecode options
instance encodeAllocateHostsResult :: Encode AllocateHostsResult where encode = genericEncode options

-- | Constructs AllocateHostsResult from required parameters
newAllocateHostsResult :: AllocateHostsResult
newAllocateHostsResult  = AllocateHostsResult { "HostIds": Nothing }

-- | Constructs AllocateHostsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAllocateHostsResult' :: ( { "HostIds" :: Maybe (ResponseHostIdList) } -> {"HostIds" :: Maybe (ResponseHostIdList) } ) -> AllocateHostsResult
newAllocateHostsResult'  customize = (AllocateHostsResult <<< customize) { "HostIds": Nothing }



newtype AllocationIdList = AllocationIdList (Array String)
derive instance newtypeAllocationIdList :: Newtype AllocationIdList _
derive instance repGenericAllocationIdList :: Generic AllocationIdList _
instance showAllocationIdList :: Show AllocationIdList where show = genericShow
instance decodeAllocationIdList :: Decode AllocationIdList where decode = genericDecode options
instance encodeAllocationIdList :: Encode AllocationIdList where encode = genericEncode options



newtype AllocationState = AllocationState String
derive instance newtypeAllocationState :: Newtype AllocationState _
derive instance repGenericAllocationState :: Generic AllocationState _
instance showAllocationState :: Show AllocationState where show = genericShow
instance decodeAllocationState :: Decode AllocationState where decode = genericDecode options
instance encodeAllocationState :: Encode AllocationState where encode = genericEncode options



newtype AllocationStrategy = AllocationStrategy String
derive instance newtypeAllocationStrategy :: Newtype AllocationStrategy _
derive instance repGenericAllocationStrategy :: Generic AllocationStrategy _
instance showAllocationStrategy :: Show AllocationStrategy where show = genericShow
instance decodeAllocationStrategy :: Decode AllocationStrategy where decode = genericDecode options
instance encodeAllocationStrategy :: Encode AllocationStrategy where encode = genericEncode options



-- | <p>Describes a principal.</p>
newtype AllowedPrincipal = AllowedPrincipal 
  { "PrincipalType" :: Maybe (PrincipalType)
  , "Principal" :: Maybe (String)
  }
derive instance newtypeAllowedPrincipal :: Newtype AllowedPrincipal _
derive instance repGenericAllowedPrincipal :: Generic AllowedPrincipal _
instance showAllowedPrincipal :: Show AllowedPrincipal where show = genericShow
instance decodeAllowedPrincipal :: Decode AllowedPrincipal where decode = genericDecode options
instance encodeAllowedPrincipal :: Encode AllowedPrincipal where encode = genericEncode options

-- | Constructs AllowedPrincipal from required parameters
newAllowedPrincipal :: AllowedPrincipal
newAllowedPrincipal  = AllowedPrincipal { "Principal": Nothing, "PrincipalType": Nothing }

-- | Constructs AllowedPrincipal's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAllowedPrincipal' :: ( { "PrincipalType" :: Maybe (PrincipalType) , "Principal" :: Maybe (String) } -> {"PrincipalType" :: Maybe (PrincipalType) , "Principal" :: Maybe (String) } ) -> AllowedPrincipal
newAllowedPrincipal'  customize = (AllowedPrincipal <<< customize) { "Principal": Nothing, "PrincipalType": Nothing }



newtype AllowedPrincipalSet = AllowedPrincipalSet (Array AllowedPrincipal)
derive instance newtypeAllowedPrincipalSet :: Newtype AllowedPrincipalSet _
derive instance repGenericAllowedPrincipalSet :: Generic AllowedPrincipalSet _
instance showAllowedPrincipalSet :: Show AllowedPrincipalSet where show = genericShow
instance decodeAllowedPrincipalSet :: Decode AllowedPrincipalSet where decode = genericDecode options
instance encodeAllowedPrincipalSet :: Encode AllowedPrincipalSet where encode = genericEncode options



newtype ArchitectureValues = ArchitectureValues String
derive instance newtypeArchitectureValues :: Newtype ArchitectureValues _
derive instance repGenericArchitectureValues :: Generic ArchitectureValues _
instance showArchitectureValues :: Show ArchitectureValues where show = genericShow
instance decodeArchitectureValues :: Decode ArchitectureValues where decode = genericDecode options
instance encodeArchitectureValues :: Encode ArchitectureValues where encode = genericEncode options



newtype AssignIpv6AddressesRequest = AssignIpv6AddressesRequest 
  { "Ipv6AddressCount" :: Maybe (Int)
  , "Ipv6Addresses" :: Maybe (Ipv6AddressList)
  , "NetworkInterfaceId" :: (String)
  }
derive instance newtypeAssignIpv6AddressesRequest :: Newtype AssignIpv6AddressesRequest _
derive instance repGenericAssignIpv6AddressesRequest :: Generic AssignIpv6AddressesRequest _
instance showAssignIpv6AddressesRequest :: Show AssignIpv6AddressesRequest where show = genericShow
instance decodeAssignIpv6AddressesRequest :: Decode AssignIpv6AddressesRequest where decode = genericDecode options
instance encodeAssignIpv6AddressesRequest :: Encode AssignIpv6AddressesRequest where encode = genericEncode options

-- | Constructs AssignIpv6AddressesRequest from required parameters
newAssignIpv6AddressesRequest :: String -> AssignIpv6AddressesRequest
newAssignIpv6AddressesRequest _NetworkInterfaceId = AssignIpv6AddressesRequest { "NetworkInterfaceId": _NetworkInterfaceId, "Ipv6AddressCount": Nothing, "Ipv6Addresses": Nothing }

-- | Constructs AssignIpv6AddressesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAssignIpv6AddressesRequest' :: String -> ( { "Ipv6AddressCount" :: Maybe (Int) , "Ipv6Addresses" :: Maybe (Ipv6AddressList) , "NetworkInterfaceId" :: (String) } -> {"Ipv6AddressCount" :: Maybe (Int) , "Ipv6Addresses" :: Maybe (Ipv6AddressList) , "NetworkInterfaceId" :: (String) } ) -> AssignIpv6AddressesRequest
newAssignIpv6AddressesRequest' _NetworkInterfaceId customize = (AssignIpv6AddressesRequest <<< customize) { "NetworkInterfaceId": _NetworkInterfaceId, "Ipv6AddressCount": Nothing, "Ipv6Addresses": Nothing }



newtype AssignIpv6AddressesResult = AssignIpv6AddressesResult 
  { "AssignedIpv6Addresses" :: Maybe (Ipv6AddressList)
  , "NetworkInterfaceId" :: Maybe (String)
  }
derive instance newtypeAssignIpv6AddressesResult :: Newtype AssignIpv6AddressesResult _
derive instance repGenericAssignIpv6AddressesResult :: Generic AssignIpv6AddressesResult _
instance showAssignIpv6AddressesResult :: Show AssignIpv6AddressesResult where show = genericShow
instance decodeAssignIpv6AddressesResult :: Decode AssignIpv6AddressesResult where decode = genericDecode options
instance encodeAssignIpv6AddressesResult :: Encode AssignIpv6AddressesResult where encode = genericEncode options

-- | Constructs AssignIpv6AddressesResult from required parameters
newAssignIpv6AddressesResult :: AssignIpv6AddressesResult
newAssignIpv6AddressesResult  = AssignIpv6AddressesResult { "AssignedIpv6Addresses": Nothing, "NetworkInterfaceId": Nothing }

-- | Constructs AssignIpv6AddressesResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAssignIpv6AddressesResult' :: ( { "AssignedIpv6Addresses" :: Maybe (Ipv6AddressList) , "NetworkInterfaceId" :: Maybe (String) } -> {"AssignedIpv6Addresses" :: Maybe (Ipv6AddressList) , "NetworkInterfaceId" :: Maybe (String) } ) -> AssignIpv6AddressesResult
newAssignIpv6AddressesResult'  customize = (AssignIpv6AddressesResult <<< customize) { "AssignedIpv6Addresses": Nothing, "NetworkInterfaceId": Nothing }



-- | <p>Contains the parameters for AssignPrivateIpAddresses.</p>
newtype AssignPrivateIpAddressesRequest = AssignPrivateIpAddressesRequest 
  { "AllowReassignment" :: Maybe (Boolean)
  , "NetworkInterfaceId" :: (String)
  , "PrivateIpAddresses" :: Maybe (PrivateIpAddressStringList)
  , "SecondaryPrivateIpAddressCount" :: Maybe (Int)
  }
derive instance newtypeAssignPrivateIpAddressesRequest :: Newtype AssignPrivateIpAddressesRequest _
derive instance repGenericAssignPrivateIpAddressesRequest :: Generic AssignPrivateIpAddressesRequest _
instance showAssignPrivateIpAddressesRequest :: Show AssignPrivateIpAddressesRequest where show = genericShow
instance decodeAssignPrivateIpAddressesRequest :: Decode AssignPrivateIpAddressesRequest where decode = genericDecode options
instance encodeAssignPrivateIpAddressesRequest :: Encode AssignPrivateIpAddressesRequest where encode = genericEncode options

-- | Constructs AssignPrivateIpAddressesRequest from required parameters
newAssignPrivateIpAddressesRequest :: String -> AssignPrivateIpAddressesRequest
newAssignPrivateIpAddressesRequest _NetworkInterfaceId = AssignPrivateIpAddressesRequest { "NetworkInterfaceId": _NetworkInterfaceId, "AllowReassignment": Nothing, "PrivateIpAddresses": Nothing, "SecondaryPrivateIpAddressCount": Nothing }

-- | Constructs AssignPrivateIpAddressesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAssignPrivateIpAddressesRequest' :: String -> ( { "AllowReassignment" :: Maybe (Boolean) , "NetworkInterfaceId" :: (String) , "PrivateIpAddresses" :: Maybe (PrivateIpAddressStringList) , "SecondaryPrivateIpAddressCount" :: Maybe (Int) } -> {"AllowReassignment" :: Maybe (Boolean) , "NetworkInterfaceId" :: (String) , "PrivateIpAddresses" :: Maybe (PrivateIpAddressStringList) , "SecondaryPrivateIpAddressCount" :: Maybe (Int) } ) -> AssignPrivateIpAddressesRequest
newAssignPrivateIpAddressesRequest' _NetworkInterfaceId customize = (AssignPrivateIpAddressesRequest <<< customize) { "NetworkInterfaceId": _NetworkInterfaceId, "AllowReassignment": Nothing, "PrivateIpAddresses": Nothing, "SecondaryPrivateIpAddressCount": Nothing }



-- | <p>Contains the parameters for AssociateAddress.</p>
newtype AssociateAddressRequest = AssociateAddressRequest 
  { "AllocationId" :: Maybe (String)
  , "InstanceId" :: Maybe (String)
  , "PublicIp" :: Maybe (String)
  , "AllowReassociation" :: Maybe (Boolean)
  , "DryRun" :: Maybe (Boolean)
  , "NetworkInterfaceId" :: Maybe (String)
  , "PrivateIpAddress" :: Maybe (String)
  }
derive instance newtypeAssociateAddressRequest :: Newtype AssociateAddressRequest _
derive instance repGenericAssociateAddressRequest :: Generic AssociateAddressRequest _
instance showAssociateAddressRequest :: Show AssociateAddressRequest where show = genericShow
instance decodeAssociateAddressRequest :: Decode AssociateAddressRequest where decode = genericDecode options
instance encodeAssociateAddressRequest :: Encode AssociateAddressRequest where encode = genericEncode options

-- | Constructs AssociateAddressRequest from required parameters
newAssociateAddressRequest :: AssociateAddressRequest
newAssociateAddressRequest  = AssociateAddressRequest { "AllocationId": Nothing, "AllowReassociation": Nothing, "DryRun": Nothing, "InstanceId": Nothing, "NetworkInterfaceId": Nothing, "PrivateIpAddress": Nothing, "PublicIp": Nothing }

-- | Constructs AssociateAddressRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAssociateAddressRequest' :: ( { "AllocationId" :: Maybe (String) , "InstanceId" :: Maybe (String) , "PublicIp" :: Maybe (String) , "AllowReassociation" :: Maybe (Boolean) , "DryRun" :: Maybe (Boolean) , "NetworkInterfaceId" :: Maybe (String) , "PrivateIpAddress" :: Maybe (String) } -> {"AllocationId" :: Maybe (String) , "InstanceId" :: Maybe (String) , "PublicIp" :: Maybe (String) , "AllowReassociation" :: Maybe (Boolean) , "DryRun" :: Maybe (Boolean) , "NetworkInterfaceId" :: Maybe (String) , "PrivateIpAddress" :: Maybe (String) } ) -> AssociateAddressRequest
newAssociateAddressRequest'  customize = (AssociateAddressRequest <<< customize) { "AllocationId": Nothing, "AllowReassociation": Nothing, "DryRun": Nothing, "InstanceId": Nothing, "NetworkInterfaceId": Nothing, "PrivateIpAddress": Nothing, "PublicIp": Nothing }



-- | <p>Contains the output of AssociateAddress.</p>
newtype AssociateAddressResult = AssociateAddressResult 
  { "AssociationId" :: Maybe (String)
  }
derive instance newtypeAssociateAddressResult :: Newtype AssociateAddressResult _
derive instance repGenericAssociateAddressResult :: Generic AssociateAddressResult _
instance showAssociateAddressResult :: Show AssociateAddressResult where show = genericShow
instance decodeAssociateAddressResult :: Decode AssociateAddressResult where decode = genericDecode options
instance encodeAssociateAddressResult :: Encode AssociateAddressResult where encode = genericEncode options

-- | Constructs AssociateAddressResult from required parameters
newAssociateAddressResult :: AssociateAddressResult
newAssociateAddressResult  = AssociateAddressResult { "AssociationId": Nothing }

-- | Constructs AssociateAddressResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAssociateAddressResult' :: ( { "AssociationId" :: Maybe (String) } -> {"AssociationId" :: Maybe (String) } ) -> AssociateAddressResult
newAssociateAddressResult'  customize = (AssociateAddressResult <<< customize) { "AssociationId": Nothing }



-- | <p>Contains the parameters for AssociateDhcpOptions.</p>
newtype AssociateDhcpOptionsRequest = AssociateDhcpOptionsRequest 
  { "DhcpOptionsId" :: (String)
  , "VpcId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeAssociateDhcpOptionsRequest :: Newtype AssociateDhcpOptionsRequest _
derive instance repGenericAssociateDhcpOptionsRequest :: Generic AssociateDhcpOptionsRequest _
instance showAssociateDhcpOptionsRequest :: Show AssociateDhcpOptionsRequest where show = genericShow
instance decodeAssociateDhcpOptionsRequest :: Decode AssociateDhcpOptionsRequest where decode = genericDecode options
instance encodeAssociateDhcpOptionsRequest :: Encode AssociateDhcpOptionsRequest where encode = genericEncode options

-- | Constructs AssociateDhcpOptionsRequest from required parameters
newAssociateDhcpOptionsRequest :: String -> String -> AssociateDhcpOptionsRequest
newAssociateDhcpOptionsRequest _DhcpOptionsId _VpcId = AssociateDhcpOptionsRequest { "DhcpOptionsId": _DhcpOptionsId, "VpcId": _VpcId, "DryRun": Nothing }

-- | Constructs AssociateDhcpOptionsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAssociateDhcpOptionsRequest' :: String -> String -> ( { "DhcpOptionsId" :: (String) , "VpcId" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"DhcpOptionsId" :: (String) , "VpcId" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> AssociateDhcpOptionsRequest
newAssociateDhcpOptionsRequest' _DhcpOptionsId _VpcId customize = (AssociateDhcpOptionsRequest <<< customize) { "DhcpOptionsId": _DhcpOptionsId, "VpcId": _VpcId, "DryRun": Nothing }



newtype AssociateIamInstanceProfileRequest = AssociateIamInstanceProfileRequest 
  { "IamInstanceProfile" :: (IamInstanceProfileSpecification)
  , "InstanceId" :: (String)
  }
derive instance newtypeAssociateIamInstanceProfileRequest :: Newtype AssociateIamInstanceProfileRequest _
derive instance repGenericAssociateIamInstanceProfileRequest :: Generic AssociateIamInstanceProfileRequest _
instance showAssociateIamInstanceProfileRequest :: Show AssociateIamInstanceProfileRequest where show = genericShow
instance decodeAssociateIamInstanceProfileRequest :: Decode AssociateIamInstanceProfileRequest where decode = genericDecode options
instance encodeAssociateIamInstanceProfileRequest :: Encode AssociateIamInstanceProfileRequest where encode = genericEncode options

-- | Constructs AssociateIamInstanceProfileRequest from required parameters
newAssociateIamInstanceProfileRequest :: IamInstanceProfileSpecification -> String -> AssociateIamInstanceProfileRequest
newAssociateIamInstanceProfileRequest _IamInstanceProfile _InstanceId = AssociateIamInstanceProfileRequest { "IamInstanceProfile": _IamInstanceProfile, "InstanceId": _InstanceId }

-- | Constructs AssociateIamInstanceProfileRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAssociateIamInstanceProfileRequest' :: IamInstanceProfileSpecification -> String -> ( { "IamInstanceProfile" :: (IamInstanceProfileSpecification) , "InstanceId" :: (String) } -> {"IamInstanceProfile" :: (IamInstanceProfileSpecification) , "InstanceId" :: (String) } ) -> AssociateIamInstanceProfileRequest
newAssociateIamInstanceProfileRequest' _IamInstanceProfile _InstanceId customize = (AssociateIamInstanceProfileRequest <<< customize) { "IamInstanceProfile": _IamInstanceProfile, "InstanceId": _InstanceId }



newtype AssociateIamInstanceProfileResult = AssociateIamInstanceProfileResult 
  { "IamInstanceProfileAssociation" :: Maybe (IamInstanceProfileAssociation)
  }
derive instance newtypeAssociateIamInstanceProfileResult :: Newtype AssociateIamInstanceProfileResult _
derive instance repGenericAssociateIamInstanceProfileResult :: Generic AssociateIamInstanceProfileResult _
instance showAssociateIamInstanceProfileResult :: Show AssociateIamInstanceProfileResult where show = genericShow
instance decodeAssociateIamInstanceProfileResult :: Decode AssociateIamInstanceProfileResult where decode = genericDecode options
instance encodeAssociateIamInstanceProfileResult :: Encode AssociateIamInstanceProfileResult where encode = genericEncode options

-- | Constructs AssociateIamInstanceProfileResult from required parameters
newAssociateIamInstanceProfileResult :: AssociateIamInstanceProfileResult
newAssociateIamInstanceProfileResult  = AssociateIamInstanceProfileResult { "IamInstanceProfileAssociation": Nothing }

-- | Constructs AssociateIamInstanceProfileResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAssociateIamInstanceProfileResult' :: ( { "IamInstanceProfileAssociation" :: Maybe (IamInstanceProfileAssociation) } -> {"IamInstanceProfileAssociation" :: Maybe (IamInstanceProfileAssociation) } ) -> AssociateIamInstanceProfileResult
newAssociateIamInstanceProfileResult'  customize = (AssociateIamInstanceProfileResult <<< customize) { "IamInstanceProfileAssociation": Nothing }



-- | <p>Contains the parameters for AssociateRouteTable.</p>
newtype AssociateRouteTableRequest = AssociateRouteTableRequest 
  { "DryRun" :: Maybe (Boolean)
  , "RouteTableId" :: (String)
  , "SubnetId" :: (String)
  }
derive instance newtypeAssociateRouteTableRequest :: Newtype AssociateRouteTableRequest _
derive instance repGenericAssociateRouteTableRequest :: Generic AssociateRouteTableRequest _
instance showAssociateRouteTableRequest :: Show AssociateRouteTableRequest where show = genericShow
instance decodeAssociateRouteTableRequest :: Decode AssociateRouteTableRequest where decode = genericDecode options
instance encodeAssociateRouteTableRequest :: Encode AssociateRouteTableRequest where encode = genericEncode options

-- | Constructs AssociateRouteTableRequest from required parameters
newAssociateRouteTableRequest :: String -> String -> AssociateRouteTableRequest
newAssociateRouteTableRequest _RouteTableId _SubnetId = AssociateRouteTableRequest { "RouteTableId": _RouteTableId, "SubnetId": _SubnetId, "DryRun": Nothing }

-- | Constructs AssociateRouteTableRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAssociateRouteTableRequest' :: String -> String -> ( { "DryRun" :: Maybe (Boolean) , "RouteTableId" :: (String) , "SubnetId" :: (String) } -> {"DryRun" :: Maybe (Boolean) , "RouteTableId" :: (String) , "SubnetId" :: (String) } ) -> AssociateRouteTableRequest
newAssociateRouteTableRequest' _RouteTableId _SubnetId customize = (AssociateRouteTableRequest <<< customize) { "RouteTableId": _RouteTableId, "SubnetId": _SubnetId, "DryRun": Nothing }



-- | <p>Contains the output of AssociateRouteTable.</p>
newtype AssociateRouteTableResult = AssociateRouteTableResult 
  { "AssociationId" :: Maybe (String)
  }
derive instance newtypeAssociateRouteTableResult :: Newtype AssociateRouteTableResult _
derive instance repGenericAssociateRouteTableResult :: Generic AssociateRouteTableResult _
instance showAssociateRouteTableResult :: Show AssociateRouteTableResult where show = genericShow
instance decodeAssociateRouteTableResult :: Decode AssociateRouteTableResult where decode = genericDecode options
instance encodeAssociateRouteTableResult :: Encode AssociateRouteTableResult where encode = genericEncode options

-- | Constructs AssociateRouteTableResult from required parameters
newAssociateRouteTableResult :: AssociateRouteTableResult
newAssociateRouteTableResult  = AssociateRouteTableResult { "AssociationId": Nothing }

-- | Constructs AssociateRouteTableResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAssociateRouteTableResult' :: ( { "AssociationId" :: Maybe (String) } -> {"AssociationId" :: Maybe (String) } ) -> AssociateRouteTableResult
newAssociateRouteTableResult'  customize = (AssociateRouteTableResult <<< customize) { "AssociationId": Nothing }



newtype AssociateSubnetCidrBlockRequest = AssociateSubnetCidrBlockRequest 
  { "Ipv6CidrBlock" :: (String)
  , "SubnetId" :: (String)
  }
derive instance newtypeAssociateSubnetCidrBlockRequest :: Newtype AssociateSubnetCidrBlockRequest _
derive instance repGenericAssociateSubnetCidrBlockRequest :: Generic AssociateSubnetCidrBlockRequest _
instance showAssociateSubnetCidrBlockRequest :: Show AssociateSubnetCidrBlockRequest where show = genericShow
instance decodeAssociateSubnetCidrBlockRequest :: Decode AssociateSubnetCidrBlockRequest where decode = genericDecode options
instance encodeAssociateSubnetCidrBlockRequest :: Encode AssociateSubnetCidrBlockRequest where encode = genericEncode options

-- | Constructs AssociateSubnetCidrBlockRequest from required parameters
newAssociateSubnetCidrBlockRequest :: String -> String -> AssociateSubnetCidrBlockRequest
newAssociateSubnetCidrBlockRequest _Ipv6CidrBlock _SubnetId = AssociateSubnetCidrBlockRequest { "Ipv6CidrBlock": _Ipv6CidrBlock, "SubnetId": _SubnetId }

-- | Constructs AssociateSubnetCidrBlockRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAssociateSubnetCidrBlockRequest' :: String -> String -> ( { "Ipv6CidrBlock" :: (String) , "SubnetId" :: (String) } -> {"Ipv6CidrBlock" :: (String) , "SubnetId" :: (String) } ) -> AssociateSubnetCidrBlockRequest
newAssociateSubnetCidrBlockRequest' _Ipv6CidrBlock _SubnetId customize = (AssociateSubnetCidrBlockRequest <<< customize) { "Ipv6CidrBlock": _Ipv6CidrBlock, "SubnetId": _SubnetId }



newtype AssociateSubnetCidrBlockResult = AssociateSubnetCidrBlockResult 
  { "Ipv6CidrBlockAssociation" :: Maybe (SubnetIpv6CidrBlockAssociation)
  , "SubnetId" :: Maybe (String)
  }
derive instance newtypeAssociateSubnetCidrBlockResult :: Newtype AssociateSubnetCidrBlockResult _
derive instance repGenericAssociateSubnetCidrBlockResult :: Generic AssociateSubnetCidrBlockResult _
instance showAssociateSubnetCidrBlockResult :: Show AssociateSubnetCidrBlockResult where show = genericShow
instance decodeAssociateSubnetCidrBlockResult :: Decode AssociateSubnetCidrBlockResult where decode = genericDecode options
instance encodeAssociateSubnetCidrBlockResult :: Encode AssociateSubnetCidrBlockResult where encode = genericEncode options

-- | Constructs AssociateSubnetCidrBlockResult from required parameters
newAssociateSubnetCidrBlockResult :: AssociateSubnetCidrBlockResult
newAssociateSubnetCidrBlockResult  = AssociateSubnetCidrBlockResult { "Ipv6CidrBlockAssociation": Nothing, "SubnetId": Nothing }

-- | Constructs AssociateSubnetCidrBlockResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAssociateSubnetCidrBlockResult' :: ( { "Ipv6CidrBlockAssociation" :: Maybe (SubnetIpv6CidrBlockAssociation) , "SubnetId" :: Maybe (String) } -> {"Ipv6CidrBlockAssociation" :: Maybe (SubnetIpv6CidrBlockAssociation) , "SubnetId" :: Maybe (String) } ) -> AssociateSubnetCidrBlockResult
newAssociateSubnetCidrBlockResult'  customize = (AssociateSubnetCidrBlockResult <<< customize) { "Ipv6CidrBlockAssociation": Nothing, "SubnetId": Nothing }



newtype AssociateVpcCidrBlockRequest = AssociateVpcCidrBlockRequest 
  { "AmazonProvidedIpv6CidrBlock" :: Maybe (Boolean)
  , "CidrBlock" :: Maybe (String)
  , "VpcId" :: (String)
  }
derive instance newtypeAssociateVpcCidrBlockRequest :: Newtype AssociateVpcCidrBlockRequest _
derive instance repGenericAssociateVpcCidrBlockRequest :: Generic AssociateVpcCidrBlockRequest _
instance showAssociateVpcCidrBlockRequest :: Show AssociateVpcCidrBlockRequest where show = genericShow
instance decodeAssociateVpcCidrBlockRequest :: Decode AssociateVpcCidrBlockRequest where decode = genericDecode options
instance encodeAssociateVpcCidrBlockRequest :: Encode AssociateVpcCidrBlockRequest where encode = genericEncode options

-- | Constructs AssociateVpcCidrBlockRequest from required parameters
newAssociateVpcCidrBlockRequest :: String -> AssociateVpcCidrBlockRequest
newAssociateVpcCidrBlockRequest _VpcId = AssociateVpcCidrBlockRequest { "VpcId": _VpcId, "AmazonProvidedIpv6CidrBlock": Nothing, "CidrBlock": Nothing }

-- | Constructs AssociateVpcCidrBlockRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAssociateVpcCidrBlockRequest' :: String -> ( { "AmazonProvidedIpv6CidrBlock" :: Maybe (Boolean) , "CidrBlock" :: Maybe (String) , "VpcId" :: (String) } -> {"AmazonProvidedIpv6CidrBlock" :: Maybe (Boolean) , "CidrBlock" :: Maybe (String) , "VpcId" :: (String) } ) -> AssociateVpcCidrBlockRequest
newAssociateVpcCidrBlockRequest' _VpcId customize = (AssociateVpcCidrBlockRequest <<< customize) { "VpcId": _VpcId, "AmazonProvidedIpv6CidrBlock": Nothing, "CidrBlock": Nothing }



newtype AssociateVpcCidrBlockResult = AssociateVpcCidrBlockResult 
  { "Ipv6CidrBlockAssociation" :: Maybe (VpcIpv6CidrBlockAssociation)
  , "CidrBlockAssociation" :: Maybe (VpcCidrBlockAssociation)
  , "VpcId" :: Maybe (String)
  }
derive instance newtypeAssociateVpcCidrBlockResult :: Newtype AssociateVpcCidrBlockResult _
derive instance repGenericAssociateVpcCidrBlockResult :: Generic AssociateVpcCidrBlockResult _
instance showAssociateVpcCidrBlockResult :: Show AssociateVpcCidrBlockResult where show = genericShow
instance decodeAssociateVpcCidrBlockResult :: Decode AssociateVpcCidrBlockResult where decode = genericDecode options
instance encodeAssociateVpcCidrBlockResult :: Encode AssociateVpcCidrBlockResult where encode = genericEncode options

-- | Constructs AssociateVpcCidrBlockResult from required parameters
newAssociateVpcCidrBlockResult :: AssociateVpcCidrBlockResult
newAssociateVpcCidrBlockResult  = AssociateVpcCidrBlockResult { "CidrBlockAssociation": Nothing, "Ipv6CidrBlockAssociation": Nothing, "VpcId": Nothing }

-- | Constructs AssociateVpcCidrBlockResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAssociateVpcCidrBlockResult' :: ( { "Ipv6CidrBlockAssociation" :: Maybe (VpcIpv6CidrBlockAssociation) , "CidrBlockAssociation" :: Maybe (VpcCidrBlockAssociation) , "VpcId" :: Maybe (String) } -> {"Ipv6CidrBlockAssociation" :: Maybe (VpcIpv6CidrBlockAssociation) , "CidrBlockAssociation" :: Maybe (VpcCidrBlockAssociation) , "VpcId" :: Maybe (String) } ) -> AssociateVpcCidrBlockResult
newAssociateVpcCidrBlockResult'  customize = (AssociateVpcCidrBlockResult <<< customize) { "CidrBlockAssociation": Nothing, "Ipv6CidrBlockAssociation": Nothing, "VpcId": Nothing }



newtype AssociationIdList = AssociationIdList (Array String)
derive instance newtypeAssociationIdList :: Newtype AssociationIdList _
derive instance repGenericAssociationIdList :: Generic AssociationIdList _
instance showAssociationIdList :: Show AssociationIdList where show = genericShow
instance decodeAssociationIdList :: Decode AssociationIdList where decode = genericDecode options
instance encodeAssociationIdList :: Encode AssociationIdList where encode = genericEncode options



-- | <p>Contains the parameters for AttachClassicLinkVpc.</p>
newtype AttachClassicLinkVpcRequest = AttachClassicLinkVpcRequest 
  { "DryRun" :: Maybe (Boolean)
  , "Groups" :: (GroupIdStringList)
  , "InstanceId" :: (String)
  , "VpcId" :: (String)
  }
derive instance newtypeAttachClassicLinkVpcRequest :: Newtype AttachClassicLinkVpcRequest _
derive instance repGenericAttachClassicLinkVpcRequest :: Generic AttachClassicLinkVpcRequest _
instance showAttachClassicLinkVpcRequest :: Show AttachClassicLinkVpcRequest where show = genericShow
instance decodeAttachClassicLinkVpcRequest :: Decode AttachClassicLinkVpcRequest where decode = genericDecode options
instance encodeAttachClassicLinkVpcRequest :: Encode AttachClassicLinkVpcRequest where encode = genericEncode options

-- | Constructs AttachClassicLinkVpcRequest from required parameters
newAttachClassicLinkVpcRequest :: GroupIdStringList -> String -> String -> AttachClassicLinkVpcRequest
newAttachClassicLinkVpcRequest _Groups _InstanceId _VpcId = AttachClassicLinkVpcRequest { "Groups": _Groups, "InstanceId": _InstanceId, "VpcId": _VpcId, "DryRun": Nothing }

-- | Constructs AttachClassicLinkVpcRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAttachClassicLinkVpcRequest' :: GroupIdStringList -> String -> String -> ( { "DryRun" :: Maybe (Boolean) , "Groups" :: (GroupIdStringList) , "InstanceId" :: (String) , "VpcId" :: (String) } -> {"DryRun" :: Maybe (Boolean) , "Groups" :: (GroupIdStringList) , "InstanceId" :: (String) , "VpcId" :: (String) } ) -> AttachClassicLinkVpcRequest
newAttachClassicLinkVpcRequest' _Groups _InstanceId _VpcId customize = (AttachClassicLinkVpcRequest <<< customize) { "Groups": _Groups, "InstanceId": _InstanceId, "VpcId": _VpcId, "DryRun": Nothing }



-- | <p>Contains the output of AttachClassicLinkVpc.</p>
newtype AttachClassicLinkVpcResult = AttachClassicLinkVpcResult 
  { "Return" :: Maybe (Boolean)
  }
derive instance newtypeAttachClassicLinkVpcResult :: Newtype AttachClassicLinkVpcResult _
derive instance repGenericAttachClassicLinkVpcResult :: Generic AttachClassicLinkVpcResult _
instance showAttachClassicLinkVpcResult :: Show AttachClassicLinkVpcResult where show = genericShow
instance decodeAttachClassicLinkVpcResult :: Decode AttachClassicLinkVpcResult where decode = genericDecode options
instance encodeAttachClassicLinkVpcResult :: Encode AttachClassicLinkVpcResult where encode = genericEncode options

-- | Constructs AttachClassicLinkVpcResult from required parameters
newAttachClassicLinkVpcResult :: AttachClassicLinkVpcResult
newAttachClassicLinkVpcResult  = AttachClassicLinkVpcResult { "Return": Nothing }

-- | Constructs AttachClassicLinkVpcResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAttachClassicLinkVpcResult' :: ( { "Return" :: Maybe (Boolean) } -> {"Return" :: Maybe (Boolean) } ) -> AttachClassicLinkVpcResult
newAttachClassicLinkVpcResult'  customize = (AttachClassicLinkVpcResult <<< customize) { "Return": Nothing }



-- | <p>Contains the parameters for AttachInternetGateway.</p>
newtype AttachInternetGatewayRequest = AttachInternetGatewayRequest 
  { "DryRun" :: Maybe (Boolean)
  , "InternetGatewayId" :: (String)
  , "VpcId" :: (String)
  }
derive instance newtypeAttachInternetGatewayRequest :: Newtype AttachInternetGatewayRequest _
derive instance repGenericAttachInternetGatewayRequest :: Generic AttachInternetGatewayRequest _
instance showAttachInternetGatewayRequest :: Show AttachInternetGatewayRequest where show = genericShow
instance decodeAttachInternetGatewayRequest :: Decode AttachInternetGatewayRequest where decode = genericDecode options
instance encodeAttachInternetGatewayRequest :: Encode AttachInternetGatewayRequest where encode = genericEncode options

-- | Constructs AttachInternetGatewayRequest from required parameters
newAttachInternetGatewayRequest :: String -> String -> AttachInternetGatewayRequest
newAttachInternetGatewayRequest _InternetGatewayId _VpcId = AttachInternetGatewayRequest { "InternetGatewayId": _InternetGatewayId, "VpcId": _VpcId, "DryRun": Nothing }

-- | Constructs AttachInternetGatewayRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAttachInternetGatewayRequest' :: String -> String -> ( { "DryRun" :: Maybe (Boolean) , "InternetGatewayId" :: (String) , "VpcId" :: (String) } -> {"DryRun" :: Maybe (Boolean) , "InternetGatewayId" :: (String) , "VpcId" :: (String) } ) -> AttachInternetGatewayRequest
newAttachInternetGatewayRequest' _InternetGatewayId _VpcId customize = (AttachInternetGatewayRequest <<< customize) { "InternetGatewayId": _InternetGatewayId, "VpcId": _VpcId, "DryRun": Nothing }



-- | <p>Contains the parameters for AttachNetworkInterface.</p>
newtype AttachNetworkInterfaceRequest = AttachNetworkInterfaceRequest 
  { "DeviceIndex" :: (Int)
  , "DryRun" :: Maybe (Boolean)
  , "InstanceId" :: (String)
  , "NetworkInterfaceId" :: (String)
  }
derive instance newtypeAttachNetworkInterfaceRequest :: Newtype AttachNetworkInterfaceRequest _
derive instance repGenericAttachNetworkInterfaceRequest :: Generic AttachNetworkInterfaceRequest _
instance showAttachNetworkInterfaceRequest :: Show AttachNetworkInterfaceRequest where show = genericShow
instance decodeAttachNetworkInterfaceRequest :: Decode AttachNetworkInterfaceRequest where decode = genericDecode options
instance encodeAttachNetworkInterfaceRequest :: Encode AttachNetworkInterfaceRequest where encode = genericEncode options

-- | Constructs AttachNetworkInterfaceRequest from required parameters
newAttachNetworkInterfaceRequest :: Int -> String -> String -> AttachNetworkInterfaceRequest
newAttachNetworkInterfaceRequest _DeviceIndex _InstanceId _NetworkInterfaceId = AttachNetworkInterfaceRequest { "DeviceIndex": _DeviceIndex, "InstanceId": _InstanceId, "NetworkInterfaceId": _NetworkInterfaceId, "DryRun": Nothing }

-- | Constructs AttachNetworkInterfaceRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAttachNetworkInterfaceRequest' :: Int -> String -> String -> ( { "DeviceIndex" :: (Int) , "DryRun" :: Maybe (Boolean) , "InstanceId" :: (String) , "NetworkInterfaceId" :: (String) } -> {"DeviceIndex" :: (Int) , "DryRun" :: Maybe (Boolean) , "InstanceId" :: (String) , "NetworkInterfaceId" :: (String) } ) -> AttachNetworkInterfaceRequest
newAttachNetworkInterfaceRequest' _DeviceIndex _InstanceId _NetworkInterfaceId customize = (AttachNetworkInterfaceRequest <<< customize) { "DeviceIndex": _DeviceIndex, "InstanceId": _InstanceId, "NetworkInterfaceId": _NetworkInterfaceId, "DryRun": Nothing }



-- | <p>Contains the output of AttachNetworkInterface.</p>
newtype AttachNetworkInterfaceResult = AttachNetworkInterfaceResult 
  { "AttachmentId" :: Maybe (String)
  }
derive instance newtypeAttachNetworkInterfaceResult :: Newtype AttachNetworkInterfaceResult _
derive instance repGenericAttachNetworkInterfaceResult :: Generic AttachNetworkInterfaceResult _
instance showAttachNetworkInterfaceResult :: Show AttachNetworkInterfaceResult where show = genericShow
instance decodeAttachNetworkInterfaceResult :: Decode AttachNetworkInterfaceResult where decode = genericDecode options
instance encodeAttachNetworkInterfaceResult :: Encode AttachNetworkInterfaceResult where encode = genericEncode options

-- | Constructs AttachNetworkInterfaceResult from required parameters
newAttachNetworkInterfaceResult :: AttachNetworkInterfaceResult
newAttachNetworkInterfaceResult  = AttachNetworkInterfaceResult { "AttachmentId": Nothing }

-- | Constructs AttachNetworkInterfaceResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAttachNetworkInterfaceResult' :: ( { "AttachmentId" :: Maybe (String) } -> {"AttachmentId" :: Maybe (String) } ) -> AttachNetworkInterfaceResult
newAttachNetworkInterfaceResult'  customize = (AttachNetworkInterfaceResult <<< customize) { "AttachmentId": Nothing }



-- | <p>Contains the parameters for AttachVolume.</p>
newtype AttachVolumeRequest = AttachVolumeRequest 
  { "Device" :: (String)
  , "InstanceId" :: (String)
  , "VolumeId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeAttachVolumeRequest :: Newtype AttachVolumeRequest _
derive instance repGenericAttachVolumeRequest :: Generic AttachVolumeRequest _
instance showAttachVolumeRequest :: Show AttachVolumeRequest where show = genericShow
instance decodeAttachVolumeRequest :: Decode AttachVolumeRequest where decode = genericDecode options
instance encodeAttachVolumeRequest :: Encode AttachVolumeRequest where encode = genericEncode options

-- | Constructs AttachVolumeRequest from required parameters
newAttachVolumeRequest :: String -> String -> String -> AttachVolumeRequest
newAttachVolumeRequest _Device _InstanceId _VolumeId = AttachVolumeRequest { "Device": _Device, "InstanceId": _InstanceId, "VolumeId": _VolumeId, "DryRun": Nothing }

-- | Constructs AttachVolumeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAttachVolumeRequest' :: String -> String -> String -> ( { "Device" :: (String) , "InstanceId" :: (String) , "VolumeId" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"Device" :: (String) , "InstanceId" :: (String) , "VolumeId" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> AttachVolumeRequest
newAttachVolumeRequest' _Device _InstanceId _VolumeId customize = (AttachVolumeRequest <<< customize) { "Device": _Device, "InstanceId": _InstanceId, "VolumeId": _VolumeId, "DryRun": Nothing }



-- | <p>Contains the parameters for AttachVpnGateway.</p>
newtype AttachVpnGatewayRequest = AttachVpnGatewayRequest 
  { "VpcId" :: (String)
  , "VpnGatewayId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeAttachVpnGatewayRequest :: Newtype AttachVpnGatewayRequest _
derive instance repGenericAttachVpnGatewayRequest :: Generic AttachVpnGatewayRequest _
instance showAttachVpnGatewayRequest :: Show AttachVpnGatewayRequest where show = genericShow
instance decodeAttachVpnGatewayRequest :: Decode AttachVpnGatewayRequest where decode = genericDecode options
instance encodeAttachVpnGatewayRequest :: Encode AttachVpnGatewayRequest where encode = genericEncode options

-- | Constructs AttachVpnGatewayRequest from required parameters
newAttachVpnGatewayRequest :: String -> String -> AttachVpnGatewayRequest
newAttachVpnGatewayRequest _VpcId _VpnGatewayId = AttachVpnGatewayRequest { "VpcId": _VpcId, "VpnGatewayId": _VpnGatewayId, "DryRun": Nothing }

-- | Constructs AttachVpnGatewayRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAttachVpnGatewayRequest' :: String -> String -> ( { "VpcId" :: (String) , "VpnGatewayId" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"VpcId" :: (String) , "VpnGatewayId" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> AttachVpnGatewayRequest
newAttachVpnGatewayRequest' _VpcId _VpnGatewayId customize = (AttachVpnGatewayRequest <<< customize) { "VpcId": _VpcId, "VpnGatewayId": _VpnGatewayId, "DryRun": Nothing }



-- | <p>Contains the output of AttachVpnGateway.</p>
newtype AttachVpnGatewayResult = AttachVpnGatewayResult 
  { "VpcAttachment" :: Maybe (VpcAttachment)
  }
derive instance newtypeAttachVpnGatewayResult :: Newtype AttachVpnGatewayResult _
derive instance repGenericAttachVpnGatewayResult :: Generic AttachVpnGatewayResult _
instance showAttachVpnGatewayResult :: Show AttachVpnGatewayResult where show = genericShow
instance decodeAttachVpnGatewayResult :: Decode AttachVpnGatewayResult where decode = genericDecode options
instance encodeAttachVpnGatewayResult :: Encode AttachVpnGatewayResult where encode = genericEncode options

-- | Constructs AttachVpnGatewayResult from required parameters
newAttachVpnGatewayResult :: AttachVpnGatewayResult
newAttachVpnGatewayResult  = AttachVpnGatewayResult { "VpcAttachment": Nothing }

-- | Constructs AttachVpnGatewayResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAttachVpnGatewayResult' :: ( { "VpcAttachment" :: Maybe (VpcAttachment) } -> {"VpcAttachment" :: Maybe (VpcAttachment) } ) -> AttachVpnGatewayResult
newAttachVpnGatewayResult'  customize = (AttachVpnGatewayResult <<< customize) { "VpcAttachment": Nothing }



newtype AttachmentStatus = AttachmentStatus String
derive instance newtypeAttachmentStatus :: Newtype AttachmentStatus _
derive instance repGenericAttachmentStatus :: Generic AttachmentStatus _
instance showAttachmentStatus :: Show AttachmentStatus where show = genericShow
instance decodeAttachmentStatus :: Decode AttachmentStatus where decode = genericDecode options
instance encodeAttachmentStatus :: Encode AttachmentStatus where encode = genericEncode options



-- | <p>Describes a value for a resource attribute that is a Boolean value.</p>
newtype AttributeBooleanValue = AttributeBooleanValue 
  { "Value" :: Maybe (Boolean)
  }
derive instance newtypeAttributeBooleanValue :: Newtype AttributeBooleanValue _
derive instance repGenericAttributeBooleanValue :: Generic AttributeBooleanValue _
instance showAttributeBooleanValue :: Show AttributeBooleanValue where show = genericShow
instance decodeAttributeBooleanValue :: Decode AttributeBooleanValue where decode = genericDecode options
instance encodeAttributeBooleanValue :: Encode AttributeBooleanValue where encode = genericEncode options

-- | Constructs AttributeBooleanValue from required parameters
newAttributeBooleanValue :: AttributeBooleanValue
newAttributeBooleanValue  = AttributeBooleanValue { "Value": Nothing }

-- | Constructs AttributeBooleanValue's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAttributeBooleanValue' :: ( { "Value" :: Maybe (Boolean) } -> {"Value" :: Maybe (Boolean) } ) -> AttributeBooleanValue
newAttributeBooleanValue'  customize = (AttributeBooleanValue <<< customize) { "Value": Nothing }



-- | <p>Describes a value for a resource attribute that is a String.</p>
newtype AttributeValue = AttributeValue 
  { "Value" :: Maybe (String)
  }
derive instance newtypeAttributeValue :: Newtype AttributeValue _
derive instance repGenericAttributeValue :: Generic AttributeValue _
instance showAttributeValue :: Show AttributeValue where show = genericShow
instance decodeAttributeValue :: Decode AttributeValue where decode = genericDecode options
instance encodeAttributeValue :: Encode AttributeValue where encode = genericEncode options

-- | Constructs AttributeValue from required parameters
newAttributeValue :: AttributeValue
newAttributeValue  = AttributeValue { "Value": Nothing }

-- | Constructs AttributeValue's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAttributeValue' :: ( { "Value" :: Maybe (String) } -> {"Value" :: Maybe (String) } ) -> AttributeValue
newAttributeValue'  customize = (AttributeValue <<< customize) { "Value": Nothing }



-- | <p>Contains the parameters for AuthorizeSecurityGroupEgress.</p>
newtype AuthorizeSecurityGroupEgressRequest = AuthorizeSecurityGroupEgressRequest 
  { "DryRun" :: Maybe (Boolean)
  , "GroupId" :: (String)
  , "IpPermissions" :: Maybe (IpPermissionList)
  , "CidrIp" :: Maybe (String)
  , "FromPort" :: Maybe (Int)
  , "IpProtocol" :: Maybe (String)
  , "ToPort" :: Maybe (Int)
  , "SourceSecurityGroupName" :: Maybe (String)
  , "SourceSecurityGroupOwnerId" :: Maybe (String)
  }
derive instance newtypeAuthorizeSecurityGroupEgressRequest :: Newtype AuthorizeSecurityGroupEgressRequest _
derive instance repGenericAuthorizeSecurityGroupEgressRequest :: Generic AuthorizeSecurityGroupEgressRequest _
instance showAuthorizeSecurityGroupEgressRequest :: Show AuthorizeSecurityGroupEgressRequest where show = genericShow
instance decodeAuthorizeSecurityGroupEgressRequest :: Decode AuthorizeSecurityGroupEgressRequest where decode = genericDecode options
instance encodeAuthorizeSecurityGroupEgressRequest :: Encode AuthorizeSecurityGroupEgressRequest where encode = genericEncode options

-- | Constructs AuthorizeSecurityGroupEgressRequest from required parameters
newAuthorizeSecurityGroupEgressRequest :: String -> AuthorizeSecurityGroupEgressRequest
newAuthorizeSecurityGroupEgressRequest _GroupId = AuthorizeSecurityGroupEgressRequest { "GroupId": _GroupId, "CidrIp": Nothing, "DryRun": Nothing, "FromPort": Nothing, "IpPermissions": Nothing, "IpProtocol": Nothing, "SourceSecurityGroupName": Nothing, "SourceSecurityGroupOwnerId": Nothing, "ToPort": Nothing }

-- | Constructs AuthorizeSecurityGroupEgressRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAuthorizeSecurityGroupEgressRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "GroupId" :: (String) , "IpPermissions" :: Maybe (IpPermissionList) , "CidrIp" :: Maybe (String) , "FromPort" :: Maybe (Int) , "IpProtocol" :: Maybe (String) , "ToPort" :: Maybe (Int) , "SourceSecurityGroupName" :: Maybe (String) , "SourceSecurityGroupOwnerId" :: Maybe (String) } -> {"DryRun" :: Maybe (Boolean) , "GroupId" :: (String) , "IpPermissions" :: Maybe (IpPermissionList) , "CidrIp" :: Maybe (String) , "FromPort" :: Maybe (Int) , "IpProtocol" :: Maybe (String) , "ToPort" :: Maybe (Int) , "SourceSecurityGroupName" :: Maybe (String) , "SourceSecurityGroupOwnerId" :: Maybe (String) } ) -> AuthorizeSecurityGroupEgressRequest
newAuthorizeSecurityGroupEgressRequest' _GroupId customize = (AuthorizeSecurityGroupEgressRequest <<< customize) { "GroupId": _GroupId, "CidrIp": Nothing, "DryRun": Nothing, "FromPort": Nothing, "IpPermissions": Nothing, "IpProtocol": Nothing, "SourceSecurityGroupName": Nothing, "SourceSecurityGroupOwnerId": Nothing, "ToPort": Nothing }



-- | <p>Contains the parameters for AuthorizeSecurityGroupIngress.</p>
newtype AuthorizeSecurityGroupIngressRequest = AuthorizeSecurityGroupIngressRequest 
  { "CidrIp" :: Maybe (String)
  , "FromPort" :: Maybe (Int)
  , "GroupId" :: Maybe (String)
  , "GroupName" :: Maybe (String)
  , "IpPermissions" :: Maybe (IpPermissionList)
  , "IpProtocol" :: Maybe (String)
  , "SourceSecurityGroupName" :: Maybe (String)
  , "SourceSecurityGroupOwnerId" :: Maybe (String)
  , "ToPort" :: Maybe (Int)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeAuthorizeSecurityGroupIngressRequest :: Newtype AuthorizeSecurityGroupIngressRequest _
derive instance repGenericAuthorizeSecurityGroupIngressRequest :: Generic AuthorizeSecurityGroupIngressRequest _
instance showAuthorizeSecurityGroupIngressRequest :: Show AuthorizeSecurityGroupIngressRequest where show = genericShow
instance decodeAuthorizeSecurityGroupIngressRequest :: Decode AuthorizeSecurityGroupIngressRequest where decode = genericDecode options
instance encodeAuthorizeSecurityGroupIngressRequest :: Encode AuthorizeSecurityGroupIngressRequest where encode = genericEncode options

-- | Constructs AuthorizeSecurityGroupIngressRequest from required parameters
newAuthorizeSecurityGroupIngressRequest :: AuthorizeSecurityGroupIngressRequest
newAuthorizeSecurityGroupIngressRequest  = AuthorizeSecurityGroupIngressRequest { "CidrIp": Nothing, "DryRun": Nothing, "FromPort": Nothing, "GroupId": Nothing, "GroupName": Nothing, "IpPermissions": Nothing, "IpProtocol": Nothing, "SourceSecurityGroupName": Nothing, "SourceSecurityGroupOwnerId": Nothing, "ToPort": Nothing }

-- | Constructs AuthorizeSecurityGroupIngressRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAuthorizeSecurityGroupIngressRequest' :: ( { "CidrIp" :: Maybe (String) , "FromPort" :: Maybe (Int) , "GroupId" :: Maybe (String) , "GroupName" :: Maybe (String) , "IpPermissions" :: Maybe (IpPermissionList) , "IpProtocol" :: Maybe (String) , "SourceSecurityGroupName" :: Maybe (String) , "SourceSecurityGroupOwnerId" :: Maybe (String) , "ToPort" :: Maybe (Int) , "DryRun" :: Maybe (Boolean) } -> {"CidrIp" :: Maybe (String) , "FromPort" :: Maybe (Int) , "GroupId" :: Maybe (String) , "GroupName" :: Maybe (String) , "IpPermissions" :: Maybe (IpPermissionList) , "IpProtocol" :: Maybe (String) , "SourceSecurityGroupName" :: Maybe (String) , "SourceSecurityGroupOwnerId" :: Maybe (String) , "ToPort" :: Maybe (Int) , "DryRun" :: Maybe (Boolean) } ) -> AuthorizeSecurityGroupIngressRequest
newAuthorizeSecurityGroupIngressRequest'  customize = (AuthorizeSecurityGroupIngressRequest <<< customize) { "CidrIp": Nothing, "DryRun": Nothing, "FromPort": Nothing, "GroupId": Nothing, "GroupName": Nothing, "IpPermissions": Nothing, "IpProtocol": Nothing, "SourceSecurityGroupName": Nothing, "SourceSecurityGroupOwnerId": Nothing, "ToPort": Nothing }



newtype AutoPlacement = AutoPlacement String
derive instance newtypeAutoPlacement :: Newtype AutoPlacement _
derive instance repGenericAutoPlacement :: Generic AutoPlacement _
instance showAutoPlacement :: Show AutoPlacement where show = genericShow
instance decodeAutoPlacement :: Decode AutoPlacement where decode = genericDecode options
instance encodeAutoPlacement :: Encode AutoPlacement where encode = genericEncode options



-- | <p>Describes an Availability Zone.</p>
newtype AvailabilityZone = AvailabilityZone 
  { "State" :: Maybe (AvailabilityZoneState)
  , "Messages" :: Maybe (AvailabilityZoneMessageList)
  , "RegionName" :: Maybe (String)
  , "ZoneName" :: Maybe (String)
  }
derive instance newtypeAvailabilityZone :: Newtype AvailabilityZone _
derive instance repGenericAvailabilityZone :: Generic AvailabilityZone _
instance showAvailabilityZone :: Show AvailabilityZone where show = genericShow
instance decodeAvailabilityZone :: Decode AvailabilityZone where decode = genericDecode options
instance encodeAvailabilityZone :: Encode AvailabilityZone where encode = genericEncode options

-- | Constructs AvailabilityZone from required parameters
newAvailabilityZone :: AvailabilityZone
newAvailabilityZone  = AvailabilityZone { "Messages": Nothing, "RegionName": Nothing, "State": Nothing, "ZoneName": Nothing }

-- | Constructs AvailabilityZone's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAvailabilityZone' :: ( { "State" :: Maybe (AvailabilityZoneState) , "Messages" :: Maybe (AvailabilityZoneMessageList) , "RegionName" :: Maybe (String) , "ZoneName" :: Maybe (String) } -> {"State" :: Maybe (AvailabilityZoneState) , "Messages" :: Maybe (AvailabilityZoneMessageList) , "RegionName" :: Maybe (String) , "ZoneName" :: Maybe (String) } ) -> AvailabilityZone
newAvailabilityZone'  customize = (AvailabilityZone <<< customize) { "Messages": Nothing, "RegionName": Nothing, "State": Nothing, "ZoneName": Nothing }



newtype AvailabilityZoneList = AvailabilityZoneList (Array AvailabilityZone)
derive instance newtypeAvailabilityZoneList :: Newtype AvailabilityZoneList _
derive instance repGenericAvailabilityZoneList :: Generic AvailabilityZoneList _
instance showAvailabilityZoneList :: Show AvailabilityZoneList where show = genericShow
instance decodeAvailabilityZoneList :: Decode AvailabilityZoneList where decode = genericDecode options
instance encodeAvailabilityZoneList :: Encode AvailabilityZoneList where encode = genericEncode options



-- | <p>Describes a message about an Availability Zone.</p>
newtype AvailabilityZoneMessage = AvailabilityZoneMessage 
  { "Message" :: Maybe (String)
  }
derive instance newtypeAvailabilityZoneMessage :: Newtype AvailabilityZoneMessage _
derive instance repGenericAvailabilityZoneMessage :: Generic AvailabilityZoneMessage _
instance showAvailabilityZoneMessage :: Show AvailabilityZoneMessage where show = genericShow
instance decodeAvailabilityZoneMessage :: Decode AvailabilityZoneMessage where decode = genericDecode options
instance encodeAvailabilityZoneMessage :: Encode AvailabilityZoneMessage where encode = genericEncode options

-- | Constructs AvailabilityZoneMessage from required parameters
newAvailabilityZoneMessage :: AvailabilityZoneMessage
newAvailabilityZoneMessage  = AvailabilityZoneMessage { "Message": Nothing }

-- | Constructs AvailabilityZoneMessage's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAvailabilityZoneMessage' :: ( { "Message" :: Maybe (String) } -> {"Message" :: Maybe (String) } ) -> AvailabilityZoneMessage
newAvailabilityZoneMessage'  customize = (AvailabilityZoneMessage <<< customize) { "Message": Nothing }



newtype AvailabilityZoneMessageList = AvailabilityZoneMessageList (Array AvailabilityZoneMessage)
derive instance newtypeAvailabilityZoneMessageList :: Newtype AvailabilityZoneMessageList _
derive instance repGenericAvailabilityZoneMessageList :: Generic AvailabilityZoneMessageList _
instance showAvailabilityZoneMessageList :: Show AvailabilityZoneMessageList where show = genericShow
instance decodeAvailabilityZoneMessageList :: Decode AvailabilityZoneMessageList where decode = genericDecode options
instance encodeAvailabilityZoneMessageList :: Encode AvailabilityZoneMessageList where encode = genericEncode options



newtype AvailabilityZoneState = AvailabilityZoneState String
derive instance newtypeAvailabilityZoneState :: Newtype AvailabilityZoneState _
derive instance repGenericAvailabilityZoneState :: Generic AvailabilityZoneState _
instance showAvailabilityZoneState :: Show AvailabilityZoneState where show = genericShow
instance decodeAvailabilityZoneState :: Decode AvailabilityZoneState where decode = genericDecode options
instance encodeAvailabilityZoneState :: Encode AvailabilityZoneState where encode = genericEncode options



-- | <p>The capacity information for instances launched onto the Dedicated Host.</p>
newtype AvailableCapacity = AvailableCapacity 
  { "AvailableInstanceCapacity" :: Maybe (AvailableInstanceCapacityList)
  , "AvailableVCpus" :: Maybe (Int)
  }
derive instance newtypeAvailableCapacity :: Newtype AvailableCapacity _
derive instance repGenericAvailableCapacity :: Generic AvailableCapacity _
instance showAvailableCapacity :: Show AvailableCapacity where show = genericShow
instance decodeAvailableCapacity :: Decode AvailableCapacity where decode = genericDecode options
instance encodeAvailableCapacity :: Encode AvailableCapacity where encode = genericEncode options

-- | Constructs AvailableCapacity from required parameters
newAvailableCapacity :: AvailableCapacity
newAvailableCapacity  = AvailableCapacity { "AvailableInstanceCapacity": Nothing, "AvailableVCpus": Nothing }

-- | Constructs AvailableCapacity's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newAvailableCapacity' :: ( { "AvailableInstanceCapacity" :: Maybe (AvailableInstanceCapacityList) , "AvailableVCpus" :: Maybe (Int) } -> {"AvailableInstanceCapacity" :: Maybe (AvailableInstanceCapacityList) , "AvailableVCpus" :: Maybe (Int) } ) -> AvailableCapacity
newAvailableCapacity'  customize = (AvailableCapacity <<< customize) { "AvailableInstanceCapacity": Nothing, "AvailableVCpus": Nothing }



newtype AvailableInstanceCapacityList = AvailableInstanceCapacityList (Array InstanceCapacity)
derive instance newtypeAvailableInstanceCapacityList :: Newtype AvailableInstanceCapacityList _
derive instance repGenericAvailableInstanceCapacityList :: Generic AvailableInstanceCapacityList _
instance showAvailableInstanceCapacityList :: Show AvailableInstanceCapacityList where show = genericShow
instance decodeAvailableInstanceCapacityList :: Decode AvailableInstanceCapacityList where decode = genericDecode options
instance encodeAvailableInstanceCapacityList :: Encode AvailableInstanceCapacityList where encode = genericEncode options



newtype BatchState = BatchState String
derive instance newtypeBatchState :: Newtype BatchState _
derive instance repGenericBatchState :: Generic BatchState _
instance showBatchState :: Show BatchState where show = genericShow
instance decodeBatchState :: Decode BatchState where decode = genericDecode options
instance encodeBatchState :: Encode BatchState where encode = genericEncode options



newtype BillingProductList = BillingProductList (Array String)
derive instance newtypeBillingProductList :: Newtype BillingProductList _
derive instance repGenericBillingProductList :: Generic BillingProductList _
instance showBillingProductList :: Show BillingProductList where show = genericShow
instance decodeBillingProductList :: Decode BillingProductList where decode = genericDecode options
instance encodeBillingProductList :: Encode BillingProductList where encode = genericEncode options



newtype BlobAttributeValue = BlobAttributeValue 
  { "Value" :: Maybe (String)
  }
derive instance newtypeBlobAttributeValue :: Newtype BlobAttributeValue _
derive instance repGenericBlobAttributeValue :: Generic BlobAttributeValue _
instance showBlobAttributeValue :: Show BlobAttributeValue where show = genericShow
instance decodeBlobAttributeValue :: Decode BlobAttributeValue where decode = genericDecode options
instance encodeBlobAttributeValue :: Encode BlobAttributeValue where encode = genericEncode options

-- | Constructs BlobAttributeValue from required parameters
newBlobAttributeValue :: BlobAttributeValue
newBlobAttributeValue  = BlobAttributeValue { "Value": Nothing }

-- | Constructs BlobAttributeValue's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newBlobAttributeValue' :: ( { "Value" :: Maybe (String) } -> {"Value" :: Maybe (String) } ) -> BlobAttributeValue
newBlobAttributeValue'  customize = (BlobAttributeValue <<< customize) { "Value": Nothing }



-- | <p>Describes a block device mapping.</p>
newtype BlockDeviceMapping = BlockDeviceMapping 
  { "DeviceName" :: Maybe (String)
  , "VirtualName" :: Maybe (String)
  , "Ebs" :: Maybe (EbsBlockDevice)
  , "NoDevice" :: Maybe (String)
  }
derive instance newtypeBlockDeviceMapping :: Newtype BlockDeviceMapping _
derive instance repGenericBlockDeviceMapping :: Generic BlockDeviceMapping _
instance showBlockDeviceMapping :: Show BlockDeviceMapping where show = genericShow
instance decodeBlockDeviceMapping :: Decode BlockDeviceMapping where decode = genericDecode options
instance encodeBlockDeviceMapping :: Encode BlockDeviceMapping where encode = genericEncode options

-- | Constructs BlockDeviceMapping from required parameters
newBlockDeviceMapping :: BlockDeviceMapping
newBlockDeviceMapping  = BlockDeviceMapping { "DeviceName": Nothing, "Ebs": Nothing, "NoDevice": Nothing, "VirtualName": Nothing }

-- | Constructs BlockDeviceMapping's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newBlockDeviceMapping' :: ( { "DeviceName" :: Maybe (String) , "VirtualName" :: Maybe (String) , "Ebs" :: Maybe (EbsBlockDevice) , "NoDevice" :: Maybe (String) } -> {"DeviceName" :: Maybe (String) , "VirtualName" :: Maybe (String) , "Ebs" :: Maybe (EbsBlockDevice) , "NoDevice" :: Maybe (String) } ) -> BlockDeviceMapping
newBlockDeviceMapping'  customize = (BlockDeviceMapping <<< customize) { "DeviceName": Nothing, "Ebs": Nothing, "NoDevice": Nothing, "VirtualName": Nothing }



newtype BlockDeviceMappingList = BlockDeviceMappingList (Array BlockDeviceMapping)
derive instance newtypeBlockDeviceMappingList :: Newtype BlockDeviceMappingList _
derive instance repGenericBlockDeviceMappingList :: Generic BlockDeviceMappingList _
instance showBlockDeviceMappingList :: Show BlockDeviceMappingList where show = genericShow
instance decodeBlockDeviceMappingList :: Decode BlockDeviceMappingList where decode = genericDecode options
instance encodeBlockDeviceMappingList :: Encode BlockDeviceMappingList where encode = genericEncode options



newtype BlockDeviceMappingRequestList = BlockDeviceMappingRequestList (Array BlockDeviceMapping)
derive instance newtypeBlockDeviceMappingRequestList :: Newtype BlockDeviceMappingRequestList _
derive instance repGenericBlockDeviceMappingRequestList :: Generic BlockDeviceMappingRequestList _
instance showBlockDeviceMappingRequestList :: Show BlockDeviceMappingRequestList where show = genericShow
instance decodeBlockDeviceMappingRequestList :: Decode BlockDeviceMappingRequestList where decode = genericDecode options
instance encodeBlockDeviceMappingRequestList :: Encode BlockDeviceMappingRequestList where encode = genericEncode options



newtype BundleIdStringList = BundleIdStringList (Array String)
derive instance newtypeBundleIdStringList :: Newtype BundleIdStringList _
derive instance repGenericBundleIdStringList :: Generic BundleIdStringList _
instance showBundleIdStringList :: Show BundleIdStringList where show = genericShow
instance decodeBundleIdStringList :: Decode BundleIdStringList where decode = genericDecode options
instance encodeBundleIdStringList :: Encode BundleIdStringList where encode = genericEncode options



-- | <p>Contains the parameters for BundleInstance.</p>
newtype BundleInstanceRequest = BundleInstanceRequest 
  { "InstanceId" :: (String)
  , "Storage" :: (Storage)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeBundleInstanceRequest :: Newtype BundleInstanceRequest _
derive instance repGenericBundleInstanceRequest :: Generic BundleInstanceRequest _
instance showBundleInstanceRequest :: Show BundleInstanceRequest where show = genericShow
instance decodeBundleInstanceRequest :: Decode BundleInstanceRequest where decode = genericDecode options
instance encodeBundleInstanceRequest :: Encode BundleInstanceRequest where encode = genericEncode options

-- | Constructs BundleInstanceRequest from required parameters
newBundleInstanceRequest :: String -> Storage -> BundleInstanceRequest
newBundleInstanceRequest _InstanceId _Storage = BundleInstanceRequest { "InstanceId": _InstanceId, "Storage": _Storage, "DryRun": Nothing }

-- | Constructs BundleInstanceRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newBundleInstanceRequest' :: String -> Storage -> ( { "InstanceId" :: (String) , "Storage" :: (Storage) , "DryRun" :: Maybe (Boolean) } -> {"InstanceId" :: (String) , "Storage" :: (Storage) , "DryRun" :: Maybe (Boolean) } ) -> BundleInstanceRequest
newBundleInstanceRequest' _InstanceId _Storage customize = (BundleInstanceRequest <<< customize) { "InstanceId": _InstanceId, "Storage": _Storage, "DryRun": Nothing }



-- | <p>Contains the output of BundleInstance.</p>
newtype BundleInstanceResult = BundleInstanceResult 
  { "BundleTask" :: Maybe (BundleTask)
  }
derive instance newtypeBundleInstanceResult :: Newtype BundleInstanceResult _
derive instance repGenericBundleInstanceResult :: Generic BundleInstanceResult _
instance showBundleInstanceResult :: Show BundleInstanceResult where show = genericShow
instance decodeBundleInstanceResult :: Decode BundleInstanceResult where decode = genericDecode options
instance encodeBundleInstanceResult :: Encode BundleInstanceResult where encode = genericEncode options

-- | Constructs BundleInstanceResult from required parameters
newBundleInstanceResult :: BundleInstanceResult
newBundleInstanceResult  = BundleInstanceResult { "BundleTask": Nothing }

-- | Constructs BundleInstanceResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newBundleInstanceResult' :: ( { "BundleTask" :: Maybe (BundleTask) } -> {"BundleTask" :: Maybe (BundleTask) } ) -> BundleInstanceResult
newBundleInstanceResult'  customize = (BundleInstanceResult <<< customize) { "BundleTask": Nothing }



-- | <p>Describes a bundle task.</p>
newtype BundleTask = BundleTask 
  { "BundleId" :: Maybe (String)
  , "BundleTaskError" :: Maybe (BundleTaskError)
  , "InstanceId" :: Maybe (String)
  , "Progress" :: Maybe (String)
  , "StartTime" :: Maybe (DateTime)
  , "State" :: Maybe (BundleTaskState)
  , "Storage" :: Maybe (Storage)
  , "UpdateTime" :: Maybe (DateTime)
  }
derive instance newtypeBundleTask :: Newtype BundleTask _
derive instance repGenericBundleTask :: Generic BundleTask _
instance showBundleTask :: Show BundleTask where show = genericShow
instance decodeBundleTask :: Decode BundleTask where decode = genericDecode options
instance encodeBundleTask :: Encode BundleTask where encode = genericEncode options

-- | Constructs BundleTask from required parameters
newBundleTask :: BundleTask
newBundleTask  = BundleTask { "BundleId": Nothing, "BundleTaskError": Nothing, "InstanceId": Nothing, "Progress": Nothing, "StartTime": Nothing, "State": Nothing, "Storage": Nothing, "UpdateTime": Nothing }

-- | Constructs BundleTask's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newBundleTask' :: ( { "BundleId" :: Maybe (String) , "BundleTaskError" :: Maybe (BundleTaskError) , "InstanceId" :: Maybe (String) , "Progress" :: Maybe (String) , "StartTime" :: Maybe (DateTime) , "State" :: Maybe (BundleTaskState) , "Storage" :: Maybe (Storage) , "UpdateTime" :: Maybe (DateTime) } -> {"BundleId" :: Maybe (String) , "BundleTaskError" :: Maybe (BundleTaskError) , "InstanceId" :: Maybe (String) , "Progress" :: Maybe (String) , "StartTime" :: Maybe (DateTime) , "State" :: Maybe (BundleTaskState) , "Storage" :: Maybe (Storage) , "UpdateTime" :: Maybe (DateTime) } ) -> BundleTask
newBundleTask'  customize = (BundleTask <<< customize) { "BundleId": Nothing, "BundleTaskError": Nothing, "InstanceId": Nothing, "Progress": Nothing, "StartTime": Nothing, "State": Nothing, "Storage": Nothing, "UpdateTime": Nothing }



-- | <p>Describes an error for <a>BundleInstance</a>.</p>
newtype BundleTaskError = BundleTaskError 
  { "Code" :: Maybe (String)
  , "Message" :: Maybe (String)
  }
derive instance newtypeBundleTaskError :: Newtype BundleTaskError _
derive instance repGenericBundleTaskError :: Generic BundleTaskError _
instance showBundleTaskError :: Show BundleTaskError where show = genericShow
instance decodeBundleTaskError :: Decode BundleTaskError where decode = genericDecode options
instance encodeBundleTaskError :: Encode BundleTaskError where encode = genericEncode options

-- | Constructs BundleTaskError from required parameters
newBundleTaskError :: BundleTaskError
newBundleTaskError  = BundleTaskError { "Code": Nothing, "Message": Nothing }

-- | Constructs BundleTaskError's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newBundleTaskError' :: ( { "Code" :: Maybe (String) , "Message" :: Maybe (String) } -> {"Code" :: Maybe (String) , "Message" :: Maybe (String) } ) -> BundleTaskError
newBundleTaskError'  customize = (BundleTaskError <<< customize) { "Code": Nothing, "Message": Nothing }



newtype BundleTaskList = BundleTaskList (Array BundleTask)
derive instance newtypeBundleTaskList :: Newtype BundleTaskList _
derive instance repGenericBundleTaskList :: Generic BundleTaskList _
instance showBundleTaskList :: Show BundleTaskList where show = genericShow
instance decodeBundleTaskList :: Decode BundleTaskList where decode = genericDecode options
instance encodeBundleTaskList :: Encode BundleTaskList where encode = genericEncode options



newtype BundleTaskState = BundleTaskState String
derive instance newtypeBundleTaskState :: Newtype BundleTaskState _
derive instance repGenericBundleTaskState :: Generic BundleTaskState _
instance showBundleTaskState :: Show BundleTaskState where show = genericShow
instance decodeBundleTaskState :: Decode BundleTaskState where decode = genericDecode options
instance encodeBundleTaskState :: Encode BundleTaskState where encode = genericEncode options



newtype CancelBatchErrorCode = CancelBatchErrorCode String
derive instance newtypeCancelBatchErrorCode :: Newtype CancelBatchErrorCode _
derive instance repGenericCancelBatchErrorCode :: Generic CancelBatchErrorCode _
instance showCancelBatchErrorCode :: Show CancelBatchErrorCode where show = genericShow
instance decodeCancelBatchErrorCode :: Decode CancelBatchErrorCode where decode = genericDecode options
instance encodeCancelBatchErrorCode :: Encode CancelBatchErrorCode where encode = genericEncode options



-- | <p>Contains the parameters for CancelBundleTask.</p>
newtype CancelBundleTaskRequest = CancelBundleTaskRequest 
  { "BundleId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeCancelBundleTaskRequest :: Newtype CancelBundleTaskRequest _
derive instance repGenericCancelBundleTaskRequest :: Generic CancelBundleTaskRequest _
instance showCancelBundleTaskRequest :: Show CancelBundleTaskRequest where show = genericShow
instance decodeCancelBundleTaskRequest :: Decode CancelBundleTaskRequest where decode = genericDecode options
instance encodeCancelBundleTaskRequest :: Encode CancelBundleTaskRequest where encode = genericEncode options

-- | Constructs CancelBundleTaskRequest from required parameters
newCancelBundleTaskRequest :: String -> CancelBundleTaskRequest
newCancelBundleTaskRequest _BundleId = CancelBundleTaskRequest { "BundleId": _BundleId, "DryRun": Nothing }

-- | Constructs CancelBundleTaskRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCancelBundleTaskRequest' :: String -> ( { "BundleId" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"BundleId" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> CancelBundleTaskRequest
newCancelBundleTaskRequest' _BundleId customize = (CancelBundleTaskRequest <<< customize) { "BundleId": _BundleId, "DryRun": Nothing }



-- | <p>Contains the output of CancelBundleTask.</p>
newtype CancelBundleTaskResult = CancelBundleTaskResult 
  { "BundleTask" :: Maybe (BundleTask)
  }
derive instance newtypeCancelBundleTaskResult :: Newtype CancelBundleTaskResult _
derive instance repGenericCancelBundleTaskResult :: Generic CancelBundleTaskResult _
instance showCancelBundleTaskResult :: Show CancelBundleTaskResult where show = genericShow
instance decodeCancelBundleTaskResult :: Decode CancelBundleTaskResult where decode = genericDecode options
instance encodeCancelBundleTaskResult :: Encode CancelBundleTaskResult where encode = genericEncode options

-- | Constructs CancelBundleTaskResult from required parameters
newCancelBundleTaskResult :: CancelBundleTaskResult
newCancelBundleTaskResult  = CancelBundleTaskResult { "BundleTask": Nothing }

-- | Constructs CancelBundleTaskResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCancelBundleTaskResult' :: ( { "BundleTask" :: Maybe (BundleTask) } -> {"BundleTask" :: Maybe (BundleTask) } ) -> CancelBundleTaskResult
newCancelBundleTaskResult'  customize = (CancelBundleTaskResult <<< customize) { "BundleTask": Nothing }



-- | <p>Contains the parameters for CancelConversionTask.</p>
newtype CancelConversionRequest = CancelConversionRequest 
  { "ConversionTaskId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  , "ReasonMessage" :: Maybe (String)
  }
derive instance newtypeCancelConversionRequest :: Newtype CancelConversionRequest _
derive instance repGenericCancelConversionRequest :: Generic CancelConversionRequest _
instance showCancelConversionRequest :: Show CancelConversionRequest where show = genericShow
instance decodeCancelConversionRequest :: Decode CancelConversionRequest where decode = genericDecode options
instance encodeCancelConversionRequest :: Encode CancelConversionRequest where encode = genericEncode options

-- | Constructs CancelConversionRequest from required parameters
newCancelConversionRequest :: String -> CancelConversionRequest
newCancelConversionRequest _ConversionTaskId = CancelConversionRequest { "ConversionTaskId": _ConversionTaskId, "DryRun": Nothing, "ReasonMessage": Nothing }

-- | Constructs CancelConversionRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCancelConversionRequest' :: String -> ( { "ConversionTaskId" :: (String) , "DryRun" :: Maybe (Boolean) , "ReasonMessage" :: Maybe (String) } -> {"ConversionTaskId" :: (String) , "DryRun" :: Maybe (Boolean) , "ReasonMessage" :: Maybe (String) } ) -> CancelConversionRequest
newCancelConversionRequest' _ConversionTaskId customize = (CancelConversionRequest <<< customize) { "ConversionTaskId": _ConversionTaskId, "DryRun": Nothing, "ReasonMessage": Nothing }



-- | <p>Contains the parameters for CancelExportTask.</p>
newtype CancelExportTaskRequest = CancelExportTaskRequest 
  { "ExportTaskId" :: (String)
  }
derive instance newtypeCancelExportTaskRequest :: Newtype CancelExportTaskRequest _
derive instance repGenericCancelExportTaskRequest :: Generic CancelExportTaskRequest _
instance showCancelExportTaskRequest :: Show CancelExportTaskRequest where show = genericShow
instance decodeCancelExportTaskRequest :: Decode CancelExportTaskRequest where decode = genericDecode options
instance encodeCancelExportTaskRequest :: Encode CancelExportTaskRequest where encode = genericEncode options

-- | Constructs CancelExportTaskRequest from required parameters
newCancelExportTaskRequest :: String -> CancelExportTaskRequest
newCancelExportTaskRequest _ExportTaskId = CancelExportTaskRequest { "ExportTaskId": _ExportTaskId }

-- | Constructs CancelExportTaskRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCancelExportTaskRequest' :: String -> ( { "ExportTaskId" :: (String) } -> {"ExportTaskId" :: (String) } ) -> CancelExportTaskRequest
newCancelExportTaskRequest' _ExportTaskId customize = (CancelExportTaskRequest <<< customize) { "ExportTaskId": _ExportTaskId }



-- | <p>Contains the parameters for CancelImportTask.</p>
newtype CancelImportTaskRequest = CancelImportTaskRequest 
  { "CancelReason" :: Maybe (String)
  , "DryRun" :: Maybe (Boolean)
  , "ImportTaskId" :: Maybe (String)
  }
derive instance newtypeCancelImportTaskRequest :: Newtype CancelImportTaskRequest _
derive instance repGenericCancelImportTaskRequest :: Generic CancelImportTaskRequest _
instance showCancelImportTaskRequest :: Show CancelImportTaskRequest where show = genericShow
instance decodeCancelImportTaskRequest :: Decode CancelImportTaskRequest where decode = genericDecode options
instance encodeCancelImportTaskRequest :: Encode CancelImportTaskRequest where encode = genericEncode options

-- | Constructs CancelImportTaskRequest from required parameters
newCancelImportTaskRequest :: CancelImportTaskRequest
newCancelImportTaskRequest  = CancelImportTaskRequest { "CancelReason": Nothing, "DryRun": Nothing, "ImportTaskId": Nothing }

-- | Constructs CancelImportTaskRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCancelImportTaskRequest' :: ( { "CancelReason" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "ImportTaskId" :: Maybe (String) } -> {"CancelReason" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "ImportTaskId" :: Maybe (String) } ) -> CancelImportTaskRequest
newCancelImportTaskRequest'  customize = (CancelImportTaskRequest <<< customize) { "CancelReason": Nothing, "DryRun": Nothing, "ImportTaskId": Nothing }



-- | <p>Contains the output for CancelImportTask.</p>
newtype CancelImportTaskResult = CancelImportTaskResult 
  { "ImportTaskId" :: Maybe (String)
  , "PreviousState" :: Maybe (String)
  , "State" :: Maybe (String)
  }
derive instance newtypeCancelImportTaskResult :: Newtype CancelImportTaskResult _
derive instance repGenericCancelImportTaskResult :: Generic CancelImportTaskResult _
instance showCancelImportTaskResult :: Show CancelImportTaskResult where show = genericShow
instance decodeCancelImportTaskResult :: Decode CancelImportTaskResult where decode = genericDecode options
instance encodeCancelImportTaskResult :: Encode CancelImportTaskResult where encode = genericEncode options

-- | Constructs CancelImportTaskResult from required parameters
newCancelImportTaskResult :: CancelImportTaskResult
newCancelImportTaskResult  = CancelImportTaskResult { "ImportTaskId": Nothing, "PreviousState": Nothing, "State": Nothing }

-- | Constructs CancelImportTaskResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCancelImportTaskResult' :: ( { "ImportTaskId" :: Maybe (String) , "PreviousState" :: Maybe (String) , "State" :: Maybe (String) } -> {"ImportTaskId" :: Maybe (String) , "PreviousState" :: Maybe (String) , "State" :: Maybe (String) } ) -> CancelImportTaskResult
newCancelImportTaskResult'  customize = (CancelImportTaskResult <<< customize) { "ImportTaskId": Nothing, "PreviousState": Nothing, "State": Nothing }



-- | <p>Contains the parameters for CancelReservedInstancesListing.</p>
newtype CancelReservedInstancesListingRequest = CancelReservedInstancesListingRequest 
  { "ReservedInstancesListingId" :: (String)
  }
derive instance newtypeCancelReservedInstancesListingRequest :: Newtype CancelReservedInstancesListingRequest _
derive instance repGenericCancelReservedInstancesListingRequest :: Generic CancelReservedInstancesListingRequest _
instance showCancelReservedInstancesListingRequest :: Show CancelReservedInstancesListingRequest where show = genericShow
instance decodeCancelReservedInstancesListingRequest :: Decode CancelReservedInstancesListingRequest where decode = genericDecode options
instance encodeCancelReservedInstancesListingRequest :: Encode CancelReservedInstancesListingRequest where encode = genericEncode options

-- | Constructs CancelReservedInstancesListingRequest from required parameters
newCancelReservedInstancesListingRequest :: String -> CancelReservedInstancesListingRequest
newCancelReservedInstancesListingRequest _ReservedInstancesListingId = CancelReservedInstancesListingRequest { "ReservedInstancesListingId": _ReservedInstancesListingId }

-- | Constructs CancelReservedInstancesListingRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCancelReservedInstancesListingRequest' :: String -> ( { "ReservedInstancesListingId" :: (String) } -> {"ReservedInstancesListingId" :: (String) } ) -> CancelReservedInstancesListingRequest
newCancelReservedInstancesListingRequest' _ReservedInstancesListingId customize = (CancelReservedInstancesListingRequest <<< customize) { "ReservedInstancesListingId": _ReservedInstancesListingId }



-- | <p>Contains the output of CancelReservedInstancesListing.</p>
newtype CancelReservedInstancesListingResult = CancelReservedInstancesListingResult 
  { "ReservedInstancesListings" :: Maybe (ReservedInstancesListingList)
  }
derive instance newtypeCancelReservedInstancesListingResult :: Newtype CancelReservedInstancesListingResult _
derive instance repGenericCancelReservedInstancesListingResult :: Generic CancelReservedInstancesListingResult _
instance showCancelReservedInstancesListingResult :: Show CancelReservedInstancesListingResult where show = genericShow
instance decodeCancelReservedInstancesListingResult :: Decode CancelReservedInstancesListingResult where decode = genericDecode options
instance encodeCancelReservedInstancesListingResult :: Encode CancelReservedInstancesListingResult where encode = genericEncode options

-- | Constructs CancelReservedInstancesListingResult from required parameters
newCancelReservedInstancesListingResult :: CancelReservedInstancesListingResult
newCancelReservedInstancesListingResult  = CancelReservedInstancesListingResult { "ReservedInstancesListings": Nothing }

-- | Constructs CancelReservedInstancesListingResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCancelReservedInstancesListingResult' :: ( { "ReservedInstancesListings" :: Maybe (ReservedInstancesListingList) } -> {"ReservedInstancesListings" :: Maybe (ReservedInstancesListingList) } ) -> CancelReservedInstancesListingResult
newCancelReservedInstancesListingResult'  customize = (CancelReservedInstancesListingResult <<< customize) { "ReservedInstancesListings": Nothing }



-- | <p>Describes a Spot Fleet error.</p>
newtype CancelSpotFleetRequestsError = CancelSpotFleetRequestsError 
  { "Code" :: (CancelBatchErrorCode)
  , "Message" :: (String)
  }
derive instance newtypeCancelSpotFleetRequestsError :: Newtype CancelSpotFleetRequestsError _
derive instance repGenericCancelSpotFleetRequestsError :: Generic CancelSpotFleetRequestsError _
instance showCancelSpotFleetRequestsError :: Show CancelSpotFleetRequestsError where show = genericShow
instance decodeCancelSpotFleetRequestsError :: Decode CancelSpotFleetRequestsError where decode = genericDecode options
instance encodeCancelSpotFleetRequestsError :: Encode CancelSpotFleetRequestsError where encode = genericEncode options

-- | Constructs CancelSpotFleetRequestsError from required parameters
newCancelSpotFleetRequestsError :: CancelBatchErrorCode -> String -> CancelSpotFleetRequestsError
newCancelSpotFleetRequestsError _Code _Message = CancelSpotFleetRequestsError { "Code": _Code, "Message": _Message }

-- | Constructs CancelSpotFleetRequestsError's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCancelSpotFleetRequestsError' :: CancelBatchErrorCode -> String -> ( { "Code" :: (CancelBatchErrorCode) , "Message" :: (String) } -> {"Code" :: (CancelBatchErrorCode) , "Message" :: (String) } ) -> CancelSpotFleetRequestsError
newCancelSpotFleetRequestsError' _Code _Message customize = (CancelSpotFleetRequestsError <<< customize) { "Code": _Code, "Message": _Message }



-- | <p>Describes a Spot Fleet request that was not successfully canceled.</p>
newtype CancelSpotFleetRequestsErrorItem = CancelSpotFleetRequestsErrorItem 
  { "Error" :: (CancelSpotFleetRequestsError)
  , "SpotFleetRequestId" :: (String)
  }
derive instance newtypeCancelSpotFleetRequestsErrorItem :: Newtype CancelSpotFleetRequestsErrorItem _
derive instance repGenericCancelSpotFleetRequestsErrorItem :: Generic CancelSpotFleetRequestsErrorItem _
instance showCancelSpotFleetRequestsErrorItem :: Show CancelSpotFleetRequestsErrorItem where show = genericShow
instance decodeCancelSpotFleetRequestsErrorItem :: Decode CancelSpotFleetRequestsErrorItem where decode = genericDecode options
instance encodeCancelSpotFleetRequestsErrorItem :: Encode CancelSpotFleetRequestsErrorItem where encode = genericEncode options

-- | Constructs CancelSpotFleetRequestsErrorItem from required parameters
newCancelSpotFleetRequestsErrorItem :: CancelSpotFleetRequestsError -> String -> CancelSpotFleetRequestsErrorItem
newCancelSpotFleetRequestsErrorItem _Error _SpotFleetRequestId = CancelSpotFleetRequestsErrorItem { "Error": _Error, "SpotFleetRequestId": _SpotFleetRequestId }

-- | Constructs CancelSpotFleetRequestsErrorItem's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCancelSpotFleetRequestsErrorItem' :: CancelSpotFleetRequestsError -> String -> ( { "Error" :: (CancelSpotFleetRequestsError) , "SpotFleetRequestId" :: (String) } -> {"Error" :: (CancelSpotFleetRequestsError) , "SpotFleetRequestId" :: (String) } ) -> CancelSpotFleetRequestsErrorItem
newCancelSpotFleetRequestsErrorItem' _Error _SpotFleetRequestId customize = (CancelSpotFleetRequestsErrorItem <<< customize) { "Error": _Error, "SpotFleetRequestId": _SpotFleetRequestId }



newtype CancelSpotFleetRequestsErrorSet = CancelSpotFleetRequestsErrorSet (Array CancelSpotFleetRequestsErrorItem)
derive instance newtypeCancelSpotFleetRequestsErrorSet :: Newtype CancelSpotFleetRequestsErrorSet _
derive instance repGenericCancelSpotFleetRequestsErrorSet :: Generic CancelSpotFleetRequestsErrorSet _
instance showCancelSpotFleetRequestsErrorSet :: Show CancelSpotFleetRequestsErrorSet where show = genericShow
instance decodeCancelSpotFleetRequestsErrorSet :: Decode CancelSpotFleetRequestsErrorSet where decode = genericDecode options
instance encodeCancelSpotFleetRequestsErrorSet :: Encode CancelSpotFleetRequestsErrorSet where encode = genericEncode options



-- | <p>Contains the parameters for CancelSpotFleetRequests.</p>
newtype CancelSpotFleetRequestsRequest = CancelSpotFleetRequestsRequest 
  { "DryRun" :: Maybe (Boolean)
  , "SpotFleetRequestIds" :: (ValueStringList)
  , "TerminateInstances" :: (Boolean)
  }
derive instance newtypeCancelSpotFleetRequestsRequest :: Newtype CancelSpotFleetRequestsRequest _
derive instance repGenericCancelSpotFleetRequestsRequest :: Generic CancelSpotFleetRequestsRequest _
instance showCancelSpotFleetRequestsRequest :: Show CancelSpotFleetRequestsRequest where show = genericShow
instance decodeCancelSpotFleetRequestsRequest :: Decode CancelSpotFleetRequestsRequest where decode = genericDecode options
instance encodeCancelSpotFleetRequestsRequest :: Encode CancelSpotFleetRequestsRequest where encode = genericEncode options

-- | Constructs CancelSpotFleetRequestsRequest from required parameters
newCancelSpotFleetRequestsRequest :: ValueStringList -> Boolean -> CancelSpotFleetRequestsRequest
newCancelSpotFleetRequestsRequest _SpotFleetRequestIds _TerminateInstances = CancelSpotFleetRequestsRequest { "SpotFleetRequestIds": _SpotFleetRequestIds, "TerminateInstances": _TerminateInstances, "DryRun": Nothing }

-- | Constructs CancelSpotFleetRequestsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCancelSpotFleetRequestsRequest' :: ValueStringList -> Boolean -> ( { "DryRun" :: Maybe (Boolean) , "SpotFleetRequestIds" :: (ValueStringList) , "TerminateInstances" :: (Boolean) } -> {"DryRun" :: Maybe (Boolean) , "SpotFleetRequestIds" :: (ValueStringList) , "TerminateInstances" :: (Boolean) } ) -> CancelSpotFleetRequestsRequest
newCancelSpotFleetRequestsRequest' _SpotFleetRequestIds _TerminateInstances customize = (CancelSpotFleetRequestsRequest <<< customize) { "SpotFleetRequestIds": _SpotFleetRequestIds, "TerminateInstances": _TerminateInstances, "DryRun": Nothing }



-- | <p>Contains the output of CancelSpotFleetRequests.</p>
newtype CancelSpotFleetRequestsResponse = CancelSpotFleetRequestsResponse 
  { "SuccessfulFleetRequests" :: Maybe (CancelSpotFleetRequestsSuccessSet)
  , "UnsuccessfulFleetRequests" :: Maybe (CancelSpotFleetRequestsErrorSet)
  }
derive instance newtypeCancelSpotFleetRequestsResponse :: Newtype CancelSpotFleetRequestsResponse _
derive instance repGenericCancelSpotFleetRequestsResponse :: Generic CancelSpotFleetRequestsResponse _
instance showCancelSpotFleetRequestsResponse :: Show CancelSpotFleetRequestsResponse where show = genericShow
instance decodeCancelSpotFleetRequestsResponse :: Decode CancelSpotFleetRequestsResponse where decode = genericDecode options
instance encodeCancelSpotFleetRequestsResponse :: Encode CancelSpotFleetRequestsResponse where encode = genericEncode options

-- | Constructs CancelSpotFleetRequestsResponse from required parameters
newCancelSpotFleetRequestsResponse :: CancelSpotFleetRequestsResponse
newCancelSpotFleetRequestsResponse  = CancelSpotFleetRequestsResponse { "SuccessfulFleetRequests": Nothing, "UnsuccessfulFleetRequests": Nothing }

-- | Constructs CancelSpotFleetRequestsResponse's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCancelSpotFleetRequestsResponse' :: ( { "SuccessfulFleetRequests" :: Maybe (CancelSpotFleetRequestsSuccessSet) , "UnsuccessfulFleetRequests" :: Maybe (CancelSpotFleetRequestsErrorSet) } -> {"SuccessfulFleetRequests" :: Maybe (CancelSpotFleetRequestsSuccessSet) , "UnsuccessfulFleetRequests" :: Maybe (CancelSpotFleetRequestsErrorSet) } ) -> CancelSpotFleetRequestsResponse
newCancelSpotFleetRequestsResponse'  customize = (CancelSpotFleetRequestsResponse <<< customize) { "SuccessfulFleetRequests": Nothing, "UnsuccessfulFleetRequests": Nothing }



-- | <p>Describes a Spot Fleet request that was successfully canceled.</p>
newtype CancelSpotFleetRequestsSuccessItem = CancelSpotFleetRequestsSuccessItem 
  { "CurrentSpotFleetRequestState" :: (BatchState)
  , "PreviousSpotFleetRequestState" :: (BatchState)
  , "SpotFleetRequestId" :: (String)
  }
derive instance newtypeCancelSpotFleetRequestsSuccessItem :: Newtype CancelSpotFleetRequestsSuccessItem _
derive instance repGenericCancelSpotFleetRequestsSuccessItem :: Generic CancelSpotFleetRequestsSuccessItem _
instance showCancelSpotFleetRequestsSuccessItem :: Show CancelSpotFleetRequestsSuccessItem where show = genericShow
instance decodeCancelSpotFleetRequestsSuccessItem :: Decode CancelSpotFleetRequestsSuccessItem where decode = genericDecode options
instance encodeCancelSpotFleetRequestsSuccessItem :: Encode CancelSpotFleetRequestsSuccessItem where encode = genericEncode options

-- | Constructs CancelSpotFleetRequestsSuccessItem from required parameters
newCancelSpotFleetRequestsSuccessItem :: BatchState -> BatchState -> String -> CancelSpotFleetRequestsSuccessItem
newCancelSpotFleetRequestsSuccessItem _CurrentSpotFleetRequestState _PreviousSpotFleetRequestState _SpotFleetRequestId = CancelSpotFleetRequestsSuccessItem { "CurrentSpotFleetRequestState": _CurrentSpotFleetRequestState, "PreviousSpotFleetRequestState": _PreviousSpotFleetRequestState, "SpotFleetRequestId": _SpotFleetRequestId }

-- | Constructs CancelSpotFleetRequestsSuccessItem's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCancelSpotFleetRequestsSuccessItem' :: BatchState -> BatchState -> String -> ( { "CurrentSpotFleetRequestState" :: (BatchState) , "PreviousSpotFleetRequestState" :: (BatchState) , "SpotFleetRequestId" :: (String) } -> {"CurrentSpotFleetRequestState" :: (BatchState) , "PreviousSpotFleetRequestState" :: (BatchState) , "SpotFleetRequestId" :: (String) } ) -> CancelSpotFleetRequestsSuccessItem
newCancelSpotFleetRequestsSuccessItem' _CurrentSpotFleetRequestState _PreviousSpotFleetRequestState _SpotFleetRequestId customize = (CancelSpotFleetRequestsSuccessItem <<< customize) { "CurrentSpotFleetRequestState": _CurrentSpotFleetRequestState, "PreviousSpotFleetRequestState": _PreviousSpotFleetRequestState, "SpotFleetRequestId": _SpotFleetRequestId }



newtype CancelSpotFleetRequestsSuccessSet = CancelSpotFleetRequestsSuccessSet (Array CancelSpotFleetRequestsSuccessItem)
derive instance newtypeCancelSpotFleetRequestsSuccessSet :: Newtype CancelSpotFleetRequestsSuccessSet _
derive instance repGenericCancelSpotFleetRequestsSuccessSet :: Generic CancelSpotFleetRequestsSuccessSet _
instance showCancelSpotFleetRequestsSuccessSet :: Show CancelSpotFleetRequestsSuccessSet where show = genericShow
instance decodeCancelSpotFleetRequestsSuccessSet :: Decode CancelSpotFleetRequestsSuccessSet where decode = genericDecode options
instance encodeCancelSpotFleetRequestsSuccessSet :: Encode CancelSpotFleetRequestsSuccessSet where encode = genericEncode options



newtype CancelSpotInstanceRequestState = CancelSpotInstanceRequestState String
derive instance newtypeCancelSpotInstanceRequestState :: Newtype CancelSpotInstanceRequestState _
derive instance repGenericCancelSpotInstanceRequestState :: Generic CancelSpotInstanceRequestState _
instance showCancelSpotInstanceRequestState :: Show CancelSpotInstanceRequestState where show = genericShow
instance decodeCancelSpotInstanceRequestState :: Decode CancelSpotInstanceRequestState where decode = genericDecode options
instance encodeCancelSpotInstanceRequestState :: Encode CancelSpotInstanceRequestState where encode = genericEncode options



-- | <p>Contains the parameters for CancelSpotInstanceRequests.</p>
newtype CancelSpotInstanceRequestsRequest = CancelSpotInstanceRequestsRequest 
  { "DryRun" :: Maybe (Boolean)
  , "SpotInstanceRequestIds" :: (SpotInstanceRequestIdList)
  }
derive instance newtypeCancelSpotInstanceRequestsRequest :: Newtype CancelSpotInstanceRequestsRequest _
derive instance repGenericCancelSpotInstanceRequestsRequest :: Generic CancelSpotInstanceRequestsRequest _
instance showCancelSpotInstanceRequestsRequest :: Show CancelSpotInstanceRequestsRequest where show = genericShow
instance decodeCancelSpotInstanceRequestsRequest :: Decode CancelSpotInstanceRequestsRequest where decode = genericDecode options
instance encodeCancelSpotInstanceRequestsRequest :: Encode CancelSpotInstanceRequestsRequest where encode = genericEncode options

-- | Constructs CancelSpotInstanceRequestsRequest from required parameters
newCancelSpotInstanceRequestsRequest :: SpotInstanceRequestIdList -> CancelSpotInstanceRequestsRequest
newCancelSpotInstanceRequestsRequest _SpotInstanceRequestIds = CancelSpotInstanceRequestsRequest { "SpotInstanceRequestIds": _SpotInstanceRequestIds, "DryRun": Nothing }

-- | Constructs CancelSpotInstanceRequestsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCancelSpotInstanceRequestsRequest' :: SpotInstanceRequestIdList -> ( { "DryRun" :: Maybe (Boolean) , "SpotInstanceRequestIds" :: (SpotInstanceRequestIdList) } -> {"DryRun" :: Maybe (Boolean) , "SpotInstanceRequestIds" :: (SpotInstanceRequestIdList) } ) -> CancelSpotInstanceRequestsRequest
newCancelSpotInstanceRequestsRequest' _SpotInstanceRequestIds customize = (CancelSpotInstanceRequestsRequest <<< customize) { "SpotInstanceRequestIds": _SpotInstanceRequestIds, "DryRun": Nothing }



-- | <p>Contains the output of CancelSpotInstanceRequests.</p>
newtype CancelSpotInstanceRequestsResult = CancelSpotInstanceRequestsResult 
  { "CancelledSpotInstanceRequests" :: Maybe (CancelledSpotInstanceRequestList)
  }
derive instance newtypeCancelSpotInstanceRequestsResult :: Newtype CancelSpotInstanceRequestsResult _
derive instance repGenericCancelSpotInstanceRequestsResult :: Generic CancelSpotInstanceRequestsResult _
instance showCancelSpotInstanceRequestsResult :: Show CancelSpotInstanceRequestsResult where show = genericShow
instance decodeCancelSpotInstanceRequestsResult :: Decode CancelSpotInstanceRequestsResult where decode = genericDecode options
instance encodeCancelSpotInstanceRequestsResult :: Encode CancelSpotInstanceRequestsResult where encode = genericEncode options

-- | Constructs CancelSpotInstanceRequestsResult from required parameters
newCancelSpotInstanceRequestsResult :: CancelSpotInstanceRequestsResult
newCancelSpotInstanceRequestsResult  = CancelSpotInstanceRequestsResult { "CancelledSpotInstanceRequests": Nothing }

-- | Constructs CancelSpotInstanceRequestsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCancelSpotInstanceRequestsResult' :: ( { "CancelledSpotInstanceRequests" :: Maybe (CancelledSpotInstanceRequestList) } -> {"CancelledSpotInstanceRequests" :: Maybe (CancelledSpotInstanceRequestList) } ) -> CancelSpotInstanceRequestsResult
newCancelSpotInstanceRequestsResult'  customize = (CancelSpotInstanceRequestsResult <<< customize) { "CancelledSpotInstanceRequests": Nothing }



-- | <p>Describes a request to cancel a Spot Instance.</p>
newtype CancelledSpotInstanceRequest = CancelledSpotInstanceRequest 
  { "SpotInstanceRequestId" :: Maybe (String)
  , "State" :: Maybe (CancelSpotInstanceRequestState)
  }
derive instance newtypeCancelledSpotInstanceRequest :: Newtype CancelledSpotInstanceRequest _
derive instance repGenericCancelledSpotInstanceRequest :: Generic CancelledSpotInstanceRequest _
instance showCancelledSpotInstanceRequest :: Show CancelledSpotInstanceRequest where show = genericShow
instance decodeCancelledSpotInstanceRequest :: Decode CancelledSpotInstanceRequest where decode = genericDecode options
instance encodeCancelledSpotInstanceRequest :: Encode CancelledSpotInstanceRequest where encode = genericEncode options

-- | Constructs CancelledSpotInstanceRequest from required parameters
newCancelledSpotInstanceRequest :: CancelledSpotInstanceRequest
newCancelledSpotInstanceRequest  = CancelledSpotInstanceRequest { "SpotInstanceRequestId": Nothing, "State": Nothing }

-- | Constructs CancelledSpotInstanceRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCancelledSpotInstanceRequest' :: ( { "SpotInstanceRequestId" :: Maybe (String) , "State" :: Maybe (CancelSpotInstanceRequestState) } -> {"SpotInstanceRequestId" :: Maybe (String) , "State" :: Maybe (CancelSpotInstanceRequestState) } ) -> CancelledSpotInstanceRequest
newCancelledSpotInstanceRequest'  customize = (CancelledSpotInstanceRequest <<< customize) { "SpotInstanceRequestId": Nothing, "State": Nothing }



newtype CancelledSpotInstanceRequestList = CancelledSpotInstanceRequestList (Array CancelledSpotInstanceRequest)
derive instance newtypeCancelledSpotInstanceRequestList :: Newtype CancelledSpotInstanceRequestList _
derive instance repGenericCancelledSpotInstanceRequestList :: Generic CancelledSpotInstanceRequestList _
instance showCancelledSpotInstanceRequestList :: Show CancelledSpotInstanceRequestList where show = genericShow
instance decodeCancelledSpotInstanceRequestList :: Decode CancelledSpotInstanceRequestList where decode = genericDecode options
instance encodeCancelledSpotInstanceRequestList :: Encode CancelledSpotInstanceRequestList where encode = genericEncode options



-- | <p>Describes an IPv4 CIDR block.</p>
newtype CidrBlock = CidrBlock 
  { "CidrBlock" :: Maybe (String)
  }
derive instance newtypeCidrBlock :: Newtype CidrBlock _
derive instance repGenericCidrBlock :: Generic CidrBlock _
instance showCidrBlock :: Show CidrBlock where show = genericShow
instance decodeCidrBlock :: Decode CidrBlock where decode = genericDecode options
instance encodeCidrBlock :: Encode CidrBlock where encode = genericEncode options

-- | Constructs CidrBlock from required parameters
newCidrBlock :: CidrBlock
newCidrBlock  = CidrBlock { "CidrBlock": Nothing }

-- | Constructs CidrBlock's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCidrBlock' :: ( { "CidrBlock" :: Maybe (String) } -> {"CidrBlock" :: Maybe (String) } ) -> CidrBlock
newCidrBlock'  customize = (CidrBlock <<< customize) { "CidrBlock": Nothing }



newtype CidrBlockSet = CidrBlockSet (Array CidrBlock)
derive instance newtypeCidrBlockSet :: Newtype CidrBlockSet _
derive instance repGenericCidrBlockSet :: Generic CidrBlockSet _
instance showCidrBlockSet :: Show CidrBlockSet where show = genericShow
instance decodeCidrBlockSet :: Decode CidrBlockSet where decode = genericDecode options
instance encodeCidrBlockSet :: Encode CidrBlockSet where encode = genericEncode options



-- | <p>Describes the ClassicLink DNS support status of a VPC.</p>
newtype ClassicLinkDnsSupport = ClassicLinkDnsSupport 
  { "ClassicLinkDnsSupported" :: Maybe (Boolean)
  , "VpcId" :: Maybe (String)
  }
derive instance newtypeClassicLinkDnsSupport :: Newtype ClassicLinkDnsSupport _
derive instance repGenericClassicLinkDnsSupport :: Generic ClassicLinkDnsSupport _
instance showClassicLinkDnsSupport :: Show ClassicLinkDnsSupport where show = genericShow
instance decodeClassicLinkDnsSupport :: Decode ClassicLinkDnsSupport where decode = genericDecode options
instance encodeClassicLinkDnsSupport :: Encode ClassicLinkDnsSupport where encode = genericEncode options

-- | Constructs ClassicLinkDnsSupport from required parameters
newClassicLinkDnsSupport :: ClassicLinkDnsSupport
newClassicLinkDnsSupport  = ClassicLinkDnsSupport { "ClassicLinkDnsSupported": Nothing, "VpcId": Nothing }

-- | Constructs ClassicLinkDnsSupport's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newClassicLinkDnsSupport' :: ( { "ClassicLinkDnsSupported" :: Maybe (Boolean) , "VpcId" :: Maybe (String) } -> {"ClassicLinkDnsSupported" :: Maybe (Boolean) , "VpcId" :: Maybe (String) } ) -> ClassicLinkDnsSupport
newClassicLinkDnsSupport'  customize = (ClassicLinkDnsSupport <<< customize) { "ClassicLinkDnsSupported": Nothing, "VpcId": Nothing }



newtype ClassicLinkDnsSupportList = ClassicLinkDnsSupportList (Array ClassicLinkDnsSupport)
derive instance newtypeClassicLinkDnsSupportList :: Newtype ClassicLinkDnsSupportList _
derive instance repGenericClassicLinkDnsSupportList :: Generic ClassicLinkDnsSupportList _
instance showClassicLinkDnsSupportList :: Show ClassicLinkDnsSupportList where show = genericShow
instance decodeClassicLinkDnsSupportList :: Decode ClassicLinkDnsSupportList where decode = genericDecode options
instance encodeClassicLinkDnsSupportList :: Encode ClassicLinkDnsSupportList where encode = genericEncode options



-- | <p>Describes a linked EC2-Classic instance.</p>
newtype ClassicLinkInstance = ClassicLinkInstance 
  { "Groups" :: Maybe (GroupIdentifierList)
  , "InstanceId" :: Maybe (String)
  , "Tags" :: Maybe (TagList)
  , "VpcId" :: Maybe (String)
  }
derive instance newtypeClassicLinkInstance :: Newtype ClassicLinkInstance _
derive instance repGenericClassicLinkInstance :: Generic ClassicLinkInstance _
instance showClassicLinkInstance :: Show ClassicLinkInstance where show = genericShow
instance decodeClassicLinkInstance :: Decode ClassicLinkInstance where decode = genericDecode options
instance encodeClassicLinkInstance :: Encode ClassicLinkInstance where encode = genericEncode options

-- | Constructs ClassicLinkInstance from required parameters
newClassicLinkInstance :: ClassicLinkInstance
newClassicLinkInstance  = ClassicLinkInstance { "Groups": Nothing, "InstanceId": Nothing, "Tags": Nothing, "VpcId": Nothing }

-- | Constructs ClassicLinkInstance's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newClassicLinkInstance' :: ( { "Groups" :: Maybe (GroupIdentifierList) , "InstanceId" :: Maybe (String) , "Tags" :: Maybe (TagList) , "VpcId" :: Maybe (String) } -> {"Groups" :: Maybe (GroupIdentifierList) , "InstanceId" :: Maybe (String) , "Tags" :: Maybe (TagList) , "VpcId" :: Maybe (String) } ) -> ClassicLinkInstance
newClassicLinkInstance'  customize = (ClassicLinkInstance <<< customize) { "Groups": Nothing, "InstanceId": Nothing, "Tags": Nothing, "VpcId": Nothing }



newtype ClassicLinkInstanceList = ClassicLinkInstanceList (Array ClassicLinkInstance)
derive instance newtypeClassicLinkInstanceList :: Newtype ClassicLinkInstanceList _
derive instance repGenericClassicLinkInstanceList :: Generic ClassicLinkInstanceList _
instance showClassicLinkInstanceList :: Show ClassicLinkInstanceList where show = genericShow
instance decodeClassicLinkInstanceList :: Decode ClassicLinkInstanceList where decode = genericDecode options
instance encodeClassicLinkInstanceList :: Encode ClassicLinkInstanceList where encode = genericEncode options



-- | <p>Describes a Classic Load Balancer.</p>
newtype ClassicLoadBalancer = ClassicLoadBalancer 
  { "Name" :: (String)
  }
derive instance newtypeClassicLoadBalancer :: Newtype ClassicLoadBalancer _
derive instance repGenericClassicLoadBalancer :: Generic ClassicLoadBalancer _
instance showClassicLoadBalancer :: Show ClassicLoadBalancer where show = genericShow
instance decodeClassicLoadBalancer :: Decode ClassicLoadBalancer where decode = genericDecode options
instance encodeClassicLoadBalancer :: Encode ClassicLoadBalancer where encode = genericEncode options

-- | Constructs ClassicLoadBalancer from required parameters
newClassicLoadBalancer :: String -> ClassicLoadBalancer
newClassicLoadBalancer _Name = ClassicLoadBalancer { "Name": _Name }

-- | Constructs ClassicLoadBalancer's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newClassicLoadBalancer' :: String -> ( { "Name" :: (String) } -> {"Name" :: (String) } ) -> ClassicLoadBalancer
newClassicLoadBalancer' _Name customize = (ClassicLoadBalancer <<< customize) { "Name": _Name }



newtype ClassicLoadBalancers = ClassicLoadBalancers (Array ClassicLoadBalancer)
derive instance newtypeClassicLoadBalancers :: Newtype ClassicLoadBalancers _
derive instance repGenericClassicLoadBalancers :: Generic ClassicLoadBalancers _
instance showClassicLoadBalancers :: Show ClassicLoadBalancers where show = genericShow
instance decodeClassicLoadBalancers :: Decode ClassicLoadBalancers where decode = genericDecode options
instance encodeClassicLoadBalancers :: Encode ClassicLoadBalancers where encode = genericEncode options



-- | <p>Describes the Classic Load Balancers to attach to a Spot Fleet. Spot Fleet registers the running Spot Instances with these Classic Load Balancers.</p>
newtype ClassicLoadBalancersConfig = ClassicLoadBalancersConfig 
  { "ClassicLoadBalancers" :: (ClassicLoadBalancers)
  }
derive instance newtypeClassicLoadBalancersConfig :: Newtype ClassicLoadBalancersConfig _
derive instance repGenericClassicLoadBalancersConfig :: Generic ClassicLoadBalancersConfig _
instance showClassicLoadBalancersConfig :: Show ClassicLoadBalancersConfig where show = genericShow
instance decodeClassicLoadBalancersConfig :: Decode ClassicLoadBalancersConfig where decode = genericDecode options
instance encodeClassicLoadBalancersConfig :: Encode ClassicLoadBalancersConfig where encode = genericEncode options

-- | Constructs ClassicLoadBalancersConfig from required parameters
newClassicLoadBalancersConfig :: ClassicLoadBalancers -> ClassicLoadBalancersConfig
newClassicLoadBalancersConfig _ClassicLoadBalancers = ClassicLoadBalancersConfig { "ClassicLoadBalancers": _ClassicLoadBalancers }

-- | Constructs ClassicLoadBalancersConfig's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newClassicLoadBalancersConfig' :: ClassicLoadBalancers -> ( { "ClassicLoadBalancers" :: (ClassicLoadBalancers) } -> {"ClassicLoadBalancers" :: (ClassicLoadBalancers) } ) -> ClassicLoadBalancersConfig
newClassicLoadBalancersConfig' _ClassicLoadBalancers customize = (ClassicLoadBalancersConfig <<< customize) { "ClassicLoadBalancers": _ClassicLoadBalancers }



-- | <p>Describes the client-specific data.</p>
newtype ClientData = ClientData 
  { "Comment" :: Maybe (String)
  , "UploadEnd" :: Maybe (DateTime)
  , "UploadSize" :: Maybe (Number)
  , "UploadStart" :: Maybe (DateTime)
  }
derive instance newtypeClientData :: Newtype ClientData _
derive instance repGenericClientData :: Generic ClientData _
instance showClientData :: Show ClientData where show = genericShow
instance decodeClientData :: Decode ClientData where decode = genericDecode options
instance encodeClientData :: Encode ClientData where encode = genericEncode options

-- | Constructs ClientData from required parameters
newClientData :: ClientData
newClientData  = ClientData { "Comment": Nothing, "UploadEnd": Nothing, "UploadSize": Nothing, "UploadStart": Nothing }

-- | Constructs ClientData's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newClientData' :: ( { "Comment" :: Maybe (String) , "UploadEnd" :: Maybe (DateTime) , "UploadSize" :: Maybe (Number) , "UploadStart" :: Maybe (DateTime) } -> {"Comment" :: Maybe (String) , "UploadEnd" :: Maybe (DateTime) , "UploadSize" :: Maybe (Number) , "UploadStart" :: Maybe (DateTime) } ) -> ClientData
newClientData'  customize = (ClientData <<< customize) { "Comment": Nothing, "UploadEnd": Nothing, "UploadSize": Nothing, "UploadStart": Nothing }



-- | <p>Contains the parameters for ConfirmProductInstance.</p>
newtype ConfirmProductInstanceRequest = ConfirmProductInstanceRequest 
  { "InstanceId" :: (String)
  , "ProductCode" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeConfirmProductInstanceRequest :: Newtype ConfirmProductInstanceRequest _
derive instance repGenericConfirmProductInstanceRequest :: Generic ConfirmProductInstanceRequest _
instance showConfirmProductInstanceRequest :: Show ConfirmProductInstanceRequest where show = genericShow
instance decodeConfirmProductInstanceRequest :: Decode ConfirmProductInstanceRequest where decode = genericDecode options
instance encodeConfirmProductInstanceRequest :: Encode ConfirmProductInstanceRequest where encode = genericEncode options

-- | Constructs ConfirmProductInstanceRequest from required parameters
newConfirmProductInstanceRequest :: String -> String -> ConfirmProductInstanceRequest
newConfirmProductInstanceRequest _InstanceId _ProductCode = ConfirmProductInstanceRequest { "InstanceId": _InstanceId, "ProductCode": _ProductCode, "DryRun": Nothing }

-- | Constructs ConfirmProductInstanceRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newConfirmProductInstanceRequest' :: String -> String -> ( { "InstanceId" :: (String) , "ProductCode" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"InstanceId" :: (String) , "ProductCode" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> ConfirmProductInstanceRequest
newConfirmProductInstanceRequest' _InstanceId _ProductCode customize = (ConfirmProductInstanceRequest <<< customize) { "InstanceId": _InstanceId, "ProductCode": _ProductCode, "DryRun": Nothing }



-- | <p>Contains the output of ConfirmProductInstance.</p>
newtype ConfirmProductInstanceResult = ConfirmProductInstanceResult 
  { "OwnerId" :: Maybe (String)
  , "Return" :: Maybe (Boolean)
  }
derive instance newtypeConfirmProductInstanceResult :: Newtype ConfirmProductInstanceResult _
derive instance repGenericConfirmProductInstanceResult :: Generic ConfirmProductInstanceResult _
instance showConfirmProductInstanceResult :: Show ConfirmProductInstanceResult where show = genericShow
instance decodeConfirmProductInstanceResult :: Decode ConfirmProductInstanceResult where decode = genericDecode options
instance encodeConfirmProductInstanceResult :: Encode ConfirmProductInstanceResult where encode = genericEncode options

-- | Constructs ConfirmProductInstanceResult from required parameters
newConfirmProductInstanceResult :: ConfirmProductInstanceResult
newConfirmProductInstanceResult  = ConfirmProductInstanceResult { "OwnerId": Nothing, "Return": Nothing }

-- | Constructs ConfirmProductInstanceResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newConfirmProductInstanceResult' :: ( { "OwnerId" :: Maybe (String) , "Return" :: Maybe (Boolean) } -> {"OwnerId" :: Maybe (String) , "Return" :: Maybe (Boolean) } ) -> ConfirmProductInstanceResult
newConfirmProductInstanceResult'  customize = (ConfirmProductInstanceResult <<< customize) { "OwnerId": Nothing, "Return": Nothing }



-- | <p>Describes a connection notification for a VPC endpoint or VPC endpoint service.</p>
newtype ConnectionNotification = ConnectionNotification 
  { "ConnectionNotificationId" :: Maybe (String)
  , "ServiceId" :: Maybe (String)
  , "VpcEndpointId" :: Maybe (String)
  , "ConnectionNotificationType" :: Maybe (ConnectionNotificationType)
  , "ConnectionNotificationArn" :: Maybe (String)
  , "ConnectionEvents" :: Maybe (ValueStringList)
  , "ConnectionNotificationState" :: Maybe (ConnectionNotificationState)
  }
derive instance newtypeConnectionNotification :: Newtype ConnectionNotification _
derive instance repGenericConnectionNotification :: Generic ConnectionNotification _
instance showConnectionNotification :: Show ConnectionNotification where show = genericShow
instance decodeConnectionNotification :: Decode ConnectionNotification where decode = genericDecode options
instance encodeConnectionNotification :: Encode ConnectionNotification where encode = genericEncode options

-- | Constructs ConnectionNotification from required parameters
newConnectionNotification :: ConnectionNotification
newConnectionNotification  = ConnectionNotification { "ConnectionEvents": Nothing, "ConnectionNotificationArn": Nothing, "ConnectionNotificationId": Nothing, "ConnectionNotificationState": Nothing, "ConnectionNotificationType": Nothing, "ServiceId": Nothing, "VpcEndpointId": Nothing }

-- | Constructs ConnectionNotification's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newConnectionNotification' :: ( { "ConnectionNotificationId" :: Maybe (String) , "ServiceId" :: Maybe (String) , "VpcEndpointId" :: Maybe (String) , "ConnectionNotificationType" :: Maybe (ConnectionNotificationType) , "ConnectionNotificationArn" :: Maybe (String) , "ConnectionEvents" :: Maybe (ValueStringList) , "ConnectionNotificationState" :: Maybe (ConnectionNotificationState) } -> {"ConnectionNotificationId" :: Maybe (String) , "ServiceId" :: Maybe (String) , "VpcEndpointId" :: Maybe (String) , "ConnectionNotificationType" :: Maybe (ConnectionNotificationType) , "ConnectionNotificationArn" :: Maybe (String) , "ConnectionEvents" :: Maybe (ValueStringList) , "ConnectionNotificationState" :: Maybe (ConnectionNotificationState) } ) -> ConnectionNotification
newConnectionNotification'  customize = (ConnectionNotification <<< customize) { "ConnectionEvents": Nothing, "ConnectionNotificationArn": Nothing, "ConnectionNotificationId": Nothing, "ConnectionNotificationState": Nothing, "ConnectionNotificationType": Nothing, "ServiceId": Nothing, "VpcEndpointId": Nothing }



newtype ConnectionNotificationSet = ConnectionNotificationSet (Array ConnectionNotification)
derive instance newtypeConnectionNotificationSet :: Newtype ConnectionNotificationSet _
derive instance repGenericConnectionNotificationSet :: Generic ConnectionNotificationSet _
instance showConnectionNotificationSet :: Show ConnectionNotificationSet where show = genericShow
instance decodeConnectionNotificationSet :: Decode ConnectionNotificationSet where decode = genericDecode options
instance encodeConnectionNotificationSet :: Encode ConnectionNotificationSet where encode = genericEncode options



newtype ConnectionNotificationState = ConnectionNotificationState String
derive instance newtypeConnectionNotificationState :: Newtype ConnectionNotificationState _
derive instance repGenericConnectionNotificationState :: Generic ConnectionNotificationState _
instance showConnectionNotificationState :: Show ConnectionNotificationState where show = genericShow
instance decodeConnectionNotificationState :: Decode ConnectionNotificationState where decode = genericDecode options
instance encodeConnectionNotificationState :: Encode ConnectionNotificationState where encode = genericEncode options



newtype ConnectionNotificationType = ConnectionNotificationType String
derive instance newtypeConnectionNotificationType :: Newtype ConnectionNotificationType _
derive instance repGenericConnectionNotificationType :: Generic ConnectionNotificationType _
instance showConnectionNotificationType :: Show ConnectionNotificationType where show = genericShow
instance decodeConnectionNotificationType :: Decode ConnectionNotificationType where decode = genericDecode options
instance encodeConnectionNotificationType :: Encode ConnectionNotificationType where encode = genericEncode options



newtype ContainerFormat = ContainerFormat String
derive instance newtypeContainerFormat :: Newtype ContainerFormat _
derive instance repGenericContainerFormat :: Generic ContainerFormat _
instance showContainerFormat :: Show ContainerFormat where show = genericShow
instance decodeContainerFormat :: Decode ContainerFormat where decode = genericDecode options
instance encodeContainerFormat :: Encode ContainerFormat where encode = genericEncode options



newtype ConversionIdStringList = ConversionIdStringList (Array String)
derive instance newtypeConversionIdStringList :: Newtype ConversionIdStringList _
derive instance repGenericConversionIdStringList :: Generic ConversionIdStringList _
instance showConversionIdStringList :: Show ConversionIdStringList where show = genericShow
instance decodeConversionIdStringList :: Decode ConversionIdStringList where decode = genericDecode options
instance encodeConversionIdStringList :: Encode ConversionIdStringList where encode = genericEncode options



-- | <p>Describes a conversion task.</p>
newtype ConversionTask = ConversionTask 
  { "ConversionTaskId" :: (String)
  , "ExpirationTime" :: Maybe (String)
  , "ImportInstance" :: Maybe (ImportInstanceTaskDetails)
  , "ImportVolume" :: Maybe (ImportVolumeTaskDetails)
  , "State" :: (ConversionTaskState)
  , "StatusMessage" :: Maybe (String)
  , "Tags" :: Maybe (TagList)
  }
derive instance newtypeConversionTask :: Newtype ConversionTask _
derive instance repGenericConversionTask :: Generic ConversionTask _
instance showConversionTask :: Show ConversionTask where show = genericShow
instance decodeConversionTask :: Decode ConversionTask where decode = genericDecode options
instance encodeConversionTask :: Encode ConversionTask where encode = genericEncode options

-- | Constructs ConversionTask from required parameters
newConversionTask :: String -> ConversionTaskState -> ConversionTask
newConversionTask _ConversionTaskId _State = ConversionTask { "ConversionTaskId": _ConversionTaskId, "State": _State, "ExpirationTime": Nothing, "ImportInstance": Nothing, "ImportVolume": Nothing, "StatusMessage": Nothing, "Tags": Nothing }

-- | Constructs ConversionTask's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newConversionTask' :: String -> ConversionTaskState -> ( { "ConversionTaskId" :: (String) , "ExpirationTime" :: Maybe (String) , "ImportInstance" :: Maybe (ImportInstanceTaskDetails) , "ImportVolume" :: Maybe (ImportVolumeTaskDetails) , "State" :: (ConversionTaskState) , "StatusMessage" :: Maybe (String) , "Tags" :: Maybe (TagList) } -> {"ConversionTaskId" :: (String) , "ExpirationTime" :: Maybe (String) , "ImportInstance" :: Maybe (ImportInstanceTaskDetails) , "ImportVolume" :: Maybe (ImportVolumeTaskDetails) , "State" :: (ConversionTaskState) , "StatusMessage" :: Maybe (String) , "Tags" :: Maybe (TagList) } ) -> ConversionTask
newConversionTask' _ConversionTaskId _State customize = (ConversionTask <<< customize) { "ConversionTaskId": _ConversionTaskId, "State": _State, "ExpirationTime": Nothing, "ImportInstance": Nothing, "ImportVolume": Nothing, "StatusMessage": Nothing, "Tags": Nothing }



newtype ConversionTaskState = ConversionTaskState String
derive instance newtypeConversionTaskState :: Newtype ConversionTaskState _
derive instance repGenericConversionTaskState :: Generic ConversionTaskState _
instance showConversionTaskState :: Show ConversionTaskState where show = genericShow
instance decodeConversionTaskState :: Decode ConversionTaskState where decode = genericDecode options
instance encodeConversionTaskState :: Encode ConversionTaskState where encode = genericEncode options



newtype CopyFpgaImageRequest = CopyFpgaImageRequest 
  { "DryRun" :: Maybe (Boolean)
  , "SourceFpgaImageId" :: (String)
  , "Description" :: Maybe (String)
  , "Name" :: Maybe (String)
  , "SourceRegion" :: (String)
  , "ClientToken" :: Maybe (String)
  }
derive instance newtypeCopyFpgaImageRequest :: Newtype CopyFpgaImageRequest _
derive instance repGenericCopyFpgaImageRequest :: Generic CopyFpgaImageRequest _
instance showCopyFpgaImageRequest :: Show CopyFpgaImageRequest where show = genericShow
instance decodeCopyFpgaImageRequest :: Decode CopyFpgaImageRequest where decode = genericDecode options
instance encodeCopyFpgaImageRequest :: Encode CopyFpgaImageRequest where encode = genericEncode options

-- | Constructs CopyFpgaImageRequest from required parameters
newCopyFpgaImageRequest :: String -> String -> CopyFpgaImageRequest
newCopyFpgaImageRequest _SourceFpgaImageId _SourceRegion = CopyFpgaImageRequest { "SourceFpgaImageId": _SourceFpgaImageId, "SourceRegion": _SourceRegion, "ClientToken": Nothing, "Description": Nothing, "DryRun": Nothing, "Name": Nothing }

-- | Constructs CopyFpgaImageRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCopyFpgaImageRequest' :: String -> String -> ( { "DryRun" :: Maybe (Boolean) , "SourceFpgaImageId" :: (String) , "Description" :: Maybe (String) , "Name" :: Maybe (String) , "SourceRegion" :: (String) , "ClientToken" :: Maybe (String) } -> {"DryRun" :: Maybe (Boolean) , "SourceFpgaImageId" :: (String) , "Description" :: Maybe (String) , "Name" :: Maybe (String) , "SourceRegion" :: (String) , "ClientToken" :: Maybe (String) } ) -> CopyFpgaImageRequest
newCopyFpgaImageRequest' _SourceFpgaImageId _SourceRegion customize = (CopyFpgaImageRequest <<< customize) { "SourceFpgaImageId": _SourceFpgaImageId, "SourceRegion": _SourceRegion, "ClientToken": Nothing, "Description": Nothing, "DryRun": Nothing, "Name": Nothing }



newtype CopyFpgaImageResult = CopyFpgaImageResult 
  { "FpgaImageId" :: Maybe (String)
  }
derive instance newtypeCopyFpgaImageResult :: Newtype CopyFpgaImageResult _
derive instance repGenericCopyFpgaImageResult :: Generic CopyFpgaImageResult _
instance showCopyFpgaImageResult :: Show CopyFpgaImageResult where show = genericShow
instance decodeCopyFpgaImageResult :: Decode CopyFpgaImageResult where decode = genericDecode options
instance encodeCopyFpgaImageResult :: Encode CopyFpgaImageResult where encode = genericEncode options

-- | Constructs CopyFpgaImageResult from required parameters
newCopyFpgaImageResult :: CopyFpgaImageResult
newCopyFpgaImageResult  = CopyFpgaImageResult { "FpgaImageId": Nothing }

-- | Constructs CopyFpgaImageResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCopyFpgaImageResult' :: ( { "FpgaImageId" :: Maybe (String) } -> {"FpgaImageId" :: Maybe (String) } ) -> CopyFpgaImageResult
newCopyFpgaImageResult'  customize = (CopyFpgaImageResult <<< customize) { "FpgaImageId": Nothing }



-- | <p>Contains the parameters for CopyImage.</p>
newtype CopyImageRequest = CopyImageRequest 
  { "ClientToken" :: Maybe (String)
  , "Description" :: Maybe (String)
  , "Encrypted" :: Maybe (Boolean)
  , "KmsKeyId" :: Maybe (String)
  , "Name" :: (String)
  , "SourceImageId" :: (String)
  , "SourceRegion" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeCopyImageRequest :: Newtype CopyImageRequest _
derive instance repGenericCopyImageRequest :: Generic CopyImageRequest _
instance showCopyImageRequest :: Show CopyImageRequest where show = genericShow
instance decodeCopyImageRequest :: Decode CopyImageRequest where decode = genericDecode options
instance encodeCopyImageRequest :: Encode CopyImageRequest where encode = genericEncode options

-- | Constructs CopyImageRequest from required parameters
newCopyImageRequest :: String -> String -> String -> CopyImageRequest
newCopyImageRequest _Name _SourceImageId _SourceRegion = CopyImageRequest { "Name": _Name, "SourceImageId": _SourceImageId, "SourceRegion": _SourceRegion, "ClientToken": Nothing, "Description": Nothing, "DryRun": Nothing, "Encrypted": Nothing, "KmsKeyId": Nothing }

-- | Constructs CopyImageRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCopyImageRequest' :: String -> String -> String -> ( { "ClientToken" :: Maybe (String) , "Description" :: Maybe (String) , "Encrypted" :: Maybe (Boolean) , "KmsKeyId" :: Maybe (String) , "Name" :: (String) , "SourceImageId" :: (String) , "SourceRegion" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"ClientToken" :: Maybe (String) , "Description" :: Maybe (String) , "Encrypted" :: Maybe (Boolean) , "KmsKeyId" :: Maybe (String) , "Name" :: (String) , "SourceImageId" :: (String) , "SourceRegion" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> CopyImageRequest
newCopyImageRequest' _Name _SourceImageId _SourceRegion customize = (CopyImageRequest <<< customize) { "Name": _Name, "SourceImageId": _SourceImageId, "SourceRegion": _SourceRegion, "ClientToken": Nothing, "Description": Nothing, "DryRun": Nothing, "Encrypted": Nothing, "KmsKeyId": Nothing }



-- | <p>Contains the output of CopyImage.</p>
newtype CopyImageResult = CopyImageResult 
  { "ImageId" :: Maybe (String)
  }
derive instance newtypeCopyImageResult :: Newtype CopyImageResult _
derive instance repGenericCopyImageResult :: Generic CopyImageResult _
instance showCopyImageResult :: Show CopyImageResult where show = genericShow
instance decodeCopyImageResult :: Decode CopyImageResult where decode = genericDecode options
instance encodeCopyImageResult :: Encode CopyImageResult where encode = genericEncode options

-- | Constructs CopyImageResult from required parameters
newCopyImageResult :: CopyImageResult
newCopyImageResult  = CopyImageResult { "ImageId": Nothing }

-- | Constructs CopyImageResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCopyImageResult' :: ( { "ImageId" :: Maybe (String) } -> {"ImageId" :: Maybe (String) } ) -> CopyImageResult
newCopyImageResult'  customize = (CopyImageResult <<< customize) { "ImageId": Nothing }



-- | <p>Contains the parameters for CopySnapshot.</p>
newtype CopySnapshotRequest = CopySnapshotRequest 
  { "Description" :: Maybe (String)
  , "DestinationRegion" :: Maybe (String)
  , "Encrypted" :: Maybe (Boolean)
  , "KmsKeyId" :: Maybe (String)
  , "PresignedUrl" :: Maybe (String)
  , "SourceRegion" :: (String)
  , "SourceSnapshotId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeCopySnapshotRequest :: Newtype CopySnapshotRequest _
derive instance repGenericCopySnapshotRequest :: Generic CopySnapshotRequest _
instance showCopySnapshotRequest :: Show CopySnapshotRequest where show = genericShow
instance decodeCopySnapshotRequest :: Decode CopySnapshotRequest where decode = genericDecode options
instance encodeCopySnapshotRequest :: Encode CopySnapshotRequest where encode = genericEncode options

-- | Constructs CopySnapshotRequest from required parameters
newCopySnapshotRequest :: String -> String -> CopySnapshotRequest
newCopySnapshotRequest _SourceRegion _SourceSnapshotId = CopySnapshotRequest { "SourceRegion": _SourceRegion, "SourceSnapshotId": _SourceSnapshotId, "Description": Nothing, "DestinationRegion": Nothing, "DryRun": Nothing, "Encrypted": Nothing, "KmsKeyId": Nothing, "PresignedUrl": Nothing }

-- | Constructs CopySnapshotRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCopySnapshotRequest' :: String -> String -> ( { "Description" :: Maybe (String) , "DestinationRegion" :: Maybe (String) , "Encrypted" :: Maybe (Boolean) , "KmsKeyId" :: Maybe (String) , "PresignedUrl" :: Maybe (String) , "SourceRegion" :: (String) , "SourceSnapshotId" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"Description" :: Maybe (String) , "DestinationRegion" :: Maybe (String) , "Encrypted" :: Maybe (Boolean) , "KmsKeyId" :: Maybe (String) , "PresignedUrl" :: Maybe (String) , "SourceRegion" :: (String) , "SourceSnapshotId" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> CopySnapshotRequest
newCopySnapshotRequest' _SourceRegion _SourceSnapshotId customize = (CopySnapshotRequest <<< customize) { "SourceRegion": _SourceRegion, "SourceSnapshotId": _SourceSnapshotId, "Description": Nothing, "DestinationRegion": Nothing, "DryRun": Nothing, "Encrypted": Nothing, "KmsKeyId": Nothing, "PresignedUrl": Nothing }



-- | <p>Contains the output of CopySnapshot.</p>
newtype CopySnapshotResult = CopySnapshotResult 
  { "SnapshotId" :: Maybe (String)
  }
derive instance newtypeCopySnapshotResult :: Newtype CopySnapshotResult _
derive instance repGenericCopySnapshotResult :: Generic CopySnapshotResult _
instance showCopySnapshotResult :: Show CopySnapshotResult where show = genericShow
instance decodeCopySnapshotResult :: Decode CopySnapshotResult where decode = genericDecode options
instance encodeCopySnapshotResult :: Encode CopySnapshotResult where encode = genericEncode options

-- | Constructs CopySnapshotResult from required parameters
newCopySnapshotResult :: CopySnapshotResult
newCopySnapshotResult  = CopySnapshotResult { "SnapshotId": Nothing }

-- | Constructs CopySnapshotResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCopySnapshotResult' :: ( { "SnapshotId" :: Maybe (String) } -> {"SnapshotId" :: Maybe (String) } ) -> CopySnapshotResult
newCopySnapshotResult'  customize = (CopySnapshotResult <<< customize) { "SnapshotId": Nothing }



-- | <p>Contains the parameters for CreateCustomerGateway.</p>
newtype CreateCustomerGatewayRequest = CreateCustomerGatewayRequest 
  { "BgpAsn" :: (Int)
  , "PublicIp" :: (String)
  , "Type" :: (GatewayType)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeCreateCustomerGatewayRequest :: Newtype CreateCustomerGatewayRequest _
derive instance repGenericCreateCustomerGatewayRequest :: Generic CreateCustomerGatewayRequest _
instance showCreateCustomerGatewayRequest :: Show CreateCustomerGatewayRequest where show = genericShow
instance decodeCreateCustomerGatewayRequest :: Decode CreateCustomerGatewayRequest where decode = genericDecode options
instance encodeCreateCustomerGatewayRequest :: Encode CreateCustomerGatewayRequest where encode = genericEncode options

-- | Constructs CreateCustomerGatewayRequest from required parameters
newCreateCustomerGatewayRequest :: Int -> String -> GatewayType -> CreateCustomerGatewayRequest
newCreateCustomerGatewayRequest _BgpAsn _PublicIp _Type = CreateCustomerGatewayRequest { "BgpAsn": _BgpAsn, "PublicIp": _PublicIp, "Type": _Type, "DryRun": Nothing }

-- | Constructs CreateCustomerGatewayRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateCustomerGatewayRequest' :: Int -> String -> GatewayType -> ( { "BgpAsn" :: (Int) , "PublicIp" :: (String) , "Type" :: (GatewayType) , "DryRun" :: Maybe (Boolean) } -> {"BgpAsn" :: (Int) , "PublicIp" :: (String) , "Type" :: (GatewayType) , "DryRun" :: Maybe (Boolean) } ) -> CreateCustomerGatewayRequest
newCreateCustomerGatewayRequest' _BgpAsn _PublicIp _Type customize = (CreateCustomerGatewayRequest <<< customize) { "BgpAsn": _BgpAsn, "PublicIp": _PublicIp, "Type": _Type, "DryRun": Nothing }



-- | <p>Contains the output of CreateCustomerGateway.</p>
newtype CreateCustomerGatewayResult = CreateCustomerGatewayResult 
  { "CustomerGateway" :: Maybe (CustomerGateway)
  }
derive instance newtypeCreateCustomerGatewayResult :: Newtype CreateCustomerGatewayResult _
derive instance repGenericCreateCustomerGatewayResult :: Generic CreateCustomerGatewayResult _
instance showCreateCustomerGatewayResult :: Show CreateCustomerGatewayResult where show = genericShow
instance decodeCreateCustomerGatewayResult :: Decode CreateCustomerGatewayResult where decode = genericDecode options
instance encodeCreateCustomerGatewayResult :: Encode CreateCustomerGatewayResult where encode = genericEncode options

-- | Constructs CreateCustomerGatewayResult from required parameters
newCreateCustomerGatewayResult :: CreateCustomerGatewayResult
newCreateCustomerGatewayResult  = CreateCustomerGatewayResult { "CustomerGateway": Nothing }

-- | Constructs CreateCustomerGatewayResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateCustomerGatewayResult' :: ( { "CustomerGateway" :: Maybe (CustomerGateway) } -> {"CustomerGateway" :: Maybe (CustomerGateway) } ) -> CreateCustomerGatewayResult
newCreateCustomerGatewayResult'  customize = (CreateCustomerGatewayResult <<< customize) { "CustomerGateway": Nothing }



newtype CreateDefaultSubnetRequest = CreateDefaultSubnetRequest 
  { "AvailabilityZone" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeCreateDefaultSubnetRequest :: Newtype CreateDefaultSubnetRequest _
derive instance repGenericCreateDefaultSubnetRequest :: Generic CreateDefaultSubnetRequest _
instance showCreateDefaultSubnetRequest :: Show CreateDefaultSubnetRequest where show = genericShow
instance decodeCreateDefaultSubnetRequest :: Decode CreateDefaultSubnetRequest where decode = genericDecode options
instance encodeCreateDefaultSubnetRequest :: Encode CreateDefaultSubnetRequest where encode = genericEncode options

-- | Constructs CreateDefaultSubnetRequest from required parameters
newCreateDefaultSubnetRequest :: String -> CreateDefaultSubnetRequest
newCreateDefaultSubnetRequest _AvailabilityZone = CreateDefaultSubnetRequest { "AvailabilityZone": _AvailabilityZone, "DryRun": Nothing }

-- | Constructs CreateDefaultSubnetRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateDefaultSubnetRequest' :: String -> ( { "AvailabilityZone" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"AvailabilityZone" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> CreateDefaultSubnetRequest
newCreateDefaultSubnetRequest' _AvailabilityZone customize = (CreateDefaultSubnetRequest <<< customize) { "AvailabilityZone": _AvailabilityZone, "DryRun": Nothing }



newtype CreateDefaultSubnetResult = CreateDefaultSubnetResult 
  { "Subnet" :: Maybe (Subnet)
  }
derive instance newtypeCreateDefaultSubnetResult :: Newtype CreateDefaultSubnetResult _
derive instance repGenericCreateDefaultSubnetResult :: Generic CreateDefaultSubnetResult _
instance showCreateDefaultSubnetResult :: Show CreateDefaultSubnetResult where show = genericShow
instance decodeCreateDefaultSubnetResult :: Decode CreateDefaultSubnetResult where decode = genericDecode options
instance encodeCreateDefaultSubnetResult :: Encode CreateDefaultSubnetResult where encode = genericEncode options

-- | Constructs CreateDefaultSubnetResult from required parameters
newCreateDefaultSubnetResult :: CreateDefaultSubnetResult
newCreateDefaultSubnetResult  = CreateDefaultSubnetResult { "Subnet": Nothing }

-- | Constructs CreateDefaultSubnetResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateDefaultSubnetResult' :: ( { "Subnet" :: Maybe (Subnet) } -> {"Subnet" :: Maybe (Subnet) } ) -> CreateDefaultSubnetResult
newCreateDefaultSubnetResult'  customize = (CreateDefaultSubnetResult <<< customize) { "Subnet": Nothing }



-- | <p>Contains the parameters for CreateDefaultVpc.</p>
newtype CreateDefaultVpcRequest = CreateDefaultVpcRequest 
  { "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeCreateDefaultVpcRequest :: Newtype CreateDefaultVpcRequest _
derive instance repGenericCreateDefaultVpcRequest :: Generic CreateDefaultVpcRequest _
instance showCreateDefaultVpcRequest :: Show CreateDefaultVpcRequest where show = genericShow
instance decodeCreateDefaultVpcRequest :: Decode CreateDefaultVpcRequest where decode = genericDecode options
instance encodeCreateDefaultVpcRequest :: Encode CreateDefaultVpcRequest where encode = genericEncode options

-- | Constructs CreateDefaultVpcRequest from required parameters
newCreateDefaultVpcRequest :: CreateDefaultVpcRequest
newCreateDefaultVpcRequest  = CreateDefaultVpcRequest { "DryRun": Nothing }

-- | Constructs CreateDefaultVpcRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateDefaultVpcRequest' :: ( { "DryRun" :: Maybe (Boolean) } -> {"DryRun" :: Maybe (Boolean) } ) -> CreateDefaultVpcRequest
newCreateDefaultVpcRequest'  customize = (CreateDefaultVpcRequest <<< customize) { "DryRun": Nothing }



-- | <p>Contains the output of CreateDefaultVpc.</p>
newtype CreateDefaultVpcResult = CreateDefaultVpcResult 
  { "Vpc" :: Maybe (Vpc)
  }
derive instance newtypeCreateDefaultVpcResult :: Newtype CreateDefaultVpcResult _
derive instance repGenericCreateDefaultVpcResult :: Generic CreateDefaultVpcResult _
instance showCreateDefaultVpcResult :: Show CreateDefaultVpcResult where show = genericShow
instance decodeCreateDefaultVpcResult :: Decode CreateDefaultVpcResult where decode = genericDecode options
instance encodeCreateDefaultVpcResult :: Encode CreateDefaultVpcResult where encode = genericEncode options

-- | Constructs CreateDefaultVpcResult from required parameters
newCreateDefaultVpcResult :: CreateDefaultVpcResult
newCreateDefaultVpcResult  = CreateDefaultVpcResult { "Vpc": Nothing }

-- | Constructs CreateDefaultVpcResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateDefaultVpcResult' :: ( { "Vpc" :: Maybe (Vpc) } -> {"Vpc" :: Maybe (Vpc) } ) -> CreateDefaultVpcResult
newCreateDefaultVpcResult'  customize = (CreateDefaultVpcResult <<< customize) { "Vpc": Nothing }



-- | <p>Contains the parameters for CreateDhcpOptions.</p>
newtype CreateDhcpOptionsRequest = CreateDhcpOptionsRequest 
  { "DhcpConfigurations" :: (NewDhcpConfigurationList)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeCreateDhcpOptionsRequest :: Newtype CreateDhcpOptionsRequest _
derive instance repGenericCreateDhcpOptionsRequest :: Generic CreateDhcpOptionsRequest _
instance showCreateDhcpOptionsRequest :: Show CreateDhcpOptionsRequest where show = genericShow
instance decodeCreateDhcpOptionsRequest :: Decode CreateDhcpOptionsRequest where decode = genericDecode options
instance encodeCreateDhcpOptionsRequest :: Encode CreateDhcpOptionsRequest where encode = genericEncode options

-- | Constructs CreateDhcpOptionsRequest from required parameters
newCreateDhcpOptionsRequest :: NewDhcpConfigurationList -> CreateDhcpOptionsRequest
newCreateDhcpOptionsRequest _DhcpConfigurations = CreateDhcpOptionsRequest { "DhcpConfigurations": _DhcpConfigurations, "DryRun": Nothing }

-- | Constructs CreateDhcpOptionsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateDhcpOptionsRequest' :: NewDhcpConfigurationList -> ( { "DhcpConfigurations" :: (NewDhcpConfigurationList) , "DryRun" :: Maybe (Boolean) } -> {"DhcpConfigurations" :: (NewDhcpConfigurationList) , "DryRun" :: Maybe (Boolean) } ) -> CreateDhcpOptionsRequest
newCreateDhcpOptionsRequest' _DhcpConfigurations customize = (CreateDhcpOptionsRequest <<< customize) { "DhcpConfigurations": _DhcpConfigurations, "DryRun": Nothing }



-- | <p>Contains the output of CreateDhcpOptions.</p>
newtype CreateDhcpOptionsResult = CreateDhcpOptionsResult 
  { "DhcpOptions" :: Maybe (DhcpOptions)
  }
derive instance newtypeCreateDhcpOptionsResult :: Newtype CreateDhcpOptionsResult _
derive instance repGenericCreateDhcpOptionsResult :: Generic CreateDhcpOptionsResult _
instance showCreateDhcpOptionsResult :: Show CreateDhcpOptionsResult where show = genericShow
instance decodeCreateDhcpOptionsResult :: Decode CreateDhcpOptionsResult where decode = genericDecode options
instance encodeCreateDhcpOptionsResult :: Encode CreateDhcpOptionsResult where encode = genericEncode options

-- | Constructs CreateDhcpOptionsResult from required parameters
newCreateDhcpOptionsResult :: CreateDhcpOptionsResult
newCreateDhcpOptionsResult  = CreateDhcpOptionsResult { "DhcpOptions": Nothing }

-- | Constructs CreateDhcpOptionsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateDhcpOptionsResult' :: ( { "DhcpOptions" :: Maybe (DhcpOptions) } -> {"DhcpOptions" :: Maybe (DhcpOptions) } ) -> CreateDhcpOptionsResult
newCreateDhcpOptionsResult'  customize = (CreateDhcpOptionsResult <<< customize) { "DhcpOptions": Nothing }



newtype CreateEgressOnlyInternetGatewayRequest = CreateEgressOnlyInternetGatewayRequest 
  { "ClientToken" :: Maybe (String)
  , "DryRun" :: Maybe (Boolean)
  , "VpcId" :: (String)
  }
derive instance newtypeCreateEgressOnlyInternetGatewayRequest :: Newtype CreateEgressOnlyInternetGatewayRequest _
derive instance repGenericCreateEgressOnlyInternetGatewayRequest :: Generic CreateEgressOnlyInternetGatewayRequest _
instance showCreateEgressOnlyInternetGatewayRequest :: Show CreateEgressOnlyInternetGatewayRequest where show = genericShow
instance decodeCreateEgressOnlyInternetGatewayRequest :: Decode CreateEgressOnlyInternetGatewayRequest where decode = genericDecode options
instance encodeCreateEgressOnlyInternetGatewayRequest :: Encode CreateEgressOnlyInternetGatewayRequest where encode = genericEncode options

-- | Constructs CreateEgressOnlyInternetGatewayRequest from required parameters
newCreateEgressOnlyInternetGatewayRequest :: String -> CreateEgressOnlyInternetGatewayRequest
newCreateEgressOnlyInternetGatewayRequest _VpcId = CreateEgressOnlyInternetGatewayRequest { "VpcId": _VpcId, "ClientToken": Nothing, "DryRun": Nothing }

-- | Constructs CreateEgressOnlyInternetGatewayRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateEgressOnlyInternetGatewayRequest' :: String -> ( { "ClientToken" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "VpcId" :: (String) } -> {"ClientToken" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "VpcId" :: (String) } ) -> CreateEgressOnlyInternetGatewayRequest
newCreateEgressOnlyInternetGatewayRequest' _VpcId customize = (CreateEgressOnlyInternetGatewayRequest <<< customize) { "VpcId": _VpcId, "ClientToken": Nothing, "DryRun": Nothing }



newtype CreateEgressOnlyInternetGatewayResult = CreateEgressOnlyInternetGatewayResult 
  { "ClientToken" :: Maybe (String)
  , "EgressOnlyInternetGateway" :: Maybe (EgressOnlyInternetGateway)
  }
derive instance newtypeCreateEgressOnlyInternetGatewayResult :: Newtype CreateEgressOnlyInternetGatewayResult _
derive instance repGenericCreateEgressOnlyInternetGatewayResult :: Generic CreateEgressOnlyInternetGatewayResult _
instance showCreateEgressOnlyInternetGatewayResult :: Show CreateEgressOnlyInternetGatewayResult where show = genericShow
instance decodeCreateEgressOnlyInternetGatewayResult :: Decode CreateEgressOnlyInternetGatewayResult where decode = genericDecode options
instance encodeCreateEgressOnlyInternetGatewayResult :: Encode CreateEgressOnlyInternetGatewayResult where encode = genericEncode options

-- | Constructs CreateEgressOnlyInternetGatewayResult from required parameters
newCreateEgressOnlyInternetGatewayResult :: CreateEgressOnlyInternetGatewayResult
newCreateEgressOnlyInternetGatewayResult  = CreateEgressOnlyInternetGatewayResult { "ClientToken": Nothing, "EgressOnlyInternetGateway": Nothing }

-- | Constructs CreateEgressOnlyInternetGatewayResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateEgressOnlyInternetGatewayResult' :: ( { "ClientToken" :: Maybe (String) , "EgressOnlyInternetGateway" :: Maybe (EgressOnlyInternetGateway) } -> {"ClientToken" :: Maybe (String) , "EgressOnlyInternetGateway" :: Maybe (EgressOnlyInternetGateway) } ) -> CreateEgressOnlyInternetGatewayResult
newCreateEgressOnlyInternetGatewayResult'  customize = (CreateEgressOnlyInternetGatewayResult <<< customize) { "ClientToken": Nothing, "EgressOnlyInternetGateway": Nothing }



-- | <p>Contains the parameters for CreateFlowLogs.</p>
newtype CreateFlowLogsRequest = CreateFlowLogsRequest 
  { "ClientToken" :: Maybe (String)
  , "DeliverLogsPermissionArn" :: (String)
  , "LogGroupName" :: (String)
  , "ResourceIds" :: (ValueStringList)
  , "ResourceType" :: (FlowLogsResourceType)
  , "TrafficType" :: (TrafficType)
  }
derive instance newtypeCreateFlowLogsRequest :: Newtype CreateFlowLogsRequest _
derive instance repGenericCreateFlowLogsRequest :: Generic CreateFlowLogsRequest _
instance showCreateFlowLogsRequest :: Show CreateFlowLogsRequest where show = genericShow
instance decodeCreateFlowLogsRequest :: Decode CreateFlowLogsRequest where decode = genericDecode options
instance encodeCreateFlowLogsRequest :: Encode CreateFlowLogsRequest where encode = genericEncode options

-- | Constructs CreateFlowLogsRequest from required parameters
newCreateFlowLogsRequest :: String -> String -> ValueStringList -> FlowLogsResourceType -> TrafficType -> CreateFlowLogsRequest
newCreateFlowLogsRequest _DeliverLogsPermissionArn _LogGroupName _ResourceIds _ResourceType _TrafficType = CreateFlowLogsRequest { "DeliverLogsPermissionArn": _DeliverLogsPermissionArn, "LogGroupName": _LogGroupName, "ResourceIds": _ResourceIds, "ResourceType": _ResourceType, "TrafficType": _TrafficType, "ClientToken": Nothing }

-- | Constructs CreateFlowLogsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateFlowLogsRequest' :: String -> String -> ValueStringList -> FlowLogsResourceType -> TrafficType -> ( { "ClientToken" :: Maybe (String) , "DeliverLogsPermissionArn" :: (String) , "LogGroupName" :: (String) , "ResourceIds" :: (ValueStringList) , "ResourceType" :: (FlowLogsResourceType) , "TrafficType" :: (TrafficType) } -> {"ClientToken" :: Maybe (String) , "DeliverLogsPermissionArn" :: (String) , "LogGroupName" :: (String) , "ResourceIds" :: (ValueStringList) , "ResourceType" :: (FlowLogsResourceType) , "TrafficType" :: (TrafficType) } ) -> CreateFlowLogsRequest
newCreateFlowLogsRequest' _DeliverLogsPermissionArn _LogGroupName _ResourceIds _ResourceType _TrafficType customize = (CreateFlowLogsRequest <<< customize) { "DeliverLogsPermissionArn": _DeliverLogsPermissionArn, "LogGroupName": _LogGroupName, "ResourceIds": _ResourceIds, "ResourceType": _ResourceType, "TrafficType": _TrafficType, "ClientToken": Nothing }



-- | <p>Contains the output of CreateFlowLogs.</p>
newtype CreateFlowLogsResult = CreateFlowLogsResult 
  { "ClientToken" :: Maybe (String)
  , "FlowLogIds" :: Maybe (ValueStringList)
  , "Unsuccessful" :: Maybe (UnsuccessfulItemSet)
  }
derive instance newtypeCreateFlowLogsResult :: Newtype CreateFlowLogsResult _
derive instance repGenericCreateFlowLogsResult :: Generic CreateFlowLogsResult _
instance showCreateFlowLogsResult :: Show CreateFlowLogsResult where show = genericShow
instance decodeCreateFlowLogsResult :: Decode CreateFlowLogsResult where decode = genericDecode options
instance encodeCreateFlowLogsResult :: Encode CreateFlowLogsResult where encode = genericEncode options

-- | Constructs CreateFlowLogsResult from required parameters
newCreateFlowLogsResult :: CreateFlowLogsResult
newCreateFlowLogsResult  = CreateFlowLogsResult { "ClientToken": Nothing, "FlowLogIds": Nothing, "Unsuccessful": Nothing }

-- | Constructs CreateFlowLogsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateFlowLogsResult' :: ( { "ClientToken" :: Maybe (String) , "FlowLogIds" :: Maybe (ValueStringList) , "Unsuccessful" :: Maybe (UnsuccessfulItemSet) } -> {"ClientToken" :: Maybe (String) , "FlowLogIds" :: Maybe (ValueStringList) , "Unsuccessful" :: Maybe (UnsuccessfulItemSet) } ) -> CreateFlowLogsResult
newCreateFlowLogsResult'  customize = (CreateFlowLogsResult <<< customize) { "ClientToken": Nothing, "FlowLogIds": Nothing, "Unsuccessful": Nothing }



newtype CreateFpgaImageRequest = CreateFpgaImageRequest 
  { "DryRun" :: Maybe (Boolean)
  , "InputStorageLocation" :: (StorageLocation)
  , "LogsStorageLocation" :: Maybe (StorageLocation)
  , "Description" :: Maybe (String)
  , "Name" :: Maybe (String)
  , "ClientToken" :: Maybe (String)
  }
derive instance newtypeCreateFpgaImageRequest :: Newtype CreateFpgaImageRequest _
derive instance repGenericCreateFpgaImageRequest :: Generic CreateFpgaImageRequest _
instance showCreateFpgaImageRequest :: Show CreateFpgaImageRequest where show = genericShow
instance decodeCreateFpgaImageRequest :: Decode CreateFpgaImageRequest where decode = genericDecode options
instance encodeCreateFpgaImageRequest :: Encode CreateFpgaImageRequest where encode = genericEncode options

-- | Constructs CreateFpgaImageRequest from required parameters
newCreateFpgaImageRequest :: StorageLocation -> CreateFpgaImageRequest
newCreateFpgaImageRequest _InputStorageLocation = CreateFpgaImageRequest { "InputStorageLocation": _InputStorageLocation, "ClientToken": Nothing, "Description": Nothing, "DryRun": Nothing, "LogsStorageLocation": Nothing, "Name": Nothing }

-- | Constructs CreateFpgaImageRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateFpgaImageRequest' :: StorageLocation -> ( { "DryRun" :: Maybe (Boolean) , "InputStorageLocation" :: (StorageLocation) , "LogsStorageLocation" :: Maybe (StorageLocation) , "Description" :: Maybe (String) , "Name" :: Maybe (String) , "ClientToken" :: Maybe (String) } -> {"DryRun" :: Maybe (Boolean) , "InputStorageLocation" :: (StorageLocation) , "LogsStorageLocation" :: Maybe (StorageLocation) , "Description" :: Maybe (String) , "Name" :: Maybe (String) , "ClientToken" :: Maybe (String) } ) -> CreateFpgaImageRequest
newCreateFpgaImageRequest' _InputStorageLocation customize = (CreateFpgaImageRequest <<< customize) { "InputStorageLocation": _InputStorageLocation, "ClientToken": Nothing, "Description": Nothing, "DryRun": Nothing, "LogsStorageLocation": Nothing, "Name": Nothing }



newtype CreateFpgaImageResult = CreateFpgaImageResult 
  { "FpgaImageId" :: Maybe (String)
  , "FpgaImageGlobalId" :: Maybe (String)
  }
derive instance newtypeCreateFpgaImageResult :: Newtype CreateFpgaImageResult _
derive instance repGenericCreateFpgaImageResult :: Generic CreateFpgaImageResult _
instance showCreateFpgaImageResult :: Show CreateFpgaImageResult where show = genericShow
instance decodeCreateFpgaImageResult :: Decode CreateFpgaImageResult where decode = genericDecode options
instance encodeCreateFpgaImageResult :: Encode CreateFpgaImageResult where encode = genericEncode options

-- | Constructs CreateFpgaImageResult from required parameters
newCreateFpgaImageResult :: CreateFpgaImageResult
newCreateFpgaImageResult  = CreateFpgaImageResult { "FpgaImageGlobalId": Nothing, "FpgaImageId": Nothing }

-- | Constructs CreateFpgaImageResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateFpgaImageResult' :: ( { "FpgaImageId" :: Maybe (String) , "FpgaImageGlobalId" :: Maybe (String) } -> {"FpgaImageId" :: Maybe (String) , "FpgaImageGlobalId" :: Maybe (String) } ) -> CreateFpgaImageResult
newCreateFpgaImageResult'  customize = (CreateFpgaImageResult <<< customize) { "FpgaImageGlobalId": Nothing, "FpgaImageId": Nothing }



-- | <p>Contains the parameters for CreateImage.</p>
newtype CreateImageRequest = CreateImageRequest 
  { "BlockDeviceMappings" :: Maybe (BlockDeviceMappingRequestList)
  , "Description" :: Maybe (String)
  , "DryRun" :: Maybe (Boolean)
  , "InstanceId" :: (String)
  , "Name" :: (String)
  , "NoReboot" :: Maybe (Boolean)
  }
derive instance newtypeCreateImageRequest :: Newtype CreateImageRequest _
derive instance repGenericCreateImageRequest :: Generic CreateImageRequest _
instance showCreateImageRequest :: Show CreateImageRequest where show = genericShow
instance decodeCreateImageRequest :: Decode CreateImageRequest where decode = genericDecode options
instance encodeCreateImageRequest :: Encode CreateImageRequest where encode = genericEncode options

-- | Constructs CreateImageRequest from required parameters
newCreateImageRequest :: String -> String -> CreateImageRequest
newCreateImageRequest _InstanceId _Name = CreateImageRequest { "InstanceId": _InstanceId, "Name": _Name, "BlockDeviceMappings": Nothing, "Description": Nothing, "DryRun": Nothing, "NoReboot": Nothing }

-- | Constructs CreateImageRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateImageRequest' :: String -> String -> ( { "BlockDeviceMappings" :: Maybe (BlockDeviceMappingRequestList) , "Description" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "InstanceId" :: (String) , "Name" :: (String) , "NoReboot" :: Maybe (Boolean) } -> {"BlockDeviceMappings" :: Maybe (BlockDeviceMappingRequestList) , "Description" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "InstanceId" :: (String) , "Name" :: (String) , "NoReboot" :: Maybe (Boolean) } ) -> CreateImageRequest
newCreateImageRequest' _InstanceId _Name customize = (CreateImageRequest <<< customize) { "InstanceId": _InstanceId, "Name": _Name, "BlockDeviceMappings": Nothing, "Description": Nothing, "DryRun": Nothing, "NoReboot": Nothing }



-- | <p>Contains the output of CreateImage.</p>
newtype CreateImageResult = CreateImageResult 
  { "ImageId" :: Maybe (String)
  }
derive instance newtypeCreateImageResult :: Newtype CreateImageResult _
derive instance repGenericCreateImageResult :: Generic CreateImageResult _
instance showCreateImageResult :: Show CreateImageResult where show = genericShow
instance decodeCreateImageResult :: Decode CreateImageResult where decode = genericDecode options
instance encodeCreateImageResult :: Encode CreateImageResult where encode = genericEncode options

-- | Constructs CreateImageResult from required parameters
newCreateImageResult :: CreateImageResult
newCreateImageResult  = CreateImageResult { "ImageId": Nothing }

-- | Constructs CreateImageResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateImageResult' :: ( { "ImageId" :: Maybe (String) } -> {"ImageId" :: Maybe (String) } ) -> CreateImageResult
newCreateImageResult'  customize = (CreateImageResult <<< customize) { "ImageId": Nothing }



-- | <p>Contains the parameters for CreateInstanceExportTask.</p>
newtype CreateInstanceExportTaskRequest = CreateInstanceExportTaskRequest 
  { "Description" :: Maybe (String)
  , "ExportToS3Task" :: Maybe (ExportToS3TaskSpecification)
  , "InstanceId" :: (String)
  , "TargetEnvironment" :: Maybe (ExportEnvironment)
  }
derive instance newtypeCreateInstanceExportTaskRequest :: Newtype CreateInstanceExportTaskRequest _
derive instance repGenericCreateInstanceExportTaskRequest :: Generic CreateInstanceExportTaskRequest _
instance showCreateInstanceExportTaskRequest :: Show CreateInstanceExportTaskRequest where show = genericShow
instance decodeCreateInstanceExportTaskRequest :: Decode CreateInstanceExportTaskRequest where decode = genericDecode options
instance encodeCreateInstanceExportTaskRequest :: Encode CreateInstanceExportTaskRequest where encode = genericEncode options

-- | Constructs CreateInstanceExportTaskRequest from required parameters
newCreateInstanceExportTaskRequest :: String -> CreateInstanceExportTaskRequest
newCreateInstanceExportTaskRequest _InstanceId = CreateInstanceExportTaskRequest { "InstanceId": _InstanceId, "Description": Nothing, "ExportToS3Task": Nothing, "TargetEnvironment": Nothing }

-- | Constructs CreateInstanceExportTaskRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateInstanceExportTaskRequest' :: String -> ( { "Description" :: Maybe (String) , "ExportToS3Task" :: Maybe (ExportToS3TaskSpecification) , "InstanceId" :: (String) , "TargetEnvironment" :: Maybe (ExportEnvironment) } -> {"Description" :: Maybe (String) , "ExportToS3Task" :: Maybe (ExportToS3TaskSpecification) , "InstanceId" :: (String) , "TargetEnvironment" :: Maybe (ExportEnvironment) } ) -> CreateInstanceExportTaskRequest
newCreateInstanceExportTaskRequest' _InstanceId customize = (CreateInstanceExportTaskRequest <<< customize) { "InstanceId": _InstanceId, "Description": Nothing, "ExportToS3Task": Nothing, "TargetEnvironment": Nothing }



-- | <p>Contains the output for CreateInstanceExportTask.</p>
newtype CreateInstanceExportTaskResult = CreateInstanceExportTaskResult 
  { "ExportTask" :: Maybe (ExportTask)
  }
derive instance newtypeCreateInstanceExportTaskResult :: Newtype CreateInstanceExportTaskResult _
derive instance repGenericCreateInstanceExportTaskResult :: Generic CreateInstanceExportTaskResult _
instance showCreateInstanceExportTaskResult :: Show CreateInstanceExportTaskResult where show = genericShow
instance decodeCreateInstanceExportTaskResult :: Decode CreateInstanceExportTaskResult where decode = genericDecode options
instance encodeCreateInstanceExportTaskResult :: Encode CreateInstanceExportTaskResult where encode = genericEncode options

-- | Constructs CreateInstanceExportTaskResult from required parameters
newCreateInstanceExportTaskResult :: CreateInstanceExportTaskResult
newCreateInstanceExportTaskResult  = CreateInstanceExportTaskResult { "ExportTask": Nothing }

-- | Constructs CreateInstanceExportTaskResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateInstanceExportTaskResult' :: ( { "ExportTask" :: Maybe (ExportTask) } -> {"ExportTask" :: Maybe (ExportTask) } ) -> CreateInstanceExportTaskResult
newCreateInstanceExportTaskResult'  customize = (CreateInstanceExportTaskResult <<< customize) { "ExportTask": Nothing }



-- | <p>Contains the parameters for CreateInternetGateway.</p>
newtype CreateInternetGatewayRequest = CreateInternetGatewayRequest 
  { "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeCreateInternetGatewayRequest :: Newtype CreateInternetGatewayRequest _
derive instance repGenericCreateInternetGatewayRequest :: Generic CreateInternetGatewayRequest _
instance showCreateInternetGatewayRequest :: Show CreateInternetGatewayRequest where show = genericShow
instance decodeCreateInternetGatewayRequest :: Decode CreateInternetGatewayRequest where decode = genericDecode options
instance encodeCreateInternetGatewayRequest :: Encode CreateInternetGatewayRequest where encode = genericEncode options

-- | Constructs CreateInternetGatewayRequest from required parameters
newCreateInternetGatewayRequest :: CreateInternetGatewayRequest
newCreateInternetGatewayRequest  = CreateInternetGatewayRequest { "DryRun": Nothing }

-- | Constructs CreateInternetGatewayRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateInternetGatewayRequest' :: ( { "DryRun" :: Maybe (Boolean) } -> {"DryRun" :: Maybe (Boolean) } ) -> CreateInternetGatewayRequest
newCreateInternetGatewayRequest'  customize = (CreateInternetGatewayRequest <<< customize) { "DryRun": Nothing }



-- | <p>Contains the output of CreateInternetGateway.</p>
newtype CreateInternetGatewayResult = CreateInternetGatewayResult 
  { "InternetGateway" :: Maybe (InternetGateway)
  }
derive instance newtypeCreateInternetGatewayResult :: Newtype CreateInternetGatewayResult _
derive instance repGenericCreateInternetGatewayResult :: Generic CreateInternetGatewayResult _
instance showCreateInternetGatewayResult :: Show CreateInternetGatewayResult where show = genericShow
instance decodeCreateInternetGatewayResult :: Decode CreateInternetGatewayResult where decode = genericDecode options
instance encodeCreateInternetGatewayResult :: Encode CreateInternetGatewayResult where encode = genericEncode options

-- | Constructs CreateInternetGatewayResult from required parameters
newCreateInternetGatewayResult :: CreateInternetGatewayResult
newCreateInternetGatewayResult  = CreateInternetGatewayResult { "InternetGateway": Nothing }

-- | Constructs CreateInternetGatewayResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateInternetGatewayResult' :: ( { "InternetGateway" :: Maybe (InternetGateway) } -> {"InternetGateway" :: Maybe (InternetGateway) } ) -> CreateInternetGatewayResult
newCreateInternetGatewayResult'  customize = (CreateInternetGatewayResult <<< customize) { "InternetGateway": Nothing }



-- | <p>Contains the parameters for CreateKeyPair.</p>
newtype CreateKeyPairRequest = CreateKeyPairRequest 
  { "KeyName" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeCreateKeyPairRequest :: Newtype CreateKeyPairRequest _
derive instance repGenericCreateKeyPairRequest :: Generic CreateKeyPairRequest _
instance showCreateKeyPairRequest :: Show CreateKeyPairRequest where show = genericShow
instance decodeCreateKeyPairRequest :: Decode CreateKeyPairRequest where decode = genericDecode options
instance encodeCreateKeyPairRequest :: Encode CreateKeyPairRequest where encode = genericEncode options

-- | Constructs CreateKeyPairRequest from required parameters
newCreateKeyPairRequest :: String -> CreateKeyPairRequest
newCreateKeyPairRequest _KeyName = CreateKeyPairRequest { "KeyName": _KeyName, "DryRun": Nothing }

-- | Constructs CreateKeyPairRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateKeyPairRequest' :: String -> ( { "KeyName" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"KeyName" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> CreateKeyPairRequest
newCreateKeyPairRequest' _KeyName customize = (CreateKeyPairRequest <<< customize) { "KeyName": _KeyName, "DryRun": Nothing }



newtype CreateLaunchTemplateRequest = CreateLaunchTemplateRequest 
  { "DryRun" :: Maybe (Boolean)
  , "ClientToken" :: Maybe (String)
  , "LaunchTemplateName" :: (LaunchTemplateName)
  , "VersionDescription" :: Maybe (VersionDescription)
  , "LaunchTemplateData" :: (RequestLaunchTemplateData)
  }
derive instance newtypeCreateLaunchTemplateRequest :: Newtype CreateLaunchTemplateRequest _
derive instance repGenericCreateLaunchTemplateRequest :: Generic CreateLaunchTemplateRequest _
instance showCreateLaunchTemplateRequest :: Show CreateLaunchTemplateRequest where show = genericShow
instance decodeCreateLaunchTemplateRequest :: Decode CreateLaunchTemplateRequest where decode = genericDecode options
instance encodeCreateLaunchTemplateRequest :: Encode CreateLaunchTemplateRequest where encode = genericEncode options

-- | Constructs CreateLaunchTemplateRequest from required parameters
newCreateLaunchTemplateRequest :: RequestLaunchTemplateData -> LaunchTemplateName -> CreateLaunchTemplateRequest
newCreateLaunchTemplateRequest _LaunchTemplateData _LaunchTemplateName = CreateLaunchTemplateRequest { "LaunchTemplateData": _LaunchTemplateData, "LaunchTemplateName": _LaunchTemplateName, "ClientToken": Nothing, "DryRun": Nothing, "VersionDescription": Nothing }

-- | Constructs CreateLaunchTemplateRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateLaunchTemplateRequest' :: RequestLaunchTemplateData -> LaunchTemplateName -> ( { "DryRun" :: Maybe (Boolean) , "ClientToken" :: Maybe (String) , "LaunchTemplateName" :: (LaunchTemplateName) , "VersionDescription" :: Maybe (VersionDescription) , "LaunchTemplateData" :: (RequestLaunchTemplateData) } -> {"DryRun" :: Maybe (Boolean) , "ClientToken" :: Maybe (String) , "LaunchTemplateName" :: (LaunchTemplateName) , "VersionDescription" :: Maybe (VersionDescription) , "LaunchTemplateData" :: (RequestLaunchTemplateData) } ) -> CreateLaunchTemplateRequest
newCreateLaunchTemplateRequest' _LaunchTemplateData _LaunchTemplateName customize = (CreateLaunchTemplateRequest <<< customize) { "LaunchTemplateData": _LaunchTemplateData, "LaunchTemplateName": _LaunchTemplateName, "ClientToken": Nothing, "DryRun": Nothing, "VersionDescription": Nothing }



newtype CreateLaunchTemplateResult = CreateLaunchTemplateResult 
  { "LaunchTemplate" :: Maybe (LaunchTemplate)
  }
derive instance newtypeCreateLaunchTemplateResult :: Newtype CreateLaunchTemplateResult _
derive instance repGenericCreateLaunchTemplateResult :: Generic CreateLaunchTemplateResult _
instance showCreateLaunchTemplateResult :: Show CreateLaunchTemplateResult where show = genericShow
instance decodeCreateLaunchTemplateResult :: Decode CreateLaunchTemplateResult where decode = genericDecode options
instance encodeCreateLaunchTemplateResult :: Encode CreateLaunchTemplateResult where encode = genericEncode options

-- | Constructs CreateLaunchTemplateResult from required parameters
newCreateLaunchTemplateResult :: CreateLaunchTemplateResult
newCreateLaunchTemplateResult  = CreateLaunchTemplateResult { "LaunchTemplate": Nothing }

-- | Constructs CreateLaunchTemplateResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateLaunchTemplateResult' :: ( { "LaunchTemplate" :: Maybe (LaunchTemplate) } -> {"LaunchTemplate" :: Maybe (LaunchTemplate) } ) -> CreateLaunchTemplateResult
newCreateLaunchTemplateResult'  customize = (CreateLaunchTemplateResult <<< customize) { "LaunchTemplate": Nothing }



newtype CreateLaunchTemplateVersionRequest = CreateLaunchTemplateVersionRequest 
  { "DryRun" :: Maybe (Boolean)
  , "ClientToken" :: Maybe (String)
  , "LaunchTemplateId" :: Maybe (String)
  , "LaunchTemplateName" :: Maybe (LaunchTemplateName)
  , "SourceVersion" :: Maybe (String)
  , "VersionDescription" :: Maybe (VersionDescription)
  , "LaunchTemplateData" :: (RequestLaunchTemplateData)
  }
derive instance newtypeCreateLaunchTemplateVersionRequest :: Newtype CreateLaunchTemplateVersionRequest _
derive instance repGenericCreateLaunchTemplateVersionRequest :: Generic CreateLaunchTemplateVersionRequest _
instance showCreateLaunchTemplateVersionRequest :: Show CreateLaunchTemplateVersionRequest where show = genericShow
instance decodeCreateLaunchTemplateVersionRequest :: Decode CreateLaunchTemplateVersionRequest where decode = genericDecode options
instance encodeCreateLaunchTemplateVersionRequest :: Encode CreateLaunchTemplateVersionRequest where encode = genericEncode options

-- | Constructs CreateLaunchTemplateVersionRequest from required parameters
newCreateLaunchTemplateVersionRequest :: RequestLaunchTemplateData -> CreateLaunchTemplateVersionRequest
newCreateLaunchTemplateVersionRequest _LaunchTemplateData = CreateLaunchTemplateVersionRequest { "LaunchTemplateData": _LaunchTemplateData, "ClientToken": Nothing, "DryRun": Nothing, "LaunchTemplateId": Nothing, "LaunchTemplateName": Nothing, "SourceVersion": Nothing, "VersionDescription": Nothing }

-- | Constructs CreateLaunchTemplateVersionRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateLaunchTemplateVersionRequest' :: RequestLaunchTemplateData -> ( { "DryRun" :: Maybe (Boolean) , "ClientToken" :: Maybe (String) , "LaunchTemplateId" :: Maybe (String) , "LaunchTemplateName" :: Maybe (LaunchTemplateName) , "SourceVersion" :: Maybe (String) , "VersionDescription" :: Maybe (VersionDescription) , "LaunchTemplateData" :: (RequestLaunchTemplateData) } -> {"DryRun" :: Maybe (Boolean) , "ClientToken" :: Maybe (String) , "LaunchTemplateId" :: Maybe (String) , "LaunchTemplateName" :: Maybe (LaunchTemplateName) , "SourceVersion" :: Maybe (String) , "VersionDescription" :: Maybe (VersionDescription) , "LaunchTemplateData" :: (RequestLaunchTemplateData) } ) -> CreateLaunchTemplateVersionRequest
newCreateLaunchTemplateVersionRequest' _LaunchTemplateData customize = (CreateLaunchTemplateVersionRequest <<< customize) { "LaunchTemplateData": _LaunchTemplateData, "ClientToken": Nothing, "DryRun": Nothing, "LaunchTemplateId": Nothing, "LaunchTemplateName": Nothing, "SourceVersion": Nothing, "VersionDescription": Nothing }



newtype CreateLaunchTemplateVersionResult = CreateLaunchTemplateVersionResult 
  { "LaunchTemplateVersion" :: Maybe (LaunchTemplateVersion)
  }
derive instance newtypeCreateLaunchTemplateVersionResult :: Newtype CreateLaunchTemplateVersionResult _
derive instance repGenericCreateLaunchTemplateVersionResult :: Generic CreateLaunchTemplateVersionResult _
instance showCreateLaunchTemplateVersionResult :: Show CreateLaunchTemplateVersionResult where show = genericShow
instance decodeCreateLaunchTemplateVersionResult :: Decode CreateLaunchTemplateVersionResult where decode = genericDecode options
instance encodeCreateLaunchTemplateVersionResult :: Encode CreateLaunchTemplateVersionResult where encode = genericEncode options

-- | Constructs CreateLaunchTemplateVersionResult from required parameters
newCreateLaunchTemplateVersionResult :: CreateLaunchTemplateVersionResult
newCreateLaunchTemplateVersionResult  = CreateLaunchTemplateVersionResult { "LaunchTemplateVersion": Nothing }

-- | Constructs CreateLaunchTemplateVersionResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateLaunchTemplateVersionResult' :: ( { "LaunchTemplateVersion" :: Maybe (LaunchTemplateVersion) } -> {"LaunchTemplateVersion" :: Maybe (LaunchTemplateVersion) } ) -> CreateLaunchTemplateVersionResult
newCreateLaunchTemplateVersionResult'  customize = (CreateLaunchTemplateVersionResult <<< customize) { "LaunchTemplateVersion": Nothing }



-- | <p>Contains the parameters for CreateNatGateway.</p>
newtype CreateNatGatewayRequest = CreateNatGatewayRequest 
  { "AllocationId" :: (String)
  , "ClientToken" :: Maybe (String)
  , "SubnetId" :: (String)
  }
derive instance newtypeCreateNatGatewayRequest :: Newtype CreateNatGatewayRequest _
derive instance repGenericCreateNatGatewayRequest :: Generic CreateNatGatewayRequest _
instance showCreateNatGatewayRequest :: Show CreateNatGatewayRequest where show = genericShow
instance decodeCreateNatGatewayRequest :: Decode CreateNatGatewayRequest where decode = genericDecode options
instance encodeCreateNatGatewayRequest :: Encode CreateNatGatewayRequest where encode = genericEncode options

-- | Constructs CreateNatGatewayRequest from required parameters
newCreateNatGatewayRequest :: String -> String -> CreateNatGatewayRequest
newCreateNatGatewayRequest _AllocationId _SubnetId = CreateNatGatewayRequest { "AllocationId": _AllocationId, "SubnetId": _SubnetId, "ClientToken": Nothing }

-- | Constructs CreateNatGatewayRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateNatGatewayRequest' :: String -> String -> ( { "AllocationId" :: (String) , "ClientToken" :: Maybe (String) , "SubnetId" :: (String) } -> {"AllocationId" :: (String) , "ClientToken" :: Maybe (String) , "SubnetId" :: (String) } ) -> CreateNatGatewayRequest
newCreateNatGatewayRequest' _AllocationId _SubnetId customize = (CreateNatGatewayRequest <<< customize) { "AllocationId": _AllocationId, "SubnetId": _SubnetId, "ClientToken": Nothing }



-- | <p>Contains the output of CreateNatGateway.</p>
newtype CreateNatGatewayResult = CreateNatGatewayResult 
  { "ClientToken" :: Maybe (String)
  , "NatGateway" :: Maybe (NatGateway)
  }
derive instance newtypeCreateNatGatewayResult :: Newtype CreateNatGatewayResult _
derive instance repGenericCreateNatGatewayResult :: Generic CreateNatGatewayResult _
instance showCreateNatGatewayResult :: Show CreateNatGatewayResult where show = genericShow
instance decodeCreateNatGatewayResult :: Decode CreateNatGatewayResult where decode = genericDecode options
instance encodeCreateNatGatewayResult :: Encode CreateNatGatewayResult where encode = genericEncode options

-- | Constructs CreateNatGatewayResult from required parameters
newCreateNatGatewayResult :: CreateNatGatewayResult
newCreateNatGatewayResult  = CreateNatGatewayResult { "ClientToken": Nothing, "NatGateway": Nothing }

-- | Constructs CreateNatGatewayResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateNatGatewayResult' :: ( { "ClientToken" :: Maybe (String) , "NatGateway" :: Maybe (NatGateway) } -> {"ClientToken" :: Maybe (String) , "NatGateway" :: Maybe (NatGateway) } ) -> CreateNatGatewayResult
newCreateNatGatewayResult'  customize = (CreateNatGatewayResult <<< customize) { "ClientToken": Nothing, "NatGateway": Nothing }



-- | <p>Contains the parameters for CreateNetworkAclEntry.</p>
newtype CreateNetworkAclEntryRequest = CreateNetworkAclEntryRequest 
  { "CidrBlock" :: Maybe (String)
  , "DryRun" :: Maybe (Boolean)
  , "Egress" :: (Boolean)
  , "IcmpTypeCode" :: Maybe (IcmpTypeCode)
  , "Ipv6CidrBlock" :: Maybe (String)
  , "NetworkAclId" :: (String)
  , "PortRange" :: Maybe (PortRange)
  , "Protocol" :: (String)
  , "RuleAction" :: (RuleAction)
  , "RuleNumber" :: (Int)
  }
derive instance newtypeCreateNetworkAclEntryRequest :: Newtype CreateNetworkAclEntryRequest _
derive instance repGenericCreateNetworkAclEntryRequest :: Generic CreateNetworkAclEntryRequest _
instance showCreateNetworkAclEntryRequest :: Show CreateNetworkAclEntryRequest where show = genericShow
instance decodeCreateNetworkAclEntryRequest :: Decode CreateNetworkAclEntryRequest where decode = genericDecode options
instance encodeCreateNetworkAclEntryRequest :: Encode CreateNetworkAclEntryRequest where encode = genericEncode options

-- | Constructs CreateNetworkAclEntryRequest from required parameters
newCreateNetworkAclEntryRequest :: Boolean -> String -> String -> RuleAction -> Int -> CreateNetworkAclEntryRequest
newCreateNetworkAclEntryRequest _Egress _NetworkAclId _Protocol _RuleAction _RuleNumber = CreateNetworkAclEntryRequest { "Egress": _Egress, "NetworkAclId": _NetworkAclId, "Protocol": _Protocol, "RuleAction": _RuleAction, "RuleNumber": _RuleNumber, "CidrBlock": Nothing, "DryRun": Nothing, "IcmpTypeCode": Nothing, "Ipv6CidrBlock": Nothing, "PortRange": Nothing }

-- | Constructs CreateNetworkAclEntryRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateNetworkAclEntryRequest' :: Boolean -> String -> String -> RuleAction -> Int -> ( { "CidrBlock" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "Egress" :: (Boolean) , "IcmpTypeCode" :: Maybe (IcmpTypeCode) , "Ipv6CidrBlock" :: Maybe (String) , "NetworkAclId" :: (String) , "PortRange" :: Maybe (PortRange) , "Protocol" :: (String) , "RuleAction" :: (RuleAction) , "RuleNumber" :: (Int) } -> {"CidrBlock" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "Egress" :: (Boolean) , "IcmpTypeCode" :: Maybe (IcmpTypeCode) , "Ipv6CidrBlock" :: Maybe (String) , "NetworkAclId" :: (String) , "PortRange" :: Maybe (PortRange) , "Protocol" :: (String) , "RuleAction" :: (RuleAction) , "RuleNumber" :: (Int) } ) -> CreateNetworkAclEntryRequest
newCreateNetworkAclEntryRequest' _Egress _NetworkAclId _Protocol _RuleAction _RuleNumber customize = (CreateNetworkAclEntryRequest <<< customize) { "Egress": _Egress, "NetworkAclId": _NetworkAclId, "Protocol": _Protocol, "RuleAction": _RuleAction, "RuleNumber": _RuleNumber, "CidrBlock": Nothing, "DryRun": Nothing, "IcmpTypeCode": Nothing, "Ipv6CidrBlock": Nothing, "PortRange": Nothing }



-- | <p>Contains the parameters for CreateNetworkAcl.</p>
newtype CreateNetworkAclRequest = CreateNetworkAclRequest 
  { "DryRun" :: Maybe (Boolean)
  , "VpcId" :: (String)
  }
derive instance newtypeCreateNetworkAclRequest :: Newtype CreateNetworkAclRequest _
derive instance repGenericCreateNetworkAclRequest :: Generic CreateNetworkAclRequest _
instance showCreateNetworkAclRequest :: Show CreateNetworkAclRequest where show = genericShow
instance decodeCreateNetworkAclRequest :: Decode CreateNetworkAclRequest where decode = genericDecode options
instance encodeCreateNetworkAclRequest :: Encode CreateNetworkAclRequest where encode = genericEncode options

-- | Constructs CreateNetworkAclRequest from required parameters
newCreateNetworkAclRequest :: String -> CreateNetworkAclRequest
newCreateNetworkAclRequest _VpcId = CreateNetworkAclRequest { "VpcId": _VpcId, "DryRun": Nothing }

-- | Constructs CreateNetworkAclRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateNetworkAclRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "VpcId" :: (String) } -> {"DryRun" :: Maybe (Boolean) , "VpcId" :: (String) } ) -> CreateNetworkAclRequest
newCreateNetworkAclRequest' _VpcId customize = (CreateNetworkAclRequest <<< customize) { "VpcId": _VpcId, "DryRun": Nothing }



-- | <p>Contains the output of CreateNetworkAcl.</p>
newtype CreateNetworkAclResult = CreateNetworkAclResult 
  { "NetworkAcl" :: Maybe (NetworkAcl)
  }
derive instance newtypeCreateNetworkAclResult :: Newtype CreateNetworkAclResult _
derive instance repGenericCreateNetworkAclResult :: Generic CreateNetworkAclResult _
instance showCreateNetworkAclResult :: Show CreateNetworkAclResult where show = genericShow
instance decodeCreateNetworkAclResult :: Decode CreateNetworkAclResult where decode = genericDecode options
instance encodeCreateNetworkAclResult :: Encode CreateNetworkAclResult where encode = genericEncode options

-- | Constructs CreateNetworkAclResult from required parameters
newCreateNetworkAclResult :: CreateNetworkAclResult
newCreateNetworkAclResult  = CreateNetworkAclResult { "NetworkAcl": Nothing }

-- | Constructs CreateNetworkAclResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateNetworkAclResult' :: ( { "NetworkAcl" :: Maybe (NetworkAcl) } -> {"NetworkAcl" :: Maybe (NetworkAcl) } ) -> CreateNetworkAclResult
newCreateNetworkAclResult'  customize = (CreateNetworkAclResult <<< customize) { "NetworkAcl": Nothing }



-- | <p>Contains the parameters for CreateNetworkInterfacePermission.</p>
newtype CreateNetworkInterfacePermissionRequest = CreateNetworkInterfacePermissionRequest 
  { "NetworkInterfaceId" :: (String)
  , "AwsAccountId" :: Maybe (String)
  , "AwsService" :: Maybe (String)
  , "Permission" :: (InterfacePermissionType)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeCreateNetworkInterfacePermissionRequest :: Newtype CreateNetworkInterfacePermissionRequest _
derive instance repGenericCreateNetworkInterfacePermissionRequest :: Generic CreateNetworkInterfacePermissionRequest _
instance showCreateNetworkInterfacePermissionRequest :: Show CreateNetworkInterfacePermissionRequest where show = genericShow
instance decodeCreateNetworkInterfacePermissionRequest :: Decode CreateNetworkInterfacePermissionRequest where decode = genericDecode options
instance encodeCreateNetworkInterfacePermissionRequest :: Encode CreateNetworkInterfacePermissionRequest where encode = genericEncode options

-- | Constructs CreateNetworkInterfacePermissionRequest from required parameters
newCreateNetworkInterfacePermissionRequest :: String -> InterfacePermissionType -> CreateNetworkInterfacePermissionRequest
newCreateNetworkInterfacePermissionRequest _NetworkInterfaceId _Permission = CreateNetworkInterfacePermissionRequest { "NetworkInterfaceId": _NetworkInterfaceId, "Permission": _Permission, "AwsAccountId": Nothing, "AwsService": Nothing, "DryRun": Nothing }

-- | Constructs CreateNetworkInterfacePermissionRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateNetworkInterfacePermissionRequest' :: String -> InterfacePermissionType -> ( { "NetworkInterfaceId" :: (String) , "AwsAccountId" :: Maybe (String) , "AwsService" :: Maybe (String) , "Permission" :: (InterfacePermissionType) , "DryRun" :: Maybe (Boolean) } -> {"NetworkInterfaceId" :: (String) , "AwsAccountId" :: Maybe (String) , "AwsService" :: Maybe (String) , "Permission" :: (InterfacePermissionType) , "DryRun" :: Maybe (Boolean) } ) -> CreateNetworkInterfacePermissionRequest
newCreateNetworkInterfacePermissionRequest' _NetworkInterfaceId _Permission customize = (CreateNetworkInterfacePermissionRequest <<< customize) { "NetworkInterfaceId": _NetworkInterfaceId, "Permission": _Permission, "AwsAccountId": Nothing, "AwsService": Nothing, "DryRun": Nothing }



-- | <p>Contains the output of CreateNetworkInterfacePermission.</p>
newtype CreateNetworkInterfacePermissionResult = CreateNetworkInterfacePermissionResult 
  { "InterfacePermission" :: Maybe (NetworkInterfacePermission)
  }
derive instance newtypeCreateNetworkInterfacePermissionResult :: Newtype CreateNetworkInterfacePermissionResult _
derive instance repGenericCreateNetworkInterfacePermissionResult :: Generic CreateNetworkInterfacePermissionResult _
instance showCreateNetworkInterfacePermissionResult :: Show CreateNetworkInterfacePermissionResult where show = genericShow
instance decodeCreateNetworkInterfacePermissionResult :: Decode CreateNetworkInterfacePermissionResult where decode = genericDecode options
instance encodeCreateNetworkInterfacePermissionResult :: Encode CreateNetworkInterfacePermissionResult where encode = genericEncode options

-- | Constructs CreateNetworkInterfacePermissionResult from required parameters
newCreateNetworkInterfacePermissionResult :: CreateNetworkInterfacePermissionResult
newCreateNetworkInterfacePermissionResult  = CreateNetworkInterfacePermissionResult { "InterfacePermission": Nothing }

-- | Constructs CreateNetworkInterfacePermissionResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateNetworkInterfacePermissionResult' :: ( { "InterfacePermission" :: Maybe (NetworkInterfacePermission) } -> {"InterfacePermission" :: Maybe (NetworkInterfacePermission) } ) -> CreateNetworkInterfacePermissionResult
newCreateNetworkInterfacePermissionResult'  customize = (CreateNetworkInterfacePermissionResult <<< customize) { "InterfacePermission": Nothing }



-- | <p>Contains the parameters for CreateNetworkInterface.</p>
newtype CreateNetworkInterfaceRequest = CreateNetworkInterfaceRequest 
  { "Description" :: Maybe (String)
  , "DryRun" :: Maybe (Boolean)
  , "Groups" :: Maybe (SecurityGroupIdStringList)
  , "Ipv6AddressCount" :: Maybe (Int)
  , "Ipv6Addresses" :: Maybe (InstanceIpv6AddressList)
  , "PrivateIpAddress" :: Maybe (String)
  , "PrivateIpAddresses" :: Maybe (PrivateIpAddressSpecificationList)
  , "SecondaryPrivateIpAddressCount" :: Maybe (Int)
  , "SubnetId" :: (String)
  }
derive instance newtypeCreateNetworkInterfaceRequest :: Newtype CreateNetworkInterfaceRequest _
derive instance repGenericCreateNetworkInterfaceRequest :: Generic CreateNetworkInterfaceRequest _
instance showCreateNetworkInterfaceRequest :: Show CreateNetworkInterfaceRequest where show = genericShow
instance decodeCreateNetworkInterfaceRequest :: Decode CreateNetworkInterfaceRequest where decode = genericDecode options
instance encodeCreateNetworkInterfaceRequest :: Encode CreateNetworkInterfaceRequest where encode = genericEncode options

-- | Constructs CreateNetworkInterfaceRequest from required parameters
newCreateNetworkInterfaceRequest :: String -> CreateNetworkInterfaceRequest
newCreateNetworkInterfaceRequest _SubnetId = CreateNetworkInterfaceRequest { "SubnetId": _SubnetId, "Description": Nothing, "DryRun": Nothing, "Groups": Nothing, "Ipv6AddressCount": Nothing, "Ipv6Addresses": Nothing, "PrivateIpAddress": Nothing, "PrivateIpAddresses": Nothing, "SecondaryPrivateIpAddressCount": Nothing }

-- | Constructs CreateNetworkInterfaceRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateNetworkInterfaceRequest' :: String -> ( { "Description" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "Groups" :: Maybe (SecurityGroupIdStringList) , "Ipv6AddressCount" :: Maybe (Int) , "Ipv6Addresses" :: Maybe (InstanceIpv6AddressList) , "PrivateIpAddress" :: Maybe (String) , "PrivateIpAddresses" :: Maybe (PrivateIpAddressSpecificationList) , "SecondaryPrivateIpAddressCount" :: Maybe (Int) , "SubnetId" :: (String) } -> {"Description" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "Groups" :: Maybe (SecurityGroupIdStringList) , "Ipv6AddressCount" :: Maybe (Int) , "Ipv6Addresses" :: Maybe (InstanceIpv6AddressList) , "PrivateIpAddress" :: Maybe (String) , "PrivateIpAddresses" :: Maybe (PrivateIpAddressSpecificationList) , "SecondaryPrivateIpAddressCount" :: Maybe (Int) , "SubnetId" :: (String) } ) -> CreateNetworkInterfaceRequest
newCreateNetworkInterfaceRequest' _SubnetId customize = (CreateNetworkInterfaceRequest <<< customize) { "SubnetId": _SubnetId, "Description": Nothing, "DryRun": Nothing, "Groups": Nothing, "Ipv6AddressCount": Nothing, "Ipv6Addresses": Nothing, "PrivateIpAddress": Nothing, "PrivateIpAddresses": Nothing, "SecondaryPrivateIpAddressCount": Nothing }



-- | <p>Contains the output of CreateNetworkInterface.</p>
newtype CreateNetworkInterfaceResult = CreateNetworkInterfaceResult 
  { "NetworkInterface" :: Maybe (NetworkInterface)
  }
derive instance newtypeCreateNetworkInterfaceResult :: Newtype CreateNetworkInterfaceResult _
derive instance repGenericCreateNetworkInterfaceResult :: Generic CreateNetworkInterfaceResult _
instance showCreateNetworkInterfaceResult :: Show CreateNetworkInterfaceResult where show = genericShow
instance decodeCreateNetworkInterfaceResult :: Decode CreateNetworkInterfaceResult where decode = genericDecode options
instance encodeCreateNetworkInterfaceResult :: Encode CreateNetworkInterfaceResult where encode = genericEncode options

-- | Constructs CreateNetworkInterfaceResult from required parameters
newCreateNetworkInterfaceResult :: CreateNetworkInterfaceResult
newCreateNetworkInterfaceResult  = CreateNetworkInterfaceResult { "NetworkInterface": Nothing }

-- | Constructs CreateNetworkInterfaceResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateNetworkInterfaceResult' :: ( { "NetworkInterface" :: Maybe (NetworkInterface) } -> {"NetworkInterface" :: Maybe (NetworkInterface) } ) -> CreateNetworkInterfaceResult
newCreateNetworkInterfaceResult'  customize = (CreateNetworkInterfaceResult <<< customize) { "NetworkInterface": Nothing }



-- | <p>Contains the parameters for CreatePlacementGroup.</p>
newtype CreatePlacementGroupRequest = CreatePlacementGroupRequest 
  { "DryRun" :: Maybe (Boolean)
  , "GroupName" :: (String)
  , "Strategy" :: (PlacementStrategy)
  }
derive instance newtypeCreatePlacementGroupRequest :: Newtype CreatePlacementGroupRequest _
derive instance repGenericCreatePlacementGroupRequest :: Generic CreatePlacementGroupRequest _
instance showCreatePlacementGroupRequest :: Show CreatePlacementGroupRequest where show = genericShow
instance decodeCreatePlacementGroupRequest :: Decode CreatePlacementGroupRequest where decode = genericDecode options
instance encodeCreatePlacementGroupRequest :: Encode CreatePlacementGroupRequest where encode = genericEncode options

-- | Constructs CreatePlacementGroupRequest from required parameters
newCreatePlacementGroupRequest :: String -> PlacementStrategy -> CreatePlacementGroupRequest
newCreatePlacementGroupRequest _GroupName _Strategy = CreatePlacementGroupRequest { "GroupName": _GroupName, "Strategy": _Strategy, "DryRun": Nothing }

-- | Constructs CreatePlacementGroupRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreatePlacementGroupRequest' :: String -> PlacementStrategy -> ( { "DryRun" :: Maybe (Boolean) , "GroupName" :: (String) , "Strategy" :: (PlacementStrategy) } -> {"DryRun" :: Maybe (Boolean) , "GroupName" :: (String) , "Strategy" :: (PlacementStrategy) } ) -> CreatePlacementGroupRequest
newCreatePlacementGroupRequest' _GroupName _Strategy customize = (CreatePlacementGroupRequest <<< customize) { "GroupName": _GroupName, "Strategy": _Strategy, "DryRun": Nothing }



-- | <p>Contains the parameters for CreateReservedInstancesListing.</p>
newtype CreateReservedInstancesListingRequest = CreateReservedInstancesListingRequest 
  { "ClientToken" :: (String)
  , "InstanceCount" :: (Int)
  , "PriceSchedules" :: (PriceScheduleSpecificationList)
  , "ReservedInstancesId" :: (String)
  }
derive instance newtypeCreateReservedInstancesListingRequest :: Newtype CreateReservedInstancesListingRequest _
derive instance repGenericCreateReservedInstancesListingRequest :: Generic CreateReservedInstancesListingRequest _
instance showCreateReservedInstancesListingRequest :: Show CreateReservedInstancesListingRequest where show = genericShow
instance decodeCreateReservedInstancesListingRequest :: Decode CreateReservedInstancesListingRequest where decode = genericDecode options
instance encodeCreateReservedInstancesListingRequest :: Encode CreateReservedInstancesListingRequest where encode = genericEncode options

-- | Constructs CreateReservedInstancesListingRequest from required parameters
newCreateReservedInstancesListingRequest :: String -> Int -> PriceScheduleSpecificationList -> String -> CreateReservedInstancesListingRequest
newCreateReservedInstancesListingRequest _ClientToken _InstanceCount _PriceSchedules _ReservedInstancesId = CreateReservedInstancesListingRequest { "ClientToken": _ClientToken, "InstanceCount": _InstanceCount, "PriceSchedules": _PriceSchedules, "ReservedInstancesId": _ReservedInstancesId }

-- | Constructs CreateReservedInstancesListingRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateReservedInstancesListingRequest' :: String -> Int -> PriceScheduleSpecificationList -> String -> ( { "ClientToken" :: (String) , "InstanceCount" :: (Int) , "PriceSchedules" :: (PriceScheduleSpecificationList) , "ReservedInstancesId" :: (String) } -> {"ClientToken" :: (String) , "InstanceCount" :: (Int) , "PriceSchedules" :: (PriceScheduleSpecificationList) , "ReservedInstancesId" :: (String) } ) -> CreateReservedInstancesListingRequest
newCreateReservedInstancesListingRequest' _ClientToken _InstanceCount _PriceSchedules _ReservedInstancesId customize = (CreateReservedInstancesListingRequest <<< customize) { "ClientToken": _ClientToken, "InstanceCount": _InstanceCount, "PriceSchedules": _PriceSchedules, "ReservedInstancesId": _ReservedInstancesId }



-- | <p>Contains the output of CreateReservedInstancesListing.</p>
newtype CreateReservedInstancesListingResult = CreateReservedInstancesListingResult 
  { "ReservedInstancesListings" :: Maybe (ReservedInstancesListingList)
  }
derive instance newtypeCreateReservedInstancesListingResult :: Newtype CreateReservedInstancesListingResult _
derive instance repGenericCreateReservedInstancesListingResult :: Generic CreateReservedInstancesListingResult _
instance showCreateReservedInstancesListingResult :: Show CreateReservedInstancesListingResult where show = genericShow
instance decodeCreateReservedInstancesListingResult :: Decode CreateReservedInstancesListingResult where decode = genericDecode options
instance encodeCreateReservedInstancesListingResult :: Encode CreateReservedInstancesListingResult where encode = genericEncode options

-- | Constructs CreateReservedInstancesListingResult from required parameters
newCreateReservedInstancesListingResult :: CreateReservedInstancesListingResult
newCreateReservedInstancesListingResult  = CreateReservedInstancesListingResult { "ReservedInstancesListings": Nothing }

-- | Constructs CreateReservedInstancesListingResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateReservedInstancesListingResult' :: ( { "ReservedInstancesListings" :: Maybe (ReservedInstancesListingList) } -> {"ReservedInstancesListings" :: Maybe (ReservedInstancesListingList) } ) -> CreateReservedInstancesListingResult
newCreateReservedInstancesListingResult'  customize = (CreateReservedInstancesListingResult <<< customize) { "ReservedInstancesListings": Nothing }



-- | <p>Contains the parameters for CreateRoute.</p>
newtype CreateRouteRequest = CreateRouteRequest 
  { "DestinationCidrBlock" :: Maybe (String)
  , "DestinationIpv6CidrBlock" :: Maybe (String)
  , "DryRun" :: Maybe (Boolean)
  , "EgressOnlyInternetGatewayId" :: Maybe (String)
  , "GatewayId" :: Maybe (String)
  , "InstanceId" :: Maybe (String)
  , "NatGatewayId" :: Maybe (String)
  , "NetworkInterfaceId" :: Maybe (String)
  , "RouteTableId" :: (String)
  , "VpcPeeringConnectionId" :: Maybe (String)
  }
derive instance newtypeCreateRouteRequest :: Newtype CreateRouteRequest _
derive instance repGenericCreateRouteRequest :: Generic CreateRouteRequest _
instance showCreateRouteRequest :: Show CreateRouteRequest where show = genericShow
instance decodeCreateRouteRequest :: Decode CreateRouteRequest where decode = genericDecode options
instance encodeCreateRouteRequest :: Encode CreateRouteRequest where encode = genericEncode options

-- | Constructs CreateRouteRequest from required parameters
newCreateRouteRequest :: String -> CreateRouteRequest
newCreateRouteRequest _RouteTableId = CreateRouteRequest { "RouteTableId": _RouteTableId, "DestinationCidrBlock": Nothing, "DestinationIpv6CidrBlock": Nothing, "DryRun": Nothing, "EgressOnlyInternetGatewayId": Nothing, "GatewayId": Nothing, "InstanceId": Nothing, "NatGatewayId": Nothing, "NetworkInterfaceId": Nothing, "VpcPeeringConnectionId": Nothing }

-- | Constructs CreateRouteRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateRouteRequest' :: String -> ( { "DestinationCidrBlock" :: Maybe (String) , "DestinationIpv6CidrBlock" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "EgressOnlyInternetGatewayId" :: Maybe (String) , "GatewayId" :: Maybe (String) , "InstanceId" :: Maybe (String) , "NatGatewayId" :: Maybe (String) , "NetworkInterfaceId" :: Maybe (String) , "RouteTableId" :: (String) , "VpcPeeringConnectionId" :: Maybe (String) } -> {"DestinationCidrBlock" :: Maybe (String) , "DestinationIpv6CidrBlock" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "EgressOnlyInternetGatewayId" :: Maybe (String) , "GatewayId" :: Maybe (String) , "InstanceId" :: Maybe (String) , "NatGatewayId" :: Maybe (String) , "NetworkInterfaceId" :: Maybe (String) , "RouteTableId" :: (String) , "VpcPeeringConnectionId" :: Maybe (String) } ) -> CreateRouteRequest
newCreateRouteRequest' _RouteTableId customize = (CreateRouteRequest <<< customize) { "RouteTableId": _RouteTableId, "DestinationCidrBlock": Nothing, "DestinationIpv6CidrBlock": Nothing, "DryRun": Nothing, "EgressOnlyInternetGatewayId": Nothing, "GatewayId": Nothing, "InstanceId": Nothing, "NatGatewayId": Nothing, "NetworkInterfaceId": Nothing, "VpcPeeringConnectionId": Nothing }



-- | <p>Contains the output of CreateRoute.</p>
newtype CreateRouteResult = CreateRouteResult 
  { "Return" :: Maybe (Boolean)
  }
derive instance newtypeCreateRouteResult :: Newtype CreateRouteResult _
derive instance repGenericCreateRouteResult :: Generic CreateRouteResult _
instance showCreateRouteResult :: Show CreateRouteResult where show = genericShow
instance decodeCreateRouteResult :: Decode CreateRouteResult where decode = genericDecode options
instance encodeCreateRouteResult :: Encode CreateRouteResult where encode = genericEncode options

-- | Constructs CreateRouteResult from required parameters
newCreateRouteResult :: CreateRouteResult
newCreateRouteResult  = CreateRouteResult { "Return": Nothing }

-- | Constructs CreateRouteResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateRouteResult' :: ( { "Return" :: Maybe (Boolean) } -> {"Return" :: Maybe (Boolean) } ) -> CreateRouteResult
newCreateRouteResult'  customize = (CreateRouteResult <<< customize) { "Return": Nothing }



-- | <p>Contains the parameters for CreateRouteTable.</p>
newtype CreateRouteTableRequest = CreateRouteTableRequest 
  { "DryRun" :: Maybe (Boolean)
  , "VpcId" :: (String)
  }
derive instance newtypeCreateRouteTableRequest :: Newtype CreateRouteTableRequest _
derive instance repGenericCreateRouteTableRequest :: Generic CreateRouteTableRequest _
instance showCreateRouteTableRequest :: Show CreateRouteTableRequest where show = genericShow
instance decodeCreateRouteTableRequest :: Decode CreateRouteTableRequest where decode = genericDecode options
instance encodeCreateRouteTableRequest :: Encode CreateRouteTableRequest where encode = genericEncode options

-- | Constructs CreateRouteTableRequest from required parameters
newCreateRouteTableRequest :: String -> CreateRouteTableRequest
newCreateRouteTableRequest _VpcId = CreateRouteTableRequest { "VpcId": _VpcId, "DryRun": Nothing }

-- | Constructs CreateRouteTableRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateRouteTableRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "VpcId" :: (String) } -> {"DryRun" :: Maybe (Boolean) , "VpcId" :: (String) } ) -> CreateRouteTableRequest
newCreateRouteTableRequest' _VpcId customize = (CreateRouteTableRequest <<< customize) { "VpcId": _VpcId, "DryRun": Nothing }



-- | <p>Contains the output of CreateRouteTable.</p>
newtype CreateRouteTableResult = CreateRouteTableResult 
  { "RouteTable" :: Maybe (RouteTable)
  }
derive instance newtypeCreateRouteTableResult :: Newtype CreateRouteTableResult _
derive instance repGenericCreateRouteTableResult :: Generic CreateRouteTableResult _
instance showCreateRouteTableResult :: Show CreateRouteTableResult where show = genericShow
instance decodeCreateRouteTableResult :: Decode CreateRouteTableResult where decode = genericDecode options
instance encodeCreateRouteTableResult :: Encode CreateRouteTableResult where encode = genericEncode options

-- | Constructs CreateRouteTableResult from required parameters
newCreateRouteTableResult :: CreateRouteTableResult
newCreateRouteTableResult  = CreateRouteTableResult { "RouteTable": Nothing }

-- | Constructs CreateRouteTableResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateRouteTableResult' :: ( { "RouteTable" :: Maybe (RouteTable) } -> {"RouteTable" :: Maybe (RouteTable) } ) -> CreateRouteTableResult
newCreateRouteTableResult'  customize = (CreateRouteTableResult <<< customize) { "RouteTable": Nothing }



-- | <p>Contains the parameters for CreateSecurityGroup.</p>
newtype CreateSecurityGroupRequest = CreateSecurityGroupRequest 
  { "Description" :: (String)
  , "GroupName" :: (String)
  , "VpcId" :: Maybe (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeCreateSecurityGroupRequest :: Newtype CreateSecurityGroupRequest _
derive instance repGenericCreateSecurityGroupRequest :: Generic CreateSecurityGroupRequest _
instance showCreateSecurityGroupRequest :: Show CreateSecurityGroupRequest where show = genericShow
instance decodeCreateSecurityGroupRequest :: Decode CreateSecurityGroupRequest where decode = genericDecode options
instance encodeCreateSecurityGroupRequest :: Encode CreateSecurityGroupRequest where encode = genericEncode options

-- | Constructs CreateSecurityGroupRequest from required parameters
newCreateSecurityGroupRequest :: String -> String -> CreateSecurityGroupRequest
newCreateSecurityGroupRequest _Description _GroupName = CreateSecurityGroupRequest { "Description": _Description, "GroupName": _GroupName, "DryRun": Nothing, "VpcId": Nothing }

-- | Constructs CreateSecurityGroupRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateSecurityGroupRequest' :: String -> String -> ( { "Description" :: (String) , "GroupName" :: (String) , "VpcId" :: Maybe (String) , "DryRun" :: Maybe (Boolean) } -> {"Description" :: (String) , "GroupName" :: (String) , "VpcId" :: Maybe (String) , "DryRun" :: Maybe (Boolean) } ) -> CreateSecurityGroupRequest
newCreateSecurityGroupRequest' _Description _GroupName customize = (CreateSecurityGroupRequest <<< customize) { "Description": _Description, "GroupName": _GroupName, "DryRun": Nothing, "VpcId": Nothing }



-- | <p>Contains the output of CreateSecurityGroup.</p>
newtype CreateSecurityGroupResult = CreateSecurityGroupResult 
  { "GroupId" :: Maybe (String)
  }
derive instance newtypeCreateSecurityGroupResult :: Newtype CreateSecurityGroupResult _
derive instance repGenericCreateSecurityGroupResult :: Generic CreateSecurityGroupResult _
instance showCreateSecurityGroupResult :: Show CreateSecurityGroupResult where show = genericShow
instance decodeCreateSecurityGroupResult :: Decode CreateSecurityGroupResult where decode = genericDecode options
instance encodeCreateSecurityGroupResult :: Encode CreateSecurityGroupResult where encode = genericEncode options

-- | Constructs CreateSecurityGroupResult from required parameters
newCreateSecurityGroupResult :: CreateSecurityGroupResult
newCreateSecurityGroupResult  = CreateSecurityGroupResult { "GroupId": Nothing }

-- | Constructs CreateSecurityGroupResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateSecurityGroupResult' :: ( { "GroupId" :: Maybe (String) } -> {"GroupId" :: Maybe (String) } ) -> CreateSecurityGroupResult
newCreateSecurityGroupResult'  customize = (CreateSecurityGroupResult <<< customize) { "GroupId": Nothing }



-- | <p>Contains the parameters for CreateSnapshot.</p>
newtype CreateSnapshotRequest = CreateSnapshotRequest 
  { "Description" :: Maybe (String)
  , "VolumeId" :: (String)
  , "TagSpecifications" :: Maybe (TagSpecificationList)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeCreateSnapshotRequest :: Newtype CreateSnapshotRequest _
derive instance repGenericCreateSnapshotRequest :: Generic CreateSnapshotRequest _
instance showCreateSnapshotRequest :: Show CreateSnapshotRequest where show = genericShow
instance decodeCreateSnapshotRequest :: Decode CreateSnapshotRequest where decode = genericDecode options
instance encodeCreateSnapshotRequest :: Encode CreateSnapshotRequest where encode = genericEncode options

-- | Constructs CreateSnapshotRequest from required parameters
newCreateSnapshotRequest :: String -> CreateSnapshotRequest
newCreateSnapshotRequest _VolumeId = CreateSnapshotRequest { "VolumeId": _VolumeId, "Description": Nothing, "DryRun": Nothing, "TagSpecifications": Nothing }

-- | Constructs CreateSnapshotRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateSnapshotRequest' :: String -> ( { "Description" :: Maybe (String) , "VolumeId" :: (String) , "TagSpecifications" :: Maybe (TagSpecificationList) , "DryRun" :: Maybe (Boolean) } -> {"Description" :: Maybe (String) , "VolumeId" :: (String) , "TagSpecifications" :: Maybe (TagSpecificationList) , "DryRun" :: Maybe (Boolean) } ) -> CreateSnapshotRequest
newCreateSnapshotRequest' _VolumeId customize = (CreateSnapshotRequest <<< customize) { "VolumeId": _VolumeId, "Description": Nothing, "DryRun": Nothing, "TagSpecifications": Nothing }



-- | <p>Contains the parameters for CreateSpotDatafeedSubscription.</p>
newtype CreateSpotDatafeedSubscriptionRequest = CreateSpotDatafeedSubscriptionRequest 
  { "Bucket" :: (String)
  , "DryRun" :: Maybe (Boolean)
  , "Prefix" :: Maybe (String)
  }
derive instance newtypeCreateSpotDatafeedSubscriptionRequest :: Newtype CreateSpotDatafeedSubscriptionRequest _
derive instance repGenericCreateSpotDatafeedSubscriptionRequest :: Generic CreateSpotDatafeedSubscriptionRequest _
instance showCreateSpotDatafeedSubscriptionRequest :: Show CreateSpotDatafeedSubscriptionRequest where show = genericShow
instance decodeCreateSpotDatafeedSubscriptionRequest :: Decode CreateSpotDatafeedSubscriptionRequest where decode = genericDecode options
instance encodeCreateSpotDatafeedSubscriptionRequest :: Encode CreateSpotDatafeedSubscriptionRequest where encode = genericEncode options

-- | Constructs CreateSpotDatafeedSubscriptionRequest from required parameters
newCreateSpotDatafeedSubscriptionRequest :: String -> CreateSpotDatafeedSubscriptionRequest
newCreateSpotDatafeedSubscriptionRequest _Bucket = CreateSpotDatafeedSubscriptionRequest { "Bucket": _Bucket, "DryRun": Nothing, "Prefix": Nothing }

-- | Constructs CreateSpotDatafeedSubscriptionRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateSpotDatafeedSubscriptionRequest' :: String -> ( { "Bucket" :: (String) , "DryRun" :: Maybe (Boolean) , "Prefix" :: Maybe (String) } -> {"Bucket" :: (String) , "DryRun" :: Maybe (Boolean) , "Prefix" :: Maybe (String) } ) -> CreateSpotDatafeedSubscriptionRequest
newCreateSpotDatafeedSubscriptionRequest' _Bucket customize = (CreateSpotDatafeedSubscriptionRequest <<< customize) { "Bucket": _Bucket, "DryRun": Nothing, "Prefix": Nothing }



-- | <p>Contains the output of CreateSpotDatafeedSubscription.</p>
newtype CreateSpotDatafeedSubscriptionResult = CreateSpotDatafeedSubscriptionResult 
  { "SpotDatafeedSubscription" :: Maybe (SpotDatafeedSubscription)
  }
derive instance newtypeCreateSpotDatafeedSubscriptionResult :: Newtype CreateSpotDatafeedSubscriptionResult _
derive instance repGenericCreateSpotDatafeedSubscriptionResult :: Generic CreateSpotDatafeedSubscriptionResult _
instance showCreateSpotDatafeedSubscriptionResult :: Show CreateSpotDatafeedSubscriptionResult where show = genericShow
instance decodeCreateSpotDatafeedSubscriptionResult :: Decode CreateSpotDatafeedSubscriptionResult where decode = genericDecode options
instance encodeCreateSpotDatafeedSubscriptionResult :: Encode CreateSpotDatafeedSubscriptionResult where encode = genericEncode options

-- | Constructs CreateSpotDatafeedSubscriptionResult from required parameters
newCreateSpotDatafeedSubscriptionResult :: CreateSpotDatafeedSubscriptionResult
newCreateSpotDatafeedSubscriptionResult  = CreateSpotDatafeedSubscriptionResult { "SpotDatafeedSubscription": Nothing }

-- | Constructs CreateSpotDatafeedSubscriptionResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateSpotDatafeedSubscriptionResult' :: ( { "SpotDatafeedSubscription" :: Maybe (SpotDatafeedSubscription) } -> {"SpotDatafeedSubscription" :: Maybe (SpotDatafeedSubscription) } ) -> CreateSpotDatafeedSubscriptionResult
newCreateSpotDatafeedSubscriptionResult'  customize = (CreateSpotDatafeedSubscriptionResult <<< customize) { "SpotDatafeedSubscription": Nothing }



-- | <p>Contains the parameters for CreateSubnet.</p>
newtype CreateSubnetRequest = CreateSubnetRequest 
  { "AvailabilityZone" :: Maybe (String)
  , "CidrBlock" :: (String)
  , "Ipv6CidrBlock" :: Maybe (String)
  , "VpcId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeCreateSubnetRequest :: Newtype CreateSubnetRequest _
derive instance repGenericCreateSubnetRequest :: Generic CreateSubnetRequest _
instance showCreateSubnetRequest :: Show CreateSubnetRequest where show = genericShow
instance decodeCreateSubnetRequest :: Decode CreateSubnetRequest where decode = genericDecode options
instance encodeCreateSubnetRequest :: Encode CreateSubnetRequest where encode = genericEncode options

-- | Constructs CreateSubnetRequest from required parameters
newCreateSubnetRequest :: String -> String -> CreateSubnetRequest
newCreateSubnetRequest _CidrBlock _VpcId = CreateSubnetRequest { "CidrBlock": _CidrBlock, "VpcId": _VpcId, "AvailabilityZone": Nothing, "DryRun": Nothing, "Ipv6CidrBlock": Nothing }

-- | Constructs CreateSubnetRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateSubnetRequest' :: String -> String -> ( { "AvailabilityZone" :: Maybe (String) , "CidrBlock" :: (String) , "Ipv6CidrBlock" :: Maybe (String) , "VpcId" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"AvailabilityZone" :: Maybe (String) , "CidrBlock" :: (String) , "Ipv6CidrBlock" :: Maybe (String) , "VpcId" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> CreateSubnetRequest
newCreateSubnetRequest' _CidrBlock _VpcId customize = (CreateSubnetRequest <<< customize) { "CidrBlock": _CidrBlock, "VpcId": _VpcId, "AvailabilityZone": Nothing, "DryRun": Nothing, "Ipv6CidrBlock": Nothing }



-- | <p>Contains the output of CreateSubnet.</p>
newtype CreateSubnetResult = CreateSubnetResult 
  { "Subnet" :: Maybe (Subnet)
  }
derive instance newtypeCreateSubnetResult :: Newtype CreateSubnetResult _
derive instance repGenericCreateSubnetResult :: Generic CreateSubnetResult _
instance showCreateSubnetResult :: Show CreateSubnetResult where show = genericShow
instance decodeCreateSubnetResult :: Decode CreateSubnetResult where decode = genericDecode options
instance encodeCreateSubnetResult :: Encode CreateSubnetResult where encode = genericEncode options

-- | Constructs CreateSubnetResult from required parameters
newCreateSubnetResult :: CreateSubnetResult
newCreateSubnetResult  = CreateSubnetResult { "Subnet": Nothing }

-- | Constructs CreateSubnetResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateSubnetResult' :: ( { "Subnet" :: Maybe (Subnet) } -> {"Subnet" :: Maybe (Subnet) } ) -> CreateSubnetResult
newCreateSubnetResult'  customize = (CreateSubnetResult <<< customize) { "Subnet": Nothing }



-- | <p>Contains the parameters for CreateTags.</p>
newtype CreateTagsRequest = CreateTagsRequest 
  { "DryRun" :: Maybe (Boolean)
  , "Resources" :: (ResourceIdList)
  , "Tags" :: (TagList)
  }
derive instance newtypeCreateTagsRequest :: Newtype CreateTagsRequest _
derive instance repGenericCreateTagsRequest :: Generic CreateTagsRequest _
instance showCreateTagsRequest :: Show CreateTagsRequest where show = genericShow
instance decodeCreateTagsRequest :: Decode CreateTagsRequest where decode = genericDecode options
instance encodeCreateTagsRequest :: Encode CreateTagsRequest where encode = genericEncode options

-- | Constructs CreateTagsRequest from required parameters
newCreateTagsRequest :: ResourceIdList -> TagList -> CreateTagsRequest
newCreateTagsRequest _Resources _Tags = CreateTagsRequest { "Resources": _Resources, "Tags": _Tags, "DryRun": Nothing }

-- | Constructs CreateTagsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateTagsRequest' :: ResourceIdList -> TagList -> ( { "DryRun" :: Maybe (Boolean) , "Resources" :: (ResourceIdList) , "Tags" :: (TagList) } -> {"DryRun" :: Maybe (Boolean) , "Resources" :: (ResourceIdList) , "Tags" :: (TagList) } ) -> CreateTagsRequest
newCreateTagsRequest' _Resources _Tags customize = (CreateTagsRequest <<< customize) { "Resources": _Resources, "Tags": _Tags, "DryRun": Nothing }



-- | <p>Describes the user or group to be added or removed from the permissions for a volume.</p>
newtype CreateVolumePermission = CreateVolumePermission 
  { "Group" :: Maybe (PermissionGroup)
  , "UserId" :: Maybe (String)
  }
derive instance newtypeCreateVolumePermission :: Newtype CreateVolumePermission _
derive instance repGenericCreateVolumePermission :: Generic CreateVolumePermission _
instance showCreateVolumePermission :: Show CreateVolumePermission where show = genericShow
instance decodeCreateVolumePermission :: Decode CreateVolumePermission where decode = genericDecode options
instance encodeCreateVolumePermission :: Encode CreateVolumePermission where encode = genericEncode options

-- | Constructs CreateVolumePermission from required parameters
newCreateVolumePermission :: CreateVolumePermission
newCreateVolumePermission  = CreateVolumePermission { "Group": Nothing, "UserId": Nothing }

-- | Constructs CreateVolumePermission's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateVolumePermission' :: ( { "Group" :: Maybe (PermissionGroup) , "UserId" :: Maybe (String) } -> {"Group" :: Maybe (PermissionGroup) , "UserId" :: Maybe (String) } ) -> CreateVolumePermission
newCreateVolumePermission'  customize = (CreateVolumePermission <<< customize) { "Group": Nothing, "UserId": Nothing }



newtype CreateVolumePermissionList = CreateVolumePermissionList (Array CreateVolumePermission)
derive instance newtypeCreateVolumePermissionList :: Newtype CreateVolumePermissionList _
derive instance repGenericCreateVolumePermissionList :: Generic CreateVolumePermissionList _
instance showCreateVolumePermissionList :: Show CreateVolumePermissionList where show = genericShow
instance decodeCreateVolumePermissionList :: Decode CreateVolumePermissionList where decode = genericDecode options
instance encodeCreateVolumePermissionList :: Encode CreateVolumePermissionList where encode = genericEncode options



-- | <p>Describes modifications to the permissions for a volume.</p>
newtype CreateVolumePermissionModifications = CreateVolumePermissionModifications 
  { "Add" :: Maybe (CreateVolumePermissionList)
  , "Remove" :: Maybe (CreateVolumePermissionList)
  }
derive instance newtypeCreateVolumePermissionModifications :: Newtype CreateVolumePermissionModifications _
derive instance repGenericCreateVolumePermissionModifications :: Generic CreateVolumePermissionModifications _
instance showCreateVolumePermissionModifications :: Show CreateVolumePermissionModifications where show = genericShow
instance decodeCreateVolumePermissionModifications :: Decode CreateVolumePermissionModifications where decode = genericDecode options
instance encodeCreateVolumePermissionModifications :: Encode CreateVolumePermissionModifications where encode = genericEncode options

-- | Constructs CreateVolumePermissionModifications from required parameters
newCreateVolumePermissionModifications :: CreateVolumePermissionModifications
newCreateVolumePermissionModifications  = CreateVolumePermissionModifications { "Add": Nothing, "Remove": Nothing }

-- | Constructs CreateVolumePermissionModifications's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateVolumePermissionModifications' :: ( { "Add" :: Maybe (CreateVolumePermissionList) , "Remove" :: Maybe (CreateVolumePermissionList) } -> {"Add" :: Maybe (CreateVolumePermissionList) , "Remove" :: Maybe (CreateVolumePermissionList) } ) -> CreateVolumePermissionModifications
newCreateVolumePermissionModifications'  customize = (CreateVolumePermissionModifications <<< customize) { "Add": Nothing, "Remove": Nothing }



-- | <p>Contains the parameters for CreateVolume.</p>
newtype CreateVolumeRequest = CreateVolumeRequest 
  { "AvailabilityZone" :: (String)
  , "Encrypted" :: Maybe (Boolean)
  , "Iops" :: Maybe (Int)
  , "KmsKeyId" :: Maybe (String)
  , "Size" :: Maybe (Int)
  , "SnapshotId" :: Maybe (String)
  , "VolumeType" :: Maybe (VolumeType)
  , "DryRun" :: Maybe (Boolean)
  , "TagSpecifications" :: Maybe (TagSpecificationList)
  }
derive instance newtypeCreateVolumeRequest :: Newtype CreateVolumeRequest _
derive instance repGenericCreateVolumeRequest :: Generic CreateVolumeRequest _
instance showCreateVolumeRequest :: Show CreateVolumeRequest where show = genericShow
instance decodeCreateVolumeRequest :: Decode CreateVolumeRequest where decode = genericDecode options
instance encodeCreateVolumeRequest :: Encode CreateVolumeRequest where encode = genericEncode options

-- | Constructs CreateVolumeRequest from required parameters
newCreateVolumeRequest :: String -> CreateVolumeRequest
newCreateVolumeRequest _AvailabilityZone = CreateVolumeRequest { "AvailabilityZone": _AvailabilityZone, "DryRun": Nothing, "Encrypted": Nothing, "Iops": Nothing, "KmsKeyId": Nothing, "Size": Nothing, "SnapshotId": Nothing, "TagSpecifications": Nothing, "VolumeType": Nothing }

-- | Constructs CreateVolumeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateVolumeRequest' :: String -> ( { "AvailabilityZone" :: (String) , "Encrypted" :: Maybe (Boolean) , "Iops" :: Maybe (Int) , "KmsKeyId" :: Maybe (String) , "Size" :: Maybe (Int) , "SnapshotId" :: Maybe (String) , "VolumeType" :: Maybe (VolumeType) , "DryRun" :: Maybe (Boolean) , "TagSpecifications" :: Maybe (TagSpecificationList) } -> {"AvailabilityZone" :: (String) , "Encrypted" :: Maybe (Boolean) , "Iops" :: Maybe (Int) , "KmsKeyId" :: Maybe (String) , "Size" :: Maybe (Int) , "SnapshotId" :: Maybe (String) , "VolumeType" :: Maybe (VolumeType) , "DryRun" :: Maybe (Boolean) , "TagSpecifications" :: Maybe (TagSpecificationList) } ) -> CreateVolumeRequest
newCreateVolumeRequest' _AvailabilityZone customize = (CreateVolumeRequest <<< customize) { "AvailabilityZone": _AvailabilityZone, "DryRun": Nothing, "Encrypted": Nothing, "Iops": Nothing, "KmsKeyId": Nothing, "Size": Nothing, "SnapshotId": Nothing, "TagSpecifications": Nothing, "VolumeType": Nothing }



newtype CreateVpcEndpointConnectionNotificationRequest = CreateVpcEndpointConnectionNotificationRequest 
  { "DryRun" :: Maybe (Boolean)
  , "ServiceId" :: Maybe (String)
  , "VpcEndpointId" :: Maybe (String)
  , "ConnectionNotificationArn" :: (String)
  , "ConnectionEvents" :: (ValueStringList)
  , "ClientToken" :: Maybe (String)
  }
derive instance newtypeCreateVpcEndpointConnectionNotificationRequest :: Newtype CreateVpcEndpointConnectionNotificationRequest _
derive instance repGenericCreateVpcEndpointConnectionNotificationRequest :: Generic CreateVpcEndpointConnectionNotificationRequest _
instance showCreateVpcEndpointConnectionNotificationRequest :: Show CreateVpcEndpointConnectionNotificationRequest where show = genericShow
instance decodeCreateVpcEndpointConnectionNotificationRequest :: Decode CreateVpcEndpointConnectionNotificationRequest where decode = genericDecode options
instance encodeCreateVpcEndpointConnectionNotificationRequest :: Encode CreateVpcEndpointConnectionNotificationRequest where encode = genericEncode options

-- | Constructs CreateVpcEndpointConnectionNotificationRequest from required parameters
newCreateVpcEndpointConnectionNotificationRequest :: ValueStringList -> String -> CreateVpcEndpointConnectionNotificationRequest
newCreateVpcEndpointConnectionNotificationRequest _ConnectionEvents _ConnectionNotificationArn = CreateVpcEndpointConnectionNotificationRequest { "ConnectionEvents": _ConnectionEvents, "ConnectionNotificationArn": _ConnectionNotificationArn, "ClientToken": Nothing, "DryRun": Nothing, "ServiceId": Nothing, "VpcEndpointId": Nothing }

-- | Constructs CreateVpcEndpointConnectionNotificationRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateVpcEndpointConnectionNotificationRequest' :: ValueStringList -> String -> ( { "DryRun" :: Maybe (Boolean) , "ServiceId" :: Maybe (String) , "VpcEndpointId" :: Maybe (String) , "ConnectionNotificationArn" :: (String) , "ConnectionEvents" :: (ValueStringList) , "ClientToken" :: Maybe (String) } -> {"DryRun" :: Maybe (Boolean) , "ServiceId" :: Maybe (String) , "VpcEndpointId" :: Maybe (String) , "ConnectionNotificationArn" :: (String) , "ConnectionEvents" :: (ValueStringList) , "ClientToken" :: Maybe (String) } ) -> CreateVpcEndpointConnectionNotificationRequest
newCreateVpcEndpointConnectionNotificationRequest' _ConnectionEvents _ConnectionNotificationArn customize = (CreateVpcEndpointConnectionNotificationRequest <<< customize) { "ConnectionEvents": _ConnectionEvents, "ConnectionNotificationArn": _ConnectionNotificationArn, "ClientToken": Nothing, "DryRun": Nothing, "ServiceId": Nothing, "VpcEndpointId": Nothing }



newtype CreateVpcEndpointConnectionNotificationResult = CreateVpcEndpointConnectionNotificationResult 
  { "ConnectionNotification" :: Maybe (ConnectionNotification)
  , "ClientToken" :: Maybe (String)
  }
derive instance newtypeCreateVpcEndpointConnectionNotificationResult :: Newtype CreateVpcEndpointConnectionNotificationResult _
derive instance repGenericCreateVpcEndpointConnectionNotificationResult :: Generic CreateVpcEndpointConnectionNotificationResult _
instance showCreateVpcEndpointConnectionNotificationResult :: Show CreateVpcEndpointConnectionNotificationResult where show = genericShow
instance decodeCreateVpcEndpointConnectionNotificationResult :: Decode CreateVpcEndpointConnectionNotificationResult where decode = genericDecode options
instance encodeCreateVpcEndpointConnectionNotificationResult :: Encode CreateVpcEndpointConnectionNotificationResult where encode = genericEncode options

-- | Constructs CreateVpcEndpointConnectionNotificationResult from required parameters
newCreateVpcEndpointConnectionNotificationResult :: CreateVpcEndpointConnectionNotificationResult
newCreateVpcEndpointConnectionNotificationResult  = CreateVpcEndpointConnectionNotificationResult { "ClientToken": Nothing, "ConnectionNotification": Nothing }

-- | Constructs CreateVpcEndpointConnectionNotificationResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateVpcEndpointConnectionNotificationResult' :: ( { "ConnectionNotification" :: Maybe (ConnectionNotification) , "ClientToken" :: Maybe (String) } -> {"ConnectionNotification" :: Maybe (ConnectionNotification) , "ClientToken" :: Maybe (String) } ) -> CreateVpcEndpointConnectionNotificationResult
newCreateVpcEndpointConnectionNotificationResult'  customize = (CreateVpcEndpointConnectionNotificationResult <<< customize) { "ClientToken": Nothing, "ConnectionNotification": Nothing }



-- | <p>Contains the parameters for CreateVpcEndpoint.</p>
newtype CreateVpcEndpointRequest = CreateVpcEndpointRequest 
  { "DryRun" :: Maybe (Boolean)
  , "VpcEndpointType" :: Maybe (VpcEndpointType)
  , "VpcId" :: (String)
  , "ServiceName" :: (String)
  , "PolicyDocument" :: Maybe (String)
  , "RouteTableIds" :: Maybe (ValueStringList)
  , "SubnetIds" :: Maybe (ValueStringList)
  , "SecurityGroupIds" :: Maybe (ValueStringList)
  , "ClientToken" :: Maybe (String)
  , "PrivateDnsEnabled" :: Maybe (Boolean)
  }
derive instance newtypeCreateVpcEndpointRequest :: Newtype CreateVpcEndpointRequest _
derive instance repGenericCreateVpcEndpointRequest :: Generic CreateVpcEndpointRequest _
instance showCreateVpcEndpointRequest :: Show CreateVpcEndpointRequest where show = genericShow
instance decodeCreateVpcEndpointRequest :: Decode CreateVpcEndpointRequest where decode = genericDecode options
instance encodeCreateVpcEndpointRequest :: Encode CreateVpcEndpointRequest where encode = genericEncode options

-- | Constructs CreateVpcEndpointRequest from required parameters
newCreateVpcEndpointRequest :: String -> String -> CreateVpcEndpointRequest
newCreateVpcEndpointRequest _ServiceName _VpcId = CreateVpcEndpointRequest { "ServiceName": _ServiceName, "VpcId": _VpcId, "ClientToken": Nothing, "DryRun": Nothing, "PolicyDocument": Nothing, "PrivateDnsEnabled": Nothing, "RouteTableIds": Nothing, "SecurityGroupIds": Nothing, "SubnetIds": Nothing, "VpcEndpointType": Nothing }

-- | Constructs CreateVpcEndpointRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateVpcEndpointRequest' :: String -> String -> ( { "DryRun" :: Maybe (Boolean) , "VpcEndpointType" :: Maybe (VpcEndpointType) , "VpcId" :: (String) , "ServiceName" :: (String) , "PolicyDocument" :: Maybe (String) , "RouteTableIds" :: Maybe (ValueStringList) , "SubnetIds" :: Maybe (ValueStringList) , "SecurityGroupIds" :: Maybe (ValueStringList) , "ClientToken" :: Maybe (String) , "PrivateDnsEnabled" :: Maybe (Boolean) } -> {"DryRun" :: Maybe (Boolean) , "VpcEndpointType" :: Maybe (VpcEndpointType) , "VpcId" :: (String) , "ServiceName" :: (String) , "PolicyDocument" :: Maybe (String) , "RouteTableIds" :: Maybe (ValueStringList) , "SubnetIds" :: Maybe (ValueStringList) , "SecurityGroupIds" :: Maybe (ValueStringList) , "ClientToken" :: Maybe (String) , "PrivateDnsEnabled" :: Maybe (Boolean) } ) -> CreateVpcEndpointRequest
newCreateVpcEndpointRequest' _ServiceName _VpcId customize = (CreateVpcEndpointRequest <<< customize) { "ServiceName": _ServiceName, "VpcId": _VpcId, "ClientToken": Nothing, "DryRun": Nothing, "PolicyDocument": Nothing, "PrivateDnsEnabled": Nothing, "RouteTableIds": Nothing, "SecurityGroupIds": Nothing, "SubnetIds": Nothing, "VpcEndpointType": Nothing }



-- | <p>Contains the output of CreateVpcEndpoint.</p>
newtype CreateVpcEndpointResult = CreateVpcEndpointResult 
  { "VpcEndpoint" :: Maybe (VpcEndpoint)
  , "ClientToken" :: Maybe (String)
  }
derive instance newtypeCreateVpcEndpointResult :: Newtype CreateVpcEndpointResult _
derive instance repGenericCreateVpcEndpointResult :: Generic CreateVpcEndpointResult _
instance showCreateVpcEndpointResult :: Show CreateVpcEndpointResult where show = genericShow
instance decodeCreateVpcEndpointResult :: Decode CreateVpcEndpointResult where decode = genericDecode options
instance encodeCreateVpcEndpointResult :: Encode CreateVpcEndpointResult where encode = genericEncode options

-- | Constructs CreateVpcEndpointResult from required parameters
newCreateVpcEndpointResult :: CreateVpcEndpointResult
newCreateVpcEndpointResult  = CreateVpcEndpointResult { "ClientToken": Nothing, "VpcEndpoint": Nothing }

-- | Constructs CreateVpcEndpointResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateVpcEndpointResult' :: ( { "VpcEndpoint" :: Maybe (VpcEndpoint) , "ClientToken" :: Maybe (String) } -> {"VpcEndpoint" :: Maybe (VpcEndpoint) , "ClientToken" :: Maybe (String) } ) -> CreateVpcEndpointResult
newCreateVpcEndpointResult'  customize = (CreateVpcEndpointResult <<< customize) { "ClientToken": Nothing, "VpcEndpoint": Nothing }



newtype CreateVpcEndpointServiceConfigurationRequest = CreateVpcEndpointServiceConfigurationRequest 
  { "DryRun" :: Maybe (Boolean)
  , "AcceptanceRequired" :: Maybe (Boolean)
  , "NetworkLoadBalancerArns" :: (ValueStringList)
  , "ClientToken" :: Maybe (String)
  }
derive instance newtypeCreateVpcEndpointServiceConfigurationRequest :: Newtype CreateVpcEndpointServiceConfigurationRequest _
derive instance repGenericCreateVpcEndpointServiceConfigurationRequest :: Generic CreateVpcEndpointServiceConfigurationRequest _
instance showCreateVpcEndpointServiceConfigurationRequest :: Show CreateVpcEndpointServiceConfigurationRequest where show = genericShow
instance decodeCreateVpcEndpointServiceConfigurationRequest :: Decode CreateVpcEndpointServiceConfigurationRequest where decode = genericDecode options
instance encodeCreateVpcEndpointServiceConfigurationRequest :: Encode CreateVpcEndpointServiceConfigurationRequest where encode = genericEncode options

-- | Constructs CreateVpcEndpointServiceConfigurationRequest from required parameters
newCreateVpcEndpointServiceConfigurationRequest :: ValueStringList -> CreateVpcEndpointServiceConfigurationRequest
newCreateVpcEndpointServiceConfigurationRequest _NetworkLoadBalancerArns = CreateVpcEndpointServiceConfigurationRequest { "NetworkLoadBalancerArns": _NetworkLoadBalancerArns, "AcceptanceRequired": Nothing, "ClientToken": Nothing, "DryRun": Nothing }

-- | Constructs CreateVpcEndpointServiceConfigurationRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateVpcEndpointServiceConfigurationRequest' :: ValueStringList -> ( { "DryRun" :: Maybe (Boolean) , "AcceptanceRequired" :: Maybe (Boolean) , "NetworkLoadBalancerArns" :: (ValueStringList) , "ClientToken" :: Maybe (String) } -> {"DryRun" :: Maybe (Boolean) , "AcceptanceRequired" :: Maybe (Boolean) , "NetworkLoadBalancerArns" :: (ValueStringList) , "ClientToken" :: Maybe (String) } ) -> CreateVpcEndpointServiceConfigurationRequest
newCreateVpcEndpointServiceConfigurationRequest' _NetworkLoadBalancerArns customize = (CreateVpcEndpointServiceConfigurationRequest <<< customize) { "NetworkLoadBalancerArns": _NetworkLoadBalancerArns, "AcceptanceRequired": Nothing, "ClientToken": Nothing, "DryRun": Nothing }



newtype CreateVpcEndpointServiceConfigurationResult = CreateVpcEndpointServiceConfigurationResult 
  { "ServiceConfiguration" :: Maybe (ServiceConfiguration)
  , "ClientToken" :: Maybe (String)
  }
derive instance newtypeCreateVpcEndpointServiceConfigurationResult :: Newtype CreateVpcEndpointServiceConfigurationResult _
derive instance repGenericCreateVpcEndpointServiceConfigurationResult :: Generic CreateVpcEndpointServiceConfigurationResult _
instance showCreateVpcEndpointServiceConfigurationResult :: Show CreateVpcEndpointServiceConfigurationResult where show = genericShow
instance decodeCreateVpcEndpointServiceConfigurationResult :: Decode CreateVpcEndpointServiceConfigurationResult where decode = genericDecode options
instance encodeCreateVpcEndpointServiceConfigurationResult :: Encode CreateVpcEndpointServiceConfigurationResult where encode = genericEncode options

-- | Constructs CreateVpcEndpointServiceConfigurationResult from required parameters
newCreateVpcEndpointServiceConfigurationResult :: CreateVpcEndpointServiceConfigurationResult
newCreateVpcEndpointServiceConfigurationResult  = CreateVpcEndpointServiceConfigurationResult { "ClientToken": Nothing, "ServiceConfiguration": Nothing }

-- | Constructs CreateVpcEndpointServiceConfigurationResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateVpcEndpointServiceConfigurationResult' :: ( { "ServiceConfiguration" :: Maybe (ServiceConfiguration) , "ClientToken" :: Maybe (String) } -> {"ServiceConfiguration" :: Maybe (ServiceConfiguration) , "ClientToken" :: Maybe (String) } ) -> CreateVpcEndpointServiceConfigurationResult
newCreateVpcEndpointServiceConfigurationResult'  customize = (CreateVpcEndpointServiceConfigurationResult <<< customize) { "ClientToken": Nothing, "ServiceConfiguration": Nothing }



-- | <p>Contains the parameters for CreateVpcPeeringConnection.</p>
newtype CreateVpcPeeringConnectionRequest = CreateVpcPeeringConnectionRequest 
  { "DryRun" :: Maybe (Boolean)
  , "PeerOwnerId" :: Maybe (String)
  , "PeerVpcId" :: Maybe (String)
  , "VpcId" :: Maybe (String)
  , "PeerRegion" :: Maybe (String)
  }
derive instance newtypeCreateVpcPeeringConnectionRequest :: Newtype CreateVpcPeeringConnectionRequest _
derive instance repGenericCreateVpcPeeringConnectionRequest :: Generic CreateVpcPeeringConnectionRequest _
instance showCreateVpcPeeringConnectionRequest :: Show CreateVpcPeeringConnectionRequest where show = genericShow
instance decodeCreateVpcPeeringConnectionRequest :: Decode CreateVpcPeeringConnectionRequest where decode = genericDecode options
instance encodeCreateVpcPeeringConnectionRequest :: Encode CreateVpcPeeringConnectionRequest where encode = genericEncode options

-- | Constructs CreateVpcPeeringConnectionRequest from required parameters
newCreateVpcPeeringConnectionRequest :: CreateVpcPeeringConnectionRequest
newCreateVpcPeeringConnectionRequest  = CreateVpcPeeringConnectionRequest { "DryRun": Nothing, "PeerOwnerId": Nothing, "PeerRegion": Nothing, "PeerVpcId": Nothing, "VpcId": Nothing }

-- | Constructs CreateVpcPeeringConnectionRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateVpcPeeringConnectionRequest' :: ( { "DryRun" :: Maybe (Boolean) , "PeerOwnerId" :: Maybe (String) , "PeerVpcId" :: Maybe (String) , "VpcId" :: Maybe (String) , "PeerRegion" :: Maybe (String) } -> {"DryRun" :: Maybe (Boolean) , "PeerOwnerId" :: Maybe (String) , "PeerVpcId" :: Maybe (String) , "VpcId" :: Maybe (String) , "PeerRegion" :: Maybe (String) } ) -> CreateVpcPeeringConnectionRequest
newCreateVpcPeeringConnectionRequest'  customize = (CreateVpcPeeringConnectionRequest <<< customize) { "DryRun": Nothing, "PeerOwnerId": Nothing, "PeerRegion": Nothing, "PeerVpcId": Nothing, "VpcId": Nothing }



-- | <p>Contains the output of CreateVpcPeeringConnection.</p>
newtype CreateVpcPeeringConnectionResult = CreateVpcPeeringConnectionResult 
  { "VpcPeeringConnection" :: Maybe (VpcPeeringConnection)
  }
derive instance newtypeCreateVpcPeeringConnectionResult :: Newtype CreateVpcPeeringConnectionResult _
derive instance repGenericCreateVpcPeeringConnectionResult :: Generic CreateVpcPeeringConnectionResult _
instance showCreateVpcPeeringConnectionResult :: Show CreateVpcPeeringConnectionResult where show = genericShow
instance decodeCreateVpcPeeringConnectionResult :: Decode CreateVpcPeeringConnectionResult where decode = genericDecode options
instance encodeCreateVpcPeeringConnectionResult :: Encode CreateVpcPeeringConnectionResult where encode = genericEncode options

-- | Constructs CreateVpcPeeringConnectionResult from required parameters
newCreateVpcPeeringConnectionResult :: CreateVpcPeeringConnectionResult
newCreateVpcPeeringConnectionResult  = CreateVpcPeeringConnectionResult { "VpcPeeringConnection": Nothing }

-- | Constructs CreateVpcPeeringConnectionResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateVpcPeeringConnectionResult' :: ( { "VpcPeeringConnection" :: Maybe (VpcPeeringConnection) } -> {"VpcPeeringConnection" :: Maybe (VpcPeeringConnection) } ) -> CreateVpcPeeringConnectionResult
newCreateVpcPeeringConnectionResult'  customize = (CreateVpcPeeringConnectionResult <<< customize) { "VpcPeeringConnection": Nothing }



-- | <p>Contains the parameters for CreateVpc.</p>
newtype CreateVpcRequest = CreateVpcRequest 
  { "CidrBlock" :: (String)
  , "AmazonProvidedIpv6CidrBlock" :: Maybe (Boolean)
  , "DryRun" :: Maybe (Boolean)
  , "InstanceTenancy" :: Maybe (Tenancy)
  }
derive instance newtypeCreateVpcRequest :: Newtype CreateVpcRequest _
derive instance repGenericCreateVpcRequest :: Generic CreateVpcRequest _
instance showCreateVpcRequest :: Show CreateVpcRequest where show = genericShow
instance decodeCreateVpcRequest :: Decode CreateVpcRequest where decode = genericDecode options
instance encodeCreateVpcRequest :: Encode CreateVpcRequest where encode = genericEncode options

-- | Constructs CreateVpcRequest from required parameters
newCreateVpcRequest :: String -> CreateVpcRequest
newCreateVpcRequest _CidrBlock = CreateVpcRequest { "CidrBlock": _CidrBlock, "AmazonProvidedIpv6CidrBlock": Nothing, "DryRun": Nothing, "InstanceTenancy": Nothing }

-- | Constructs CreateVpcRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateVpcRequest' :: String -> ( { "CidrBlock" :: (String) , "AmazonProvidedIpv6CidrBlock" :: Maybe (Boolean) , "DryRun" :: Maybe (Boolean) , "InstanceTenancy" :: Maybe (Tenancy) } -> {"CidrBlock" :: (String) , "AmazonProvidedIpv6CidrBlock" :: Maybe (Boolean) , "DryRun" :: Maybe (Boolean) , "InstanceTenancy" :: Maybe (Tenancy) } ) -> CreateVpcRequest
newCreateVpcRequest' _CidrBlock customize = (CreateVpcRequest <<< customize) { "CidrBlock": _CidrBlock, "AmazonProvidedIpv6CidrBlock": Nothing, "DryRun": Nothing, "InstanceTenancy": Nothing }



-- | <p>Contains the output of CreateVpc.</p>
newtype CreateVpcResult = CreateVpcResult 
  { "Vpc" :: Maybe (Vpc)
  }
derive instance newtypeCreateVpcResult :: Newtype CreateVpcResult _
derive instance repGenericCreateVpcResult :: Generic CreateVpcResult _
instance showCreateVpcResult :: Show CreateVpcResult where show = genericShow
instance decodeCreateVpcResult :: Decode CreateVpcResult where decode = genericDecode options
instance encodeCreateVpcResult :: Encode CreateVpcResult where encode = genericEncode options

-- | Constructs CreateVpcResult from required parameters
newCreateVpcResult :: CreateVpcResult
newCreateVpcResult  = CreateVpcResult { "Vpc": Nothing }

-- | Constructs CreateVpcResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateVpcResult' :: ( { "Vpc" :: Maybe (Vpc) } -> {"Vpc" :: Maybe (Vpc) } ) -> CreateVpcResult
newCreateVpcResult'  customize = (CreateVpcResult <<< customize) { "Vpc": Nothing }



-- | <p>Contains the parameters for CreateVpnConnection.</p>
newtype CreateVpnConnectionRequest = CreateVpnConnectionRequest 
  { "CustomerGatewayId" :: (String)
  , "Type" :: (String)
  , "VpnGatewayId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  , "Options" :: Maybe (VpnConnectionOptionsSpecification)
  }
derive instance newtypeCreateVpnConnectionRequest :: Newtype CreateVpnConnectionRequest _
derive instance repGenericCreateVpnConnectionRequest :: Generic CreateVpnConnectionRequest _
instance showCreateVpnConnectionRequest :: Show CreateVpnConnectionRequest where show = genericShow
instance decodeCreateVpnConnectionRequest :: Decode CreateVpnConnectionRequest where decode = genericDecode options
instance encodeCreateVpnConnectionRequest :: Encode CreateVpnConnectionRequest where encode = genericEncode options

-- | Constructs CreateVpnConnectionRequest from required parameters
newCreateVpnConnectionRequest :: String -> String -> String -> CreateVpnConnectionRequest
newCreateVpnConnectionRequest _CustomerGatewayId _Type _VpnGatewayId = CreateVpnConnectionRequest { "CustomerGatewayId": _CustomerGatewayId, "Type": _Type, "VpnGatewayId": _VpnGatewayId, "DryRun": Nothing, "Options": Nothing }

-- | Constructs CreateVpnConnectionRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateVpnConnectionRequest' :: String -> String -> String -> ( { "CustomerGatewayId" :: (String) , "Type" :: (String) , "VpnGatewayId" :: (String) , "DryRun" :: Maybe (Boolean) , "Options" :: Maybe (VpnConnectionOptionsSpecification) } -> {"CustomerGatewayId" :: (String) , "Type" :: (String) , "VpnGatewayId" :: (String) , "DryRun" :: Maybe (Boolean) , "Options" :: Maybe (VpnConnectionOptionsSpecification) } ) -> CreateVpnConnectionRequest
newCreateVpnConnectionRequest' _CustomerGatewayId _Type _VpnGatewayId customize = (CreateVpnConnectionRequest <<< customize) { "CustomerGatewayId": _CustomerGatewayId, "Type": _Type, "VpnGatewayId": _VpnGatewayId, "DryRun": Nothing, "Options": Nothing }



-- | <p>Contains the output of CreateVpnConnection.</p>
newtype CreateVpnConnectionResult = CreateVpnConnectionResult 
  { "VpnConnection" :: Maybe (VpnConnection)
  }
derive instance newtypeCreateVpnConnectionResult :: Newtype CreateVpnConnectionResult _
derive instance repGenericCreateVpnConnectionResult :: Generic CreateVpnConnectionResult _
instance showCreateVpnConnectionResult :: Show CreateVpnConnectionResult where show = genericShow
instance decodeCreateVpnConnectionResult :: Decode CreateVpnConnectionResult where decode = genericDecode options
instance encodeCreateVpnConnectionResult :: Encode CreateVpnConnectionResult where encode = genericEncode options

-- | Constructs CreateVpnConnectionResult from required parameters
newCreateVpnConnectionResult :: CreateVpnConnectionResult
newCreateVpnConnectionResult  = CreateVpnConnectionResult { "VpnConnection": Nothing }

-- | Constructs CreateVpnConnectionResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateVpnConnectionResult' :: ( { "VpnConnection" :: Maybe (VpnConnection) } -> {"VpnConnection" :: Maybe (VpnConnection) } ) -> CreateVpnConnectionResult
newCreateVpnConnectionResult'  customize = (CreateVpnConnectionResult <<< customize) { "VpnConnection": Nothing }



-- | <p>Contains the parameters for CreateVpnConnectionRoute.</p>
newtype CreateVpnConnectionRouteRequest = CreateVpnConnectionRouteRequest 
  { "DestinationCidrBlock" :: (String)
  , "VpnConnectionId" :: (String)
  }
derive instance newtypeCreateVpnConnectionRouteRequest :: Newtype CreateVpnConnectionRouteRequest _
derive instance repGenericCreateVpnConnectionRouteRequest :: Generic CreateVpnConnectionRouteRequest _
instance showCreateVpnConnectionRouteRequest :: Show CreateVpnConnectionRouteRequest where show = genericShow
instance decodeCreateVpnConnectionRouteRequest :: Decode CreateVpnConnectionRouteRequest where decode = genericDecode options
instance encodeCreateVpnConnectionRouteRequest :: Encode CreateVpnConnectionRouteRequest where encode = genericEncode options

-- | Constructs CreateVpnConnectionRouteRequest from required parameters
newCreateVpnConnectionRouteRequest :: String -> String -> CreateVpnConnectionRouteRequest
newCreateVpnConnectionRouteRequest _DestinationCidrBlock _VpnConnectionId = CreateVpnConnectionRouteRequest { "DestinationCidrBlock": _DestinationCidrBlock, "VpnConnectionId": _VpnConnectionId }

-- | Constructs CreateVpnConnectionRouteRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateVpnConnectionRouteRequest' :: String -> String -> ( { "DestinationCidrBlock" :: (String) , "VpnConnectionId" :: (String) } -> {"DestinationCidrBlock" :: (String) , "VpnConnectionId" :: (String) } ) -> CreateVpnConnectionRouteRequest
newCreateVpnConnectionRouteRequest' _DestinationCidrBlock _VpnConnectionId customize = (CreateVpnConnectionRouteRequest <<< customize) { "DestinationCidrBlock": _DestinationCidrBlock, "VpnConnectionId": _VpnConnectionId }



-- | <p>Contains the parameters for CreateVpnGateway.</p>
newtype CreateVpnGatewayRequest = CreateVpnGatewayRequest 
  { "AvailabilityZone" :: Maybe (String)
  , "Type" :: (GatewayType)
  , "AmazonSideAsn" :: Maybe (Number)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeCreateVpnGatewayRequest :: Newtype CreateVpnGatewayRequest _
derive instance repGenericCreateVpnGatewayRequest :: Generic CreateVpnGatewayRequest _
instance showCreateVpnGatewayRequest :: Show CreateVpnGatewayRequest where show = genericShow
instance decodeCreateVpnGatewayRequest :: Decode CreateVpnGatewayRequest where decode = genericDecode options
instance encodeCreateVpnGatewayRequest :: Encode CreateVpnGatewayRequest where encode = genericEncode options

-- | Constructs CreateVpnGatewayRequest from required parameters
newCreateVpnGatewayRequest :: GatewayType -> CreateVpnGatewayRequest
newCreateVpnGatewayRequest _Type = CreateVpnGatewayRequest { "Type": _Type, "AmazonSideAsn": Nothing, "AvailabilityZone": Nothing, "DryRun": Nothing }

-- | Constructs CreateVpnGatewayRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateVpnGatewayRequest' :: GatewayType -> ( { "AvailabilityZone" :: Maybe (String) , "Type" :: (GatewayType) , "AmazonSideAsn" :: Maybe (Number) , "DryRun" :: Maybe (Boolean) } -> {"AvailabilityZone" :: Maybe (String) , "Type" :: (GatewayType) , "AmazonSideAsn" :: Maybe (Number) , "DryRun" :: Maybe (Boolean) } ) -> CreateVpnGatewayRequest
newCreateVpnGatewayRequest' _Type customize = (CreateVpnGatewayRequest <<< customize) { "Type": _Type, "AmazonSideAsn": Nothing, "AvailabilityZone": Nothing, "DryRun": Nothing }



-- | <p>Contains the output of CreateVpnGateway.</p>
newtype CreateVpnGatewayResult = CreateVpnGatewayResult 
  { "VpnGateway" :: Maybe (VpnGateway)
  }
derive instance newtypeCreateVpnGatewayResult :: Newtype CreateVpnGatewayResult _
derive instance repGenericCreateVpnGatewayResult :: Generic CreateVpnGatewayResult _
instance showCreateVpnGatewayResult :: Show CreateVpnGatewayResult where show = genericShow
instance decodeCreateVpnGatewayResult :: Decode CreateVpnGatewayResult where decode = genericDecode options
instance encodeCreateVpnGatewayResult :: Encode CreateVpnGatewayResult where encode = genericEncode options

-- | Constructs CreateVpnGatewayResult from required parameters
newCreateVpnGatewayResult :: CreateVpnGatewayResult
newCreateVpnGatewayResult  = CreateVpnGatewayResult { "VpnGateway": Nothing }

-- | Constructs CreateVpnGatewayResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreateVpnGatewayResult' :: ( { "VpnGateway" :: Maybe (VpnGateway) } -> {"VpnGateway" :: Maybe (VpnGateway) } ) -> CreateVpnGatewayResult
newCreateVpnGatewayResult'  customize = (CreateVpnGatewayResult <<< customize) { "VpnGateway": Nothing }



-- | <p>Describes the credit option for CPU usage of a T2 instance.</p>
newtype CreditSpecification = CreditSpecification 
  { "CpuCredits" :: Maybe (String)
  }
derive instance newtypeCreditSpecification :: Newtype CreditSpecification _
derive instance repGenericCreditSpecification :: Generic CreditSpecification _
instance showCreditSpecification :: Show CreditSpecification where show = genericShow
instance decodeCreditSpecification :: Decode CreditSpecification where decode = genericDecode options
instance encodeCreditSpecification :: Encode CreditSpecification where encode = genericEncode options

-- | Constructs CreditSpecification from required parameters
newCreditSpecification :: CreditSpecification
newCreditSpecification  = CreditSpecification { "CpuCredits": Nothing }

-- | Constructs CreditSpecification's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreditSpecification' :: ( { "CpuCredits" :: Maybe (String) } -> {"CpuCredits" :: Maybe (String) } ) -> CreditSpecification
newCreditSpecification'  customize = (CreditSpecification <<< customize) { "CpuCredits": Nothing }



-- | <p>The credit option for CPU usage of a T2 instance.</p>
newtype CreditSpecificationRequest = CreditSpecificationRequest 
  { "CpuCredits" :: (String)
  }
derive instance newtypeCreditSpecificationRequest :: Newtype CreditSpecificationRequest _
derive instance repGenericCreditSpecificationRequest :: Generic CreditSpecificationRequest _
instance showCreditSpecificationRequest :: Show CreditSpecificationRequest where show = genericShow
instance decodeCreditSpecificationRequest :: Decode CreditSpecificationRequest where decode = genericDecode options
instance encodeCreditSpecificationRequest :: Encode CreditSpecificationRequest where encode = genericEncode options

-- | Constructs CreditSpecificationRequest from required parameters
newCreditSpecificationRequest :: String -> CreditSpecificationRequest
newCreditSpecificationRequest _CpuCredits = CreditSpecificationRequest { "CpuCredits": _CpuCredits }

-- | Constructs CreditSpecificationRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCreditSpecificationRequest' :: String -> ( { "CpuCredits" :: (String) } -> {"CpuCredits" :: (String) } ) -> CreditSpecificationRequest
newCreditSpecificationRequest' _CpuCredits customize = (CreditSpecificationRequest <<< customize) { "CpuCredits": _CpuCredits }



newtype CurrencyCodeValues = CurrencyCodeValues String
derive instance newtypeCurrencyCodeValues :: Newtype CurrencyCodeValues _
derive instance repGenericCurrencyCodeValues :: Generic CurrencyCodeValues _
instance showCurrencyCodeValues :: Show CurrencyCodeValues where show = genericShow
instance decodeCurrencyCodeValues :: Decode CurrencyCodeValues where decode = genericDecode options
instance encodeCurrencyCodeValues :: Encode CurrencyCodeValues where encode = genericEncode options



-- | <p>Describes a customer gateway.</p>
newtype CustomerGateway = CustomerGateway 
  { "BgpAsn" :: Maybe (String)
  , "CustomerGatewayId" :: Maybe (String)
  , "IpAddress" :: Maybe (String)
  , "State" :: Maybe (String)
  , "Type" :: Maybe (String)
  , "Tags" :: Maybe (TagList)
  }
derive instance newtypeCustomerGateway :: Newtype CustomerGateway _
derive instance repGenericCustomerGateway :: Generic CustomerGateway _
instance showCustomerGateway :: Show CustomerGateway where show = genericShow
instance decodeCustomerGateway :: Decode CustomerGateway where decode = genericDecode options
instance encodeCustomerGateway :: Encode CustomerGateway where encode = genericEncode options

-- | Constructs CustomerGateway from required parameters
newCustomerGateway :: CustomerGateway
newCustomerGateway  = CustomerGateway { "BgpAsn": Nothing, "CustomerGatewayId": Nothing, "IpAddress": Nothing, "State": Nothing, "Tags": Nothing, "Type": Nothing }

-- | Constructs CustomerGateway's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newCustomerGateway' :: ( { "BgpAsn" :: Maybe (String) , "CustomerGatewayId" :: Maybe (String) , "IpAddress" :: Maybe (String) , "State" :: Maybe (String) , "Type" :: Maybe (String) , "Tags" :: Maybe (TagList) } -> {"BgpAsn" :: Maybe (String) , "CustomerGatewayId" :: Maybe (String) , "IpAddress" :: Maybe (String) , "State" :: Maybe (String) , "Type" :: Maybe (String) , "Tags" :: Maybe (TagList) } ) -> CustomerGateway
newCustomerGateway'  customize = (CustomerGateway <<< customize) { "BgpAsn": Nothing, "CustomerGatewayId": Nothing, "IpAddress": Nothing, "State": Nothing, "Tags": Nothing, "Type": Nothing }



newtype CustomerGatewayIdStringList = CustomerGatewayIdStringList (Array String)
derive instance newtypeCustomerGatewayIdStringList :: Newtype CustomerGatewayIdStringList _
derive instance repGenericCustomerGatewayIdStringList :: Generic CustomerGatewayIdStringList _
instance showCustomerGatewayIdStringList :: Show CustomerGatewayIdStringList where show = genericShow
instance decodeCustomerGatewayIdStringList :: Decode CustomerGatewayIdStringList where decode = genericDecode options
instance encodeCustomerGatewayIdStringList :: Encode CustomerGatewayIdStringList where encode = genericEncode options



newtype CustomerGatewayList = CustomerGatewayList (Array CustomerGateway)
derive instance newtypeCustomerGatewayList :: Newtype CustomerGatewayList _
derive instance repGenericCustomerGatewayList :: Generic CustomerGatewayList _
instance showCustomerGatewayList :: Show CustomerGatewayList where show = genericShow
instance decodeCustomerGatewayList :: Decode CustomerGatewayList where decode = genericDecode options
instance encodeCustomerGatewayList :: Encode CustomerGatewayList where encode = genericEncode options



newtype DatafeedSubscriptionState = DatafeedSubscriptionState String
derive instance newtypeDatafeedSubscriptionState :: Newtype DatafeedSubscriptionState _
derive instance repGenericDatafeedSubscriptionState :: Generic DatafeedSubscriptionState _
instance showDatafeedSubscriptionState :: Show DatafeedSubscriptionState where show = genericShow
instance decodeDatafeedSubscriptionState :: Decode DatafeedSubscriptionState where decode = genericDecode options
instance encodeDatafeedSubscriptionState :: Encode DatafeedSubscriptionState where encode = genericEncode options



newtype DateTime = DateTime Types.Timestamp
derive instance newtypeDateTime :: Newtype DateTime _
derive instance repGenericDateTime :: Generic DateTime _
instance showDateTime :: Show DateTime where show = genericShow
instance decodeDateTime :: Decode DateTime where decode = genericDecode options
instance encodeDateTime :: Encode DateTime where encode = genericEncode options



-- | <p>Contains the parameters for DeleteCustomerGateway.</p>
newtype DeleteCustomerGatewayRequest = DeleteCustomerGatewayRequest 
  { "CustomerGatewayId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDeleteCustomerGatewayRequest :: Newtype DeleteCustomerGatewayRequest _
derive instance repGenericDeleteCustomerGatewayRequest :: Generic DeleteCustomerGatewayRequest _
instance showDeleteCustomerGatewayRequest :: Show DeleteCustomerGatewayRequest where show = genericShow
instance decodeDeleteCustomerGatewayRequest :: Decode DeleteCustomerGatewayRequest where decode = genericDecode options
instance encodeDeleteCustomerGatewayRequest :: Encode DeleteCustomerGatewayRequest where encode = genericEncode options

-- | Constructs DeleteCustomerGatewayRequest from required parameters
newDeleteCustomerGatewayRequest :: String -> DeleteCustomerGatewayRequest
newDeleteCustomerGatewayRequest _CustomerGatewayId = DeleteCustomerGatewayRequest { "CustomerGatewayId": _CustomerGatewayId, "DryRun": Nothing }

-- | Constructs DeleteCustomerGatewayRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteCustomerGatewayRequest' :: String -> ( { "CustomerGatewayId" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"CustomerGatewayId" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> DeleteCustomerGatewayRequest
newDeleteCustomerGatewayRequest' _CustomerGatewayId customize = (DeleteCustomerGatewayRequest <<< customize) { "CustomerGatewayId": _CustomerGatewayId, "DryRun": Nothing }



-- | <p>Contains the parameters for DeleteDhcpOptions.</p>
newtype DeleteDhcpOptionsRequest = DeleteDhcpOptionsRequest 
  { "DhcpOptionsId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDeleteDhcpOptionsRequest :: Newtype DeleteDhcpOptionsRequest _
derive instance repGenericDeleteDhcpOptionsRequest :: Generic DeleteDhcpOptionsRequest _
instance showDeleteDhcpOptionsRequest :: Show DeleteDhcpOptionsRequest where show = genericShow
instance decodeDeleteDhcpOptionsRequest :: Decode DeleteDhcpOptionsRequest where decode = genericDecode options
instance encodeDeleteDhcpOptionsRequest :: Encode DeleteDhcpOptionsRequest where encode = genericEncode options

-- | Constructs DeleteDhcpOptionsRequest from required parameters
newDeleteDhcpOptionsRequest :: String -> DeleteDhcpOptionsRequest
newDeleteDhcpOptionsRequest _DhcpOptionsId = DeleteDhcpOptionsRequest { "DhcpOptionsId": _DhcpOptionsId, "DryRun": Nothing }

-- | Constructs DeleteDhcpOptionsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteDhcpOptionsRequest' :: String -> ( { "DhcpOptionsId" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"DhcpOptionsId" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> DeleteDhcpOptionsRequest
newDeleteDhcpOptionsRequest' _DhcpOptionsId customize = (DeleteDhcpOptionsRequest <<< customize) { "DhcpOptionsId": _DhcpOptionsId, "DryRun": Nothing }



newtype DeleteEgressOnlyInternetGatewayRequest = DeleteEgressOnlyInternetGatewayRequest 
  { "DryRun" :: Maybe (Boolean)
  , "EgressOnlyInternetGatewayId" :: (EgressOnlyInternetGatewayId)
  }
derive instance newtypeDeleteEgressOnlyInternetGatewayRequest :: Newtype DeleteEgressOnlyInternetGatewayRequest _
derive instance repGenericDeleteEgressOnlyInternetGatewayRequest :: Generic DeleteEgressOnlyInternetGatewayRequest _
instance showDeleteEgressOnlyInternetGatewayRequest :: Show DeleteEgressOnlyInternetGatewayRequest where show = genericShow
instance decodeDeleteEgressOnlyInternetGatewayRequest :: Decode DeleteEgressOnlyInternetGatewayRequest where decode = genericDecode options
instance encodeDeleteEgressOnlyInternetGatewayRequest :: Encode DeleteEgressOnlyInternetGatewayRequest where encode = genericEncode options

-- | Constructs DeleteEgressOnlyInternetGatewayRequest from required parameters
newDeleteEgressOnlyInternetGatewayRequest :: EgressOnlyInternetGatewayId -> DeleteEgressOnlyInternetGatewayRequest
newDeleteEgressOnlyInternetGatewayRequest _EgressOnlyInternetGatewayId = DeleteEgressOnlyInternetGatewayRequest { "EgressOnlyInternetGatewayId": _EgressOnlyInternetGatewayId, "DryRun": Nothing }

-- | Constructs DeleteEgressOnlyInternetGatewayRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteEgressOnlyInternetGatewayRequest' :: EgressOnlyInternetGatewayId -> ( { "DryRun" :: Maybe (Boolean) , "EgressOnlyInternetGatewayId" :: (EgressOnlyInternetGatewayId) } -> {"DryRun" :: Maybe (Boolean) , "EgressOnlyInternetGatewayId" :: (EgressOnlyInternetGatewayId) } ) -> DeleteEgressOnlyInternetGatewayRequest
newDeleteEgressOnlyInternetGatewayRequest' _EgressOnlyInternetGatewayId customize = (DeleteEgressOnlyInternetGatewayRequest <<< customize) { "EgressOnlyInternetGatewayId": _EgressOnlyInternetGatewayId, "DryRun": Nothing }



newtype DeleteEgressOnlyInternetGatewayResult = DeleteEgressOnlyInternetGatewayResult 
  { "ReturnCode" :: Maybe (Boolean)
  }
derive instance newtypeDeleteEgressOnlyInternetGatewayResult :: Newtype DeleteEgressOnlyInternetGatewayResult _
derive instance repGenericDeleteEgressOnlyInternetGatewayResult :: Generic DeleteEgressOnlyInternetGatewayResult _
instance showDeleteEgressOnlyInternetGatewayResult :: Show DeleteEgressOnlyInternetGatewayResult where show = genericShow
instance decodeDeleteEgressOnlyInternetGatewayResult :: Decode DeleteEgressOnlyInternetGatewayResult where decode = genericDecode options
instance encodeDeleteEgressOnlyInternetGatewayResult :: Encode DeleteEgressOnlyInternetGatewayResult where encode = genericEncode options

-- | Constructs DeleteEgressOnlyInternetGatewayResult from required parameters
newDeleteEgressOnlyInternetGatewayResult :: DeleteEgressOnlyInternetGatewayResult
newDeleteEgressOnlyInternetGatewayResult  = DeleteEgressOnlyInternetGatewayResult { "ReturnCode": Nothing }

-- | Constructs DeleteEgressOnlyInternetGatewayResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteEgressOnlyInternetGatewayResult' :: ( { "ReturnCode" :: Maybe (Boolean) } -> {"ReturnCode" :: Maybe (Boolean) } ) -> DeleteEgressOnlyInternetGatewayResult
newDeleteEgressOnlyInternetGatewayResult'  customize = (DeleteEgressOnlyInternetGatewayResult <<< customize) { "ReturnCode": Nothing }



-- | <p>Contains the parameters for DeleteFlowLogs.</p>
newtype DeleteFlowLogsRequest = DeleteFlowLogsRequest 
  { "FlowLogIds" :: (ValueStringList)
  }
derive instance newtypeDeleteFlowLogsRequest :: Newtype DeleteFlowLogsRequest _
derive instance repGenericDeleteFlowLogsRequest :: Generic DeleteFlowLogsRequest _
instance showDeleteFlowLogsRequest :: Show DeleteFlowLogsRequest where show = genericShow
instance decodeDeleteFlowLogsRequest :: Decode DeleteFlowLogsRequest where decode = genericDecode options
instance encodeDeleteFlowLogsRequest :: Encode DeleteFlowLogsRequest where encode = genericEncode options

-- | Constructs DeleteFlowLogsRequest from required parameters
newDeleteFlowLogsRequest :: ValueStringList -> DeleteFlowLogsRequest
newDeleteFlowLogsRequest _FlowLogIds = DeleteFlowLogsRequest { "FlowLogIds": _FlowLogIds }

-- | Constructs DeleteFlowLogsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteFlowLogsRequest' :: ValueStringList -> ( { "FlowLogIds" :: (ValueStringList) } -> {"FlowLogIds" :: (ValueStringList) } ) -> DeleteFlowLogsRequest
newDeleteFlowLogsRequest' _FlowLogIds customize = (DeleteFlowLogsRequest <<< customize) { "FlowLogIds": _FlowLogIds }



-- | <p>Contains the output of DeleteFlowLogs.</p>
newtype DeleteFlowLogsResult = DeleteFlowLogsResult 
  { "Unsuccessful" :: Maybe (UnsuccessfulItemSet)
  }
derive instance newtypeDeleteFlowLogsResult :: Newtype DeleteFlowLogsResult _
derive instance repGenericDeleteFlowLogsResult :: Generic DeleteFlowLogsResult _
instance showDeleteFlowLogsResult :: Show DeleteFlowLogsResult where show = genericShow
instance decodeDeleteFlowLogsResult :: Decode DeleteFlowLogsResult where decode = genericDecode options
instance encodeDeleteFlowLogsResult :: Encode DeleteFlowLogsResult where encode = genericEncode options

-- | Constructs DeleteFlowLogsResult from required parameters
newDeleteFlowLogsResult :: DeleteFlowLogsResult
newDeleteFlowLogsResult  = DeleteFlowLogsResult { "Unsuccessful": Nothing }

-- | Constructs DeleteFlowLogsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteFlowLogsResult' :: ( { "Unsuccessful" :: Maybe (UnsuccessfulItemSet) } -> {"Unsuccessful" :: Maybe (UnsuccessfulItemSet) } ) -> DeleteFlowLogsResult
newDeleteFlowLogsResult'  customize = (DeleteFlowLogsResult <<< customize) { "Unsuccessful": Nothing }



newtype DeleteFpgaImageRequest = DeleteFpgaImageRequest 
  { "DryRun" :: Maybe (Boolean)
  , "FpgaImageId" :: (String)
  }
derive instance newtypeDeleteFpgaImageRequest :: Newtype DeleteFpgaImageRequest _
derive instance repGenericDeleteFpgaImageRequest :: Generic DeleteFpgaImageRequest _
instance showDeleteFpgaImageRequest :: Show DeleteFpgaImageRequest where show = genericShow
instance decodeDeleteFpgaImageRequest :: Decode DeleteFpgaImageRequest where decode = genericDecode options
instance encodeDeleteFpgaImageRequest :: Encode DeleteFpgaImageRequest where encode = genericEncode options

-- | Constructs DeleteFpgaImageRequest from required parameters
newDeleteFpgaImageRequest :: String -> DeleteFpgaImageRequest
newDeleteFpgaImageRequest _FpgaImageId = DeleteFpgaImageRequest { "FpgaImageId": _FpgaImageId, "DryRun": Nothing }

-- | Constructs DeleteFpgaImageRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteFpgaImageRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "FpgaImageId" :: (String) } -> {"DryRun" :: Maybe (Boolean) , "FpgaImageId" :: (String) } ) -> DeleteFpgaImageRequest
newDeleteFpgaImageRequest' _FpgaImageId customize = (DeleteFpgaImageRequest <<< customize) { "FpgaImageId": _FpgaImageId, "DryRun": Nothing }



newtype DeleteFpgaImageResult = DeleteFpgaImageResult 
  { "Return" :: Maybe (Boolean)
  }
derive instance newtypeDeleteFpgaImageResult :: Newtype DeleteFpgaImageResult _
derive instance repGenericDeleteFpgaImageResult :: Generic DeleteFpgaImageResult _
instance showDeleteFpgaImageResult :: Show DeleteFpgaImageResult where show = genericShow
instance decodeDeleteFpgaImageResult :: Decode DeleteFpgaImageResult where decode = genericDecode options
instance encodeDeleteFpgaImageResult :: Encode DeleteFpgaImageResult where encode = genericEncode options

-- | Constructs DeleteFpgaImageResult from required parameters
newDeleteFpgaImageResult :: DeleteFpgaImageResult
newDeleteFpgaImageResult  = DeleteFpgaImageResult { "Return": Nothing }

-- | Constructs DeleteFpgaImageResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteFpgaImageResult' :: ( { "Return" :: Maybe (Boolean) } -> {"Return" :: Maybe (Boolean) } ) -> DeleteFpgaImageResult
newDeleteFpgaImageResult'  customize = (DeleteFpgaImageResult <<< customize) { "Return": Nothing }



-- | <p>Contains the parameters for DeleteInternetGateway.</p>
newtype DeleteInternetGatewayRequest = DeleteInternetGatewayRequest 
  { "DryRun" :: Maybe (Boolean)
  , "InternetGatewayId" :: (String)
  }
derive instance newtypeDeleteInternetGatewayRequest :: Newtype DeleteInternetGatewayRequest _
derive instance repGenericDeleteInternetGatewayRequest :: Generic DeleteInternetGatewayRequest _
instance showDeleteInternetGatewayRequest :: Show DeleteInternetGatewayRequest where show = genericShow
instance decodeDeleteInternetGatewayRequest :: Decode DeleteInternetGatewayRequest where decode = genericDecode options
instance encodeDeleteInternetGatewayRequest :: Encode DeleteInternetGatewayRequest where encode = genericEncode options

-- | Constructs DeleteInternetGatewayRequest from required parameters
newDeleteInternetGatewayRequest :: String -> DeleteInternetGatewayRequest
newDeleteInternetGatewayRequest _InternetGatewayId = DeleteInternetGatewayRequest { "InternetGatewayId": _InternetGatewayId, "DryRun": Nothing }

-- | Constructs DeleteInternetGatewayRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteInternetGatewayRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "InternetGatewayId" :: (String) } -> {"DryRun" :: Maybe (Boolean) , "InternetGatewayId" :: (String) } ) -> DeleteInternetGatewayRequest
newDeleteInternetGatewayRequest' _InternetGatewayId customize = (DeleteInternetGatewayRequest <<< customize) { "InternetGatewayId": _InternetGatewayId, "DryRun": Nothing }



-- | <p>Contains the parameters for DeleteKeyPair.</p>
newtype DeleteKeyPairRequest = DeleteKeyPairRequest 
  { "KeyName" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDeleteKeyPairRequest :: Newtype DeleteKeyPairRequest _
derive instance repGenericDeleteKeyPairRequest :: Generic DeleteKeyPairRequest _
instance showDeleteKeyPairRequest :: Show DeleteKeyPairRequest where show = genericShow
instance decodeDeleteKeyPairRequest :: Decode DeleteKeyPairRequest where decode = genericDecode options
instance encodeDeleteKeyPairRequest :: Encode DeleteKeyPairRequest where encode = genericEncode options

-- | Constructs DeleteKeyPairRequest from required parameters
newDeleteKeyPairRequest :: String -> DeleteKeyPairRequest
newDeleteKeyPairRequest _KeyName = DeleteKeyPairRequest { "KeyName": _KeyName, "DryRun": Nothing }

-- | Constructs DeleteKeyPairRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteKeyPairRequest' :: String -> ( { "KeyName" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"KeyName" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> DeleteKeyPairRequest
newDeleteKeyPairRequest' _KeyName customize = (DeleteKeyPairRequest <<< customize) { "KeyName": _KeyName, "DryRun": Nothing }



newtype DeleteLaunchTemplateRequest = DeleteLaunchTemplateRequest 
  { "DryRun" :: Maybe (Boolean)
  , "LaunchTemplateId" :: Maybe (String)
  , "LaunchTemplateName" :: Maybe (LaunchTemplateName)
  }
derive instance newtypeDeleteLaunchTemplateRequest :: Newtype DeleteLaunchTemplateRequest _
derive instance repGenericDeleteLaunchTemplateRequest :: Generic DeleteLaunchTemplateRequest _
instance showDeleteLaunchTemplateRequest :: Show DeleteLaunchTemplateRequest where show = genericShow
instance decodeDeleteLaunchTemplateRequest :: Decode DeleteLaunchTemplateRequest where decode = genericDecode options
instance encodeDeleteLaunchTemplateRequest :: Encode DeleteLaunchTemplateRequest where encode = genericEncode options

-- | Constructs DeleteLaunchTemplateRequest from required parameters
newDeleteLaunchTemplateRequest :: DeleteLaunchTemplateRequest
newDeleteLaunchTemplateRequest  = DeleteLaunchTemplateRequest { "DryRun": Nothing, "LaunchTemplateId": Nothing, "LaunchTemplateName": Nothing }

-- | Constructs DeleteLaunchTemplateRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteLaunchTemplateRequest' :: ( { "DryRun" :: Maybe (Boolean) , "LaunchTemplateId" :: Maybe (String) , "LaunchTemplateName" :: Maybe (LaunchTemplateName) } -> {"DryRun" :: Maybe (Boolean) , "LaunchTemplateId" :: Maybe (String) , "LaunchTemplateName" :: Maybe (LaunchTemplateName) } ) -> DeleteLaunchTemplateRequest
newDeleteLaunchTemplateRequest'  customize = (DeleteLaunchTemplateRequest <<< customize) { "DryRun": Nothing, "LaunchTemplateId": Nothing, "LaunchTemplateName": Nothing }



newtype DeleteLaunchTemplateResult = DeleteLaunchTemplateResult 
  { "LaunchTemplate" :: Maybe (LaunchTemplate)
  }
derive instance newtypeDeleteLaunchTemplateResult :: Newtype DeleteLaunchTemplateResult _
derive instance repGenericDeleteLaunchTemplateResult :: Generic DeleteLaunchTemplateResult _
instance showDeleteLaunchTemplateResult :: Show DeleteLaunchTemplateResult where show = genericShow
instance decodeDeleteLaunchTemplateResult :: Decode DeleteLaunchTemplateResult where decode = genericDecode options
instance encodeDeleteLaunchTemplateResult :: Encode DeleteLaunchTemplateResult where encode = genericEncode options

-- | Constructs DeleteLaunchTemplateResult from required parameters
newDeleteLaunchTemplateResult :: DeleteLaunchTemplateResult
newDeleteLaunchTemplateResult  = DeleteLaunchTemplateResult { "LaunchTemplate": Nothing }

-- | Constructs DeleteLaunchTemplateResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteLaunchTemplateResult' :: ( { "LaunchTemplate" :: Maybe (LaunchTemplate) } -> {"LaunchTemplate" :: Maybe (LaunchTemplate) } ) -> DeleteLaunchTemplateResult
newDeleteLaunchTemplateResult'  customize = (DeleteLaunchTemplateResult <<< customize) { "LaunchTemplate": Nothing }



newtype DeleteLaunchTemplateVersionsRequest = DeleteLaunchTemplateVersionsRequest 
  { "DryRun" :: Maybe (Boolean)
  , "LaunchTemplateId" :: Maybe (String)
  , "LaunchTemplateName" :: Maybe (LaunchTemplateName)
  , "Versions" :: (VersionStringList)
  }
derive instance newtypeDeleteLaunchTemplateVersionsRequest :: Newtype DeleteLaunchTemplateVersionsRequest _
derive instance repGenericDeleteLaunchTemplateVersionsRequest :: Generic DeleteLaunchTemplateVersionsRequest _
instance showDeleteLaunchTemplateVersionsRequest :: Show DeleteLaunchTemplateVersionsRequest where show = genericShow
instance decodeDeleteLaunchTemplateVersionsRequest :: Decode DeleteLaunchTemplateVersionsRequest where decode = genericDecode options
instance encodeDeleteLaunchTemplateVersionsRequest :: Encode DeleteLaunchTemplateVersionsRequest where encode = genericEncode options

-- | Constructs DeleteLaunchTemplateVersionsRequest from required parameters
newDeleteLaunchTemplateVersionsRequest :: VersionStringList -> DeleteLaunchTemplateVersionsRequest
newDeleteLaunchTemplateVersionsRequest _Versions = DeleteLaunchTemplateVersionsRequest { "Versions": _Versions, "DryRun": Nothing, "LaunchTemplateId": Nothing, "LaunchTemplateName": Nothing }

-- | Constructs DeleteLaunchTemplateVersionsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteLaunchTemplateVersionsRequest' :: VersionStringList -> ( { "DryRun" :: Maybe (Boolean) , "LaunchTemplateId" :: Maybe (String) , "LaunchTemplateName" :: Maybe (LaunchTemplateName) , "Versions" :: (VersionStringList) } -> {"DryRun" :: Maybe (Boolean) , "LaunchTemplateId" :: Maybe (String) , "LaunchTemplateName" :: Maybe (LaunchTemplateName) , "Versions" :: (VersionStringList) } ) -> DeleteLaunchTemplateVersionsRequest
newDeleteLaunchTemplateVersionsRequest' _Versions customize = (DeleteLaunchTemplateVersionsRequest <<< customize) { "Versions": _Versions, "DryRun": Nothing, "LaunchTemplateId": Nothing, "LaunchTemplateName": Nothing }



-- | <p>Describes a launch template version that could not be deleted.</p>
newtype DeleteLaunchTemplateVersionsResponseErrorItem = DeleteLaunchTemplateVersionsResponseErrorItem 
  { "LaunchTemplateId" :: Maybe (String)
  , "LaunchTemplateName" :: Maybe (String)
  , "VersionNumber" :: Maybe (Number)
  , "ResponseError" :: Maybe (ResponseError)
  }
derive instance newtypeDeleteLaunchTemplateVersionsResponseErrorItem :: Newtype DeleteLaunchTemplateVersionsResponseErrorItem _
derive instance repGenericDeleteLaunchTemplateVersionsResponseErrorItem :: Generic DeleteLaunchTemplateVersionsResponseErrorItem _
instance showDeleteLaunchTemplateVersionsResponseErrorItem :: Show DeleteLaunchTemplateVersionsResponseErrorItem where show = genericShow
instance decodeDeleteLaunchTemplateVersionsResponseErrorItem :: Decode DeleteLaunchTemplateVersionsResponseErrorItem where decode = genericDecode options
instance encodeDeleteLaunchTemplateVersionsResponseErrorItem :: Encode DeleteLaunchTemplateVersionsResponseErrorItem where encode = genericEncode options

-- | Constructs DeleteLaunchTemplateVersionsResponseErrorItem from required parameters
newDeleteLaunchTemplateVersionsResponseErrorItem :: DeleteLaunchTemplateVersionsResponseErrorItem
newDeleteLaunchTemplateVersionsResponseErrorItem  = DeleteLaunchTemplateVersionsResponseErrorItem { "LaunchTemplateId": Nothing, "LaunchTemplateName": Nothing, "ResponseError": Nothing, "VersionNumber": Nothing }

-- | Constructs DeleteLaunchTemplateVersionsResponseErrorItem's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteLaunchTemplateVersionsResponseErrorItem' :: ( { "LaunchTemplateId" :: Maybe (String) , "LaunchTemplateName" :: Maybe (String) , "VersionNumber" :: Maybe (Number) , "ResponseError" :: Maybe (ResponseError) } -> {"LaunchTemplateId" :: Maybe (String) , "LaunchTemplateName" :: Maybe (String) , "VersionNumber" :: Maybe (Number) , "ResponseError" :: Maybe (ResponseError) } ) -> DeleteLaunchTemplateVersionsResponseErrorItem
newDeleteLaunchTemplateVersionsResponseErrorItem'  customize = (DeleteLaunchTemplateVersionsResponseErrorItem <<< customize) { "LaunchTemplateId": Nothing, "LaunchTemplateName": Nothing, "ResponseError": Nothing, "VersionNumber": Nothing }



newtype DeleteLaunchTemplateVersionsResponseErrorSet = DeleteLaunchTemplateVersionsResponseErrorSet (Array DeleteLaunchTemplateVersionsResponseErrorItem)
derive instance newtypeDeleteLaunchTemplateVersionsResponseErrorSet :: Newtype DeleteLaunchTemplateVersionsResponseErrorSet _
derive instance repGenericDeleteLaunchTemplateVersionsResponseErrorSet :: Generic DeleteLaunchTemplateVersionsResponseErrorSet _
instance showDeleteLaunchTemplateVersionsResponseErrorSet :: Show DeleteLaunchTemplateVersionsResponseErrorSet where show = genericShow
instance decodeDeleteLaunchTemplateVersionsResponseErrorSet :: Decode DeleteLaunchTemplateVersionsResponseErrorSet where decode = genericDecode options
instance encodeDeleteLaunchTemplateVersionsResponseErrorSet :: Encode DeleteLaunchTemplateVersionsResponseErrorSet where encode = genericEncode options



-- | <p>Describes a launch template version that was successfully deleted.</p>
newtype DeleteLaunchTemplateVersionsResponseSuccessItem = DeleteLaunchTemplateVersionsResponseSuccessItem 
  { "LaunchTemplateId" :: Maybe (String)
  , "LaunchTemplateName" :: Maybe (String)
  , "VersionNumber" :: Maybe (Number)
  }
derive instance newtypeDeleteLaunchTemplateVersionsResponseSuccessItem :: Newtype DeleteLaunchTemplateVersionsResponseSuccessItem _
derive instance repGenericDeleteLaunchTemplateVersionsResponseSuccessItem :: Generic DeleteLaunchTemplateVersionsResponseSuccessItem _
instance showDeleteLaunchTemplateVersionsResponseSuccessItem :: Show DeleteLaunchTemplateVersionsResponseSuccessItem where show = genericShow
instance decodeDeleteLaunchTemplateVersionsResponseSuccessItem :: Decode DeleteLaunchTemplateVersionsResponseSuccessItem where decode = genericDecode options
instance encodeDeleteLaunchTemplateVersionsResponseSuccessItem :: Encode DeleteLaunchTemplateVersionsResponseSuccessItem where encode = genericEncode options

-- | Constructs DeleteLaunchTemplateVersionsResponseSuccessItem from required parameters
newDeleteLaunchTemplateVersionsResponseSuccessItem :: DeleteLaunchTemplateVersionsResponseSuccessItem
newDeleteLaunchTemplateVersionsResponseSuccessItem  = DeleteLaunchTemplateVersionsResponseSuccessItem { "LaunchTemplateId": Nothing, "LaunchTemplateName": Nothing, "VersionNumber": Nothing }

-- | Constructs DeleteLaunchTemplateVersionsResponseSuccessItem's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteLaunchTemplateVersionsResponseSuccessItem' :: ( { "LaunchTemplateId" :: Maybe (String) , "LaunchTemplateName" :: Maybe (String) , "VersionNumber" :: Maybe (Number) } -> {"LaunchTemplateId" :: Maybe (String) , "LaunchTemplateName" :: Maybe (String) , "VersionNumber" :: Maybe (Number) } ) -> DeleteLaunchTemplateVersionsResponseSuccessItem
newDeleteLaunchTemplateVersionsResponseSuccessItem'  customize = (DeleteLaunchTemplateVersionsResponseSuccessItem <<< customize) { "LaunchTemplateId": Nothing, "LaunchTemplateName": Nothing, "VersionNumber": Nothing }



newtype DeleteLaunchTemplateVersionsResponseSuccessSet = DeleteLaunchTemplateVersionsResponseSuccessSet (Array DeleteLaunchTemplateVersionsResponseSuccessItem)
derive instance newtypeDeleteLaunchTemplateVersionsResponseSuccessSet :: Newtype DeleteLaunchTemplateVersionsResponseSuccessSet _
derive instance repGenericDeleteLaunchTemplateVersionsResponseSuccessSet :: Generic DeleteLaunchTemplateVersionsResponseSuccessSet _
instance showDeleteLaunchTemplateVersionsResponseSuccessSet :: Show DeleteLaunchTemplateVersionsResponseSuccessSet where show = genericShow
instance decodeDeleteLaunchTemplateVersionsResponseSuccessSet :: Decode DeleteLaunchTemplateVersionsResponseSuccessSet where decode = genericDecode options
instance encodeDeleteLaunchTemplateVersionsResponseSuccessSet :: Encode DeleteLaunchTemplateVersionsResponseSuccessSet where encode = genericEncode options



newtype DeleteLaunchTemplateVersionsResult = DeleteLaunchTemplateVersionsResult 
  { "SuccessfullyDeletedLaunchTemplateVersions" :: Maybe (DeleteLaunchTemplateVersionsResponseSuccessSet)
  , "UnsuccessfullyDeletedLaunchTemplateVersions" :: Maybe (DeleteLaunchTemplateVersionsResponseErrorSet)
  }
derive instance newtypeDeleteLaunchTemplateVersionsResult :: Newtype DeleteLaunchTemplateVersionsResult _
derive instance repGenericDeleteLaunchTemplateVersionsResult :: Generic DeleteLaunchTemplateVersionsResult _
instance showDeleteLaunchTemplateVersionsResult :: Show DeleteLaunchTemplateVersionsResult where show = genericShow
instance decodeDeleteLaunchTemplateVersionsResult :: Decode DeleteLaunchTemplateVersionsResult where decode = genericDecode options
instance encodeDeleteLaunchTemplateVersionsResult :: Encode DeleteLaunchTemplateVersionsResult where encode = genericEncode options

-- | Constructs DeleteLaunchTemplateVersionsResult from required parameters
newDeleteLaunchTemplateVersionsResult :: DeleteLaunchTemplateVersionsResult
newDeleteLaunchTemplateVersionsResult  = DeleteLaunchTemplateVersionsResult { "SuccessfullyDeletedLaunchTemplateVersions": Nothing, "UnsuccessfullyDeletedLaunchTemplateVersions": Nothing }

-- | Constructs DeleteLaunchTemplateVersionsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteLaunchTemplateVersionsResult' :: ( { "SuccessfullyDeletedLaunchTemplateVersions" :: Maybe (DeleteLaunchTemplateVersionsResponseSuccessSet) , "UnsuccessfullyDeletedLaunchTemplateVersions" :: Maybe (DeleteLaunchTemplateVersionsResponseErrorSet) } -> {"SuccessfullyDeletedLaunchTemplateVersions" :: Maybe (DeleteLaunchTemplateVersionsResponseSuccessSet) , "UnsuccessfullyDeletedLaunchTemplateVersions" :: Maybe (DeleteLaunchTemplateVersionsResponseErrorSet) } ) -> DeleteLaunchTemplateVersionsResult
newDeleteLaunchTemplateVersionsResult'  customize = (DeleteLaunchTemplateVersionsResult <<< customize) { "SuccessfullyDeletedLaunchTemplateVersions": Nothing, "UnsuccessfullyDeletedLaunchTemplateVersions": Nothing }



-- | <p>Contains the parameters for DeleteNatGateway.</p>
newtype DeleteNatGatewayRequest = DeleteNatGatewayRequest 
  { "NatGatewayId" :: (String)
  }
derive instance newtypeDeleteNatGatewayRequest :: Newtype DeleteNatGatewayRequest _
derive instance repGenericDeleteNatGatewayRequest :: Generic DeleteNatGatewayRequest _
instance showDeleteNatGatewayRequest :: Show DeleteNatGatewayRequest where show = genericShow
instance decodeDeleteNatGatewayRequest :: Decode DeleteNatGatewayRequest where decode = genericDecode options
instance encodeDeleteNatGatewayRequest :: Encode DeleteNatGatewayRequest where encode = genericEncode options

-- | Constructs DeleteNatGatewayRequest from required parameters
newDeleteNatGatewayRequest :: String -> DeleteNatGatewayRequest
newDeleteNatGatewayRequest _NatGatewayId = DeleteNatGatewayRequest { "NatGatewayId": _NatGatewayId }

-- | Constructs DeleteNatGatewayRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteNatGatewayRequest' :: String -> ( { "NatGatewayId" :: (String) } -> {"NatGatewayId" :: (String) } ) -> DeleteNatGatewayRequest
newDeleteNatGatewayRequest' _NatGatewayId customize = (DeleteNatGatewayRequest <<< customize) { "NatGatewayId": _NatGatewayId }



-- | <p>Contains the output of DeleteNatGateway.</p>
newtype DeleteNatGatewayResult = DeleteNatGatewayResult 
  { "NatGatewayId" :: Maybe (String)
  }
derive instance newtypeDeleteNatGatewayResult :: Newtype DeleteNatGatewayResult _
derive instance repGenericDeleteNatGatewayResult :: Generic DeleteNatGatewayResult _
instance showDeleteNatGatewayResult :: Show DeleteNatGatewayResult where show = genericShow
instance decodeDeleteNatGatewayResult :: Decode DeleteNatGatewayResult where decode = genericDecode options
instance encodeDeleteNatGatewayResult :: Encode DeleteNatGatewayResult where encode = genericEncode options

-- | Constructs DeleteNatGatewayResult from required parameters
newDeleteNatGatewayResult :: DeleteNatGatewayResult
newDeleteNatGatewayResult  = DeleteNatGatewayResult { "NatGatewayId": Nothing }

-- | Constructs DeleteNatGatewayResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteNatGatewayResult' :: ( { "NatGatewayId" :: Maybe (String) } -> {"NatGatewayId" :: Maybe (String) } ) -> DeleteNatGatewayResult
newDeleteNatGatewayResult'  customize = (DeleteNatGatewayResult <<< customize) { "NatGatewayId": Nothing }



-- | <p>Contains the parameters for DeleteNetworkAclEntry.</p>
newtype DeleteNetworkAclEntryRequest = DeleteNetworkAclEntryRequest 
  { "DryRun" :: Maybe (Boolean)
  , "Egress" :: (Boolean)
  , "NetworkAclId" :: (String)
  , "RuleNumber" :: (Int)
  }
derive instance newtypeDeleteNetworkAclEntryRequest :: Newtype DeleteNetworkAclEntryRequest _
derive instance repGenericDeleteNetworkAclEntryRequest :: Generic DeleteNetworkAclEntryRequest _
instance showDeleteNetworkAclEntryRequest :: Show DeleteNetworkAclEntryRequest where show = genericShow
instance decodeDeleteNetworkAclEntryRequest :: Decode DeleteNetworkAclEntryRequest where decode = genericDecode options
instance encodeDeleteNetworkAclEntryRequest :: Encode DeleteNetworkAclEntryRequest where encode = genericEncode options

-- | Constructs DeleteNetworkAclEntryRequest from required parameters
newDeleteNetworkAclEntryRequest :: Boolean -> String -> Int -> DeleteNetworkAclEntryRequest
newDeleteNetworkAclEntryRequest _Egress _NetworkAclId _RuleNumber = DeleteNetworkAclEntryRequest { "Egress": _Egress, "NetworkAclId": _NetworkAclId, "RuleNumber": _RuleNumber, "DryRun": Nothing }

-- | Constructs DeleteNetworkAclEntryRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteNetworkAclEntryRequest' :: Boolean -> String -> Int -> ( { "DryRun" :: Maybe (Boolean) , "Egress" :: (Boolean) , "NetworkAclId" :: (String) , "RuleNumber" :: (Int) } -> {"DryRun" :: Maybe (Boolean) , "Egress" :: (Boolean) , "NetworkAclId" :: (String) , "RuleNumber" :: (Int) } ) -> DeleteNetworkAclEntryRequest
newDeleteNetworkAclEntryRequest' _Egress _NetworkAclId _RuleNumber customize = (DeleteNetworkAclEntryRequest <<< customize) { "Egress": _Egress, "NetworkAclId": _NetworkAclId, "RuleNumber": _RuleNumber, "DryRun": Nothing }



-- | <p>Contains the parameters for DeleteNetworkAcl.</p>
newtype DeleteNetworkAclRequest = DeleteNetworkAclRequest 
  { "DryRun" :: Maybe (Boolean)
  , "NetworkAclId" :: (String)
  }
derive instance newtypeDeleteNetworkAclRequest :: Newtype DeleteNetworkAclRequest _
derive instance repGenericDeleteNetworkAclRequest :: Generic DeleteNetworkAclRequest _
instance showDeleteNetworkAclRequest :: Show DeleteNetworkAclRequest where show = genericShow
instance decodeDeleteNetworkAclRequest :: Decode DeleteNetworkAclRequest where decode = genericDecode options
instance encodeDeleteNetworkAclRequest :: Encode DeleteNetworkAclRequest where encode = genericEncode options

-- | Constructs DeleteNetworkAclRequest from required parameters
newDeleteNetworkAclRequest :: String -> DeleteNetworkAclRequest
newDeleteNetworkAclRequest _NetworkAclId = DeleteNetworkAclRequest { "NetworkAclId": _NetworkAclId, "DryRun": Nothing }

-- | Constructs DeleteNetworkAclRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteNetworkAclRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "NetworkAclId" :: (String) } -> {"DryRun" :: Maybe (Boolean) , "NetworkAclId" :: (String) } ) -> DeleteNetworkAclRequest
newDeleteNetworkAclRequest' _NetworkAclId customize = (DeleteNetworkAclRequest <<< customize) { "NetworkAclId": _NetworkAclId, "DryRun": Nothing }



-- | <p>Contains the parameters for DeleteNetworkInterfacePermission.</p>
newtype DeleteNetworkInterfacePermissionRequest = DeleteNetworkInterfacePermissionRequest 
  { "NetworkInterfacePermissionId" :: (String)
  , "Force" :: Maybe (Boolean)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDeleteNetworkInterfacePermissionRequest :: Newtype DeleteNetworkInterfacePermissionRequest _
derive instance repGenericDeleteNetworkInterfacePermissionRequest :: Generic DeleteNetworkInterfacePermissionRequest _
instance showDeleteNetworkInterfacePermissionRequest :: Show DeleteNetworkInterfacePermissionRequest where show = genericShow
instance decodeDeleteNetworkInterfacePermissionRequest :: Decode DeleteNetworkInterfacePermissionRequest where decode = genericDecode options
instance encodeDeleteNetworkInterfacePermissionRequest :: Encode DeleteNetworkInterfacePermissionRequest where encode = genericEncode options

-- | Constructs DeleteNetworkInterfacePermissionRequest from required parameters
newDeleteNetworkInterfacePermissionRequest :: String -> DeleteNetworkInterfacePermissionRequest
newDeleteNetworkInterfacePermissionRequest _NetworkInterfacePermissionId = DeleteNetworkInterfacePermissionRequest { "NetworkInterfacePermissionId": _NetworkInterfacePermissionId, "DryRun": Nothing, "Force": Nothing }

-- | Constructs DeleteNetworkInterfacePermissionRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteNetworkInterfacePermissionRequest' :: String -> ( { "NetworkInterfacePermissionId" :: (String) , "Force" :: Maybe (Boolean) , "DryRun" :: Maybe (Boolean) } -> {"NetworkInterfacePermissionId" :: (String) , "Force" :: Maybe (Boolean) , "DryRun" :: Maybe (Boolean) } ) -> DeleteNetworkInterfacePermissionRequest
newDeleteNetworkInterfacePermissionRequest' _NetworkInterfacePermissionId customize = (DeleteNetworkInterfacePermissionRequest <<< customize) { "NetworkInterfacePermissionId": _NetworkInterfacePermissionId, "DryRun": Nothing, "Force": Nothing }



-- | <p>Contains the output for DeleteNetworkInterfacePermission.</p>
newtype DeleteNetworkInterfacePermissionResult = DeleteNetworkInterfacePermissionResult 
  { "Return" :: Maybe (Boolean)
  }
derive instance newtypeDeleteNetworkInterfacePermissionResult :: Newtype DeleteNetworkInterfacePermissionResult _
derive instance repGenericDeleteNetworkInterfacePermissionResult :: Generic DeleteNetworkInterfacePermissionResult _
instance showDeleteNetworkInterfacePermissionResult :: Show DeleteNetworkInterfacePermissionResult where show = genericShow
instance decodeDeleteNetworkInterfacePermissionResult :: Decode DeleteNetworkInterfacePermissionResult where decode = genericDecode options
instance encodeDeleteNetworkInterfacePermissionResult :: Encode DeleteNetworkInterfacePermissionResult where encode = genericEncode options

-- | Constructs DeleteNetworkInterfacePermissionResult from required parameters
newDeleteNetworkInterfacePermissionResult :: DeleteNetworkInterfacePermissionResult
newDeleteNetworkInterfacePermissionResult  = DeleteNetworkInterfacePermissionResult { "Return": Nothing }

-- | Constructs DeleteNetworkInterfacePermissionResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteNetworkInterfacePermissionResult' :: ( { "Return" :: Maybe (Boolean) } -> {"Return" :: Maybe (Boolean) } ) -> DeleteNetworkInterfacePermissionResult
newDeleteNetworkInterfacePermissionResult'  customize = (DeleteNetworkInterfacePermissionResult <<< customize) { "Return": Nothing }



-- | <p>Contains the parameters for DeleteNetworkInterface.</p>
newtype DeleteNetworkInterfaceRequest = DeleteNetworkInterfaceRequest 
  { "DryRun" :: Maybe (Boolean)
  , "NetworkInterfaceId" :: (String)
  }
derive instance newtypeDeleteNetworkInterfaceRequest :: Newtype DeleteNetworkInterfaceRequest _
derive instance repGenericDeleteNetworkInterfaceRequest :: Generic DeleteNetworkInterfaceRequest _
instance showDeleteNetworkInterfaceRequest :: Show DeleteNetworkInterfaceRequest where show = genericShow
instance decodeDeleteNetworkInterfaceRequest :: Decode DeleteNetworkInterfaceRequest where decode = genericDecode options
instance encodeDeleteNetworkInterfaceRequest :: Encode DeleteNetworkInterfaceRequest where encode = genericEncode options

-- | Constructs DeleteNetworkInterfaceRequest from required parameters
newDeleteNetworkInterfaceRequest :: String -> DeleteNetworkInterfaceRequest
newDeleteNetworkInterfaceRequest _NetworkInterfaceId = DeleteNetworkInterfaceRequest { "NetworkInterfaceId": _NetworkInterfaceId, "DryRun": Nothing }

-- | Constructs DeleteNetworkInterfaceRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteNetworkInterfaceRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "NetworkInterfaceId" :: (String) } -> {"DryRun" :: Maybe (Boolean) , "NetworkInterfaceId" :: (String) } ) -> DeleteNetworkInterfaceRequest
newDeleteNetworkInterfaceRequest' _NetworkInterfaceId customize = (DeleteNetworkInterfaceRequest <<< customize) { "NetworkInterfaceId": _NetworkInterfaceId, "DryRun": Nothing }



-- | <p>Contains the parameters for DeletePlacementGroup.</p>
newtype DeletePlacementGroupRequest = DeletePlacementGroupRequest 
  { "DryRun" :: Maybe (Boolean)
  , "GroupName" :: (String)
  }
derive instance newtypeDeletePlacementGroupRequest :: Newtype DeletePlacementGroupRequest _
derive instance repGenericDeletePlacementGroupRequest :: Generic DeletePlacementGroupRequest _
instance showDeletePlacementGroupRequest :: Show DeletePlacementGroupRequest where show = genericShow
instance decodeDeletePlacementGroupRequest :: Decode DeletePlacementGroupRequest where decode = genericDecode options
instance encodeDeletePlacementGroupRequest :: Encode DeletePlacementGroupRequest where encode = genericEncode options

-- | Constructs DeletePlacementGroupRequest from required parameters
newDeletePlacementGroupRequest :: String -> DeletePlacementGroupRequest
newDeletePlacementGroupRequest _GroupName = DeletePlacementGroupRequest { "GroupName": _GroupName, "DryRun": Nothing }

-- | Constructs DeletePlacementGroupRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeletePlacementGroupRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "GroupName" :: (String) } -> {"DryRun" :: Maybe (Boolean) , "GroupName" :: (String) } ) -> DeletePlacementGroupRequest
newDeletePlacementGroupRequest' _GroupName customize = (DeletePlacementGroupRequest <<< customize) { "GroupName": _GroupName, "DryRun": Nothing }



-- | <p>Contains the parameters for DeleteRoute.</p>
newtype DeleteRouteRequest = DeleteRouteRequest 
  { "DestinationCidrBlock" :: Maybe (String)
  , "DestinationIpv6CidrBlock" :: Maybe (String)
  , "DryRun" :: Maybe (Boolean)
  , "RouteTableId" :: (String)
  }
derive instance newtypeDeleteRouteRequest :: Newtype DeleteRouteRequest _
derive instance repGenericDeleteRouteRequest :: Generic DeleteRouteRequest _
instance showDeleteRouteRequest :: Show DeleteRouteRequest where show = genericShow
instance decodeDeleteRouteRequest :: Decode DeleteRouteRequest where decode = genericDecode options
instance encodeDeleteRouteRequest :: Encode DeleteRouteRequest where encode = genericEncode options

-- | Constructs DeleteRouteRequest from required parameters
newDeleteRouteRequest :: String -> DeleteRouteRequest
newDeleteRouteRequest _RouteTableId = DeleteRouteRequest { "RouteTableId": _RouteTableId, "DestinationCidrBlock": Nothing, "DestinationIpv6CidrBlock": Nothing, "DryRun": Nothing }

-- | Constructs DeleteRouteRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteRouteRequest' :: String -> ( { "DestinationCidrBlock" :: Maybe (String) , "DestinationIpv6CidrBlock" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "RouteTableId" :: (String) } -> {"DestinationCidrBlock" :: Maybe (String) , "DestinationIpv6CidrBlock" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "RouteTableId" :: (String) } ) -> DeleteRouteRequest
newDeleteRouteRequest' _RouteTableId customize = (DeleteRouteRequest <<< customize) { "RouteTableId": _RouteTableId, "DestinationCidrBlock": Nothing, "DestinationIpv6CidrBlock": Nothing, "DryRun": Nothing }



-- | <p>Contains the parameters for DeleteRouteTable.</p>
newtype DeleteRouteTableRequest = DeleteRouteTableRequest 
  { "DryRun" :: Maybe (Boolean)
  , "RouteTableId" :: (String)
  }
derive instance newtypeDeleteRouteTableRequest :: Newtype DeleteRouteTableRequest _
derive instance repGenericDeleteRouteTableRequest :: Generic DeleteRouteTableRequest _
instance showDeleteRouteTableRequest :: Show DeleteRouteTableRequest where show = genericShow
instance decodeDeleteRouteTableRequest :: Decode DeleteRouteTableRequest where decode = genericDecode options
instance encodeDeleteRouteTableRequest :: Encode DeleteRouteTableRequest where encode = genericEncode options

-- | Constructs DeleteRouteTableRequest from required parameters
newDeleteRouteTableRequest :: String -> DeleteRouteTableRequest
newDeleteRouteTableRequest _RouteTableId = DeleteRouteTableRequest { "RouteTableId": _RouteTableId, "DryRun": Nothing }

-- | Constructs DeleteRouteTableRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteRouteTableRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "RouteTableId" :: (String) } -> {"DryRun" :: Maybe (Boolean) , "RouteTableId" :: (String) } ) -> DeleteRouteTableRequest
newDeleteRouteTableRequest' _RouteTableId customize = (DeleteRouteTableRequest <<< customize) { "RouteTableId": _RouteTableId, "DryRun": Nothing }



-- | <p>Contains the parameters for DeleteSecurityGroup.</p>
newtype DeleteSecurityGroupRequest = DeleteSecurityGroupRequest 
  { "GroupId" :: Maybe (String)
  , "GroupName" :: Maybe (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDeleteSecurityGroupRequest :: Newtype DeleteSecurityGroupRequest _
derive instance repGenericDeleteSecurityGroupRequest :: Generic DeleteSecurityGroupRequest _
instance showDeleteSecurityGroupRequest :: Show DeleteSecurityGroupRequest where show = genericShow
instance decodeDeleteSecurityGroupRequest :: Decode DeleteSecurityGroupRequest where decode = genericDecode options
instance encodeDeleteSecurityGroupRequest :: Encode DeleteSecurityGroupRequest where encode = genericEncode options

-- | Constructs DeleteSecurityGroupRequest from required parameters
newDeleteSecurityGroupRequest :: DeleteSecurityGroupRequest
newDeleteSecurityGroupRequest  = DeleteSecurityGroupRequest { "DryRun": Nothing, "GroupId": Nothing, "GroupName": Nothing }

-- | Constructs DeleteSecurityGroupRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteSecurityGroupRequest' :: ( { "GroupId" :: Maybe (String) , "GroupName" :: Maybe (String) , "DryRun" :: Maybe (Boolean) } -> {"GroupId" :: Maybe (String) , "GroupName" :: Maybe (String) , "DryRun" :: Maybe (Boolean) } ) -> DeleteSecurityGroupRequest
newDeleteSecurityGroupRequest'  customize = (DeleteSecurityGroupRequest <<< customize) { "DryRun": Nothing, "GroupId": Nothing, "GroupName": Nothing }



-- | <p>Contains the parameters for DeleteSnapshot.</p>
newtype DeleteSnapshotRequest = DeleteSnapshotRequest 
  { "SnapshotId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDeleteSnapshotRequest :: Newtype DeleteSnapshotRequest _
derive instance repGenericDeleteSnapshotRequest :: Generic DeleteSnapshotRequest _
instance showDeleteSnapshotRequest :: Show DeleteSnapshotRequest where show = genericShow
instance decodeDeleteSnapshotRequest :: Decode DeleteSnapshotRequest where decode = genericDecode options
instance encodeDeleteSnapshotRequest :: Encode DeleteSnapshotRequest where encode = genericEncode options

-- | Constructs DeleteSnapshotRequest from required parameters
newDeleteSnapshotRequest :: String -> DeleteSnapshotRequest
newDeleteSnapshotRequest _SnapshotId = DeleteSnapshotRequest { "SnapshotId": _SnapshotId, "DryRun": Nothing }

-- | Constructs DeleteSnapshotRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteSnapshotRequest' :: String -> ( { "SnapshotId" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"SnapshotId" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> DeleteSnapshotRequest
newDeleteSnapshotRequest' _SnapshotId customize = (DeleteSnapshotRequest <<< customize) { "SnapshotId": _SnapshotId, "DryRun": Nothing }



-- | <p>Contains the parameters for DeleteSpotDatafeedSubscription.</p>
newtype DeleteSpotDatafeedSubscriptionRequest = DeleteSpotDatafeedSubscriptionRequest 
  { "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDeleteSpotDatafeedSubscriptionRequest :: Newtype DeleteSpotDatafeedSubscriptionRequest _
derive instance repGenericDeleteSpotDatafeedSubscriptionRequest :: Generic DeleteSpotDatafeedSubscriptionRequest _
instance showDeleteSpotDatafeedSubscriptionRequest :: Show DeleteSpotDatafeedSubscriptionRequest where show = genericShow
instance decodeDeleteSpotDatafeedSubscriptionRequest :: Decode DeleteSpotDatafeedSubscriptionRequest where decode = genericDecode options
instance encodeDeleteSpotDatafeedSubscriptionRequest :: Encode DeleteSpotDatafeedSubscriptionRequest where encode = genericEncode options

-- | Constructs DeleteSpotDatafeedSubscriptionRequest from required parameters
newDeleteSpotDatafeedSubscriptionRequest :: DeleteSpotDatafeedSubscriptionRequest
newDeleteSpotDatafeedSubscriptionRequest  = DeleteSpotDatafeedSubscriptionRequest { "DryRun": Nothing }

-- | Constructs DeleteSpotDatafeedSubscriptionRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteSpotDatafeedSubscriptionRequest' :: ( { "DryRun" :: Maybe (Boolean) } -> {"DryRun" :: Maybe (Boolean) } ) -> DeleteSpotDatafeedSubscriptionRequest
newDeleteSpotDatafeedSubscriptionRequest'  customize = (DeleteSpotDatafeedSubscriptionRequest <<< customize) { "DryRun": Nothing }



-- | <p>Contains the parameters for DeleteSubnet.</p>
newtype DeleteSubnetRequest = DeleteSubnetRequest 
  { "SubnetId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDeleteSubnetRequest :: Newtype DeleteSubnetRequest _
derive instance repGenericDeleteSubnetRequest :: Generic DeleteSubnetRequest _
instance showDeleteSubnetRequest :: Show DeleteSubnetRequest where show = genericShow
instance decodeDeleteSubnetRequest :: Decode DeleteSubnetRequest where decode = genericDecode options
instance encodeDeleteSubnetRequest :: Encode DeleteSubnetRequest where encode = genericEncode options

-- | Constructs DeleteSubnetRequest from required parameters
newDeleteSubnetRequest :: String -> DeleteSubnetRequest
newDeleteSubnetRequest _SubnetId = DeleteSubnetRequest { "SubnetId": _SubnetId, "DryRun": Nothing }

-- | Constructs DeleteSubnetRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteSubnetRequest' :: String -> ( { "SubnetId" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"SubnetId" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> DeleteSubnetRequest
newDeleteSubnetRequest' _SubnetId customize = (DeleteSubnetRequest <<< customize) { "SubnetId": _SubnetId, "DryRun": Nothing }



-- | <p>Contains the parameters for DeleteTags.</p>
newtype DeleteTagsRequest = DeleteTagsRequest 
  { "DryRun" :: Maybe (Boolean)
  , "Resources" :: (ResourceIdList)
  , "Tags" :: Maybe (TagList)
  }
derive instance newtypeDeleteTagsRequest :: Newtype DeleteTagsRequest _
derive instance repGenericDeleteTagsRequest :: Generic DeleteTagsRequest _
instance showDeleteTagsRequest :: Show DeleteTagsRequest where show = genericShow
instance decodeDeleteTagsRequest :: Decode DeleteTagsRequest where decode = genericDecode options
instance encodeDeleteTagsRequest :: Encode DeleteTagsRequest where encode = genericEncode options

-- | Constructs DeleteTagsRequest from required parameters
newDeleteTagsRequest :: ResourceIdList -> DeleteTagsRequest
newDeleteTagsRequest _Resources = DeleteTagsRequest { "Resources": _Resources, "DryRun": Nothing, "Tags": Nothing }

-- | Constructs DeleteTagsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteTagsRequest' :: ResourceIdList -> ( { "DryRun" :: Maybe (Boolean) , "Resources" :: (ResourceIdList) , "Tags" :: Maybe (TagList) } -> {"DryRun" :: Maybe (Boolean) , "Resources" :: (ResourceIdList) , "Tags" :: Maybe (TagList) } ) -> DeleteTagsRequest
newDeleteTagsRequest' _Resources customize = (DeleteTagsRequest <<< customize) { "Resources": _Resources, "DryRun": Nothing, "Tags": Nothing }



-- | <p>Contains the parameters for DeleteVolume.</p>
newtype DeleteVolumeRequest = DeleteVolumeRequest 
  { "VolumeId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDeleteVolumeRequest :: Newtype DeleteVolumeRequest _
derive instance repGenericDeleteVolumeRequest :: Generic DeleteVolumeRequest _
instance showDeleteVolumeRequest :: Show DeleteVolumeRequest where show = genericShow
instance decodeDeleteVolumeRequest :: Decode DeleteVolumeRequest where decode = genericDecode options
instance encodeDeleteVolumeRequest :: Encode DeleteVolumeRequest where encode = genericEncode options

-- | Constructs DeleteVolumeRequest from required parameters
newDeleteVolumeRequest :: String -> DeleteVolumeRequest
newDeleteVolumeRequest _VolumeId = DeleteVolumeRequest { "VolumeId": _VolumeId, "DryRun": Nothing }

-- | Constructs DeleteVolumeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteVolumeRequest' :: String -> ( { "VolumeId" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"VolumeId" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> DeleteVolumeRequest
newDeleteVolumeRequest' _VolumeId customize = (DeleteVolumeRequest <<< customize) { "VolumeId": _VolumeId, "DryRun": Nothing }



newtype DeleteVpcEndpointConnectionNotificationsRequest = DeleteVpcEndpointConnectionNotificationsRequest 
  { "DryRun" :: Maybe (Boolean)
  , "ConnectionNotificationIds" :: (ValueStringList)
  }
derive instance newtypeDeleteVpcEndpointConnectionNotificationsRequest :: Newtype DeleteVpcEndpointConnectionNotificationsRequest _
derive instance repGenericDeleteVpcEndpointConnectionNotificationsRequest :: Generic DeleteVpcEndpointConnectionNotificationsRequest _
instance showDeleteVpcEndpointConnectionNotificationsRequest :: Show DeleteVpcEndpointConnectionNotificationsRequest where show = genericShow
instance decodeDeleteVpcEndpointConnectionNotificationsRequest :: Decode DeleteVpcEndpointConnectionNotificationsRequest where decode = genericDecode options
instance encodeDeleteVpcEndpointConnectionNotificationsRequest :: Encode DeleteVpcEndpointConnectionNotificationsRequest where encode = genericEncode options

-- | Constructs DeleteVpcEndpointConnectionNotificationsRequest from required parameters
newDeleteVpcEndpointConnectionNotificationsRequest :: ValueStringList -> DeleteVpcEndpointConnectionNotificationsRequest
newDeleteVpcEndpointConnectionNotificationsRequest _ConnectionNotificationIds = DeleteVpcEndpointConnectionNotificationsRequest { "ConnectionNotificationIds": _ConnectionNotificationIds, "DryRun": Nothing }

-- | Constructs DeleteVpcEndpointConnectionNotificationsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteVpcEndpointConnectionNotificationsRequest' :: ValueStringList -> ( { "DryRun" :: Maybe (Boolean) , "ConnectionNotificationIds" :: (ValueStringList) } -> {"DryRun" :: Maybe (Boolean) , "ConnectionNotificationIds" :: (ValueStringList) } ) -> DeleteVpcEndpointConnectionNotificationsRequest
newDeleteVpcEndpointConnectionNotificationsRequest' _ConnectionNotificationIds customize = (DeleteVpcEndpointConnectionNotificationsRequest <<< customize) { "ConnectionNotificationIds": _ConnectionNotificationIds, "DryRun": Nothing }



newtype DeleteVpcEndpointConnectionNotificationsResult = DeleteVpcEndpointConnectionNotificationsResult 
  { "Unsuccessful" :: Maybe (UnsuccessfulItemSet)
  }
derive instance newtypeDeleteVpcEndpointConnectionNotificationsResult :: Newtype DeleteVpcEndpointConnectionNotificationsResult _
derive instance repGenericDeleteVpcEndpointConnectionNotificationsResult :: Generic DeleteVpcEndpointConnectionNotificationsResult _
instance showDeleteVpcEndpointConnectionNotificationsResult :: Show DeleteVpcEndpointConnectionNotificationsResult where show = genericShow
instance decodeDeleteVpcEndpointConnectionNotificationsResult :: Decode DeleteVpcEndpointConnectionNotificationsResult where decode = genericDecode options
instance encodeDeleteVpcEndpointConnectionNotificationsResult :: Encode DeleteVpcEndpointConnectionNotificationsResult where encode = genericEncode options

-- | Constructs DeleteVpcEndpointConnectionNotificationsResult from required parameters
newDeleteVpcEndpointConnectionNotificationsResult :: DeleteVpcEndpointConnectionNotificationsResult
newDeleteVpcEndpointConnectionNotificationsResult  = DeleteVpcEndpointConnectionNotificationsResult { "Unsuccessful": Nothing }

-- | Constructs DeleteVpcEndpointConnectionNotificationsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteVpcEndpointConnectionNotificationsResult' :: ( { "Unsuccessful" :: Maybe (UnsuccessfulItemSet) } -> {"Unsuccessful" :: Maybe (UnsuccessfulItemSet) } ) -> DeleteVpcEndpointConnectionNotificationsResult
newDeleteVpcEndpointConnectionNotificationsResult'  customize = (DeleteVpcEndpointConnectionNotificationsResult <<< customize) { "Unsuccessful": Nothing }



newtype DeleteVpcEndpointServiceConfigurationsRequest = DeleteVpcEndpointServiceConfigurationsRequest 
  { "DryRun" :: Maybe (Boolean)
  , "ServiceIds" :: (ValueStringList)
  }
derive instance newtypeDeleteVpcEndpointServiceConfigurationsRequest :: Newtype DeleteVpcEndpointServiceConfigurationsRequest _
derive instance repGenericDeleteVpcEndpointServiceConfigurationsRequest :: Generic DeleteVpcEndpointServiceConfigurationsRequest _
instance showDeleteVpcEndpointServiceConfigurationsRequest :: Show DeleteVpcEndpointServiceConfigurationsRequest where show = genericShow
instance decodeDeleteVpcEndpointServiceConfigurationsRequest :: Decode DeleteVpcEndpointServiceConfigurationsRequest where decode = genericDecode options
instance encodeDeleteVpcEndpointServiceConfigurationsRequest :: Encode DeleteVpcEndpointServiceConfigurationsRequest where encode = genericEncode options

-- | Constructs DeleteVpcEndpointServiceConfigurationsRequest from required parameters
newDeleteVpcEndpointServiceConfigurationsRequest :: ValueStringList -> DeleteVpcEndpointServiceConfigurationsRequest
newDeleteVpcEndpointServiceConfigurationsRequest _ServiceIds = DeleteVpcEndpointServiceConfigurationsRequest { "ServiceIds": _ServiceIds, "DryRun": Nothing }

-- | Constructs DeleteVpcEndpointServiceConfigurationsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteVpcEndpointServiceConfigurationsRequest' :: ValueStringList -> ( { "DryRun" :: Maybe (Boolean) , "ServiceIds" :: (ValueStringList) } -> {"DryRun" :: Maybe (Boolean) , "ServiceIds" :: (ValueStringList) } ) -> DeleteVpcEndpointServiceConfigurationsRequest
newDeleteVpcEndpointServiceConfigurationsRequest' _ServiceIds customize = (DeleteVpcEndpointServiceConfigurationsRequest <<< customize) { "ServiceIds": _ServiceIds, "DryRun": Nothing }



newtype DeleteVpcEndpointServiceConfigurationsResult = DeleteVpcEndpointServiceConfigurationsResult 
  { "Unsuccessful" :: Maybe (UnsuccessfulItemSet)
  }
derive instance newtypeDeleteVpcEndpointServiceConfigurationsResult :: Newtype DeleteVpcEndpointServiceConfigurationsResult _
derive instance repGenericDeleteVpcEndpointServiceConfigurationsResult :: Generic DeleteVpcEndpointServiceConfigurationsResult _
instance showDeleteVpcEndpointServiceConfigurationsResult :: Show DeleteVpcEndpointServiceConfigurationsResult where show = genericShow
instance decodeDeleteVpcEndpointServiceConfigurationsResult :: Decode DeleteVpcEndpointServiceConfigurationsResult where decode = genericDecode options
instance encodeDeleteVpcEndpointServiceConfigurationsResult :: Encode DeleteVpcEndpointServiceConfigurationsResult where encode = genericEncode options

-- | Constructs DeleteVpcEndpointServiceConfigurationsResult from required parameters
newDeleteVpcEndpointServiceConfigurationsResult :: DeleteVpcEndpointServiceConfigurationsResult
newDeleteVpcEndpointServiceConfigurationsResult  = DeleteVpcEndpointServiceConfigurationsResult { "Unsuccessful": Nothing }

-- | Constructs DeleteVpcEndpointServiceConfigurationsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteVpcEndpointServiceConfigurationsResult' :: ( { "Unsuccessful" :: Maybe (UnsuccessfulItemSet) } -> {"Unsuccessful" :: Maybe (UnsuccessfulItemSet) } ) -> DeleteVpcEndpointServiceConfigurationsResult
newDeleteVpcEndpointServiceConfigurationsResult'  customize = (DeleteVpcEndpointServiceConfigurationsResult <<< customize) { "Unsuccessful": Nothing }



-- | <p>Contains the parameters for DeleteVpcEndpoints.</p>
newtype DeleteVpcEndpointsRequest = DeleteVpcEndpointsRequest 
  { "DryRun" :: Maybe (Boolean)
  , "VpcEndpointIds" :: (ValueStringList)
  }
derive instance newtypeDeleteVpcEndpointsRequest :: Newtype DeleteVpcEndpointsRequest _
derive instance repGenericDeleteVpcEndpointsRequest :: Generic DeleteVpcEndpointsRequest _
instance showDeleteVpcEndpointsRequest :: Show DeleteVpcEndpointsRequest where show = genericShow
instance decodeDeleteVpcEndpointsRequest :: Decode DeleteVpcEndpointsRequest where decode = genericDecode options
instance encodeDeleteVpcEndpointsRequest :: Encode DeleteVpcEndpointsRequest where encode = genericEncode options

-- | Constructs DeleteVpcEndpointsRequest from required parameters
newDeleteVpcEndpointsRequest :: ValueStringList -> DeleteVpcEndpointsRequest
newDeleteVpcEndpointsRequest _VpcEndpointIds = DeleteVpcEndpointsRequest { "VpcEndpointIds": _VpcEndpointIds, "DryRun": Nothing }

-- | Constructs DeleteVpcEndpointsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteVpcEndpointsRequest' :: ValueStringList -> ( { "DryRun" :: Maybe (Boolean) , "VpcEndpointIds" :: (ValueStringList) } -> {"DryRun" :: Maybe (Boolean) , "VpcEndpointIds" :: (ValueStringList) } ) -> DeleteVpcEndpointsRequest
newDeleteVpcEndpointsRequest' _VpcEndpointIds customize = (DeleteVpcEndpointsRequest <<< customize) { "VpcEndpointIds": _VpcEndpointIds, "DryRun": Nothing }



-- | <p>Contains the output of DeleteVpcEndpoints.</p>
newtype DeleteVpcEndpointsResult = DeleteVpcEndpointsResult 
  { "Unsuccessful" :: Maybe (UnsuccessfulItemSet)
  }
derive instance newtypeDeleteVpcEndpointsResult :: Newtype DeleteVpcEndpointsResult _
derive instance repGenericDeleteVpcEndpointsResult :: Generic DeleteVpcEndpointsResult _
instance showDeleteVpcEndpointsResult :: Show DeleteVpcEndpointsResult where show = genericShow
instance decodeDeleteVpcEndpointsResult :: Decode DeleteVpcEndpointsResult where decode = genericDecode options
instance encodeDeleteVpcEndpointsResult :: Encode DeleteVpcEndpointsResult where encode = genericEncode options

-- | Constructs DeleteVpcEndpointsResult from required parameters
newDeleteVpcEndpointsResult :: DeleteVpcEndpointsResult
newDeleteVpcEndpointsResult  = DeleteVpcEndpointsResult { "Unsuccessful": Nothing }

-- | Constructs DeleteVpcEndpointsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteVpcEndpointsResult' :: ( { "Unsuccessful" :: Maybe (UnsuccessfulItemSet) } -> {"Unsuccessful" :: Maybe (UnsuccessfulItemSet) } ) -> DeleteVpcEndpointsResult
newDeleteVpcEndpointsResult'  customize = (DeleteVpcEndpointsResult <<< customize) { "Unsuccessful": Nothing }



-- | <p>Contains the parameters for DeleteVpcPeeringConnection.</p>
newtype DeleteVpcPeeringConnectionRequest = DeleteVpcPeeringConnectionRequest 
  { "DryRun" :: Maybe (Boolean)
  , "VpcPeeringConnectionId" :: (String)
  }
derive instance newtypeDeleteVpcPeeringConnectionRequest :: Newtype DeleteVpcPeeringConnectionRequest _
derive instance repGenericDeleteVpcPeeringConnectionRequest :: Generic DeleteVpcPeeringConnectionRequest _
instance showDeleteVpcPeeringConnectionRequest :: Show DeleteVpcPeeringConnectionRequest where show = genericShow
instance decodeDeleteVpcPeeringConnectionRequest :: Decode DeleteVpcPeeringConnectionRequest where decode = genericDecode options
instance encodeDeleteVpcPeeringConnectionRequest :: Encode DeleteVpcPeeringConnectionRequest where encode = genericEncode options

-- | Constructs DeleteVpcPeeringConnectionRequest from required parameters
newDeleteVpcPeeringConnectionRequest :: String -> DeleteVpcPeeringConnectionRequest
newDeleteVpcPeeringConnectionRequest _VpcPeeringConnectionId = DeleteVpcPeeringConnectionRequest { "VpcPeeringConnectionId": _VpcPeeringConnectionId, "DryRun": Nothing }

-- | Constructs DeleteVpcPeeringConnectionRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteVpcPeeringConnectionRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "VpcPeeringConnectionId" :: (String) } -> {"DryRun" :: Maybe (Boolean) , "VpcPeeringConnectionId" :: (String) } ) -> DeleteVpcPeeringConnectionRequest
newDeleteVpcPeeringConnectionRequest' _VpcPeeringConnectionId customize = (DeleteVpcPeeringConnectionRequest <<< customize) { "VpcPeeringConnectionId": _VpcPeeringConnectionId, "DryRun": Nothing }



-- | <p>Contains the output of DeleteVpcPeeringConnection.</p>
newtype DeleteVpcPeeringConnectionResult = DeleteVpcPeeringConnectionResult 
  { "Return" :: Maybe (Boolean)
  }
derive instance newtypeDeleteVpcPeeringConnectionResult :: Newtype DeleteVpcPeeringConnectionResult _
derive instance repGenericDeleteVpcPeeringConnectionResult :: Generic DeleteVpcPeeringConnectionResult _
instance showDeleteVpcPeeringConnectionResult :: Show DeleteVpcPeeringConnectionResult where show = genericShow
instance decodeDeleteVpcPeeringConnectionResult :: Decode DeleteVpcPeeringConnectionResult where decode = genericDecode options
instance encodeDeleteVpcPeeringConnectionResult :: Encode DeleteVpcPeeringConnectionResult where encode = genericEncode options

-- | Constructs DeleteVpcPeeringConnectionResult from required parameters
newDeleteVpcPeeringConnectionResult :: DeleteVpcPeeringConnectionResult
newDeleteVpcPeeringConnectionResult  = DeleteVpcPeeringConnectionResult { "Return": Nothing }

-- | Constructs DeleteVpcPeeringConnectionResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteVpcPeeringConnectionResult' :: ( { "Return" :: Maybe (Boolean) } -> {"Return" :: Maybe (Boolean) } ) -> DeleteVpcPeeringConnectionResult
newDeleteVpcPeeringConnectionResult'  customize = (DeleteVpcPeeringConnectionResult <<< customize) { "Return": Nothing }



-- | <p>Contains the parameters for DeleteVpc.</p>
newtype DeleteVpcRequest = DeleteVpcRequest 
  { "VpcId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDeleteVpcRequest :: Newtype DeleteVpcRequest _
derive instance repGenericDeleteVpcRequest :: Generic DeleteVpcRequest _
instance showDeleteVpcRequest :: Show DeleteVpcRequest where show = genericShow
instance decodeDeleteVpcRequest :: Decode DeleteVpcRequest where decode = genericDecode options
instance encodeDeleteVpcRequest :: Encode DeleteVpcRequest where encode = genericEncode options

-- | Constructs DeleteVpcRequest from required parameters
newDeleteVpcRequest :: String -> DeleteVpcRequest
newDeleteVpcRequest _VpcId = DeleteVpcRequest { "VpcId": _VpcId, "DryRun": Nothing }

-- | Constructs DeleteVpcRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteVpcRequest' :: String -> ( { "VpcId" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"VpcId" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> DeleteVpcRequest
newDeleteVpcRequest' _VpcId customize = (DeleteVpcRequest <<< customize) { "VpcId": _VpcId, "DryRun": Nothing }



-- | <p>Contains the parameters for DeleteVpnConnection.</p>
newtype DeleteVpnConnectionRequest = DeleteVpnConnectionRequest 
  { "VpnConnectionId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDeleteVpnConnectionRequest :: Newtype DeleteVpnConnectionRequest _
derive instance repGenericDeleteVpnConnectionRequest :: Generic DeleteVpnConnectionRequest _
instance showDeleteVpnConnectionRequest :: Show DeleteVpnConnectionRequest where show = genericShow
instance decodeDeleteVpnConnectionRequest :: Decode DeleteVpnConnectionRequest where decode = genericDecode options
instance encodeDeleteVpnConnectionRequest :: Encode DeleteVpnConnectionRequest where encode = genericEncode options

-- | Constructs DeleteVpnConnectionRequest from required parameters
newDeleteVpnConnectionRequest :: String -> DeleteVpnConnectionRequest
newDeleteVpnConnectionRequest _VpnConnectionId = DeleteVpnConnectionRequest { "VpnConnectionId": _VpnConnectionId, "DryRun": Nothing }

-- | Constructs DeleteVpnConnectionRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteVpnConnectionRequest' :: String -> ( { "VpnConnectionId" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"VpnConnectionId" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> DeleteVpnConnectionRequest
newDeleteVpnConnectionRequest' _VpnConnectionId customize = (DeleteVpnConnectionRequest <<< customize) { "VpnConnectionId": _VpnConnectionId, "DryRun": Nothing }



-- | <p>Contains the parameters for DeleteVpnConnectionRoute.</p>
newtype DeleteVpnConnectionRouteRequest = DeleteVpnConnectionRouteRequest 
  { "DestinationCidrBlock" :: (String)
  , "VpnConnectionId" :: (String)
  }
derive instance newtypeDeleteVpnConnectionRouteRequest :: Newtype DeleteVpnConnectionRouteRequest _
derive instance repGenericDeleteVpnConnectionRouteRequest :: Generic DeleteVpnConnectionRouteRequest _
instance showDeleteVpnConnectionRouteRequest :: Show DeleteVpnConnectionRouteRequest where show = genericShow
instance decodeDeleteVpnConnectionRouteRequest :: Decode DeleteVpnConnectionRouteRequest where decode = genericDecode options
instance encodeDeleteVpnConnectionRouteRequest :: Encode DeleteVpnConnectionRouteRequest where encode = genericEncode options

-- | Constructs DeleteVpnConnectionRouteRequest from required parameters
newDeleteVpnConnectionRouteRequest :: String -> String -> DeleteVpnConnectionRouteRequest
newDeleteVpnConnectionRouteRequest _DestinationCidrBlock _VpnConnectionId = DeleteVpnConnectionRouteRequest { "DestinationCidrBlock": _DestinationCidrBlock, "VpnConnectionId": _VpnConnectionId }

-- | Constructs DeleteVpnConnectionRouteRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteVpnConnectionRouteRequest' :: String -> String -> ( { "DestinationCidrBlock" :: (String) , "VpnConnectionId" :: (String) } -> {"DestinationCidrBlock" :: (String) , "VpnConnectionId" :: (String) } ) -> DeleteVpnConnectionRouteRequest
newDeleteVpnConnectionRouteRequest' _DestinationCidrBlock _VpnConnectionId customize = (DeleteVpnConnectionRouteRequest <<< customize) { "DestinationCidrBlock": _DestinationCidrBlock, "VpnConnectionId": _VpnConnectionId }



-- | <p>Contains the parameters for DeleteVpnGateway.</p>
newtype DeleteVpnGatewayRequest = DeleteVpnGatewayRequest 
  { "VpnGatewayId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDeleteVpnGatewayRequest :: Newtype DeleteVpnGatewayRequest _
derive instance repGenericDeleteVpnGatewayRequest :: Generic DeleteVpnGatewayRequest _
instance showDeleteVpnGatewayRequest :: Show DeleteVpnGatewayRequest where show = genericShow
instance decodeDeleteVpnGatewayRequest :: Decode DeleteVpnGatewayRequest where decode = genericDecode options
instance encodeDeleteVpnGatewayRequest :: Encode DeleteVpnGatewayRequest where encode = genericEncode options

-- | Constructs DeleteVpnGatewayRequest from required parameters
newDeleteVpnGatewayRequest :: String -> DeleteVpnGatewayRequest
newDeleteVpnGatewayRequest _VpnGatewayId = DeleteVpnGatewayRequest { "VpnGatewayId": _VpnGatewayId, "DryRun": Nothing }

-- | Constructs DeleteVpnGatewayRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeleteVpnGatewayRequest' :: String -> ( { "VpnGatewayId" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"VpnGatewayId" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> DeleteVpnGatewayRequest
newDeleteVpnGatewayRequest' _VpnGatewayId customize = (DeleteVpnGatewayRequest <<< customize) { "VpnGatewayId": _VpnGatewayId, "DryRun": Nothing }



-- | <p>Contains the parameters for DeregisterImage.</p>
newtype DeregisterImageRequest = DeregisterImageRequest 
  { "ImageId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDeregisterImageRequest :: Newtype DeregisterImageRequest _
derive instance repGenericDeregisterImageRequest :: Generic DeregisterImageRequest _
instance showDeregisterImageRequest :: Show DeregisterImageRequest where show = genericShow
instance decodeDeregisterImageRequest :: Decode DeregisterImageRequest where decode = genericDecode options
instance encodeDeregisterImageRequest :: Encode DeregisterImageRequest where encode = genericEncode options

-- | Constructs DeregisterImageRequest from required parameters
newDeregisterImageRequest :: String -> DeregisterImageRequest
newDeregisterImageRequest _ImageId = DeregisterImageRequest { "ImageId": _ImageId, "DryRun": Nothing }

-- | Constructs DeregisterImageRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDeregisterImageRequest' :: String -> ( { "ImageId" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"ImageId" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> DeregisterImageRequest
newDeregisterImageRequest' _ImageId customize = (DeregisterImageRequest <<< customize) { "ImageId": _ImageId, "DryRun": Nothing }



-- | <p>Contains the parameters for DescribeAccountAttributes.</p>
newtype DescribeAccountAttributesRequest = DescribeAccountAttributesRequest 
  { "AttributeNames" :: Maybe (AccountAttributeNameStringList)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDescribeAccountAttributesRequest :: Newtype DescribeAccountAttributesRequest _
derive instance repGenericDescribeAccountAttributesRequest :: Generic DescribeAccountAttributesRequest _
instance showDescribeAccountAttributesRequest :: Show DescribeAccountAttributesRequest where show = genericShow
instance decodeDescribeAccountAttributesRequest :: Decode DescribeAccountAttributesRequest where decode = genericDecode options
instance encodeDescribeAccountAttributesRequest :: Encode DescribeAccountAttributesRequest where encode = genericEncode options

-- | Constructs DescribeAccountAttributesRequest from required parameters
newDescribeAccountAttributesRequest :: DescribeAccountAttributesRequest
newDescribeAccountAttributesRequest  = DescribeAccountAttributesRequest { "AttributeNames": Nothing, "DryRun": Nothing }

-- | Constructs DescribeAccountAttributesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeAccountAttributesRequest' :: ( { "AttributeNames" :: Maybe (AccountAttributeNameStringList) , "DryRun" :: Maybe (Boolean) } -> {"AttributeNames" :: Maybe (AccountAttributeNameStringList) , "DryRun" :: Maybe (Boolean) } ) -> DescribeAccountAttributesRequest
newDescribeAccountAttributesRequest'  customize = (DescribeAccountAttributesRequest <<< customize) { "AttributeNames": Nothing, "DryRun": Nothing }



-- | <p>Contains the output of DescribeAccountAttributes.</p>
newtype DescribeAccountAttributesResult = DescribeAccountAttributesResult 
  { "AccountAttributes" :: Maybe (AccountAttributeList)
  }
derive instance newtypeDescribeAccountAttributesResult :: Newtype DescribeAccountAttributesResult _
derive instance repGenericDescribeAccountAttributesResult :: Generic DescribeAccountAttributesResult _
instance showDescribeAccountAttributesResult :: Show DescribeAccountAttributesResult where show = genericShow
instance decodeDescribeAccountAttributesResult :: Decode DescribeAccountAttributesResult where decode = genericDecode options
instance encodeDescribeAccountAttributesResult :: Encode DescribeAccountAttributesResult where encode = genericEncode options

-- | Constructs DescribeAccountAttributesResult from required parameters
newDescribeAccountAttributesResult :: DescribeAccountAttributesResult
newDescribeAccountAttributesResult  = DescribeAccountAttributesResult { "AccountAttributes": Nothing }

-- | Constructs DescribeAccountAttributesResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeAccountAttributesResult' :: ( { "AccountAttributes" :: Maybe (AccountAttributeList) } -> {"AccountAttributes" :: Maybe (AccountAttributeList) } ) -> DescribeAccountAttributesResult
newDescribeAccountAttributesResult'  customize = (DescribeAccountAttributesResult <<< customize) { "AccountAttributes": Nothing }



-- | <p>Contains the parameters for DescribeAddresses.</p>
newtype DescribeAddressesRequest = DescribeAddressesRequest 
  { "Filters" :: Maybe (FilterList)
  , "PublicIps" :: Maybe (PublicIpStringList)
  , "AllocationIds" :: Maybe (AllocationIdList)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDescribeAddressesRequest :: Newtype DescribeAddressesRequest _
derive instance repGenericDescribeAddressesRequest :: Generic DescribeAddressesRequest _
instance showDescribeAddressesRequest :: Show DescribeAddressesRequest where show = genericShow
instance decodeDescribeAddressesRequest :: Decode DescribeAddressesRequest where decode = genericDecode options
instance encodeDescribeAddressesRequest :: Encode DescribeAddressesRequest where encode = genericEncode options

-- | Constructs DescribeAddressesRequest from required parameters
newDescribeAddressesRequest :: DescribeAddressesRequest
newDescribeAddressesRequest  = DescribeAddressesRequest { "AllocationIds": Nothing, "DryRun": Nothing, "Filters": Nothing, "PublicIps": Nothing }

-- | Constructs DescribeAddressesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeAddressesRequest' :: ( { "Filters" :: Maybe (FilterList) , "PublicIps" :: Maybe (PublicIpStringList) , "AllocationIds" :: Maybe (AllocationIdList) , "DryRun" :: Maybe (Boolean) } -> {"Filters" :: Maybe (FilterList) , "PublicIps" :: Maybe (PublicIpStringList) , "AllocationIds" :: Maybe (AllocationIdList) , "DryRun" :: Maybe (Boolean) } ) -> DescribeAddressesRequest
newDescribeAddressesRequest'  customize = (DescribeAddressesRequest <<< customize) { "AllocationIds": Nothing, "DryRun": Nothing, "Filters": Nothing, "PublicIps": Nothing }



-- | <p>Contains the output of DescribeAddresses.</p>
newtype DescribeAddressesResult = DescribeAddressesResult 
  { "Addresses" :: Maybe (AddressList)
  }
derive instance newtypeDescribeAddressesResult :: Newtype DescribeAddressesResult _
derive instance repGenericDescribeAddressesResult :: Generic DescribeAddressesResult _
instance showDescribeAddressesResult :: Show DescribeAddressesResult where show = genericShow
instance decodeDescribeAddressesResult :: Decode DescribeAddressesResult where decode = genericDecode options
instance encodeDescribeAddressesResult :: Encode DescribeAddressesResult where encode = genericEncode options

-- | Constructs DescribeAddressesResult from required parameters
newDescribeAddressesResult :: DescribeAddressesResult
newDescribeAddressesResult  = DescribeAddressesResult { "Addresses": Nothing }

-- | Constructs DescribeAddressesResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeAddressesResult' :: ( { "Addresses" :: Maybe (AddressList) } -> {"Addresses" :: Maybe (AddressList) } ) -> DescribeAddressesResult
newDescribeAddressesResult'  customize = (DescribeAddressesResult <<< customize) { "Addresses": Nothing }



newtype DescribeAggregateIdFormatRequest = DescribeAggregateIdFormatRequest 
  { "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDescribeAggregateIdFormatRequest :: Newtype DescribeAggregateIdFormatRequest _
derive instance repGenericDescribeAggregateIdFormatRequest :: Generic DescribeAggregateIdFormatRequest _
instance showDescribeAggregateIdFormatRequest :: Show DescribeAggregateIdFormatRequest where show = genericShow
instance decodeDescribeAggregateIdFormatRequest :: Decode DescribeAggregateIdFormatRequest where decode = genericDecode options
instance encodeDescribeAggregateIdFormatRequest :: Encode DescribeAggregateIdFormatRequest where encode = genericEncode options

-- | Constructs DescribeAggregateIdFormatRequest from required parameters
newDescribeAggregateIdFormatRequest :: DescribeAggregateIdFormatRequest
newDescribeAggregateIdFormatRequest  = DescribeAggregateIdFormatRequest { "DryRun": Nothing }

-- | Constructs DescribeAggregateIdFormatRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeAggregateIdFormatRequest' :: ( { "DryRun" :: Maybe (Boolean) } -> {"DryRun" :: Maybe (Boolean) } ) -> DescribeAggregateIdFormatRequest
newDescribeAggregateIdFormatRequest'  customize = (DescribeAggregateIdFormatRequest <<< customize) { "DryRun": Nothing }



newtype DescribeAggregateIdFormatResult = DescribeAggregateIdFormatResult 
  { "UseLongIdsAggregated" :: Maybe (Boolean)
  , "Statuses" :: Maybe (IdFormatList)
  }
derive instance newtypeDescribeAggregateIdFormatResult :: Newtype DescribeAggregateIdFormatResult _
derive instance repGenericDescribeAggregateIdFormatResult :: Generic DescribeAggregateIdFormatResult _
instance showDescribeAggregateIdFormatResult :: Show DescribeAggregateIdFormatResult where show = genericShow
instance decodeDescribeAggregateIdFormatResult :: Decode DescribeAggregateIdFormatResult where decode = genericDecode options
instance encodeDescribeAggregateIdFormatResult :: Encode DescribeAggregateIdFormatResult where encode = genericEncode options

-- | Constructs DescribeAggregateIdFormatResult from required parameters
newDescribeAggregateIdFormatResult :: DescribeAggregateIdFormatResult
newDescribeAggregateIdFormatResult  = DescribeAggregateIdFormatResult { "Statuses": Nothing, "UseLongIdsAggregated": Nothing }

-- | Constructs DescribeAggregateIdFormatResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeAggregateIdFormatResult' :: ( { "UseLongIdsAggregated" :: Maybe (Boolean) , "Statuses" :: Maybe (IdFormatList) } -> {"UseLongIdsAggregated" :: Maybe (Boolean) , "Statuses" :: Maybe (IdFormatList) } ) -> DescribeAggregateIdFormatResult
newDescribeAggregateIdFormatResult'  customize = (DescribeAggregateIdFormatResult <<< customize) { "Statuses": Nothing, "UseLongIdsAggregated": Nothing }



-- | <p>Contains the parameters for DescribeAvailabilityZones.</p>
newtype DescribeAvailabilityZonesRequest = DescribeAvailabilityZonesRequest 
  { "Filters" :: Maybe (FilterList)
  , "ZoneNames" :: Maybe (ZoneNameStringList)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDescribeAvailabilityZonesRequest :: Newtype DescribeAvailabilityZonesRequest _
derive instance repGenericDescribeAvailabilityZonesRequest :: Generic DescribeAvailabilityZonesRequest _
instance showDescribeAvailabilityZonesRequest :: Show DescribeAvailabilityZonesRequest where show = genericShow
instance decodeDescribeAvailabilityZonesRequest :: Decode DescribeAvailabilityZonesRequest where decode = genericDecode options
instance encodeDescribeAvailabilityZonesRequest :: Encode DescribeAvailabilityZonesRequest where encode = genericEncode options

-- | Constructs DescribeAvailabilityZonesRequest from required parameters
newDescribeAvailabilityZonesRequest :: DescribeAvailabilityZonesRequest
newDescribeAvailabilityZonesRequest  = DescribeAvailabilityZonesRequest { "DryRun": Nothing, "Filters": Nothing, "ZoneNames": Nothing }

-- | Constructs DescribeAvailabilityZonesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeAvailabilityZonesRequest' :: ( { "Filters" :: Maybe (FilterList) , "ZoneNames" :: Maybe (ZoneNameStringList) , "DryRun" :: Maybe (Boolean) } -> {"Filters" :: Maybe (FilterList) , "ZoneNames" :: Maybe (ZoneNameStringList) , "DryRun" :: Maybe (Boolean) } ) -> DescribeAvailabilityZonesRequest
newDescribeAvailabilityZonesRequest'  customize = (DescribeAvailabilityZonesRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "ZoneNames": Nothing }



-- | <p>Contains the output of DescribeAvailabiltyZones.</p>
newtype DescribeAvailabilityZonesResult = DescribeAvailabilityZonesResult 
  { "AvailabilityZones" :: Maybe (AvailabilityZoneList)
  }
derive instance newtypeDescribeAvailabilityZonesResult :: Newtype DescribeAvailabilityZonesResult _
derive instance repGenericDescribeAvailabilityZonesResult :: Generic DescribeAvailabilityZonesResult _
instance showDescribeAvailabilityZonesResult :: Show DescribeAvailabilityZonesResult where show = genericShow
instance decodeDescribeAvailabilityZonesResult :: Decode DescribeAvailabilityZonesResult where decode = genericDecode options
instance encodeDescribeAvailabilityZonesResult :: Encode DescribeAvailabilityZonesResult where encode = genericEncode options

-- | Constructs DescribeAvailabilityZonesResult from required parameters
newDescribeAvailabilityZonesResult :: DescribeAvailabilityZonesResult
newDescribeAvailabilityZonesResult  = DescribeAvailabilityZonesResult { "AvailabilityZones": Nothing }

-- | Constructs DescribeAvailabilityZonesResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeAvailabilityZonesResult' :: ( { "AvailabilityZones" :: Maybe (AvailabilityZoneList) } -> {"AvailabilityZones" :: Maybe (AvailabilityZoneList) } ) -> DescribeAvailabilityZonesResult
newDescribeAvailabilityZonesResult'  customize = (DescribeAvailabilityZonesResult <<< customize) { "AvailabilityZones": Nothing }



-- | <p>Contains the parameters for DescribeBundleTasks.</p>
newtype DescribeBundleTasksRequest = DescribeBundleTasksRequest 
  { "BundleIds" :: Maybe (BundleIdStringList)
  , "Filters" :: Maybe (FilterList)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDescribeBundleTasksRequest :: Newtype DescribeBundleTasksRequest _
derive instance repGenericDescribeBundleTasksRequest :: Generic DescribeBundleTasksRequest _
instance showDescribeBundleTasksRequest :: Show DescribeBundleTasksRequest where show = genericShow
instance decodeDescribeBundleTasksRequest :: Decode DescribeBundleTasksRequest where decode = genericDecode options
instance encodeDescribeBundleTasksRequest :: Encode DescribeBundleTasksRequest where encode = genericEncode options

-- | Constructs DescribeBundleTasksRequest from required parameters
newDescribeBundleTasksRequest :: DescribeBundleTasksRequest
newDescribeBundleTasksRequest  = DescribeBundleTasksRequest { "BundleIds": Nothing, "DryRun": Nothing, "Filters": Nothing }

-- | Constructs DescribeBundleTasksRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeBundleTasksRequest' :: ( { "BundleIds" :: Maybe (BundleIdStringList) , "Filters" :: Maybe (FilterList) , "DryRun" :: Maybe (Boolean) } -> {"BundleIds" :: Maybe (BundleIdStringList) , "Filters" :: Maybe (FilterList) , "DryRun" :: Maybe (Boolean) } ) -> DescribeBundleTasksRequest
newDescribeBundleTasksRequest'  customize = (DescribeBundleTasksRequest <<< customize) { "BundleIds": Nothing, "DryRun": Nothing, "Filters": Nothing }



-- | <p>Contains the output of DescribeBundleTasks.</p>
newtype DescribeBundleTasksResult = DescribeBundleTasksResult 
  { "BundleTasks" :: Maybe (BundleTaskList)
  }
derive instance newtypeDescribeBundleTasksResult :: Newtype DescribeBundleTasksResult _
derive instance repGenericDescribeBundleTasksResult :: Generic DescribeBundleTasksResult _
instance showDescribeBundleTasksResult :: Show DescribeBundleTasksResult where show = genericShow
instance decodeDescribeBundleTasksResult :: Decode DescribeBundleTasksResult where decode = genericDecode options
instance encodeDescribeBundleTasksResult :: Encode DescribeBundleTasksResult where encode = genericEncode options

-- | Constructs DescribeBundleTasksResult from required parameters
newDescribeBundleTasksResult :: DescribeBundleTasksResult
newDescribeBundleTasksResult  = DescribeBundleTasksResult { "BundleTasks": Nothing }

-- | Constructs DescribeBundleTasksResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeBundleTasksResult' :: ( { "BundleTasks" :: Maybe (BundleTaskList) } -> {"BundleTasks" :: Maybe (BundleTaskList) } ) -> DescribeBundleTasksResult
newDescribeBundleTasksResult'  customize = (DescribeBundleTasksResult <<< customize) { "BundleTasks": Nothing }



-- | <p>Contains the parameters for DescribeClassicLinkInstances.</p>
newtype DescribeClassicLinkInstancesRequest = DescribeClassicLinkInstancesRequest 
  { "Filters" :: Maybe (FilterList)
  , "DryRun" :: Maybe (Boolean)
  , "InstanceIds" :: Maybe (InstanceIdStringList)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeClassicLinkInstancesRequest :: Newtype DescribeClassicLinkInstancesRequest _
derive instance repGenericDescribeClassicLinkInstancesRequest :: Generic DescribeClassicLinkInstancesRequest _
instance showDescribeClassicLinkInstancesRequest :: Show DescribeClassicLinkInstancesRequest where show = genericShow
instance decodeDescribeClassicLinkInstancesRequest :: Decode DescribeClassicLinkInstancesRequest where decode = genericDecode options
instance encodeDescribeClassicLinkInstancesRequest :: Encode DescribeClassicLinkInstancesRequest where encode = genericEncode options

-- | Constructs DescribeClassicLinkInstancesRequest from required parameters
newDescribeClassicLinkInstancesRequest :: DescribeClassicLinkInstancesRequest
newDescribeClassicLinkInstancesRequest  = DescribeClassicLinkInstancesRequest { "DryRun": Nothing, "Filters": Nothing, "InstanceIds": Nothing, "MaxResults": Nothing, "NextToken": Nothing }

-- | Constructs DescribeClassicLinkInstancesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeClassicLinkInstancesRequest' :: ( { "Filters" :: Maybe (FilterList) , "DryRun" :: Maybe (Boolean) , "InstanceIds" :: Maybe (InstanceIdStringList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } -> {"Filters" :: Maybe (FilterList) , "DryRun" :: Maybe (Boolean) , "InstanceIds" :: Maybe (InstanceIdStringList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } ) -> DescribeClassicLinkInstancesRequest
newDescribeClassicLinkInstancesRequest'  customize = (DescribeClassicLinkInstancesRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "InstanceIds": Nothing, "MaxResults": Nothing, "NextToken": Nothing }



-- | <p>Contains the output of DescribeClassicLinkInstances.</p>
newtype DescribeClassicLinkInstancesResult = DescribeClassicLinkInstancesResult 
  { "Instances" :: Maybe (ClassicLinkInstanceList)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeClassicLinkInstancesResult :: Newtype DescribeClassicLinkInstancesResult _
derive instance repGenericDescribeClassicLinkInstancesResult :: Generic DescribeClassicLinkInstancesResult _
instance showDescribeClassicLinkInstancesResult :: Show DescribeClassicLinkInstancesResult where show = genericShow
instance decodeDescribeClassicLinkInstancesResult :: Decode DescribeClassicLinkInstancesResult where decode = genericDecode options
instance encodeDescribeClassicLinkInstancesResult :: Encode DescribeClassicLinkInstancesResult where encode = genericEncode options

-- | Constructs DescribeClassicLinkInstancesResult from required parameters
newDescribeClassicLinkInstancesResult :: DescribeClassicLinkInstancesResult
newDescribeClassicLinkInstancesResult  = DescribeClassicLinkInstancesResult { "Instances": Nothing, "NextToken": Nothing }

-- | Constructs DescribeClassicLinkInstancesResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeClassicLinkInstancesResult' :: ( { "Instances" :: Maybe (ClassicLinkInstanceList) , "NextToken" :: Maybe (String) } -> {"Instances" :: Maybe (ClassicLinkInstanceList) , "NextToken" :: Maybe (String) } ) -> DescribeClassicLinkInstancesResult
newDescribeClassicLinkInstancesResult'  customize = (DescribeClassicLinkInstancesResult <<< customize) { "Instances": Nothing, "NextToken": Nothing }



newtype DescribeConversionTaskList = DescribeConversionTaskList (Array ConversionTask)
derive instance newtypeDescribeConversionTaskList :: Newtype DescribeConversionTaskList _
derive instance repGenericDescribeConversionTaskList :: Generic DescribeConversionTaskList _
instance showDescribeConversionTaskList :: Show DescribeConversionTaskList where show = genericShow
instance decodeDescribeConversionTaskList :: Decode DescribeConversionTaskList where decode = genericDecode options
instance encodeDescribeConversionTaskList :: Encode DescribeConversionTaskList where encode = genericEncode options



-- | <p>Contains the parameters for DescribeConversionTasks.</p>
newtype DescribeConversionTasksRequest = DescribeConversionTasksRequest 
  { "ConversionTaskIds" :: Maybe (ConversionIdStringList)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDescribeConversionTasksRequest :: Newtype DescribeConversionTasksRequest _
derive instance repGenericDescribeConversionTasksRequest :: Generic DescribeConversionTasksRequest _
instance showDescribeConversionTasksRequest :: Show DescribeConversionTasksRequest where show = genericShow
instance decodeDescribeConversionTasksRequest :: Decode DescribeConversionTasksRequest where decode = genericDecode options
instance encodeDescribeConversionTasksRequest :: Encode DescribeConversionTasksRequest where encode = genericEncode options

-- | Constructs DescribeConversionTasksRequest from required parameters
newDescribeConversionTasksRequest :: DescribeConversionTasksRequest
newDescribeConversionTasksRequest  = DescribeConversionTasksRequest { "ConversionTaskIds": Nothing, "DryRun": Nothing }

-- | Constructs DescribeConversionTasksRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeConversionTasksRequest' :: ( { "ConversionTaskIds" :: Maybe (ConversionIdStringList) , "DryRun" :: Maybe (Boolean) } -> {"ConversionTaskIds" :: Maybe (ConversionIdStringList) , "DryRun" :: Maybe (Boolean) } ) -> DescribeConversionTasksRequest
newDescribeConversionTasksRequest'  customize = (DescribeConversionTasksRequest <<< customize) { "ConversionTaskIds": Nothing, "DryRun": Nothing }



-- | <p>Contains the output for DescribeConversionTasks.</p>
newtype DescribeConversionTasksResult = DescribeConversionTasksResult 
  { "ConversionTasks" :: Maybe (DescribeConversionTaskList)
  }
derive instance newtypeDescribeConversionTasksResult :: Newtype DescribeConversionTasksResult _
derive instance repGenericDescribeConversionTasksResult :: Generic DescribeConversionTasksResult _
instance showDescribeConversionTasksResult :: Show DescribeConversionTasksResult where show = genericShow
instance decodeDescribeConversionTasksResult :: Decode DescribeConversionTasksResult where decode = genericDecode options
instance encodeDescribeConversionTasksResult :: Encode DescribeConversionTasksResult where encode = genericEncode options

-- | Constructs DescribeConversionTasksResult from required parameters
newDescribeConversionTasksResult :: DescribeConversionTasksResult
newDescribeConversionTasksResult  = DescribeConversionTasksResult { "ConversionTasks": Nothing }

-- | Constructs DescribeConversionTasksResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeConversionTasksResult' :: ( { "ConversionTasks" :: Maybe (DescribeConversionTaskList) } -> {"ConversionTasks" :: Maybe (DescribeConversionTaskList) } ) -> DescribeConversionTasksResult
newDescribeConversionTasksResult'  customize = (DescribeConversionTasksResult <<< customize) { "ConversionTasks": Nothing }



-- | <p>Contains the parameters for DescribeCustomerGateways.</p>
newtype DescribeCustomerGatewaysRequest = DescribeCustomerGatewaysRequest 
  { "CustomerGatewayIds" :: Maybe (CustomerGatewayIdStringList)
  , "Filters" :: Maybe (FilterList)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDescribeCustomerGatewaysRequest :: Newtype DescribeCustomerGatewaysRequest _
derive instance repGenericDescribeCustomerGatewaysRequest :: Generic DescribeCustomerGatewaysRequest _
instance showDescribeCustomerGatewaysRequest :: Show DescribeCustomerGatewaysRequest where show = genericShow
instance decodeDescribeCustomerGatewaysRequest :: Decode DescribeCustomerGatewaysRequest where decode = genericDecode options
instance encodeDescribeCustomerGatewaysRequest :: Encode DescribeCustomerGatewaysRequest where encode = genericEncode options

-- | Constructs DescribeCustomerGatewaysRequest from required parameters
newDescribeCustomerGatewaysRequest :: DescribeCustomerGatewaysRequest
newDescribeCustomerGatewaysRequest  = DescribeCustomerGatewaysRequest { "CustomerGatewayIds": Nothing, "DryRun": Nothing, "Filters": Nothing }

-- | Constructs DescribeCustomerGatewaysRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeCustomerGatewaysRequest' :: ( { "CustomerGatewayIds" :: Maybe (CustomerGatewayIdStringList) , "Filters" :: Maybe (FilterList) , "DryRun" :: Maybe (Boolean) } -> {"CustomerGatewayIds" :: Maybe (CustomerGatewayIdStringList) , "Filters" :: Maybe (FilterList) , "DryRun" :: Maybe (Boolean) } ) -> DescribeCustomerGatewaysRequest
newDescribeCustomerGatewaysRequest'  customize = (DescribeCustomerGatewaysRequest <<< customize) { "CustomerGatewayIds": Nothing, "DryRun": Nothing, "Filters": Nothing }



-- | <p>Contains the output of DescribeCustomerGateways.</p>
newtype DescribeCustomerGatewaysResult = DescribeCustomerGatewaysResult 
  { "CustomerGateways" :: Maybe (CustomerGatewayList)
  }
derive instance newtypeDescribeCustomerGatewaysResult :: Newtype DescribeCustomerGatewaysResult _
derive instance repGenericDescribeCustomerGatewaysResult :: Generic DescribeCustomerGatewaysResult _
instance showDescribeCustomerGatewaysResult :: Show DescribeCustomerGatewaysResult where show = genericShow
instance decodeDescribeCustomerGatewaysResult :: Decode DescribeCustomerGatewaysResult where decode = genericDecode options
instance encodeDescribeCustomerGatewaysResult :: Encode DescribeCustomerGatewaysResult where encode = genericEncode options

-- | Constructs DescribeCustomerGatewaysResult from required parameters
newDescribeCustomerGatewaysResult :: DescribeCustomerGatewaysResult
newDescribeCustomerGatewaysResult  = DescribeCustomerGatewaysResult { "CustomerGateways": Nothing }

-- | Constructs DescribeCustomerGatewaysResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeCustomerGatewaysResult' :: ( { "CustomerGateways" :: Maybe (CustomerGatewayList) } -> {"CustomerGateways" :: Maybe (CustomerGatewayList) } ) -> DescribeCustomerGatewaysResult
newDescribeCustomerGatewaysResult'  customize = (DescribeCustomerGatewaysResult <<< customize) { "CustomerGateways": Nothing }



-- | <p>Contains the parameters for DescribeDhcpOptions.</p>
newtype DescribeDhcpOptionsRequest = DescribeDhcpOptionsRequest 
  { "DhcpOptionsIds" :: Maybe (DhcpOptionsIdStringList)
  , "Filters" :: Maybe (FilterList)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDescribeDhcpOptionsRequest :: Newtype DescribeDhcpOptionsRequest _
derive instance repGenericDescribeDhcpOptionsRequest :: Generic DescribeDhcpOptionsRequest _
instance showDescribeDhcpOptionsRequest :: Show DescribeDhcpOptionsRequest where show = genericShow
instance decodeDescribeDhcpOptionsRequest :: Decode DescribeDhcpOptionsRequest where decode = genericDecode options
instance encodeDescribeDhcpOptionsRequest :: Encode DescribeDhcpOptionsRequest where encode = genericEncode options

-- | Constructs DescribeDhcpOptionsRequest from required parameters
newDescribeDhcpOptionsRequest :: DescribeDhcpOptionsRequest
newDescribeDhcpOptionsRequest  = DescribeDhcpOptionsRequest { "DhcpOptionsIds": Nothing, "DryRun": Nothing, "Filters": Nothing }

-- | Constructs DescribeDhcpOptionsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeDhcpOptionsRequest' :: ( { "DhcpOptionsIds" :: Maybe (DhcpOptionsIdStringList) , "Filters" :: Maybe (FilterList) , "DryRun" :: Maybe (Boolean) } -> {"DhcpOptionsIds" :: Maybe (DhcpOptionsIdStringList) , "Filters" :: Maybe (FilterList) , "DryRun" :: Maybe (Boolean) } ) -> DescribeDhcpOptionsRequest
newDescribeDhcpOptionsRequest'  customize = (DescribeDhcpOptionsRequest <<< customize) { "DhcpOptionsIds": Nothing, "DryRun": Nothing, "Filters": Nothing }



-- | <p>Contains the output of DescribeDhcpOptions.</p>
newtype DescribeDhcpOptionsResult = DescribeDhcpOptionsResult 
  { "DhcpOptions" :: Maybe (DhcpOptionsList)
  }
derive instance newtypeDescribeDhcpOptionsResult :: Newtype DescribeDhcpOptionsResult _
derive instance repGenericDescribeDhcpOptionsResult :: Generic DescribeDhcpOptionsResult _
instance showDescribeDhcpOptionsResult :: Show DescribeDhcpOptionsResult where show = genericShow
instance decodeDescribeDhcpOptionsResult :: Decode DescribeDhcpOptionsResult where decode = genericDecode options
instance encodeDescribeDhcpOptionsResult :: Encode DescribeDhcpOptionsResult where encode = genericEncode options

-- | Constructs DescribeDhcpOptionsResult from required parameters
newDescribeDhcpOptionsResult :: DescribeDhcpOptionsResult
newDescribeDhcpOptionsResult  = DescribeDhcpOptionsResult { "DhcpOptions": Nothing }

-- | Constructs DescribeDhcpOptionsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeDhcpOptionsResult' :: ( { "DhcpOptions" :: Maybe (DhcpOptionsList) } -> {"DhcpOptions" :: Maybe (DhcpOptionsList) } ) -> DescribeDhcpOptionsResult
newDescribeDhcpOptionsResult'  customize = (DescribeDhcpOptionsResult <<< customize) { "DhcpOptions": Nothing }



newtype DescribeEgressOnlyInternetGatewaysRequest = DescribeEgressOnlyInternetGatewaysRequest 
  { "DryRun" :: Maybe (Boolean)
  , "EgressOnlyInternetGatewayIds" :: Maybe (EgressOnlyInternetGatewayIdList)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeEgressOnlyInternetGatewaysRequest :: Newtype DescribeEgressOnlyInternetGatewaysRequest _
derive instance repGenericDescribeEgressOnlyInternetGatewaysRequest :: Generic DescribeEgressOnlyInternetGatewaysRequest _
instance showDescribeEgressOnlyInternetGatewaysRequest :: Show DescribeEgressOnlyInternetGatewaysRequest where show = genericShow
instance decodeDescribeEgressOnlyInternetGatewaysRequest :: Decode DescribeEgressOnlyInternetGatewaysRequest where decode = genericDecode options
instance encodeDescribeEgressOnlyInternetGatewaysRequest :: Encode DescribeEgressOnlyInternetGatewaysRequest where encode = genericEncode options

-- | Constructs DescribeEgressOnlyInternetGatewaysRequest from required parameters
newDescribeEgressOnlyInternetGatewaysRequest :: DescribeEgressOnlyInternetGatewaysRequest
newDescribeEgressOnlyInternetGatewaysRequest  = DescribeEgressOnlyInternetGatewaysRequest { "DryRun": Nothing, "EgressOnlyInternetGatewayIds": Nothing, "MaxResults": Nothing, "NextToken": Nothing }

-- | Constructs DescribeEgressOnlyInternetGatewaysRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeEgressOnlyInternetGatewaysRequest' :: ( { "DryRun" :: Maybe (Boolean) , "EgressOnlyInternetGatewayIds" :: Maybe (EgressOnlyInternetGatewayIdList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } -> {"DryRun" :: Maybe (Boolean) , "EgressOnlyInternetGatewayIds" :: Maybe (EgressOnlyInternetGatewayIdList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } ) -> DescribeEgressOnlyInternetGatewaysRequest
newDescribeEgressOnlyInternetGatewaysRequest'  customize = (DescribeEgressOnlyInternetGatewaysRequest <<< customize) { "DryRun": Nothing, "EgressOnlyInternetGatewayIds": Nothing, "MaxResults": Nothing, "NextToken": Nothing }



newtype DescribeEgressOnlyInternetGatewaysResult = DescribeEgressOnlyInternetGatewaysResult 
  { "EgressOnlyInternetGateways" :: Maybe (EgressOnlyInternetGatewayList)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeEgressOnlyInternetGatewaysResult :: Newtype DescribeEgressOnlyInternetGatewaysResult _
derive instance repGenericDescribeEgressOnlyInternetGatewaysResult :: Generic DescribeEgressOnlyInternetGatewaysResult _
instance showDescribeEgressOnlyInternetGatewaysResult :: Show DescribeEgressOnlyInternetGatewaysResult where show = genericShow
instance decodeDescribeEgressOnlyInternetGatewaysResult :: Decode DescribeEgressOnlyInternetGatewaysResult where decode = genericDecode options
instance encodeDescribeEgressOnlyInternetGatewaysResult :: Encode DescribeEgressOnlyInternetGatewaysResult where encode = genericEncode options

-- | Constructs DescribeEgressOnlyInternetGatewaysResult from required parameters
newDescribeEgressOnlyInternetGatewaysResult :: DescribeEgressOnlyInternetGatewaysResult
newDescribeEgressOnlyInternetGatewaysResult  = DescribeEgressOnlyInternetGatewaysResult { "EgressOnlyInternetGateways": Nothing, "NextToken": Nothing }

-- | Constructs DescribeEgressOnlyInternetGatewaysResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeEgressOnlyInternetGatewaysResult' :: ( { "EgressOnlyInternetGateways" :: Maybe (EgressOnlyInternetGatewayList) , "NextToken" :: Maybe (String) } -> {"EgressOnlyInternetGateways" :: Maybe (EgressOnlyInternetGatewayList) , "NextToken" :: Maybe (String) } ) -> DescribeEgressOnlyInternetGatewaysResult
newDescribeEgressOnlyInternetGatewaysResult'  customize = (DescribeEgressOnlyInternetGatewaysResult <<< customize) { "EgressOnlyInternetGateways": Nothing, "NextToken": Nothing }



newtype DescribeElasticGpusRequest = DescribeElasticGpusRequest 
  { "ElasticGpuIds" :: Maybe (ElasticGpuIdSet)
  , "DryRun" :: Maybe (Boolean)
  , "Filters" :: Maybe (FilterList)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeElasticGpusRequest :: Newtype DescribeElasticGpusRequest _
derive instance repGenericDescribeElasticGpusRequest :: Generic DescribeElasticGpusRequest _
instance showDescribeElasticGpusRequest :: Show DescribeElasticGpusRequest where show = genericShow
instance decodeDescribeElasticGpusRequest :: Decode DescribeElasticGpusRequest where decode = genericDecode options
instance encodeDescribeElasticGpusRequest :: Encode DescribeElasticGpusRequest where encode = genericEncode options

-- | Constructs DescribeElasticGpusRequest from required parameters
newDescribeElasticGpusRequest :: DescribeElasticGpusRequest
newDescribeElasticGpusRequest  = DescribeElasticGpusRequest { "DryRun": Nothing, "ElasticGpuIds": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing }

-- | Constructs DescribeElasticGpusRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeElasticGpusRequest' :: ( { "ElasticGpuIds" :: Maybe (ElasticGpuIdSet) , "DryRun" :: Maybe (Boolean) , "Filters" :: Maybe (FilterList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } -> {"ElasticGpuIds" :: Maybe (ElasticGpuIdSet) , "DryRun" :: Maybe (Boolean) , "Filters" :: Maybe (FilterList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } ) -> DescribeElasticGpusRequest
newDescribeElasticGpusRequest'  customize = (DescribeElasticGpusRequest <<< customize) { "DryRun": Nothing, "ElasticGpuIds": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing }



newtype DescribeElasticGpusResult = DescribeElasticGpusResult 
  { "ElasticGpuSet" :: Maybe (ElasticGpuSet)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeElasticGpusResult :: Newtype DescribeElasticGpusResult _
derive instance repGenericDescribeElasticGpusResult :: Generic DescribeElasticGpusResult _
instance showDescribeElasticGpusResult :: Show DescribeElasticGpusResult where show = genericShow
instance decodeDescribeElasticGpusResult :: Decode DescribeElasticGpusResult where decode = genericDecode options
instance encodeDescribeElasticGpusResult :: Encode DescribeElasticGpusResult where encode = genericEncode options

-- | Constructs DescribeElasticGpusResult from required parameters
newDescribeElasticGpusResult :: DescribeElasticGpusResult
newDescribeElasticGpusResult  = DescribeElasticGpusResult { "ElasticGpuSet": Nothing, "MaxResults": Nothing, "NextToken": Nothing }

-- | Constructs DescribeElasticGpusResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeElasticGpusResult' :: ( { "ElasticGpuSet" :: Maybe (ElasticGpuSet) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } -> {"ElasticGpuSet" :: Maybe (ElasticGpuSet) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } ) -> DescribeElasticGpusResult
newDescribeElasticGpusResult'  customize = (DescribeElasticGpusResult <<< customize) { "ElasticGpuSet": Nothing, "MaxResults": Nothing, "NextToken": Nothing }



-- | <p>Contains the parameters for DescribeExportTasks.</p>
newtype DescribeExportTasksRequest = DescribeExportTasksRequest 
  { "ExportTaskIds" :: Maybe (ExportTaskIdStringList)
  }
derive instance newtypeDescribeExportTasksRequest :: Newtype DescribeExportTasksRequest _
derive instance repGenericDescribeExportTasksRequest :: Generic DescribeExportTasksRequest _
instance showDescribeExportTasksRequest :: Show DescribeExportTasksRequest where show = genericShow
instance decodeDescribeExportTasksRequest :: Decode DescribeExportTasksRequest where decode = genericDecode options
instance encodeDescribeExportTasksRequest :: Encode DescribeExportTasksRequest where encode = genericEncode options

-- | Constructs DescribeExportTasksRequest from required parameters
newDescribeExportTasksRequest :: DescribeExportTasksRequest
newDescribeExportTasksRequest  = DescribeExportTasksRequest { "ExportTaskIds": Nothing }

-- | Constructs DescribeExportTasksRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeExportTasksRequest' :: ( { "ExportTaskIds" :: Maybe (ExportTaskIdStringList) } -> {"ExportTaskIds" :: Maybe (ExportTaskIdStringList) } ) -> DescribeExportTasksRequest
newDescribeExportTasksRequest'  customize = (DescribeExportTasksRequest <<< customize) { "ExportTaskIds": Nothing }



-- | <p>Contains the output for DescribeExportTasks.</p>
newtype DescribeExportTasksResult = DescribeExportTasksResult 
  { "ExportTasks" :: Maybe (ExportTaskList)
  }
derive instance newtypeDescribeExportTasksResult :: Newtype DescribeExportTasksResult _
derive instance repGenericDescribeExportTasksResult :: Generic DescribeExportTasksResult _
instance showDescribeExportTasksResult :: Show DescribeExportTasksResult where show = genericShow
instance decodeDescribeExportTasksResult :: Decode DescribeExportTasksResult where decode = genericDecode options
instance encodeDescribeExportTasksResult :: Encode DescribeExportTasksResult where encode = genericEncode options

-- | Constructs DescribeExportTasksResult from required parameters
newDescribeExportTasksResult :: DescribeExportTasksResult
newDescribeExportTasksResult  = DescribeExportTasksResult { "ExportTasks": Nothing }

-- | Constructs DescribeExportTasksResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeExportTasksResult' :: ( { "ExportTasks" :: Maybe (ExportTaskList) } -> {"ExportTasks" :: Maybe (ExportTaskList) } ) -> DescribeExportTasksResult
newDescribeExportTasksResult'  customize = (DescribeExportTasksResult <<< customize) { "ExportTasks": Nothing }



-- | <p>Contains the parameters for DescribeFlowLogs.</p>
newtype DescribeFlowLogsRequest = DescribeFlowLogsRequest 
  { "Filter" :: Maybe (FilterList)
  , "FlowLogIds" :: Maybe (ValueStringList)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeFlowLogsRequest :: Newtype DescribeFlowLogsRequest _
derive instance repGenericDescribeFlowLogsRequest :: Generic DescribeFlowLogsRequest _
instance showDescribeFlowLogsRequest :: Show DescribeFlowLogsRequest where show = genericShow
instance decodeDescribeFlowLogsRequest :: Decode DescribeFlowLogsRequest where decode = genericDecode options
instance encodeDescribeFlowLogsRequest :: Encode DescribeFlowLogsRequest where encode = genericEncode options

-- | Constructs DescribeFlowLogsRequest from required parameters
newDescribeFlowLogsRequest :: DescribeFlowLogsRequest
newDescribeFlowLogsRequest  = DescribeFlowLogsRequest { "Filter": Nothing, "FlowLogIds": Nothing, "MaxResults": Nothing, "NextToken": Nothing }

-- | Constructs DescribeFlowLogsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeFlowLogsRequest' :: ( { "Filter" :: Maybe (FilterList) , "FlowLogIds" :: Maybe (ValueStringList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } -> {"Filter" :: Maybe (FilterList) , "FlowLogIds" :: Maybe (ValueStringList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } ) -> DescribeFlowLogsRequest
newDescribeFlowLogsRequest'  customize = (DescribeFlowLogsRequest <<< customize) { "Filter": Nothing, "FlowLogIds": Nothing, "MaxResults": Nothing, "NextToken": Nothing }



-- | <p>Contains the output of DescribeFlowLogs.</p>
newtype DescribeFlowLogsResult = DescribeFlowLogsResult 
  { "FlowLogs" :: Maybe (FlowLogSet)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeFlowLogsResult :: Newtype DescribeFlowLogsResult _
derive instance repGenericDescribeFlowLogsResult :: Generic DescribeFlowLogsResult _
instance showDescribeFlowLogsResult :: Show DescribeFlowLogsResult where show = genericShow
instance decodeDescribeFlowLogsResult :: Decode DescribeFlowLogsResult where decode = genericDecode options
instance encodeDescribeFlowLogsResult :: Encode DescribeFlowLogsResult where encode = genericEncode options

-- | Constructs DescribeFlowLogsResult from required parameters
newDescribeFlowLogsResult :: DescribeFlowLogsResult
newDescribeFlowLogsResult  = DescribeFlowLogsResult { "FlowLogs": Nothing, "NextToken": Nothing }

-- | Constructs DescribeFlowLogsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeFlowLogsResult' :: ( { "FlowLogs" :: Maybe (FlowLogSet) , "NextToken" :: Maybe (String) } -> {"FlowLogs" :: Maybe (FlowLogSet) , "NextToken" :: Maybe (String) } ) -> DescribeFlowLogsResult
newDescribeFlowLogsResult'  customize = (DescribeFlowLogsResult <<< customize) { "FlowLogs": Nothing, "NextToken": Nothing }



newtype DescribeFpgaImageAttributeRequest = DescribeFpgaImageAttributeRequest 
  { "DryRun" :: Maybe (Boolean)
  , "FpgaImageId" :: (String)
  , "Attribute" :: (FpgaImageAttributeName)
  }
derive instance newtypeDescribeFpgaImageAttributeRequest :: Newtype DescribeFpgaImageAttributeRequest _
derive instance repGenericDescribeFpgaImageAttributeRequest :: Generic DescribeFpgaImageAttributeRequest _
instance showDescribeFpgaImageAttributeRequest :: Show DescribeFpgaImageAttributeRequest where show = genericShow
instance decodeDescribeFpgaImageAttributeRequest :: Decode DescribeFpgaImageAttributeRequest where decode = genericDecode options
instance encodeDescribeFpgaImageAttributeRequest :: Encode DescribeFpgaImageAttributeRequest where encode = genericEncode options

-- | Constructs DescribeFpgaImageAttributeRequest from required parameters
newDescribeFpgaImageAttributeRequest :: FpgaImageAttributeName -> String -> DescribeFpgaImageAttributeRequest
newDescribeFpgaImageAttributeRequest _Attribute _FpgaImageId = DescribeFpgaImageAttributeRequest { "Attribute": _Attribute, "FpgaImageId": _FpgaImageId, "DryRun": Nothing }

-- | Constructs DescribeFpgaImageAttributeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeFpgaImageAttributeRequest' :: FpgaImageAttributeName -> String -> ( { "DryRun" :: Maybe (Boolean) , "FpgaImageId" :: (String) , "Attribute" :: (FpgaImageAttributeName) } -> {"DryRun" :: Maybe (Boolean) , "FpgaImageId" :: (String) , "Attribute" :: (FpgaImageAttributeName) } ) -> DescribeFpgaImageAttributeRequest
newDescribeFpgaImageAttributeRequest' _Attribute _FpgaImageId customize = (DescribeFpgaImageAttributeRequest <<< customize) { "Attribute": _Attribute, "FpgaImageId": _FpgaImageId, "DryRun": Nothing }



newtype DescribeFpgaImageAttributeResult = DescribeFpgaImageAttributeResult 
  { "FpgaImageAttribute" :: Maybe (FpgaImageAttribute)
  }
derive instance newtypeDescribeFpgaImageAttributeResult :: Newtype DescribeFpgaImageAttributeResult _
derive instance repGenericDescribeFpgaImageAttributeResult :: Generic DescribeFpgaImageAttributeResult _
instance showDescribeFpgaImageAttributeResult :: Show DescribeFpgaImageAttributeResult where show = genericShow
instance decodeDescribeFpgaImageAttributeResult :: Decode DescribeFpgaImageAttributeResult where decode = genericDecode options
instance encodeDescribeFpgaImageAttributeResult :: Encode DescribeFpgaImageAttributeResult where encode = genericEncode options

-- | Constructs DescribeFpgaImageAttributeResult from required parameters
newDescribeFpgaImageAttributeResult :: DescribeFpgaImageAttributeResult
newDescribeFpgaImageAttributeResult  = DescribeFpgaImageAttributeResult { "FpgaImageAttribute": Nothing }

-- | Constructs DescribeFpgaImageAttributeResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeFpgaImageAttributeResult' :: ( { "FpgaImageAttribute" :: Maybe (FpgaImageAttribute) } -> {"FpgaImageAttribute" :: Maybe (FpgaImageAttribute) } ) -> DescribeFpgaImageAttributeResult
newDescribeFpgaImageAttributeResult'  customize = (DescribeFpgaImageAttributeResult <<< customize) { "FpgaImageAttribute": Nothing }



newtype DescribeFpgaImagesRequest = DescribeFpgaImagesRequest 
  { "DryRun" :: Maybe (Boolean)
  , "FpgaImageIds" :: Maybe (FpgaImageIdList)
  , "Owners" :: Maybe (OwnerStringList)
  , "Filters" :: Maybe (FilterList)
  , "NextToken" :: Maybe (NextToken)
  , "MaxResults" :: Maybe (MaxResults)
  }
derive instance newtypeDescribeFpgaImagesRequest :: Newtype DescribeFpgaImagesRequest _
derive instance repGenericDescribeFpgaImagesRequest :: Generic DescribeFpgaImagesRequest _
instance showDescribeFpgaImagesRequest :: Show DescribeFpgaImagesRequest where show = genericShow
instance decodeDescribeFpgaImagesRequest :: Decode DescribeFpgaImagesRequest where decode = genericDecode options
instance encodeDescribeFpgaImagesRequest :: Encode DescribeFpgaImagesRequest where encode = genericEncode options

-- | Constructs DescribeFpgaImagesRequest from required parameters
newDescribeFpgaImagesRequest :: DescribeFpgaImagesRequest
newDescribeFpgaImagesRequest  = DescribeFpgaImagesRequest { "DryRun": Nothing, "Filters": Nothing, "FpgaImageIds": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "Owners": Nothing }

-- | Constructs DescribeFpgaImagesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeFpgaImagesRequest' :: ( { "DryRun" :: Maybe (Boolean) , "FpgaImageIds" :: Maybe (FpgaImageIdList) , "Owners" :: Maybe (OwnerStringList) , "Filters" :: Maybe (FilterList) , "NextToken" :: Maybe (NextToken) , "MaxResults" :: Maybe (MaxResults) } -> {"DryRun" :: Maybe (Boolean) , "FpgaImageIds" :: Maybe (FpgaImageIdList) , "Owners" :: Maybe (OwnerStringList) , "Filters" :: Maybe (FilterList) , "NextToken" :: Maybe (NextToken) , "MaxResults" :: Maybe (MaxResults) } ) -> DescribeFpgaImagesRequest
newDescribeFpgaImagesRequest'  customize = (DescribeFpgaImagesRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "FpgaImageIds": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "Owners": Nothing }



newtype DescribeFpgaImagesResult = DescribeFpgaImagesResult 
  { "FpgaImages" :: Maybe (FpgaImageList)
  , "NextToken" :: Maybe (NextToken)
  }
derive instance newtypeDescribeFpgaImagesResult :: Newtype DescribeFpgaImagesResult _
derive instance repGenericDescribeFpgaImagesResult :: Generic DescribeFpgaImagesResult _
instance showDescribeFpgaImagesResult :: Show DescribeFpgaImagesResult where show = genericShow
instance decodeDescribeFpgaImagesResult :: Decode DescribeFpgaImagesResult where decode = genericDecode options
instance encodeDescribeFpgaImagesResult :: Encode DescribeFpgaImagesResult where encode = genericEncode options

-- | Constructs DescribeFpgaImagesResult from required parameters
newDescribeFpgaImagesResult :: DescribeFpgaImagesResult
newDescribeFpgaImagesResult  = DescribeFpgaImagesResult { "FpgaImages": Nothing, "NextToken": Nothing }

-- | Constructs DescribeFpgaImagesResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeFpgaImagesResult' :: ( { "FpgaImages" :: Maybe (FpgaImageList) , "NextToken" :: Maybe (NextToken) } -> {"FpgaImages" :: Maybe (FpgaImageList) , "NextToken" :: Maybe (NextToken) } ) -> DescribeFpgaImagesResult
newDescribeFpgaImagesResult'  customize = (DescribeFpgaImagesResult <<< customize) { "FpgaImages": Nothing, "NextToken": Nothing }



newtype DescribeHostReservationOfferingsRequest = DescribeHostReservationOfferingsRequest 
  { "Filter" :: Maybe (FilterList)
  , "MaxDuration" :: Maybe (Int)
  , "MaxResults" :: Maybe (Int)
  , "MinDuration" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  , "OfferingId" :: Maybe (String)
  }
derive instance newtypeDescribeHostReservationOfferingsRequest :: Newtype DescribeHostReservationOfferingsRequest _
derive instance repGenericDescribeHostReservationOfferingsRequest :: Generic DescribeHostReservationOfferingsRequest _
instance showDescribeHostReservationOfferingsRequest :: Show DescribeHostReservationOfferingsRequest where show = genericShow
instance decodeDescribeHostReservationOfferingsRequest :: Decode DescribeHostReservationOfferingsRequest where decode = genericDecode options
instance encodeDescribeHostReservationOfferingsRequest :: Encode DescribeHostReservationOfferingsRequest where encode = genericEncode options

-- | Constructs DescribeHostReservationOfferingsRequest from required parameters
newDescribeHostReservationOfferingsRequest :: DescribeHostReservationOfferingsRequest
newDescribeHostReservationOfferingsRequest  = DescribeHostReservationOfferingsRequest { "Filter": Nothing, "MaxDuration": Nothing, "MaxResults": Nothing, "MinDuration": Nothing, "NextToken": Nothing, "OfferingId": Nothing }

-- | Constructs DescribeHostReservationOfferingsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeHostReservationOfferingsRequest' :: ( { "Filter" :: Maybe (FilterList) , "MaxDuration" :: Maybe (Int) , "MaxResults" :: Maybe (Int) , "MinDuration" :: Maybe (Int) , "NextToken" :: Maybe (String) , "OfferingId" :: Maybe (String) } -> {"Filter" :: Maybe (FilterList) , "MaxDuration" :: Maybe (Int) , "MaxResults" :: Maybe (Int) , "MinDuration" :: Maybe (Int) , "NextToken" :: Maybe (String) , "OfferingId" :: Maybe (String) } ) -> DescribeHostReservationOfferingsRequest
newDescribeHostReservationOfferingsRequest'  customize = (DescribeHostReservationOfferingsRequest <<< customize) { "Filter": Nothing, "MaxDuration": Nothing, "MaxResults": Nothing, "MinDuration": Nothing, "NextToken": Nothing, "OfferingId": Nothing }



newtype DescribeHostReservationOfferingsResult = DescribeHostReservationOfferingsResult 
  { "NextToken" :: Maybe (String)
  , "OfferingSet" :: Maybe (HostOfferingSet)
  }
derive instance newtypeDescribeHostReservationOfferingsResult :: Newtype DescribeHostReservationOfferingsResult _
derive instance repGenericDescribeHostReservationOfferingsResult :: Generic DescribeHostReservationOfferingsResult _
instance showDescribeHostReservationOfferingsResult :: Show DescribeHostReservationOfferingsResult where show = genericShow
instance decodeDescribeHostReservationOfferingsResult :: Decode DescribeHostReservationOfferingsResult where decode = genericDecode options
instance encodeDescribeHostReservationOfferingsResult :: Encode DescribeHostReservationOfferingsResult where encode = genericEncode options

-- | Constructs DescribeHostReservationOfferingsResult from required parameters
newDescribeHostReservationOfferingsResult :: DescribeHostReservationOfferingsResult
newDescribeHostReservationOfferingsResult  = DescribeHostReservationOfferingsResult { "NextToken": Nothing, "OfferingSet": Nothing }

-- | Constructs DescribeHostReservationOfferingsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeHostReservationOfferingsResult' :: ( { "NextToken" :: Maybe (String) , "OfferingSet" :: Maybe (HostOfferingSet) } -> {"NextToken" :: Maybe (String) , "OfferingSet" :: Maybe (HostOfferingSet) } ) -> DescribeHostReservationOfferingsResult
newDescribeHostReservationOfferingsResult'  customize = (DescribeHostReservationOfferingsResult <<< customize) { "NextToken": Nothing, "OfferingSet": Nothing }



newtype DescribeHostReservationsRequest = DescribeHostReservationsRequest 
  { "Filter" :: Maybe (FilterList)
  , "HostReservationIdSet" :: Maybe (HostReservationIdSet)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeHostReservationsRequest :: Newtype DescribeHostReservationsRequest _
derive instance repGenericDescribeHostReservationsRequest :: Generic DescribeHostReservationsRequest _
instance showDescribeHostReservationsRequest :: Show DescribeHostReservationsRequest where show = genericShow
instance decodeDescribeHostReservationsRequest :: Decode DescribeHostReservationsRequest where decode = genericDecode options
instance encodeDescribeHostReservationsRequest :: Encode DescribeHostReservationsRequest where encode = genericEncode options

-- | Constructs DescribeHostReservationsRequest from required parameters
newDescribeHostReservationsRequest :: DescribeHostReservationsRequest
newDescribeHostReservationsRequest  = DescribeHostReservationsRequest { "Filter": Nothing, "HostReservationIdSet": Nothing, "MaxResults": Nothing, "NextToken": Nothing }

-- | Constructs DescribeHostReservationsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeHostReservationsRequest' :: ( { "Filter" :: Maybe (FilterList) , "HostReservationIdSet" :: Maybe (HostReservationIdSet) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } -> {"Filter" :: Maybe (FilterList) , "HostReservationIdSet" :: Maybe (HostReservationIdSet) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } ) -> DescribeHostReservationsRequest
newDescribeHostReservationsRequest'  customize = (DescribeHostReservationsRequest <<< customize) { "Filter": Nothing, "HostReservationIdSet": Nothing, "MaxResults": Nothing, "NextToken": Nothing }



newtype DescribeHostReservationsResult = DescribeHostReservationsResult 
  { "HostReservationSet" :: Maybe (HostReservationSet)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeHostReservationsResult :: Newtype DescribeHostReservationsResult _
derive instance repGenericDescribeHostReservationsResult :: Generic DescribeHostReservationsResult _
instance showDescribeHostReservationsResult :: Show DescribeHostReservationsResult where show = genericShow
instance decodeDescribeHostReservationsResult :: Decode DescribeHostReservationsResult where decode = genericDecode options
instance encodeDescribeHostReservationsResult :: Encode DescribeHostReservationsResult where encode = genericEncode options

-- | Constructs DescribeHostReservationsResult from required parameters
newDescribeHostReservationsResult :: DescribeHostReservationsResult
newDescribeHostReservationsResult  = DescribeHostReservationsResult { "HostReservationSet": Nothing, "NextToken": Nothing }

-- | Constructs DescribeHostReservationsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeHostReservationsResult' :: ( { "HostReservationSet" :: Maybe (HostReservationSet) , "NextToken" :: Maybe (String) } -> {"HostReservationSet" :: Maybe (HostReservationSet) , "NextToken" :: Maybe (String) } ) -> DescribeHostReservationsResult
newDescribeHostReservationsResult'  customize = (DescribeHostReservationsResult <<< customize) { "HostReservationSet": Nothing, "NextToken": Nothing }



-- | <p>Contains the parameters for DescribeHosts.</p>
newtype DescribeHostsRequest = DescribeHostsRequest 
  { "Filter" :: Maybe (FilterList)
  , "HostIds" :: Maybe (RequestHostIdList)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeHostsRequest :: Newtype DescribeHostsRequest _
derive instance repGenericDescribeHostsRequest :: Generic DescribeHostsRequest _
instance showDescribeHostsRequest :: Show DescribeHostsRequest where show = genericShow
instance decodeDescribeHostsRequest :: Decode DescribeHostsRequest where decode = genericDecode options
instance encodeDescribeHostsRequest :: Encode DescribeHostsRequest where encode = genericEncode options

-- | Constructs DescribeHostsRequest from required parameters
newDescribeHostsRequest :: DescribeHostsRequest
newDescribeHostsRequest  = DescribeHostsRequest { "Filter": Nothing, "HostIds": Nothing, "MaxResults": Nothing, "NextToken": Nothing }

-- | Constructs DescribeHostsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeHostsRequest' :: ( { "Filter" :: Maybe (FilterList) , "HostIds" :: Maybe (RequestHostIdList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } -> {"Filter" :: Maybe (FilterList) , "HostIds" :: Maybe (RequestHostIdList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } ) -> DescribeHostsRequest
newDescribeHostsRequest'  customize = (DescribeHostsRequest <<< customize) { "Filter": Nothing, "HostIds": Nothing, "MaxResults": Nothing, "NextToken": Nothing }



-- | <p>Contains the output of DescribeHosts.</p>
newtype DescribeHostsResult = DescribeHostsResult 
  { "Hosts" :: Maybe (HostList)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeHostsResult :: Newtype DescribeHostsResult _
derive instance repGenericDescribeHostsResult :: Generic DescribeHostsResult _
instance showDescribeHostsResult :: Show DescribeHostsResult where show = genericShow
instance decodeDescribeHostsResult :: Decode DescribeHostsResult where decode = genericDecode options
instance encodeDescribeHostsResult :: Encode DescribeHostsResult where encode = genericEncode options

-- | Constructs DescribeHostsResult from required parameters
newDescribeHostsResult :: DescribeHostsResult
newDescribeHostsResult  = DescribeHostsResult { "Hosts": Nothing, "NextToken": Nothing }

-- | Constructs DescribeHostsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeHostsResult' :: ( { "Hosts" :: Maybe (HostList) , "NextToken" :: Maybe (String) } -> {"Hosts" :: Maybe (HostList) , "NextToken" :: Maybe (String) } ) -> DescribeHostsResult
newDescribeHostsResult'  customize = (DescribeHostsResult <<< customize) { "Hosts": Nothing, "NextToken": Nothing }



newtype DescribeIamInstanceProfileAssociationsRequest = DescribeIamInstanceProfileAssociationsRequest 
  { "AssociationIds" :: Maybe (AssociationIdList)
  , "Filters" :: Maybe (FilterList)
  , "MaxResults" :: Maybe (MaxResults)
  , "NextToken" :: Maybe (NextToken)
  }
derive instance newtypeDescribeIamInstanceProfileAssociationsRequest :: Newtype DescribeIamInstanceProfileAssociationsRequest _
derive instance repGenericDescribeIamInstanceProfileAssociationsRequest :: Generic DescribeIamInstanceProfileAssociationsRequest _
instance showDescribeIamInstanceProfileAssociationsRequest :: Show DescribeIamInstanceProfileAssociationsRequest where show = genericShow
instance decodeDescribeIamInstanceProfileAssociationsRequest :: Decode DescribeIamInstanceProfileAssociationsRequest where decode = genericDecode options
instance encodeDescribeIamInstanceProfileAssociationsRequest :: Encode DescribeIamInstanceProfileAssociationsRequest where encode = genericEncode options

-- | Constructs DescribeIamInstanceProfileAssociationsRequest from required parameters
newDescribeIamInstanceProfileAssociationsRequest :: DescribeIamInstanceProfileAssociationsRequest
newDescribeIamInstanceProfileAssociationsRequest  = DescribeIamInstanceProfileAssociationsRequest { "AssociationIds": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing }

-- | Constructs DescribeIamInstanceProfileAssociationsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeIamInstanceProfileAssociationsRequest' :: ( { "AssociationIds" :: Maybe (AssociationIdList) , "Filters" :: Maybe (FilterList) , "MaxResults" :: Maybe (MaxResults) , "NextToken" :: Maybe (NextToken) } -> {"AssociationIds" :: Maybe (AssociationIdList) , "Filters" :: Maybe (FilterList) , "MaxResults" :: Maybe (MaxResults) , "NextToken" :: Maybe (NextToken) } ) -> DescribeIamInstanceProfileAssociationsRequest
newDescribeIamInstanceProfileAssociationsRequest'  customize = (DescribeIamInstanceProfileAssociationsRequest <<< customize) { "AssociationIds": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing }



newtype DescribeIamInstanceProfileAssociationsResult = DescribeIamInstanceProfileAssociationsResult 
  { "IamInstanceProfileAssociations" :: Maybe (IamInstanceProfileAssociationSet)
  , "NextToken" :: Maybe (NextToken)
  }
derive instance newtypeDescribeIamInstanceProfileAssociationsResult :: Newtype DescribeIamInstanceProfileAssociationsResult _
derive instance repGenericDescribeIamInstanceProfileAssociationsResult :: Generic DescribeIamInstanceProfileAssociationsResult _
instance showDescribeIamInstanceProfileAssociationsResult :: Show DescribeIamInstanceProfileAssociationsResult where show = genericShow
instance decodeDescribeIamInstanceProfileAssociationsResult :: Decode DescribeIamInstanceProfileAssociationsResult where decode = genericDecode options
instance encodeDescribeIamInstanceProfileAssociationsResult :: Encode DescribeIamInstanceProfileAssociationsResult where encode = genericEncode options

-- | Constructs DescribeIamInstanceProfileAssociationsResult from required parameters
newDescribeIamInstanceProfileAssociationsResult :: DescribeIamInstanceProfileAssociationsResult
newDescribeIamInstanceProfileAssociationsResult  = DescribeIamInstanceProfileAssociationsResult { "IamInstanceProfileAssociations": Nothing, "NextToken": Nothing }

-- | Constructs DescribeIamInstanceProfileAssociationsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeIamInstanceProfileAssociationsResult' :: ( { "IamInstanceProfileAssociations" :: Maybe (IamInstanceProfileAssociationSet) , "NextToken" :: Maybe (NextToken) } -> {"IamInstanceProfileAssociations" :: Maybe (IamInstanceProfileAssociationSet) , "NextToken" :: Maybe (NextToken) } ) -> DescribeIamInstanceProfileAssociationsResult
newDescribeIamInstanceProfileAssociationsResult'  customize = (DescribeIamInstanceProfileAssociationsResult <<< customize) { "IamInstanceProfileAssociations": Nothing, "NextToken": Nothing }



-- | <p>Contains the parameters for DescribeIdFormat.</p>
newtype DescribeIdFormatRequest = DescribeIdFormatRequest 
  { "Resource" :: Maybe (String)
  }
derive instance newtypeDescribeIdFormatRequest :: Newtype DescribeIdFormatRequest _
derive instance repGenericDescribeIdFormatRequest :: Generic DescribeIdFormatRequest _
instance showDescribeIdFormatRequest :: Show DescribeIdFormatRequest where show = genericShow
instance decodeDescribeIdFormatRequest :: Decode DescribeIdFormatRequest where decode = genericDecode options
instance encodeDescribeIdFormatRequest :: Encode DescribeIdFormatRequest where encode = genericEncode options

-- | Constructs DescribeIdFormatRequest from required parameters
newDescribeIdFormatRequest :: DescribeIdFormatRequest
newDescribeIdFormatRequest  = DescribeIdFormatRequest { "Resource": Nothing }

-- | Constructs DescribeIdFormatRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeIdFormatRequest' :: ( { "Resource" :: Maybe (String) } -> {"Resource" :: Maybe (String) } ) -> DescribeIdFormatRequest
newDescribeIdFormatRequest'  customize = (DescribeIdFormatRequest <<< customize) { "Resource": Nothing }



-- | <p>Contains the output of DescribeIdFormat.</p>
newtype DescribeIdFormatResult = DescribeIdFormatResult 
  { "Statuses" :: Maybe (IdFormatList)
  }
derive instance newtypeDescribeIdFormatResult :: Newtype DescribeIdFormatResult _
derive instance repGenericDescribeIdFormatResult :: Generic DescribeIdFormatResult _
instance showDescribeIdFormatResult :: Show DescribeIdFormatResult where show = genericShow
instance decodeDescribeIdFormatResult :: Decode DescribeIdFormatResult where decode = genericDecode options
instance encodeDescribeIdFormatResult :: Encode DescribeIdFormatResult where encode = genericEncode options

-- | Constructs DescribeIdFormatResult from required parameters
newDescribeIdFormatResult :: DescribeIdFormatResult
newDescribeIdFormatResult  = DescribeIdFormatResult { "Statuses": Nothing }

-- | Constructs DescribeIdFormatResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeIdFormatResult' :: ( { "Statuses" :: Maybe (IdFormatList) } -> {"Statuses" :: Maybe (IdFormatList) } ) -> DescribeIdFormatResult
newDescribeIdFormatResult'  customize = (DescribeIdFormatResult <<< customize) { "Statuses": Nothing }



-- | <p>Contains the parameters for DescribeIdentityIdFormat.</p>
newtype DescribeIdentityIdFormatRequest = DescribeIdentityIdFormatRequest 
  { "PrincipalArn" :: (String)
  , "Resource" :: Maybe (String)
  }
derive instance newtypeDescribeIdentityIdFormatRequest :: Newtype DescribeIdentityIdFormatRequest _
derive instance repGenericDescribeIdentityIdFormatRequest :: Generic DescribeIdentityIdFormatRequest _
instance showDescribeIdentityIdFormatRequest :: Show DescribeIdentityIdFormatRequest where show = genericShow
instance decodeDescribeIdentityIdFormatRequest :: Decode DescribeIdentityIdFormatRequest where decode = genericDecode options
instance encodeDescribeIdentityIdFormatRequest :: Encode DescribeIdentityIdFormatRequest where encode = genericEncode options

-- | Constructs DescribeIdentityIdFormatRequest from required parameters
newDescribeIdentityIdFormatRequest :: String -> DescribeIdentityIdFormatRequest
newDescribeIdentityIdFormatRequest _PrincipalArn = DescribeIdentityIdFormatRequest { "PrincipalArn": _PrincipalArn, "Resource": Nothing }

-- | Constructs DescribeIdentityIdFormatRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeIdentityIdFormatRequest' :: String -> ( { "PrincipalArn" :: (String) , "Resource" :: Maybe (String) } -> {"PrincipalArn" :: (String) , "Resource" :: Maybe (String) } ) -> DescribeIdentityIdFormatRequest
newDescribeIdentityIdFormatRequest' _PrincipalArn customize = (DescribeIdentityIdFormatRequest <<< customize) { "PrincipalArn": _PrincipalArn, "Resource": Nothing }



-- | <p>Contains the output of DescribeIdentityIdFormat.</p>
newtype DescribeIdentityIdFormatResult = DescribeIdentityIdFormatResult 
  { "Statuses" :: Maybe (IdFormatList)
  }
derive instance newtypeDescribeIdentityIdFormatResult :: Newtype DescribeIdentityIdFormatResult _
derive instance repGenericDescribeIdentityIdFormatResult :: Generic DescribeIdentityIdFormatResult _
instance showDescribeIdentityIdFormatResult :: Show DescribeIdentityIdFormatResult where show = genericShow
instance decodeDescribeIdentityIdFormatResult :: Decode DescribeIdentityIdFormatResult where decode = genericDecode options
instance encodeDescribeIdentityIdFormatResult :: Encode DescribeIdentityIdFormatResult where encode = genericEncode options

-- | Constructs DescribeIdentityIdFormatResult from required parameters
newDescribeIdentityIdFormatResult :: DescribeIdentityIdFormatResult
newDescribeIdentityIdFormatResult  = DescribeIdentityIdFormatResult { "Statuses": Nothing }

-- | Constructs DescribeIdentityIdFormatResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeIdentityIdFormatResult' :: ( { "Statuses" :: Maybe (IdFormatList) } -> {"Statuses" :: Maybe (IdFormatList) } ) -> DescribeIdentityIdFormatResult
newDescribeIdentityIdFormatResult'  customize = (DescribeIdentityIdFormatResult <<< customize) { "Statuses": Nothing }



-- | <p>Contains the parameters for DescribeImageAttribute.</p>
newtype DescribeImageAttributeRequest = DescribeImageAttributeRequest 
  { "Attribute" :: (ImageAttributeName)
  , "ImageId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDescribeImageAttributeRequest :: Newtype DescribeImageAttributeRequest _
derive instance repGenericDescribeImageAttributeRequest :: Generic DescribeImageAttributeRequest _
instance showDescribeImageAttributeRequest :: Show DescribeImageAttributeRequest where show = genericShow
instance decodeDescribeImageAttributeRequest :: Decode DescribeImageAttributeRequest where decode = genericDecode options
instance encodeDescribeImageAttributeRequest :: Encode DescribeImageAttributeRequest where encode = genericEncode options

-- | Constructs DescribeImageAttributeRequest from required parameters
newDescribeImageAttributeRequest :: ImageAttributeName -> String -> DescribeImageAttributeRequest
newDescribeImageAttributeRequest _Attribute _ImageId = DescribeImageAttributeRequest { "Attribute": _Attribute, "ImageId": _ImageId, "DryRun": Nothing }

-- | Constructs DescribeImageAttributeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeImageAttributeRequest' :: ImageAttributeName -> String -> ( { "Attribute" :: (ImageAttributeName) , "ImageId" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"Attribute" :: (ImageAttributeName) , "ImageId" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> DescribeImageAttributeRequest
newDescribeImageAttributeRequest' _Attribute _ImageId customize = (DescribeImageAttributeRequest <<< customize) { "Attribute": _Attribute, "ImageId": _ImageId, "DryRun": Nothing }



-- | <p>Contains the parameters for DescribeImages.</p>
newtype DescribeImagesRequest = DescribeImagesRequest 
  { "ExecutableUsers" :: Maybe (ExecutableByStringList)
  , "Filters" :: Maybe (FilterList)
  , "ImageIds" :: Maybe (ImageIdStringList)
  , "Owners" :: Maybe (OwnerStringList)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDescribeImagesRequest :: Newtype DescribeImagesRequest _
derive instance repGenericDescribeImagesRequest :: Generic DescribeImagesRequest _
instance showDescribeImagesRequest :: Show DescribeImagesRequest where show = genericShow
instance decodeDescribeImagesRequest :: Decode DescribeImagesRequest where decode = genericDecode options
instance encodeDescribeImagesRequest :: Encode DescribeImagesRequest where encode = genericEncode options

-- | Constructs DescribeImagesRequest from required parameters
newDescribeImagesRequest :: DescribeImagesRequest
newDescribeImagesRequest  = DescribeImagesRequest { "DryRun": Nothing, "ExecutableUsers": Nothing, "Filters": Nothing, "ImageIds": Nothing, "Owners": Nothing }

-- | Constructs DescribeImagesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeImagesRequest' :: ( { "ExecutableUsers" :: Maybe (ExecutableByStringList) , "Filters" :: Maybe (FilterList) , "ImageIds" :: Maybe (ImageIdStringList) , "Owners" :: Maybe (OwnerStringList) , "DryRun" :: Maybe (Boolean) } -> {"ExecutableUsers" :: Maybe (ExecutableByStringList) , "Filters" :: Maybe (FilterList) , "ImageIds" :: Maybe (ImageIdStringList) , "Owners" :: Maybe (OwnerStringList) , "DryRun" :: Maybe (Boolean) } ) -> DescribeImagesRequest
newDescribeImagesRequest'  customize = (DescribeImagesRequest <<< customize) { "DryRun": Nothing, "ExecutableUsers": Nothing, "Filters": Nothing, "ImageIds": Nothing, "Owners": Nothing }



-- | <p>Contains the output of DescribeImages.</p>
newtype DescribeImagesResult = DescribeImagesResult 
  { "Images" :: Maybe (ImageList)
  }
derive instance newtypeDescribeImagesResult :: Newtype DescribeImagesResult _
derive instance repGenericDescribeImagesResult :: Generic DescribeImagesResult _
instance showDescribeImagesResult :: Show DescribeImagesResult where show = genericShow
instance decodeDescribeImagesResult :: Decode DescribeImagesResult where decode = genericDecode options
instance encodeDescribeImagesResult :: Encode DescribeImagesResult where encode = genericEncode options

-- | Constructs DescribeImagesResult from required parameters
newDescribeImagesResult :: DescribeImagesResult
newDescribeImagesResult  = DescribeImagesResult { "Images": Nothing }

-- | Constructs DescribeImagesResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeImagesResult' :: ( { "Images" :: Maybe (ImageList) } -> {"Images" :: Maybe (ImageList) } ) -> DescribeImagesResult
newDescribeImagesResult'  customize = (DescribeImagesResult <<< customize) { "Images": Nothing }



-- | <p>Contains the parameters for DescribeImportImageTasks.</p>
newtype DescribeImportImageTasksRequest = DescribeImportImageTasksRequest 
  { "DryRun" :: Maybe (Boolean)
  , "Filters" :: Maybe (FilterList)
  , "ImportTaskIds" :: Maybe (ImportTaskIdList)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeImportImageTasksRequest :: Newtype DescribeImportImageTasksRequest _
derive instance repGenericDescribeImportImageTasksRequest :: Generic DescribeImportImageTasksRequest _
instance showDescribeImportImageTasksRequest :: Show DescribeImportImageTasksRequest where show = genericShow
instance decodeDescribeImportImageTasksRequest :: Decode DescribeImportImageTasksRequest where decode = genericDecode options
instance encodeDescribeImportImageTasksRequest :: Encode DescribeImportImageTasksRequest where encode = genericEncode options

-- | Constructs DescribeImportImageTasksRequest from required parameters
newDescribeImportImageTasksRequest :: DescribeImportImageTasksRequest
newDescribeImportImageTasksRequest  = DescribeImportImageTasksRequest { "DryRun": Nothing, "Filters": Nothing, "ImportTaskIds": Nothing, "MaxResults": Nothing, "NextToken": Nothing }

-- | Constructs DescribeImportImageTasksRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeImportImageTasksRequest' :: ( { "DryRun" :: Maybe (Boolean) , "Filters" :: Maybe (FilterList) , "ImportTaskIds" :: Maybe (ImportTaskIdList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } -> {"DryRun" :: Maybe (Boolean) , "Filters" :: Maybe (FilterList) , "ImportTaskIds" :: Maybe (ImportTaskIdList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } ) -> DescribeImportImageTasksRequest
newDescribeImportImageTasksRequest'  customize = (DescribeImportImageTasksRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "ImportTaskIds": Nothing, "MaxResults": Nothing, "NextToken": Nothing }



-- | <p>Contains the output for DescribeImportImageTasks.</p>
newtype DescribeImportImageTasksResult = DescribeImportImageTasksResult 
  { "ImportImageTasks" :: Maybe (ImportImageTaskList)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeImportImageTasksResult :: Newtype DescribeImportImageTasksResult _
derive instance repGenericDescribeImportImageTasksResult :: Generic DescribeImportImageTasksResult _
instance showDescribeImportImageTasksResult :: Show DescribeImportImageTasksResult where show = genericShow
instance decodeDescribeImportImageTasksResult :: Decode DescribeImportImageTasksResult where decode = genericDecode options
instance encodeDescribeImportImageTasksResult :: Encode DescribeImportImageTasksResult where encode = genericEncode options

-- | Constructs DescribeImportImageTasksResult from required parameters
newDescribeImportImageTasksResult :: DescribeImportImageTasksResult
newDescribeImportImageTasksResult  = DescribeImportImageTasksResult { "ImportImageTasks": Nothing, "NextToken": Nothing }

-- | Constructs DescribeImportImageTasksResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeImportImageTasksResult' :: ( { "ImportImageTasks" :: Maybe (ImportImageTaskList) , "NextToken" :: Maybe (String) } -> {"ImportImageTasks" :: Maybe (ImportImageTaskList) , "NextToken" :: Maybe (String) } ) -> DescribeImportImageTasksResult
newDescribeImportImageTasksResult'  customize = (DescribeImportImageTasksResult <<< customize) { "ImportImageTasks": Nothing, "NextToken": Nothing }



-- | <p>Contains the parameters for DescribeImportSnapshotTasks.</p>
newtype DescribeImportSnapshotTasksRequest = DescribeImportSnapshotTasksRequest 
  { "DryRun" :: Maybe (Boolean)
  , "Filters" :: Maybe (FilterList)
  , "ImportTaskIds" :: Maybe (ImportTaskIdList)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeImportSnapshotTasksRequest :: Newtype DescribeImportSnapshotTasksRequest _
derive instance repGenericDescribeImportSnapshotTasksRequest :: Generic DescribeImportSnapshotTasksRequest _
instance showDescribeImportSnapshotTasksRequest :: Show DescribeImportSnapshotTasksRequest where show = genericShow
instance decodeDescribeImportSnapshotTasksRequest :: Decode DescribeImportSnapshotTasksRequest where decode = genericDecode options
instance encodeDescribeImportSnapshotTasksRequest :: Encode DescribeImportSnapshotTasksRequest where encode = genericEncode options

-- | Constructs DescribeImportSnapshotTasksRequest from required parameters
newDescribeImportSnapshotTasksRequest :: DescribeImportSnapshotTasksRequest
newDescribeImportSnapshotTasksRequest  = DescribeImportSnapshotTasksRequest { "DryRun": Nothing, "Filters": Nothing, "ImportTaskIds": Nothing, "MaxResults": Nothing, "NextToken": Nothing }

-- | Constructs DescribeImportSnapshotTasksRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeImportSnapshotTasksRequest' :: ( { "DryRun" :: Maybe (Boolean) , "Filters" :: Maybe (FilterList) , "ImportTaskIds" :: Maybe (ImportTaskIdList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } -> {"DryRun" :: Maybe (Boolean) , "Filters" :: Maybe (FilterList) , "ImportTaskIds" :: Maybe (ImportTaskIdList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } ) -> DescribeImportSnapshotTasksRequest
newDescribeImportSnapshotTasksRequest'  customize = (DescribeImportSnapshotTasksRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "ImportTaskIds": Nothing, "MaxResults": Nothing, "NextToken": Nothing }



-- | <p>Contains the output for DescribeImportSnapshotTasks.</p>
newtype DescribeImportSnapshotTasksResult = DescribeImportSnapshotTasksResult 
  { "ImportSnapshotTasks" :: Maybe (ImportSnapshotTaskList)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeImportSnapshotTasksResult :: Newtype DescribeImportSnapshotTasksResult _
derive instance repGenericDescribeImportSnapshotTasksResult :: Generic DescribeImportSnapshotTasksResult _
instance showDescribeImportSnapshotTasksResult :: Show DescribeImportSnapshotTasksResult where show = genericShow
instance decodeDescribeImportSnapshotTasksResult :: Decode DescribeImportSnapshotTasksResult where decode = genericDecode options
instance encodeDescribeImportSnapshotTasksResult :: Encode DescribeImportSnapshotTasksResult where encode = genericEncode options

-- | Constructs DescribeImportSnapshotTasksResult from required parameters
newDescribeImportSnapshotTasksResult :: DescribeImportSnapshotTasksResult
newDescribeImportSnapshotTasksResult  = DescribeImportSnapshotTasksResult { "ImportSnapshotTasks": Nothing, "NextToken": Nothing }

-- | Constructs DescribeImportSnapshotTasksResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeImportSnapshotTasksResult' :: ( { "ImportSnapshotTasks" :: Maybe (ImportSnapshotTaskList) , "NextToken" :: Maybe (String) } -> {"ImportSnapshotTasks" :: Maybe (ImportSnapshotTaskList) , "NextToken" :: Maybe (String) } ) -> DescribeImportSnapshotTasksResult
newDescribeImportSnapshotTasksResult'  customize = (DescribeImportSnapshotTasksResult <<< customize) { "ImportSnapshotTasks": Nothing, "NextToken": Nothing }



-- | <p>Contains the parameters for DescribeInstanceAttribute.</p>
newtype DescribeInstanceAttributeRequest = DescribeInstanceAttributeRequest 
  { "Attribute" :: (InstanceAttributeName)
  , "DryRun" :: Maybe (Boolean)
  , "InstanceId" :: (String)
  }
derive instance newtypeDescribeInstanceAttributeRequest :: Newtype DescribeInstanceAttributeRequest _
derive instance repGenericDescribeInstanceAttributeRequest :: Generic DescribeInstanceAttributeRequest _
instance showDescribeInstanceAttributeRequest :: Show DescribeInstanceAttributeRequest where show = genericShow
instance decodeDescribeInstanceAttributeRequest :: Decode DescribeInstanceAttributeRequest where decode = genericDecode options
instance encodeDescribeInstanceAttributeRequest :: Encode DescribeInstanceAttributeRequest where encode = genericEncode options

-- | Constructs DescribeInstanceAttributeRequest from required parameters
newDescribeInstanceAttributeRequest :: InstanceAttributeName -> String -> DescribeInstanceAttributeRequest
newDescribeInstanceAttributeRequest _Attribute _InstanceId = DescribeInstanceAttributeRequest { "Attribute": _Attribute, "InstanceId": _InstanceId, "DryRun": Nothing }

-- | Constructs DescribeInstanceAttributeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeInstanceAttributeRequest' :: InstanceAttributeName -> String -> ( { "Attribute" :: (InstanceAttributeName) , "DryRun" :: Maybe (Boolean) , "InstanceId" :: (String) } -> {"Attribute" :: (InstanceAttributeName) , "DryRun" :: Maybe (Boolean) , "InstanceId" :: (String) } ) -> DescribeInstanceAttributeRequest
newDescribeInstanceAttributeRequest' _Attribute _InstanceId customize = (DescribeInstanceAttributeRequest <<< customize) { "Attribute": _Attribute, "InstanceId": _InstanceId, "DryRun": Nothing }



newtype DescribeInstanceCreditSpecificationsRequest = DescribeInstanceCreditSpecificationsRequest 
  { "DryRun" :: Maybe (Boolean)
  , "Filters" :: Maybe (FilterList)
  , "InstanceIds" :: Maybe (InstanceIdStringList)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeInstanceCreditSpecificationsRequest :: Newtype DescribeInstanceCreditSpecificationsRequest _
derive instance repGenericDescribeInstanceCreditSpecificationsRequest :: Generic DescribeInstanceCreditSpecificationsRequest _
instance showDescribeInstanceCreditSpecificationsRequest :: Show DescribeInstanceCreditSpecificationsRequest where show = genericShow
instance decodeDescribeInstanceCreditSpecificationsRequest :: Decode DescribeInstanceCreditSpecificationsRequest where decode = genericDecode options
instance encodeDescribeInstanceCreditSpecificationsRequest :: Encode DescribeInstanceCreditSpecificationsRequest where encode = genericEncode options

-- | Constructs DescribeInstanceCreditSpecificationsRequest from required parameters
newDescribeInstanceCreditSpecificationsRequest :: DescribeInstanceCreditSpecificationsRequest
newDescribeInstanceCreditSpecificationsRequest  = DescribeInstanceCreditSpecificationsRequest { "DryRun": Nothing, "Filters": Nothing, "InstanceIds": Nothing, "MaxResults": Nothing, "NextToken": Nothing }

-- | Constructs DescribeInstanceCreditSpecificationsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeInstanceCreditSpecificationsRequest' :: ( { "DryRun" :: Maybe (Boolean) , "Filters" :: Maybe (FilterList) , "InstanceIds" :: Maybe (InstanceIdStringList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } -> {"DryRun" :: Maybe (Boolean) , "Filters" :: Maybe (FilterList) , "InstanceIds" :: Maybe (InstanceIdStringList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } ) -> DescribeInstanceCreditSpecificationsRequest
newDescribeInstanceCreditSpecificationsRequest'  customize = (DescribeInstanceCreditSpecificationsRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "InstanceIds": Nothing, "MaxResults": Nothing, "NextToken": Nothing }



newtype DescribeInstanceCreditSpecificationsResult = DescribeInstanceCreditSpecificationsResult 
  { "InstanceCreditSpecifications" :: Maybe (InstanceCreditSpecificationList)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeInstanceCreditSpecificationsResult :: Newtype DescribeInstanceCreditSpecificationsResult _
derive instance repGenericDescribeInstanceCreditSpecificationsResult :: Generic DescribeInstanceCreditSpecificationsResult _
instance showDescribeInstanceCreditSpecificationsResult :: Show DescribeInstanceCreditSpecificationsResult where show = genericShow
instance decodeDescribeInstanceCreditSpecificationsResult :: Decode DescribeInstanceCreditSpecificationsResult where decode = genericDecode options
instance encodeDescribeInstanceCreditSpecificationsResult :: Encode DescribeInstanceCreditSpecificationsResult where encode = genericEncode options

-- | Constructs DescribeInstanceCreditSpecificationsResult from required parameters
newDescribeInstanceCreditSpecificationsResult :: DescribeInstanceCreditSpecificationsResult
newDescribeInstanceCreditSpecificationsResult  = DescribeInstanceCreditSpecificationsResult { "InstanceCreditSpecifications": Nothing, "NextToken": Nothing }

-- | Constructs DescribeInstanceCreditSpecificationsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeInstanceCreditSpecificationsResult' :: ( { "InstanceCreditSpecifications" :: Maybe (InstanceCreditSpecificationList) , "NextToken" :: Maybe (String) } -> {"InstanceCreditSpecifications" :: Maybe (InstanceCreditSpecificationList) , "NextToken" :: Maybe (String) } ) -> DescribeInstanceCreditSpecificationsResult
newDescribeInstanceCreditSpecificationsResult'  customize = (DescribeInstanceCreditSpecificationsResult <<< customize) { "InstanceCreditSpecifications": Nothing, "NextToken": Nothing }



-- | <p>Contains the parameters for DescribeInstanceStatus.</p>
newtype DescribeInstanceStatusRequest = DescribeInstanceStatusRequest 
  { "Filters" :: Maybe (FilterList)
  , "InstanceIds" :: Maybe (InstanceIdStringList)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  , "DryRun" :: Maybe (Boolean)
  , "IncludeAllInstances" :: Maybe (Boolean)
  }
derive instance newtypeDescribeInstanceStatusRequest :: Newtype DescribeInstanceStatusRequest _
derive instance repGenericDescribeInstanceStatusRequest :: Generic DescribeInstanceStatusRequest _
instance showDescribeInstanceStatusRequest :: Show DescribeInstanceStatusRequest where show = genericShow
instance decodeDescribeInstanceStatusRequest :: Decode DescribeInstanceStatusRequest where decode = genericDecode options
instance encodeDescribeInstanceStatusRequest :: Encode DescribeInstanceStatusRequest where encode = genericEncode options

-- | Constructs DescribeInstanceStatusRequest from required parameters
newDescribeInstanceStatusRequest :: DescribeInstanceStatusRequest
newDescribeInstanceStatusRequest  = DescribeInstanceStatusRequest { "DryRun": Nothing, "Filters": Nothing, "IncludeAllInstances": Nothing, "InstanceIds": Nothing, "MaxResults": Nothing, "NextToken": Nothing }

-- | Constructs DescribeInstanceStatusRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeInstanceStatusRequest' :: ( { "Filters" :: Maybe (FilterList) , "InstanceIds" :: Maybe (InstanceIdStringList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "IncludeAllInstances" :: Maybe (Boolean) } -> {"Filters" :: Maybe (FilterList) , "InstanceIds" :: Maybe (InstanceIdStringList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "IncludeAllInstances" :: Maybe (Boolean) } ) -> DescribeInstanceStatusRequest
newDescribeInstanceStatusRequest'  customize = (DescribeInstanceStatusRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "IncludeAllInstances": Nothing, "InstanceIds": Nothing, "MaxResults": Nothing, "NextToken": Nothing }



-- | <p>Contains the output of DescribeInstanceStatus.</p>
newtype DescribeInstanceStatusResult = DescribeInstanceStatusResult 
  { "InstanceStatuses" :: Maybe (InstanceStatusList)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeInstanceStatusResult :: Newtype DescribeInstanceStatusResult _
derive instance repGenericDescribeInstanceStatusResult :: Generic DescribeInstanceStatusResult _
instance showDescribeInstanceStatusResult :: Show DescribeInstanceStatusResult where show = genericShow
instance decodeDescribeInstanceStatusResult :: Decode DescribeInstanceStatusResult where decode = genericDecode options
instance encodeDescribeInstanceStatusResult :: Encode DescribeInstanceStatusResult where encode = genericEncode options

-- | Constructs DescribeInstanceStatusResult from required parameters
newDescribeInstanceStatusResult :: DescribeInstanceStatusResult
newDescribeInstanceStatusResult  = DescribeInstanceStatusResult { "InstanceStatuses": Nothing, "NextToken": Nothing }

-- | Constructs DescribeInstanceStatusResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeInstanceStatusResult' :: ( { "InstanceStatuses" :: Maybe (InstanceStatusList) , "NextToken" :: Maybe (String) } -> {"InstanceStatuses" :: Maybe (InstanceStatusList) , "NextToken" :: Maybe (String) } ) -> DescribeInstanceStatusResult
newDescribeInstanceStatusResult'  customize = (DescribeInstanceStatusResult <<< customize) { "InstanceStatuses": Nothing, "NextToken": Nothing }



-- | <p>Contains the parameters for DescribeInstances.</p>
newtype DescribeInstancesRequest = DescribeInstancesRequest 
  { "Filters" :: Maybe (FilterList)
  , "InstanceIds" :: Maybe (InstanceIdStringList)
  , "DryRun" :: Maybe (Boolean)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeInstancesRequest :: Newtype DescribeInstancesRequest _
derive instance repGenericDescribeInstancesRequest :: Generic DescribeInstancesRequest _
instance showDescribeInstancesRequest :: Show DescribeInstancesRequest where show = genericShow
instance decodeDescribeInstancesRequest :: Decode DescribeInstancesRequest where decode = genericDecode options
instance encodeDescribeInstancesRequest :: Encode DescribeInstancesRequest where encode = genericEncode options

-- | Constructs DescribeInstancesRequest from required parameters
newDescribeInstancesRequest :: DescribeInstancesRequest
newDescribeInstancesRequest  = DescribeInstancesRequest { "DryRun": Nothing, "Filters": Nothing, "InstanceIds": Nothing, "MaxResults": Nothing, "NextToken": Nothing }

-- | Constructs DescribeInstancesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeInstancesRequest' :: ( { "Filters" :: Maybe (FilterList) , "InstanceIds" :: Maybe (InstanceIdStringList) , "DryRun" :: Maybe (Boolean) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } -> {"Filters" :: Maybe (FilterList) , "InstanceIds" :: Maybe (InstanceIdStringList) , "DryRun" :: Maybe (Boolean) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } ) -> DescribeInstancesRequest
newDescribeInstancesRequest'  customize = (DescribeInstancesRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "InstanceIds": Nothing, "MaxResults": Nothing, "NextToken": Nothing }



-- | <p>Contains the output of DescribeInstances.</p>
newtype DescribeInstancesResult = DescribeInstancesResult 
  { "Reservations" :: Maybe (ReservationList)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeInstancesResult :: Newtype DescribeInstancesResult _
derive instance repGenericDescribeInstancesResult :: Generic DescribeInstancesResult _
instance showDescribeInstancesResult :: Show DescribeInstancesResult where show = genericShow
instance decodeDescribeInstancesResult :: Decode DescribeInstancesResult where decode = genericDecode options
instance encodeDescribeInstancesResult :: Encode DescribeInstancesResult where encode = genericEncode options

-- | Constructs DescribeInstancesResult from required parameters
newDescribeInstancesResult :: DescribeInstancesResult
newDescribeInstancesResult  = DescribeInstancesResult { "NextToken": Nothing, "Reservations": Nothing }

-- | Constructs DescribeInstancesResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeInstancesResult' :: ( { "Reservations" :: Maybe (ReservationList) , "NextToken" :: Maybe (String) } -> {"Reservations" :: Maybe (ReservationList) , "NextToken" :: Maybe (String) } ) -> DescribeInstancesResult
newDescribeInstancesResult'  customize = (DescribeInstancesResult <<< customize) { "NextToken": Nothing, "Reservations": Nothing }



-- | <p>Contains the parameters for DescribeInternetGateways.</p>
newtype DescribeInternetGatewaysRequest = DescribeInternetGatewaysRequest 
  { "Filters" :: Maybe (FilterList)
  , "DryRun" :: Maybe (Boolean)
  , "InternetGatewayIds" :: Maybe (ValueStringList)
  }
derive instance newtypeDescribeInternetGatewaysRequest :: Newtype DescribeInternetGatewaysRequest _
derive instance repGenericDescribeInternetGatewaysRequest :: Generic DescribeInternetGatewaysRequest _
instance showDescribeInternetGatewaysRequest :: Show DescribeInternetGatewaysRequest where show = genericShow
instance decodeDescribeInternetGatewaysRequest :: Decode DescribeInternetGatewaysRequest where decode = genericDecode options
instance encodeDescribeInternetGatewaysRequest :: Encode DescribeInternetGatewaysRequest where encode = genericEncode options

-- | Constructs DescribeInternetGatewaysRequest from required parameters
newDescribeInternetGatewaysRequest :: DescribeInternetGatewaysRequest
newDescribeInternetGatewaysRequest  = DescribeInternetGatewaysRequest { "DryRun": Nothing, "Filters": Nothing, "InternetGatewayIds": Nothing }

-- | Constructs DescribeInternetGatewaysRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeInternetGatewaysRequest' :: ( { "Filters" :: Maybe (FilterList) , "DryRun" :: Maybe (Boolean) , "InternetGatewayIds" :: Maybe (ValueStringList) } -> {"Filters" :: Maybe (FilterList) , "DryRun" :: Maybe (Boolean) , "InternetGatewayIds" :: Maybe (ValueStringList) } ) -> DescribeInternetGatewaysRequest
newDescribeInternetGatewaysRequest'  customize = (DescribeInternetGatewaysRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "InternetGatewayIds": Nothing }



-- | <p>Contains the output of DescribeInternetGateways.</p>
newtype DescribeInternetGatewaysResult = DescribeInternetGatewaysResult 
  { "InternetGateways" :: Maybe (InternetGatewayList)
  }
derive instance newtypeDescribeInternetGatewaysResult :: Newtype DescribeInternetGatewaysResult _
derive instance repGenericDescribeInternetGatewaysResult :: Generic DescribeInternetGatewaysResult _
instance showDescribeInternetGatewaysResult :: Show DescribeInternetGatewaysResult where show = genericShow
instance decodeDescribeInternetGatewaysResult :: Decode DescribeInternetGatewaysResult where decode = genericDecode options
instance encodeDescribeInternetGatewaysResult :: Encode DescribeInternetGatewaysResult where encode = genericEncode options

-- | Constructs DescribeInternetGatewaysResult from required parameters
newDescribeInternetGatewaysResult :: DescribeInternetGatewaysResult
newDescribeInternetGatewaysResult  = DescribeInternetGatewaysResult { "InternetGateways": Nothing }

-- | Constructs DescribeInternetGatewaysResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeInternetGatewaysResult' :: ( { "InternetGateways" :: Maybe (InternetGatewayList) } -> {"InternetGateways" :: Maybe (InternetGatewayList) } ) -> DescribeInternetGatewaysResult
newDescribeInternetGatewaysResult'  customize = (DescribeInternetGatewaysResult <<< customize) { "InternetGateways": Nothing }



-- | <p>Contains the parameters for DescribeKeyPairs.</p>
newtype DescribeKeyPairsRequest = DescribeKeyPairsRequest 
  { "Filters" :: Maybe (FilterList)
  , "KeyNames" :: Maybe (KeyNameStringList)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDescribeKeyPairsRequest :: Newtype DescribeKeyPairsRequest _
derive instance repGenericDescribeKeyPairsRequest :: Generic DescribeKeyPairsRequest _
instance showDescribeKeyPairsRequest :: Show DescribeKeyPairsRequest where show = genericShow
instance decodeDescribeKeyPairsRequest :: Decode DescribeKeyPairsRequest where decode = genericDecode options
instance encodeDescribeKeyPairsRequest :: Encode DescribeKeyPairsRequest where encode = genericEncode options

-- | Constructs DescribeKeyPairsRequest from required parameters
newDescribeKeyPairsRequest :: DescribeKeyPairsRequest
newDescribeKeyPairsRequest  = DescribeKeyPairsRequest { "DryRun": Nothing, "Filters": Nothing, "KeyNames": Nothing }

-- | Constructs DescribeKeyPairsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeKeyPairsRequest' :: ( { "Filters" :: Maybe (FilterList) , "KeyNames" :: Maybe (KeyNameStringList) , "DryRun" :: Maybe (Boolean) } -> {"Filters" :: Maybe (FilterList) , "KeyNames" :: Maybe (KeyNameStringList) , "DryRun" :: Maybe (Boolean) } ) -> DescribeKeyPairsRequest
newDescribeKeyPairsRequest'  customize = (DescribeKeyPairsRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "KeyNames": Nothing }



-- | <p>Contains the output of DescribeKeyPairs.</p>
newtype DescribeKeyPairsResult = DescribeKeyPairsResult 
  { "KeyPairs" :: Maybe (KeyPairList)
  }
derive instance newtypeDescribeKeyPairsResult :: Newtype DescribeKeyPairsResult _
derive instance repGenericDescribeKeyPairsResult :: Generic DescribeKeyPairsResult _
instance showDescribeKeyPairsResult :: Show DescribeKeyPairsResult where show = genericShow
instance decodeDescribeKeyPairsResult :: Decode DescribeKeyPairsResult where decode = genericDecode options
instance encodeDescribeKeyPairsResult :: Encode DescribeKeyPairsResult where encode = genericEncode options

-- | Constructs DescribeKeyPairsResult from required parameters
newDescribeKeyPairsResult :: DescribeKeyPairsResult
newDescribeKeyPairsResult  = DescribeKeyPairsResult { "KeyPairs": Nothing }

-- | Constructs DescribeKeyPairsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeKeyPairsResult' :: ( { "KeyPairs" :: Maybe (KeyPairList) } -> {"KeyPairs" :: Maybe (KeyPairList) } ) -> DescribeKeyPairsResult
newDescribeKeyPairsResult'  customize = (DescribeKeyPairsResult <<< customize) { "KeyPairs": Nothing }



newtype DescribeLaunchTemplateVersionsRequest = DescribeLaunchTemplateVersionsRequest 
  { "DryRun" :: Maybe (Boolean)
  , "LaunchTemplateId" :: Maybe (String)
  , "LaunchTemplateName" :: Maybe (LaunchTemplateName)
  , "Versions" :: Maybe (VersionStringList)
  , "MinVersion" :: Maybe (String)
  , "MaxVersion" :: Maybe (String)
  , "NextToken" :: Maybe (String)
  , "MaxResults" :: Maybe (Int)
  , "Filters" :: Maybe (FilterList)
  }
derive instance newtypeDescribeLaunchTemplateVersionsRequest :: Newtype DescribeLaunchTemplateVersionsRequest _
derive instance repGenericDescribeLaunchTemplateVersionsRequest :: Generic DescribeLaunchTemplateVersionsRequest _
instance showDescribeLaunchTemplateVersionsRequest :: Show DescribeLaunchTemplateVersionsRequest where show = genericShow
instance decodeDescribeLaunchTemplateVersionsRequest :: Decode DescribeLaunchTemplateVersionsRequest where decode = genericDecode options
instance encodeDescribeLaunchTemplateVersionsRequest :: Encode DescribeLaunchTemplateVersionsRequest where encode = genericEncode options

-- | Constructs DescribeLaunchTemplateVersionsRequest from required parameters
newDescribeLaunchTemplateVersionsRequest :: DescribeLaunchTemplateVersionsRequest
newDescribeLaunchTemplateVersionsRequest  = DescribeLaunchTemplateVersionsRequest { "DryRun": Nothing, "Filters": Nothing, "LaunchTemplateId": Nothing, "LaunchTemplateName": Nothing, "MaxResults": Nothing, "MaxVersion": Nothing, "MinVersion": Nothing, "NextToken": Nothing, "Versions": Nothing }

-- | Constructs DescribeLaunchTemplateVersionsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeLaunchTemplateVersionsRequest' :: ( { "DryRun" :: Maybe (Boolean) , "LaunchTemplateId" :: Maybe (String) , "LaunchTemplateName" :: Maybe (LaunchTemplateName) , "Versions" :: Maybe (VersionStringList) , "MinVersion" :: Maybe (String) , "MaxVersion" :: Maybe (String) , "NextToken" :: Maybe (String) , "MaxResults" :: Maybe (Int) , "Filters" :: Maybe (FilterList) } -> {"DryRun" :: Maybe (Boolean) , "LaunchTemplateId" :: Maybe (String) , "LaunchTemplateName" :: Maybe (LaunchTemplateName) , "Versions" :: Maybe (VersionStringList) , "MinVersion" :: Maybe (String) , "MaxVersion" :: Maybe (String) , "NextToken" :: Maybe (String) , "MaxResults" :: Maybe (Int) , "Filters" :: Maybe (FilterList) } ) -> DescribeLaunchTemplateVersionsRequest
newDescribeLaunchTemplateVersionsRequest'  customize = (DescribeLaunchTemplateVersionsRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "LaunchTemplateId": Nothing, "LaunchTemplateName": Nothing, "MaxResults": Nothing, "MaxVersion": Nothing, "MinVersion": Nothing, "NextToken": Nothing, "Versions": Nothing }



newtype DescribeLaunchTemplateVersionsResult = DescribeLaunchTemplateVersionsResult 
  { "LaunchTemplateVersions" :: Maybe (LaunchTemplateVersionSet)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeLaunchTemplateVersionsResult :: Newtype DescribeLaunchTemplateVersionsResult _
derive instance repGenericDescribeLaunchTemplateVersionsResult :: Generic DescribeLaunchTemplateVersionsResult _
instance showDescribeLaunchTemplateVersionsResult :: Show DescribeLaunchTemplateVersionsResult where show = genericShow
instance decodeDescribeLaunchTemplateVersionsResult :: Decode DescribeLaunchTemplateVersionsResult where decode = genericDecode options
instance encodeDescribeLaunchTemplateVersionsResult :: Encode DescribeLaunchTemplateVersionsResult where encode = genericEncode options

-- | Constructs DescribeLaunchTemplateVersionsResult from required parameters
newDescribeLaunchTemplateVersionsResult :: DescribeLaunchTemplateVersionsResult
newDescribeLaunchTemplateVersionsResult  = DescribeLaunchTemplateVersionsResult { "LaunchTemplateVersions": Nothing, "NextToken": Nothing }

-- | Constructs DescribeLaunchTemplateVersionsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeLaunchTemplateVersionsResult' :: ( { "LaunchTemplateVersions" :: Maybe (LaunchTemplateVersionSet) , "NextToken" :: Maybe (String) } -> {"LaunchTemplateVersions" :: Maybe (LaunchTemplateVersionSet) , "NextToken" :: Maybe (String) } ) -> DescribeLaunchTemplateVersionsResult
newDescribeLaunchTemplateVersionsResult'  customize = (DescribeLaunchTemplateVersionsResult <<< customize) { "LaunchTemplateVersions": Nothing, "NextToken": Nothing }



newtype DescribeLaunchTemplatesRequest = DescribeLaunchTemplatesRequest 
  { "DryRun" :: Maybe (Boolean)
  , "LaunchTemplateIds" :: Maybe (ValueStringList)
  , "LaunchTemplateNames" :: Maybe (LaunchTemplateNameStringList)
  , "Filters" :: Maybe (FilterList)
  , "NextToken" :: Maybe (String)
  , "MaxResults" :: Maybe (Int)
  }
derive instance newtypeDescribeLaunchTemplatesRequest :: Newtype DescribeLaunchTemplatesRequest _
derive instance repGenericDescribeLaunchTemplatesRequest :: Generic DescribeLaunchTemplatesRequest _
instance showDescribeLaunchTemplatesRequest :: Show DescribeLaunchTemplatesRequest where show = genericShow
instance decodeDescribeLaunchTemplatesRequest :: Decode DescribeLaunchTemplatesRequest where decode = genericDecode options
instance encodeDescribeLaunchTemplatesRequest :: Encode DescribeLaunchTemplatesRequest where encode = genericEncode options

-- | Constructs DescribeLaunchTemplatesRequest from required parameters
newDescribeLaunchTemplatesRequest :: DescribeLaunchTemplatesRequest
newDescribeLaunchTemplatesRequest  = DescribeLaunchTemplatesRequest { "DryRun": Nothing, "Filters": Nothing, "LaunchTemplateIds": Nothing, "LaunchTemplateNames": Nothing, "MaxResults": Nothing, "NextToken": Nothing }

-- | Constructs DescribeLaunchTemplatesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeLaunchTemplatesRequest' :: ( { "DryRun" :: Maybe (Boolean) , "LaunchTemplateIds" :: Maybe (ValueStringList) , "LaunchTemplateNames" :: Maybe (LaunchTemplateNameStringList) , "Filters" :: Maybe (FilterList) , "NextToken" :: Maybe (String) , "MaxResults" :: Maybe (Int) } -> {"DryRun" :: Maybe (Boolean) , "LaunchTemplateIds" :: Maybe (ValueStringList) , "LaunchTemplateNames" :: Maybe (LaunchTemplateNameStringList) , "Filters" :: Maybe (FilterList) , "NextToken" :: Maybe (String) , "MaxResults" :: Maybe (Int) } ) -> DescribeLaunchTemplatesRequest
newDescribeLaunchTemplatesRequest'  customize = (DescribeLaunchTemplatesRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "LaunchTemplateIds": Nothing, "LaunchTemplateNames": Nothing, "MaxResults": Nothing, "NextToken": Nothing }



newtype DescribeLaunchTemplatesResult = DescribeLaunchTemplatesResult 
  { "LaunchTemplates" :: Maybe (LaunchTemplateSet)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeLaunchTemplatesResult :: Newtype DescribeLaunchTemplatesResult _
derive instance repGenericDescribeLaunchTemplatesResult :: Generic DescribeLaunchTemplatesResult _
instance showDescribeLaunchTemplatesResult :: Show DescribeLaunchTemplatesResult where show = genericShow
instance decodeDescribeLaunchTemplatesResult :: Decode DescribeLaunchTemplatesResult where decode = genericDecode options
instance encodeDescribeLaunchTemplatesResult :: Encode DescribeLaunchTemplatesResult where encode = genericEncode options

-- | Constructs DescribeLaunchTemplatesResult from required parameters
newDescribeLaunchTemplatesResult :: DescribeLaunchTemplatesResult
newDescribeLaunchTemplatesResult  = DescribeLaunchTemplatesResult { "LaunchTemplates": Nothing, "NextToken": Nothing }

-- | Constructs DescribeLaunchTemplatesResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeLaunchTemplatesResult' :: ( { "LaunchTemplates" :: Maybe (LaunchTemplateSet) , "NextToken" :: Maybe (String) } -> {"LaunchTemplates" :: Maybe (LaunchTemplateSet) , "NextToken" :: Maybe (String) } ) -> DescribeLaunchTemplatesResult
newDescribeLaunchTemplatesResult'  customize = (DescribeLaunchTemplatesResult <<< customize) { "LaunchTemplates": Nothing, "NextToken": Nothing }



-- | <p>Contains the parameters for DescribeMovingAddresses.</p>
newtype DescribeMovingAddressesRequest = DescribeMovingAddressesRequest 
  { "Filters" :: Maybe (FilterList)
  , "DryRun" :: Maybe (Boolean)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  , "PublicIps" :: Maybe (ValueStringList)
  }
derive instance newtypeDescribeMovingAddressesRequest :: Newtype DescribeMovingAddressesRequest _
derive instance repGenericDescribeMovingAddressesRequest :: Generic DescribeMovingAddressesRequest _
instance showDescribeMovingAddressesRequest :: Show DescribeMovingAddressesRequest where show = genericShow
instance decodeDescribeMovingAddressesRequest :: Decode DescribeMovingAddressesRequest where decode = genericDecode options
instance encodeDescribeMovingAddressesRequest :: Encode DescribeMovingAddressesRequest where encode = genericEncode options

-- | Constructs DescribeMovingAddressesRequest from required parameters
newDescribeMovingAddressesRequest :: DescribeMovingAddressesRequest
newDescribeMovingAddressesRequest  = DescribeMovingAddressesRequest { "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "PublicIps": Nothing }

-- | Constructs DescribeMovingAddressesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeMovingAddressesRequest' :: ( { "Filters" :: Maybe (FilterList) , "DryRun" :: Maybe (Boolean) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) , "PublicIps" :: Maybe (ValueStringList) } -> {"Filters" :: Maybe (FilterList) , "DryRun" :: Maybe (Boolean) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) , "PublicIps" :: Maybe (ValueStringList) } ) -> DescribeMovingAddressesRequest
newDescribeMovingAddressesRequest'  customize = (DescribeMovingAddressesRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "PublicIps": Nothing }



-- | <p>Contains the output of DescribeMovingAddresses.</p>
newtype DescribeMovingAddressesResult = DescribeMovingAddressesResult 
  { "MovingAddressStatuses" :: Maybe (MovingAddressStatusSet)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeMovingAddressesResult :: Newtype DescribeMovingAddressesResult _
derive instance repGenericDescribeMovingAddressesResult :: Generic DescribeMovingAddressesResult _
instance showDescribeMovingAddressesResult :: Show DescribeMovingAddressesResult where show = genericShow
instance decodeDescribeMovingAddressesResult :: Decode DescribeMovingAddressesResult where decode = genericDecode options
instance encodeDescribeMovingAddressesResult :: Encode DescribeMovingAddressesResult where encode = genericEncode options

-- | Constructs DescribeMovingAddressesResult from required parameters
newDescribeMovingAddressesResult :: DescribeMovingAddressesResult
newDescribeMovingAddressesResult  = DescribeMovingAddressesResult { "MovingAddressStatuses": Nothing, "NextToken": Nothing }

-- | Constructs DescribeMovingAddressesResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeMovingAddressesResult' :: ( { "MovingAddressStatuses" :: Maybe (MovingAddressStatusSet) , "NextToken" :: Maybe (String) } -> {"MovingAddressStatuses" :: Maybe (MovingAddressStatusSet) , "NextToken" :: Maybe (String) } ) -> DescribeMovingAddressesResult
newDescribeMovingAddressesResult'  customize = (DescribeMovingAddressesResult <<< customize) { "MovingAddressStatuses": Nothing, "NextToken": Nothing }



-- | <p>Contains the parameters for DescribeNatGateways.</p>
newtype DescribeNatGatewaysRequest = DescribeNatGatewaysRequest 
  { "Filter" :: Maybe (FilterList)
  , "MaxResults" :: Maybe (Int)
  , "NatGatewayIds" :: Maybe (ValueStringList)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeNatGatewaysRequest :: Newtype DescribeNatGatewaysRequest _
derive instance repGenericDescribeNatGatewaysRequest :: Generic DescribeNatGatewaysRequest _
instance showDescribeNatGatewaysRequest :: Show DescribeNatGatewaysRequest where show = genericShow
instance decodeDescribeNatGatewaysRequest :: Decode DescribeNatGatewaysRequest where decode = genericDecode options
instance encodeDescribeNatGatewaysRequest :: Encode DescribeNatGatewaysRequest where encode = genericEncode options

-- | Constructs DescribeNatGatewaysRequest from required parameters
newDescribeNatGatewaysRequest :: DescribeNatGatewaysRequest
newDescribeNatGatewaysRequest  = DescribeNatGatewaysRequest { "Filter": Nothing, "MaxResults": Nothing, "NatGatewayIds": Nothing, "NextToken": Nothing }

-- | Constructs DescribeNatGatewaysRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeNatGatewaysRequest' :: ( { "Filter" :: Maybe (FilterList) , "MaxResults" :: Maybe (Int) , "NatGatewayIds" :: Maybe (ValueStringList) , "NextToken" :: Maybe (String) } -> {"Filter" :: Maybe (FilterList) , "MaxResults" :: Maybe (Int) , "NatGatewayIds" :: Maybe (ValueStringList) , "NextToken" :: Maybe (String) } ) -> DescribeNatGatewaysRequest
newDescribeNatGatewaysRequest'  customize = (DescribeNatGatewaysRequest <<< customize) { "Filter": Nothing, "MaxResults": Nothing, "NatGatewayIds": Nothing, "NextToken": Nothing }



-- | <p>Contains the output of DescribeNatGateways.</p>
newtype DescribeNatGatewaysResult = DescribeNatGatewaysResult 
  { "NatGateways" :: Maybe (NatGatewayList)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeNatGatewaysResult :: Newtype DescribeNatGatewaysResult _
derive instance repGenericDescribeNatGatewaysResult :: Generic DescribeNatGatewaysResult _
instance showDescribeNatGatewaysResult :: Show DescribeNatGatewaysResult where show = genericShow
instance decodeDescribeNatGatewaysResult :: Decode DescribeNatGatewaysResult where decode = genericDecode options
instance encodeDescribeNatGatewaysResult :: Encode DescribeNatGatewaysResult where encode = genericEncode options

-- | Constructs DescribeNatGatewaysResult from required parameters
newDescribeNatGatewaysResult :: DescribeNatGatewaysResult
newDescribeNatGatewaysResult  = DescribeNatGatewaysResult { "NatGateways": Nothing, "NextToken": Nothing }

-- | Constructs DescribeNatGatewaysResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeNatGatewaysResult' :: ( { "NatGateways" :: Maybe (NatGatewayList) , "NextToken" :: Maybe (String) } -> {"NatGateways" :: Maybe (NatGatewayList) , "NextToken" :: Maybe (String) } ) -> DescribeNatGatewaysResult
newDescribeNatGatewaysResult'  customize = (DescribeNatGatewaysResult <<< customize) { "NatGateways": Nothing, "NextToken": Nothing }



-- | <p>Contains the parameters for DescribeNetworkAcls.</p>
newtype DescribeNetworkAclsRequest = DescribeNetworkAclsRequest 
  { "Filters" :: Maybe (FilterList)
  , "DryRun" :: Maybe (Boolean)
  , "NetworkAclIds" :: Maybe (ValueStringList)
  }
derive instance newtypeDescribeNetworkAclsRequest :: Newtype DescribeNetworkAclsRequest _
derive instance repGenericDescribeNetworkAclsRequest :: Generic DescribeNetworkAclsRequest _
instance showDescribeNetworkAclsRequest :: Show DescribeNetworkAclsRequest where show = genericShow
instance decodeDescribeNetworkAclsRequest :: Decode DescribeNetworkAclsRequest where decode = genericDecode options
instance encodeDescribeNetworkAclsRequest :: Encode DescribeNetworkAclsRequest where encode = genericEncode options

-- | Constructs DescribeNetworkAclsRequest from required parameters
newDescribeNetworkAclsRequest :: DescribeNetworkAclsRequest
newDescribeNetworkAclsRequest  = DescribeNetworkAclsRequest { "DryRun": Nothing, "Filters": Nothing, "NetworkAclIds": Nothing }

-- | Constructs DescribeNetworkAclsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeNetworkAclsRequest' :: ( { "Filters" :: Maybe (FilterList) , "DryRun" :: Maybe (Boolean) , "NetworkAclIds" :: Maybe (ValueStringList) } -> {"Filters" :: Maybe (FilterList) , "DryRun" :: Maybe (Boolean) , "NetworkAclIds" :: Maybe (ValueStringList) } ) -> DescribeNetworkAclsRequest
newDescribeNetworkAclsRequest'  customize = (DescribeNetworkAclsRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "NetworkAclIds": Nothing }



-- | <p>Contains the output of DescribeNetworkAcls.</p>
newtype DescribeNetworkAclsResult = DescribeNetworkAclsResult 
  { "NetworkAcls" :: Maybe (NetworkAclList)
  }
derive instance newtypeDescribeNetworkAclsResult :: Newtype DescribeNetworkAclsResult _
derive instance repGenericDescribeNetworkAclsResult :: Generic DescribeNetworkAclsResult _
instance showDescribeNetworkAclsResult :: Show DescribeNetworkAclsResult where show = genericShow
instance decodeDescribeNetworkAclsResult :: Decode DescribeNetworkAclsResult where decode = genericDecode options
instance encodeDescribeNetworkAclsResult :: Encode DescribeNetworkAclsResult where encode = genericEncode options

-- | Constructs DescribeNetworkAclsResult from required parameters
newDescribeNetworkAclsResult :: DescribeNetworkAclsResult
newDescribeNetworkAclsResult  = DescribeNetworkAclsResult { "NetworkAcls": Nothing }

-- | Constructs DescribeNetworkAclsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeNetworkAclsResult' :: ( { "NetworkAcls" :: Maybe (NetworkAclList) } -> {"NetworkAcls" :: Maybe (NetworkAclList) } ) -> DescribeNetworkAclsResult
newDescribeNetworkAclsResult'  customize = (DescribeNetworkAclsResult <<< customize) { "NetworkAcls": Nothing }



-- | <p>Contains the parameters for DescribeNetworkInterfaceAttribute.</p>
newtype DescribeNetworkInterfaceAttributeRequest = DescribeNetworkInterfaceAttributeRequest 
  { "Attribute" :: Maybe (NetworkInterfaceAttribute)
  , "DryRun" :: Maybe (Boolean)
  , "NetworkInterfaceId" :: (String)
  }
derive instance newtypeDescribeNetworkInterfaceAttributeRequest :: Newtype DescribeNetworkInterfaceAttributeRequest _
derive instance repGenericDescribeNetworkInterfaceAttributeRequest :: Generic DescribeNetworkInterfaceAttributeRequest _
instance showDescribeNetworkInterfaceAttributeRequest :: Show DescribeNetworkInterfaceAttributeRequest where show = genericShow
instance decodeDescribeNetworkInterfaceAttributeRequest :: Decode DescribeNetworkInterfaceAttributeRequest where decode = genericDecode options
instance encodeDescribeNetworkInterfaceAttributeRequest :: Encode DescribeNetworkInterfaceAttributeRequest where encode = genericEncode options

-- | Constructs DescribeNetworkInterfaceAttributeRequest from required parameters
newDescribeNetworkInterfaceAttributeRequest :: String -> DescribeNetworkInterfaceAttributeRequest
newDescribeNetworkInterfaceAttributeRequest _NetworkInterfaceId = DescribeNetworkInterfaceAttributeRequest { "NetworkInterfaceId": _NetworkInterfaceId, "Attribute": Nothing, "DryRun": Nothing }

-- | Constructs DescribeNetworkInterfaceAttributeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeNetworkInterfaceAttributeRequest' :: String -> ( { "Attribute" :: Maybe (NetworkInterfaceAttribute) , "DryRun" :: Maybe (Boolean) , "NetworkInterfaceId" :: (String) } -> {"Attribute" :: Maybe (NetworkInterfaceAttribute) , "DryRun" :: Maybe (Boolean) , "NetworkInterfaceId" :: (String) } ) -> DescribeNetworkInterfaceAttributeRequest
newDescribeNetworkInterfaceAttributeRequest' _NetworkInterfaceId customize = (DescribeNetworkInterfaceAttributeRequest <<< customize) { "NetworkInterfaceId": _NetworkInterfaceId, "Attribute": Nothing, "DryRun": Nothing }



-- | <p>Contains the output of DescribeNetworkInterfaceAttribute.</p>
newtype DescribeNetworkInterfaceAttributeResult = DescribeNetworkInterfaceAttributeResult 
  { "Attachment" :: Maybe (NetworkInterfaceAttachment)
  , "Description" :: Maybe (AttributeValue)
  , "Groups" :: Maybe (GroupIdentifierList)
  , "NetworkInterfaceId" :: Maybe (String)
  , "SourceDestCheck" :: Maybe (AttributeBooleanValue)
  }
derive instance newtypeDescribeNetworkInterfaceAttributeResult :: Newtype DescribeNetworkInterfaceAttributeResult _
derive instance repGenericDescribeNetworkInterfaceAttributeResult :: Generic DescribeNetworkInterfaceAttributeResult _
instance showDescribeNetworkInterfaceAttributeResult :: Show DescribeNetworkInterfaceAttributeResult where show = genericShow
instance decodeDescribeNetworkInterfaceAttributeResult :: Decode DescribeNetworkInterfaceAttributeResult where decode = genericDecode options
instance encodeDescribeNetworkInterfaceAttributeResult :: Encode DescribeNetworkInterfaceAttributeResult where encode = genericEncode options

-- | Constructs DescribeNetworkInterfaceAttributeResult from required parameters
newDescribeNetworkInterfaceAttributeResult :: DescribeNetworkInterfaceAttributeResult
newDescribeNetworkInterfaceAttributeResult  = DescribeNetworkInterfaceAttributeResult { "Attachment": Nothing, "Description": Nothing, "Groups": Nothing, "NetworkInterfaceId": Nothing, "SourceDestCheck": Nothing }

-- | Constructs DescribeNetworkInterfaceAttributeResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeNetworkInterfaceAttributeResult' :: ( { "Attachment" :: Maybe (NetworkInterfaceAttachment) , "Description" :: Maybe (AttributeValue) , "Groups" :: Maybe (GroupIdentifierList) , "NetworkInterfaceId" :: Maybe (String) , "SourceDestCheck" :: Maybe (AttributeBooleanValue) } -> {"Attachment" :: Maybe (NetworkInterfaceAttachment) , "Description" :: Maybe (AttributeValue) , "Groups" :: Maybe (GroupIdentifierList) , "NetworkInterfaceId" :: Maybe (String) , "SourceDestCheck" :: Maybe (AttributeBooleanValue) } ) -> DescribeNetworkInterfaceAttributeResult
newDescribeNetworkInterfaceAttributeResult'  customize = (DescribeNetworkInterfaceAttributeResult <<< customize) { "Attachment": Nothing, "Description": Nothing, "Groups": Nothing, "NetworkInterfaceId": Nothing, "SourceDestCheck": Nothing }



-- | <p>Contains the parameters for DescribeNetworkInterfacePermissions.</p>
newtype DescribeNetworkInterfacePermissionsRequest = DescribeNetworkInterfacePermissionsRequest 
  { "NetworkInterfacePermissionIds" :: Maybe (NetworkInterfacePermissionIdList)
  , "Filters" :: Maybe (FilterList)
  , "NextToken" :: Maybe (String)
  , "MaxResults" :: Maybe (Int)
  }
derive instance newtypeDescribeNetworkInterfacePermissionsRequest :: Newtype DescribeNetworkInterfacePermissionsRequest _
derive instance repGenericDescribeNetworkInterfacePermissionsRequest :: Generic DescribeNetworkInterfacePermissionsRequest _
instance showDescribeNetworkInterfacePermissionsRequest :: Show DescribeNetworkInterfacePermissionsRequest where show = genericShow
instance decodeDescribeNetworkInterfacePermissionsRequest :: Decode DescribeNetworkInterfacePermissionsRequest where decode = genericDecode options
instance encodeDescribeNetworkInterfacePermissionsRequest :: Encode DescribeNetworkInterfacePermissionsRequest where encode = genericEncode options

-- | Constructs DescribeNetworkInterfacePermissionsRequest from required parameters
newDescribeNetworkInterfacePermissionsRequest :: DescribeNetworkInterfacePermissionsRequest
newDescribeNetworkInterfacePermissionsRequest  = DescribeNetworkInterfacePermissionsRequest { "Filters": Nothing, "MaxResults": Nothing, "NetworkInterfacePermissionIds": Nothing, "NextToken": Nothing }

-- | Constructs DescribeNetworkInterfacePermissionsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeNetworkInterfacePermissionsRequest' :: ( { "NetworkInterfacePermissionIds" :: Maybe (NetworkInterfacePermissionIdList) , "Filters" :: Maybe (FilterList) , "NextToken" :: Maybe (String) , "MaxResults" :: Maybe (Int) } -> {"NetworkInterfacePermissionIds" :: Maybe (NetworkInterfacePermissionIdList) , "Filters" :: Maybe (FilterList) , "NextToken" :: Maybe (String) , "MaxResults" :: Maybe (Int) } ) -> DescribeNetworkInterfacePermissionsRequest
newDescribeNetworkInterfacePermissionsRequest'  customize = (DescribeNetworkInterfacePermissionsRequest <<< customize) { "Filters": Nothing, "MaxResults": Nothing, "NetworkInterfacePermissionIds": Nothing, "NextToken": Nothing }



-- | <p>Contains the output for DescribeNetworkInterfacePermissions.</p>
newtype DescribeNetworkInterfacePermissionsResult = DescribeNetworkInterfacePermissionsResult 
  { "NetworkInterfacePermissions" :: Maybe (NetworkInterfacePermissionList)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeNetworkInterfacePermissionsResult :: Newtype DescribeNetworkInterfacePermissionsResult _
derive instance repGenericDescribeNetworkInterfacePermissionsResult :: Generic DescribeNetworkInterfacePermissionsResult _
instance showDescribeNetworkInterfacePermissionsResult :: Show DescribeNetworkInterfacePermissionsResult where show = genericShow
instance decodeDescribeNetworkInterfacePermissionsResult :: Decode DescribeNetworkInterfacePermissionsResult where decode = genericDecode options
instance encodeDescribeNetworkInterfacePermissionsResult :: Encode DescribeNetworkInterfacePermissionsResult where encode = genericEncode options

-- | Constructs DescribeNetworkInterfacePermissionsResult from required parameters
newDescribeNetworkInterfacePermissionsResult :: DescribeNetworkInterfacePermissionsResult
newDescribeNetworkInterfacePermissionsResult  = DescribeNetworkInterfacePermissionsResult { "NetworkInterfacePermissions": Nothing, "NextToken": Nothing }

-- | Constructs DescribeNetworkInterfacePermissionsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeNetworkInterfacePermissionsResult' :: ( { "NetworkInterfacePermissions" :: Maybe (NetworkInterfacePermissionList) , "NextToken" :: Maybe (String) } -> {"NetworkInterfacePermissions" :: Maybe (NetworkInterfacePermissionList) , "NextToken" :: Maybe (String) } ) -> DescribeNetworkInterfacePermissionsResult
newDescribeNetworkInterfacePermissionsResult'  customize = (DescribeNetworkInterfacePermissionsResult <<< customize) { "NetworkInterfacePermissions": Nothing, "NextToken": Nothing }



-- | <p>Contains the parameters for DescribeNetworkInterfaces.</p>
newtype DescribeNetworkInterfacesRequest = DescribeNetworkInterfacesRequest 
  { "Filters" :: Maybe (FilterList)
  , "DryRun" :: Maybe (Boolean)
  , "NetworkInterfaceIds" :: Maybe (NetworkInterfaceIdList)
  }
derive instance newtypeDescribeNetworkInterfacesRequest :: Newtype DescribeNetworkInterfacesRequest _
derive instance repGenericDescribeNetworkInterfacesRequest :: Generic DescribeNetworkInterfacesRequest _
instance showDescribeNetworkInterfacesRequest :: Show DescribeNetworkInterfacesRequest where show = genericShow
instance decodeDescribeNetworkInterfacesRequest :: Decode DescribeNetworkInterfacesRequest where decode = genericDecode options
instance encodeDescribeNetworkInterfacesRequest :: Encode DescribeNetworkInterfacesRequest where encode = genericEncode options

-- | Constructs DescribeNetworkInterfacesRequest from required parameters
newDescribeNetworkInterfacesRequest :: DescribeNetworkInterfacesRequest
newDescribeNetworkInterfacesRequest  = DescribeNetworkInterfacesRequest { "DryRun": Nothing, "Filters": Nothing, "NetworkInterfaceIds": Nothing }

-- | Constructs DescribeNetworkInterfacesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeNetworkInterfacesRequest' :: ( { "Filters" :: Maybe (FilterList) , "DryRun" :: Maybe (Boolean) , "NetworkInterfaceIds" :: Maybe (NetworkInterfaceIdList) } -> {"Filters" :: Maybe (FilterList) , "DryRun" :: Maybe (Boolean) , "NetworkInterfaceIds" :: Maybe (NetworkInterfaceIdList) } ) -> DescribeNetworkInterfacesRequest
newDescribeNetworkInterfacesRequest'  customize = (DescribeNetworkInterfacesRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "NetworkInterfaceIds": Nothing }



-- | <p>Contains the output of DescribeNetworkInterfaces.</p>
newtype DescribeNetworkInterfacesResult = DescribeNetworkInterfacesResult 
  { "NetworkInterfaces" :: Maybe (NetworkInterfaceList)
  }
derive instance newtypeDescribeNetworkInterfacesResult :: Newtype DescribeNetworkInterfacesResult _
derive instance repGenericDescribeNetworkInterfacesResult :: Generic DescribeNetworkInterfacesResult _
instance showDescribeNetworkInterfacesResult :: Show DescribeNetworkInterfacesResult where show = genericShow
instance decodeDescribeNetworkInterfacesResult :: Decode DescribeNetworkInterfacesResult where decode = genericDecode options
instance encodeDescribeNetworkInterfacesResult :: Encode DescribeNetworkInterfacesResult where encode = genericEncode options

-- | Constructs DescribeNetworkInterfacesResult from required parameters
newDescribeNetworkInterfacesResult :: DescribeNetworkInterfacesResult
newDescribeNetworkInterfacesResult  = DescribeNetworkInterfacesResult { "NetworkInterfaces": Nothing }

-- | Constructs DescribeNetworkInterfacesResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeNetworkInterfacesResult' :: ( { "NetworkInterfaces" :: Maybe (NetworkInterfaceList) } -> {"NetworkInterfaces" :: Maybe (NetworkInterfaceList) } ) -> DescribeNetworkInterfacesResult
newDescribeNetworkInterfacesResult'  customize = (DescribeNetworkInterfacesResult <<< customize) { "NetworkInterfaces": Nothing }



-- | <p>Contains the parameters for DescribePlacementGroups.</p>
newtype DescribePlacementGroupsRequest = DescribePlacementGroupsRequest 
  { "Filters" :: Maybe (FilterList)
  , "DryRun" :: Maybe (Boolean)
  , "GroupNames" :: Maybe (PlacementGroupStringList)
  }
derive instance newtypeDescribePlacementGroupsRequest :: Newtype DescribePlacementGroupsRequest _
derive instance repGenericDescribePlacementGroupsRequest :: Generic DescribePlacementGroupsRequest _
instance showDescribePlacementGroupsRequest :: Show DescribePlacementGroupsRequest where show = genericShow
instance decodeDescribePlacementGroupsRequest :: Decode DescribePlacementGroupsRequest where decode = genericDecode options
instance encodeDescribePlacementGroupsRequest :: Encode DescribePlacementGroupsRequest where encode = genericEncode options

-- | Constructs DescribePlacementGroupsRequest from required parameters
newDescribePlacementGroupsRequest :: DescribePlacementGroupsRequest
newDescribePlacementGroupsRequest  = DescribePlacementGroupsRequest { "DryRun": Nothing, "Filters": Nothing, "GroupNames": Nothing }

-- | Constructs DescribePlacementGroupsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribePlacementGroupsRequest' :: ( { "Filters" :: Maybe (FilterList) , "DryRun" :: Maybe (Boolean) , "GroupNames" :: Maybe (PlacementGroupStringList) } -> {"Filters" :: Maybe (FilterList) , "DryRun" :: Maybe (Boolean) , "GroupNames" :: Maybe (PlacementGroupStringList) } ) -> DescribePlacementGroupsRequest
newDescribePlacementGroupsRequest'  customize = (DescribePlacementGroupsRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "GroupNames": Nothing }



-- | <p>Contains the output of DescribePlacementGroups.</p>
newtype DescribePlacementGroupsResult = DescribePlacementGroupsResult 
  { "PlacementGroups" :: Maybe (PlacementGroupList)
  }
derive instance newtypeDescribePlacementGroupsResult :: Newtype DescribePlacementGroupsResult _
derive instance repGenericDescribePlacementGroupsResult :: Generic DescribePlacementGroupsResult _
instance showDescribePlacementGroupsResult :: Show DescribePlacementGroupsResult where show = genericShow
instance decodeDescribePlacementGroupsResult :: Decode DescribePlacementGroupsResult where decode = genericDecode options
instance encodeDescribePlacementGroupsResult :: Encode DescribePlacementGroupsResult where encode = genericEncode options

-- | Constructs DescribePlacementGroupsResult from required parameters
newDescribePlacementGroupsResult :: DescribePlacementGroupsResult
newDescribePlacementGroupsResult  = DescribePlacementGroupsResult { "PlacementGroups": Nothing }

-- | Constructs DescribePlacementGroupsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribePlacementGroupsResult' :: ( { "PlacementGroups" :: Maybe (PlacementGroupList) } -> {"PlacementGroups" :: Maybe (PlacementGroupList) } ) -> DescribePlacementGroupsResult
newDescribePlacementGroupsResult'  customize = (DescribePlacementGroupsResult <<< customize) { "PlacementGroups": Nothing }



-- | <p>Contains the parameters for DescribePrefixLists.</p>
newtype DescribePrefixListsRequest = DescribePrefixListsRequest 
  { "DryRun" :: Maybe (Boolean)
  , "Filters" :: Maybe (FilterList)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  , "PrefixListIds" :: Maybe (ValueStringList)
  }
derive instance newtypeDescribePrefixListsRequest :: Newtype DescribePrefixListsRequest _
derive instance repGenericDescribePrefixListsRequest :: Generic DescribePrefixListsRequest _
instance showDescribePrefixListsRequest :: Show DescribePrefixListsRequest where show = genericShow
instance decodeDescribePrefixListsRequest :: Decode DescribePrefixListsRequest where decode = genericDecode options
instance encodeDescribePrefixListsRequest :: Encode DescribePrefixListsRequest where encode = genericEncode options

-- | Constructs DescribePrefixListsRequest from required parameters
newDescribePrefixListsRequest :: DescribePrefixListsRequest
newDescribePrefixListsRequest  = DescribePrefixListsRequest { "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "PrefixListIds": Nothing }

-- | Constructs DescribePrefixListsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribePrefixListsRequest' :: ( { "DryRun" :: Maybe (Boolean) , "Filters" :: Maybe (FilterList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) , "PrefixListIds" :: Maybe (ValueStringList) } -> {"DryRun" :: Maybe (Boolean) , "Filters" :: Maybe (FilterList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) , "PrefixListIds" :: Maybe (ValueStringList) } ) -> DescribePrefixListsRequest
newDescribePrefixListsRequest'  customize = (DescribePrefixListsRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "PrefixListIds": Nothing }



-- | <p>Contains the output of DescribePrefixLists.</p>
newtype DescribePrefixListsResult = DescribePrefixListsResult 
  { "NextToken" :: Maybe (String)
  , "PrefixLists" :: Maybe (PrefixListSet)
  }
derive instance newtypeDescribePrefixListsResult :: Newtype DescribePrefixListsResult _
derive instance repGenericDescribePrefixListsResult :: Generic DescribePrefixListsResult _
instance showDescribePrefixListsResult :: Show DescribePrefixListsResult where show = genericShow
instance decodeDescribePrefixListsResult :: Decode DescribePrefixListsResult where decode = genericDecode options
instance encodeDescribePrefixListsResult :: Encode DescribePrefixListsResult where encode = genericEncode options

-- | Constructs DescribePrefixListsResult from required parameters
newDescribePrefixListsResult :: DescribePrefixListsResult
newDescribePrefixListsResult  = DescribePrefixListsResult { "NextToken": Nothing, "PrefixLists": Nothing }

-- | Constructs DescribePrefixListsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribePrefixListsResult' :: ( { "NextToken" :: Maybe (String) , "PrefixLists" :: Maybe (PrefixListSet) } -> {"NextToken" :: Maybe (String) , "PrefixLists" :: Maybe (PrefixListSet) } ) -> DescribePrefixListsResult
newDescribePrefixListsResult'  customize = (DescribePrefixListsResult <<< customize) { "NextToken": Nothing, "PrefixLists": Nothing }



newtype DescribePrincipalIdFormatRequest = DescribePrincipalIdFormatRequest 
  { "DryRun" :: Maybe (Boolean)
  , "Resources" :: Maybe (ResourceList)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribePrincipalIdFormatRequest :: Newtype DescribePrincipalIdFormatRequest _
derive instance repGenericDescribePrincipalIdFormatRequest :: Generic DescribePrincipalIdFormatRequest _
instance showDescribePrincipalIdFormatRequest :: Show DescribePrincipalIdFormatRequest where show = genericShow
instance decodeDescribePrincipalIdFormatRequest :: Decode DescribePrincipalIdFormatRequest where decode = genericDecode options
instance encodeDescribePrincipalIdFormatRequest :: Encode DescribePrincipalIdFormatRequest where encode = genericEncode options

-- | Constructs DescribePrincipalIdFormatRequest from required parameters
newDescribePrincipalIdFormatRequest :: DescribePrincipalIdFormatRequest
newDescribePrincipalIdFormatRequest  = DescribePrincipalIdFormatRequest { "DryRun": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "Resources": Nothing }

-- | Constructs DescribePrincipalIdFormatRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribePrincipalIdFormatRequest' :: ( { "DryRun" :: Maybe (Boolean) , "Resources" :: Maybe (ResourceList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } -> {"DryRun" :: Maybe (Boolean) , "Resources" :: Maybe (ResourceList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } ) -> DescribePrincipalIdFormatRequest
newDescribePrincipalIdFormatRequest'  customize = (DescribePrincipalIdFormatRequest <<< customize) { "DryRun": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "Resources": Nothing }



newtype DescribePrincipalIdFormatResult = DescribePrincipalIdFormatResult 
  { "Principals" :: Maybe (PrincipalIdFormatList)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribePrincipalIdFormatResult :: Newtype DescribePrincipalIdFormatResult _
derive instance repGenericDescribePrincipalIdFormatResult :: Generic DescribePrincipalIdFormatResult _
instance showDescribePrincipalIdFormatResult :: Show DescribePrincipalIdFormatResult where show = genericShow
instance decodeDescribePrincipalIdFormatResult :: Decode DescribePrincipalIdFormatResult where decode = genericDecode options
instance encodeDescribePrincipalIdFormatResult :: Encode DescribePrincipalIdFormatResult where encode = genericEncode options

-- | Constructs DescribePrincipalIdFormatResult from required parameters
newDescribePrincipalIdFormatResult :: DescribePrincipalIdFormatResult
newDescribePrincipalIdFormatResult  = DescribePrincipalIdFormatResult { "NextToken": Nothing, "Principals": Nothing }

-- | Constructs DescribePrincipalIdFormatResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribePrincipalIdFormatResult' :: ( { "Principals" :: Maybe (PrincipalIdFormatList) , "NextToken" :: Maybe (String) } -> {"Principals" :: Maybe (PrincipalIdFormatList) , "NextToken" :: Maybe (String) } ) -> DescribePrincipalIdFormatResult
newDescribePrincipalIdFormatResult'  customize = (DescribePrincipalIdFormatResult <<< customize) { "NextToken": Nothing, "Principals": Nothing }



-- | <p>Contains the parameters for DescribeRegions.</p>
newtype DescribeRegionsRequest = DescribeRegionsRequest 
  { "Filters" :: Maybe (FilterList)
  , "RegionNames" :: Maybe (RegionNameStringList)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDescribeRegionsRequest :: Newtype DescribeRegionsRequest _
derive instance repGenericDescribeRegionsRequest :: Generic DescribeRegionsRequest _
instance showDescribeRegionsRequest :: Show DescribeRegionsRequest where show = genericShow
instance decodeDescribeRegionsRequest :: Decode DescribeRegionsRequest where decode = genericDecode options
instance encodeDescribeRegionsRequest :: Encode DescribeRegionsRequest where encode = genericEncode options

-- | Constructs DescribeRegionsRequest from required parameters
newDescribeRegionsRequest :: DescribeRegionsRequest
newDescribeRegionsRequest  = DescribeRegionsRequest { "DryRun": Nothing, "Filters": Nothing, "RegionNames": Nothing }

-- | Constructs DescribeRegionsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeRegionsRequest' :: ( { "Filters" :: Maybe (FilterList) , "RegionNames" :: Maybe (RegionNameStringList) , "DryRun" :: Maybe (Boolean) } -> {"Filters" :: Maybe (FilterList) , "RegionNames" :: Maybe (RegionNameStringList) , "DryRun" :: Maybe (Boolean) } ) -> DescribeRegionsRequest
newDescribeRegionsRequest'  customize = (DescribeRegionsRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "RegionNames": Nothing }



-- | <p>Contains the output of DescribeRegions.</p>
newtype DescribeRegionsResult = DescribeRegionsResult 
  { "Regions" :: Maybe (RegionList)
  }
derive instance newtypeDescribeRegionsResult :: Newtype DescribeRegionsResult _
derive instance repGenericDescribeRegionsResult :: Generic DescribeRegionsResult _
instance showDescribeRegionsResult :: Show DescribeRegionsResult where show = genericShow
instance decodeDescribeRegionsResult :: Decode DescribeRegionsResult where decode = genericDecode options
instance encodeDescribeRegionsResult :: Encode DescribeRegionsResult where encode = genericEncode options

-- | Constructs DescribeRegionsResult from required parameters
newDescribeRegionsResult :: DescribeRegionsResult
newDescribeRegionsResult  = DescribeRegionsResult { "Regions": Nothing }

-- | Constructs DescribeRegionsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeRegionsResult' :: ( { "Regions" :: Maybe (RegionList) } -> {"Regions" :: Maybe (RegionList) } ) -> DescribeRegionsResult
newDescribeRegionsResult'  customize = (DescribeRegionsResult <<< customize) { "Regions": Nothing }



-- | <p>Contains the parameters for DescribeReservedInstancesListings.</p>
newtype DescribeReservedInstancesListingsRequest = DescribeReservedInstancesListingsRequest 
  { "Filters" :: Maybe (FilterList)
  , "ReservedInstancesId" :: Maybe (String)
  , "ReservedInstancesListingId" :: Maybe (String)
  }
derive instance newtypeDescribeReservedInstancesListingsRequest :: Newtype DescribeReservedInstancesListingsRequest _
derive instance repGenericDescribeReservedInstancesListingsRequest :: Generic DescribeReservedInstancesListingsRequest _
instance showDescribeReservedInstancesListingsRequest :: Show DescribeReservedInstancesListingsRequest where show = genericShow
instance decodeDescribeReservedInstancesListingsRequest :: Decode DescribeReservedInstancesListingsRequest where decode = genericDecode options
instance encodeDescribeReservedInstancesListingsRequest :: Encode DescribeReservedInstancesListingsRequest where encode = genericEncode options

-- | Constructs DescribeReservedInstancesListingsRequest from required parameters
newDescribeReservedInstancesListingsRequest :: DescribeReservedInstancesListingsRequest
newDescribeReservedInstancesListingsRequest  = DescribeReservedInstancesListingsRequest { "Filters": Nothing, "ReservedInstancesId": Nothing, "ReservedInstancesListingId": Nothing }

-- | Constructs DescribeReservedInstancesListingsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeReservedInstancesListingsRequest' :: ( { "Filters" :: Maybe (FilterList) , "ReservedInstancesId" :: Maybe (String) , "ReservedInstancesListingId" :: Maybe (String) } -> {"Filters" :: Maybe (FilterList) , "ReservedInstancesId" :: Maybe (String) , "ReservedInstancesListingId" :: Maybe (String) } ) -> DescribeReservedInstancesListingsRequest
newDescribeReservedInstancesListingsRequest'  customize = (DescribeReservedInstancesListingsRequest <<< customize) { "Filters": Nothing, "ReservedInstancesId": Nothing, "ReservedInstancesListingId": Nothing }



-- | <p>Contains the output of DescribeReservedInstancesListings.</p>
newtype DescribeReservedInstancesListingsResult = DescribeReservedInstancesListingsResult 
  { "ReservedInstancesListings" :: Maybe (ReservedInstancesListingList)
  }
derive instance newtypeDescribeReservedInstancesListingsResult :: Newtype DescribeReservedInstancesListingsResult _
derive instance repGenericDescribeReservedInstancesListingsResult :: Generic DescribeReservedInstancesListingsResult _
instance showDescribeReservedInstancesListingsResult :: Show DescribeReservedInstancesListingsResult where show = genericShow
instance decodeDescribeReservedInstancesListingsResult :: Decode DescribeReservedInstancesListingsResult where decode = genericDecode options
instance encodeDescribeReservedInstancesListingsResult :: Encode DescribeReservedInstancesListingsResult where encode = genericEncode options

-- | Constructs DescribeReservedInstancesListingsResult from required parameters
newDescribeReservedInstancesListingsResult :: DescribeReservedInstancesListingsResult
newDescribeReservedInstancesListingsResult  = DescribeReservedInstancesListingsResult { "ReservedInstancesListings": Nothing }

-- | Constructs DescribeReservedInstancesListingsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeReservedInstancesListingsResult' :: ( { "ReservedInstancesListings" :: Maybe (ReservedInstancesListingList) } -> {"ReservedInstancesListings" :: Maybe (ReservedInstancesListingList) } ) -> DescribeReservedInstancesListingsResult
newDescribeReservedInstancesListingsResult'  customize = (DescribeReservedInstancesListingsResult <<< customize) { "ReservedInstancesListings": Nothing }



-- | <p>Contains the parameters for DescribeReservedInstancesModifications.</p>
newtype DescribeReservedInstancesModificationsRequest = DescribeReservedInstancesModificationsRequest 
  { "Filters" :: Maybe (FilterList)
  , "ReservedInstancesModificationIds" :: Maybe (ReservedInstancesModificationIdStringList)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeReservedInstancesModificationsRequest :: Newtype DescribeReservedInstancesModificationsRequest _
derive instance repGenericDescribeReservedInstancesModificationsRequest :: Generic DescribeReservedInstancesModificationsRequest _
instance showDescribeReservedInstancesModificationsRequest :: Show DescribeReservedInstancesModificationsRequest where show = genericShow
instance decodeDescribeReservedInstancesModificationsRequest :: Decode DescribeReservedInstancesModificationsRequest where decode = genericDecode options
instance encodeDescribeReservedInstancesModificationsRequest :: Encode DescribeReservedInstancesModificationsRequest where encode = genericEncode options

-- | Constructs DescribeReservedInstancesModificationsRequest from required parameters
newDescribeReservedInstancesModificationsRequest :: DescribeReservedInstancesModificationsRequest
newDescribeReservedInstancesModificationsRequest  = DescribeReservedInstancesModificationsRequest { "Filters": Nothing, "NextToken": Nothing, "ReservedInstancesModificationIds": Nothing }

-- | Constructs DescribeReservedInstancesModificationsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeReservedInstancesModificationsRequest' :: ( { "Filters" :: Maybe (FilterList) , "ReservedInstancesModificationIds" :: Maybe (ReservedInstancesModificationIdStringList) , "NextToken" :: Maybe (String) } -> {"Filters" :: Maybe (FilterList) , "ReservedInstancesModificationIds" :: Maybe (ReservedInstancesModificationIdStringList) , "NextToken" :: Maybe (String) } ) -> DescribeReservedInstancesModificationsRequest
newDescribeReservedInstancesModificationsRequest'  customize = (DescribeReservedInstancesModificationsRequest <<< customize) { "Filters": Nothing, "NextToken": Nothing, "ReservedInstancesModificationIds": Nothing }



-- | <p>Contains the output of DescribeReservedInstancesModifications.</p>
newtype DescribeReservedInstancesModificationsResult = DescribeReservedInstancesModificationsResult 
  { "NextToken" :: Maybe (String)
  , "ReservedInstancesModifications" :: Maybe (ReservedInstancesModificationList)
  }
derive instance newtypeDescribeReservedInstancesModificationsResult :: Newtype DescribeReservedInstancesModificationsResult _
derive instance repGenericDescribeReservedInstancesModificationsResult :: Generic DescribeReservedInstancesModificationsResult _
instance showDescribeReservedInstancesModificationsResult :: Show DescribeReservedInstancesModificationsResult where show = genericShow
instance decodeDescribeReservedInstancesModificationsResult :: Decode DescribeReservedInstancesModificationsResult where decode = genericDecode options
instance encodeDescribeReservedInstancesModificationsResult :: Encode DescribeReservedInstancesModificationsResult where encode = genericEncode options

-- | Constructs DescribeReservedInstancesModificationsResult from required parameters
newDescribeReservedInstancesModificationsResult :: DescribeReservedInstancesModificationsResult
newDescribeReservedInstancesModificationsResult  = DescribeReservedInstancesModificationsResult { "NextToken": Nothing, "ReservedInstancesModifications": Nothing }

-- | Constructs DescribeReservedInstancesModificationsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeReservedInstancesModificationsResult' :: ( { "NextToken" :: Maybe (String) , "ReservedInstancesModifications" :: Maybe (ReservedInstancesModificationList) } -> {"NextToken" :: Maybe (String) , "ReservedInstancesModifications" :: Maybe (ReservedInstancesModificationList) } ) -> DescribeReservedInstancesModificationsResult
newDescribeReservedInstancesModificationsResult'  customize = (DescribeReservedInstancesModificationsResult <<< customize) { "NextToken": Nothing, "ReservedInstancesModifications": Nothing }



-- | <p>Contains the parameters for DescribeReservedInstancesOfferings.</p>
newtype DescribeReservedInstancesOfferingsRequest = DescribeReservedInstancesOfferingsRequest 
  { "AvailabilityZone" :: Maybe (String)
  , "Filters" :: Maybe (FilterList)
  , "IncludeMarketplace" :: Maybe (Boolean)
  , "InstanceType" :: Maybe (InstanceType)
  , "MaxDuration" :: Maybe (Number)
  , "MaxInstanceCount" :: Maybe (Int)
  , "MinDuration" :: Maybe (Number)
  , "OfferingClass" :: Maybe (OfferingClassType)
  , "ProductDescription" :: Maybe (RIProductDescription)
  , "ReservedInstancesOfferingIds" :: Maybe (ReservedInstancesOfferingIdStringList)
  , "DryRun" :: Maybe (Boolean)
  , "InstanceTenancy" :: Maybe (Tenancy)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  , "OfferingType" :: Maybe (OfferingTypeValues)
  }
derive instance newtypeDescribeReservedInstancesOfferingsRequest :: Newtype DescribeReservedInstancesOfferingsRequest _
derive instance repGenericDescribeReservedInstancesOfferingsRequest :: Generic DescribeReservedInstancesOfferingsRequest _
instance showDescribeReservedInstancesOfferingsRequest :: Show DescribeReservedInstancesOfferingsRequest where show = genericShow
instance decodeDescribeReservedInstancesOfferingsRequest :: Decode DescribeReservedInstancesOfferingsRequest where decode = genericDecode options
instance encodeDescribeReservedInstancesOfferingsRequest :: Encode DescribeReservedInstancesOfferingsRequest where encode = genericEncode options

-- | Constructs DescribeReservedInstancesOfferingsRequest from required parameters
newDescribeReservedInstancesOfferingsRequest :: DescribeReservedInstancesOfferingsRequest
newDescribeReservedInstancesOfferingsRequest  = DescribeReservedInstancesOfferingsRequest { "AvailabilityZone": Nothing, "DryRun": Nothing, "Filters": Nothing, "IncludeMarketplace": Nothing, "InstanceTenancy": Nothing, "InstanceType": Nothing, "MaxDuration": Nothing, "MaxInstanceCount": Nothing, "MaxResults": Nothing, "MinDuration": Nothing, "NextToken": Nothing, "OfferingClass": Nothing, "OfferingType": Nothing, "ProductDescription": Nothing, "ReservedInstancesOfferingIds": Nothing }

-- | Constructs DescribeReservedInstancesOfferingsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeReservedInstancesOfferingsRequest' :: ( { "AvailabilityZone" :: Maybe (String) , "Filters" :: Maybe (FilterList) , "IncludeMarketplace" :: Maybe (Boolean) , "InstanceType" :: Maybe (InstanceType) , "MaxDuration" :: Maybe (Number) , "MaxInstanceCount" :: Maybe (Int) , "MinDuration" :: Maybe (Number) , "OfferingClass" :: Maybe (OfferingClassType) , "ProductDescription" :: Maybe (RIProductDescription) , "ReservedInstancesOfferingIds" :: Maybe (ReservedInstancesOfferingIdStringList) , "DryRun" :: Maybe (Boolean) , "InstanceTenancy" :: Maybe (Tenancy) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) , "OfferingType" :: Maybe (OfferingTypeValues) } -> {"AvailabilityZone" :: Maybe (String) , "Filters" :: Maybe (FilterList) , "IncludeMarketplace" :: Maybe (Boolean) , "InstanceType" :: Maybe (InstanceType) , "MaxDuration" :: Maybe (Number) , "MaxInstanceCount" :: Maybe (Int) , "MinDuration" :: Maybe (Number) , "OfferingClass" :: Maybe (OfferingClassType) , "ProductDescription" :: Maybe (RIProductDescription) , "ReservedInstancesOfferingIds" :: Maybe (ReservedInstancesOfferingIdStringList) , "DryRun" :: Maybe (Boolean) , "InstanceTenancy" :: Maybe (Tenancy) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) , "OfferingType" :: Maybe (OfferingTypeValues) } ) -> DescribeReservedInstancesOfferingsRequest
newDescribeReservedInstancesOfferingsRequest'  customize = (DescribeReservedInstancesOfferingsRequest <<< customize) { "AvailabilityZone": Nothing, "DryRun": Nothing, "Filters": Nothing, "IncludeMarketplace": Nothing, "InstanceTenancy": Nothing, "InstanceType": Nothing, "MaxDuration": Nothing, "MaxInstanceCount": Nothing, "MaxResults": Nothing, "MinDuration": Nothing, "NextToken": Nothing, "OfferingClass": Nothing, "OfferingType": Nothing, "ProductDescription": Nothing, "ReservedInstancesOfferingIds": Nothing }



-- | <p>Contains the output of DescribeReservedInstancesOfferings.</p>
newtype DescribeReservedInstancesOfferingsResult = DescribeReservedInstancesOfferingsResult 
  { "ReservedInstancesOfferings" :: Maybe (ReservedInstancesOfferingList)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeReservedInstancesOfferingsResult :: Newtype DescribeReservedInstancesOfferingsResult _
derive instance repGenericDescribeReservedInstancesOfferingsResult :: Generic DescribeReservedInstancesOfferingsResult _
instance showDescribeReservedInstancesOfferingsResult :: Show DescribeReservedInstancesOfferingsResult where show = genericShow
instance decodeDescribeReservedInstancesOfferingsResult :: Decode DescribeReservedInstancesOfferingsResult where decode = genericDecode options
instance encodeDescribeReservedInstancesOfferingsResult :: Encode DescribeReservedInstancesOfferingsResult where encode = genericEncode options

-- | Constructs DescribeReservedInstancesOfferingsResult from required parameters
newDescribeReservedInstancesOfferingsResult :: DescribeReservedInstancesOfferingsResult
newDescribeReservedInstancesOfferingsResult  = DescribeReservedInstancesOfferingsResult { "NextToken": Nothing, "ReservedInstancesOfferings": Nothing }

-- | Constructs DescribeReservedInstancesOfferingsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeReservedInstancesOfferingsResult' :: ( { "ReservedInstancesOfferings" :: Maybe (ReservedInstancesOfferingList) , "NextToken" :: Maybe (String) } -> {"ReservedInstancesOfferings" :: Maybe (ReservedInstancesOfferingList) , "NextToken" :: Maybe (String) } ) -> DescribeReservedInstancesOfferingsResult
newDescribeReservedInstancesOfferingsResult'  customize = (DescribeReservedInstancesOfferingsResult <<< customize) { "NextToken": Nothing, "ReservedInstancesOfferings": Nothing }



-- | <p>Contains the parameters for DescribeReservedInstances.</p>
newtype DescribeReservedInstancesRequest = DescribeReservedInstancesRequest 
  { "Filters" :: Maybe (FilterList)
  , "OfferingClass" :: Maybe (OfferingClassType)
  , "ReservedInstancesIds" :: Maybe (ReservedInstancesIdStringList)
  , "DryRun" :: Maybe (Boolean)
  , "OfferingType" :: Maybe (OfferingTypeValues)
  }
derive instance newtypeDescribeReservedInstancesRequest :: Newtype DescribeReservedInstancesRequest _
derive instance repGenericDescribeReservedInstancesRequest :: Generic DescribeReservedInstancesRequest _
instance showDescribeReservedInstancesRequest :: Show DescribeReservedInstancesRequest where show = genericShow
instance decodeDescribeReservedInstancesRequest :: Decode DescribeReservedInstancesRequest where decode = genericDecode options
instance encodeDescribeReservedInstancesRequest :: Encode DescribeReservedInstancesRequest where encode = genericEncode options

-- | Constructs DescribeReservedInstancesRequest from required parameters
newDescribeReservedInstancesRequest :: DescribeReservedInstancesRequest
newDescribeReservedInstancesRequest  = DescribeReservedInstancesRequest { "DryRun": Nothing, "Filters": Nothing, "OfferingClass": Nothing, "OfferingType": Nothing, "ReservedInstancesIds": Nothing }

-- | Constructs DescribeReservedInstancesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeReservedInstancesRequest' :: ( { "Filters" :: Maybe (FilterList) , "OfferingClass" :: Maybe (OfferingClassType) , "ReservedInstancesIds" :: Maybe (ReservedInstancesIdStringList) , "DryRun" :: Maybe (Boolean) , "OfferingType" :: Maybe (OfferingTypeValues) } -> {"Filters" :: Maybe (FilterList) , "OfferingClass" :: Maybe (OfferingClassType) , "ReservedInstancesIds" :: Maybe (ReservedInstancesIdStringList) , "DryRun" :: Maybe (Boolean) , "OfferingType" :: Maybe (OfferingTypeValues) } ) -> DescribeReservedInstancesRequest
newDescribeReservedInstancesRequest'  customize = (DescribeReservedInstancesRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "OfferingClass": Nothing, "OfferingType": Nothing, "ReservedInstancesIds": Nothing }



-- | <p>Contains the output for DescribeReservedInstances.</p>
newtype DescribeReservedInstancesResult = DescribeReservedInstancesResult 
  { "ReservedInstances" :: Maybe (ReservedInstancesList)
  }
derive instance newtypeDescribeReservedInstancesResult :: Newtype DescribeReservedInstancesResult _
derive instance repGenericDescribeReservedInstancesResult :: Generic DescribeReservedInstancesResult _
instance showDescribeReservedInstancesResult :: Show DescribeReservedInstancesResult where show = genericShow
instance decodeDescribeReservedInstancesResult :: Decode DescribeReservedInstancesResult where decode = genericDecode options
instance encodeDescribeReservedInstancesResult :: Encode DescribeReservedInstancesResult where encode = genericEncode options

-- | Constructs DescribeReservedInstancesResult from required parameters
newDescribeReservedInstancesResult :: DescribeReservedInstancesResult
newDescribeReservedInstancesResult  = DescribeReservedInstancesResult { "ReservedInstances": Nothing }

-- | Constructs DescribeReservedInstancesResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeReservedInstancesResult' :: ( { "ReservedInstances" :: Maybe (ReservedInstancesList) } -> {"ReservedInstances" :: Maybe (ReservedInstancesList) } ) -> DescribeReservedInstancesResult
newDescribeReservedInstancesResult'  customize = (DescribeReservedInstancesResult <<< customize) { "ReservedInstances": Nothing }



-- | <p>Contains the parameters for DescribeRouteTables.</p>
newtype DescribeRouteTablesRequest = DescribeRouteTablesRequest 
  { "Filters" :: Maybe (FilterList)
  , "DryRun" :: Maybe (Boolean)
  , "RouteTableIds" :: Maybe (ValueStringList)
  }
derive instance newtypeDescribeRouteTablesRequest :: Newtype DescribeRouteTablesRequest _
derive instance repGenericDescribeRouteTablesRequest :: Generic DescribeRouteTablesRequest _
instance showDescribeRouteTablesRequest :: Show DescribeRouteTablesRequest where show = genericShow
instance decodeDescribeRouteTablesRequest :: Decode DescribeRouteTablesRequest where decode = genericDecode options
instance encodeDescribeRouteTablesRequest :: Encode DescribeRouteTablesRequest where encode = genericEncode options

-- | Constructs DescribeRouteTablesRequest from required parameters
newDescribeRouteTablesRequest :: DescribeRouteTablesRequest
newDescribeRouteTablesRequest  = DescribeRouteTablesRequest { "DryRun": Nothing, "Filters": Nothing, "RouteTableIds": Nothing }

-- | Constructs DescribeRouteTablesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeRouteTablesRequest' :: ( { "Filters" :: Maybe (FilterList) , "DryRun" :: Maybe (Boolean) , "RouteTableIds" :: Maybe (ValueStringList) } -> {"Filters" :: Maybe (FilterList) , "DryRun" :: Maybe (Boolean) , "RouteTableIds" :: Maybe (ValueStringList) } ) -> DescribeRouteTablesRequest
newDescribeRouteTablesRequest'  customize = (DescribeRouteTablesRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "RouteTableIds": Nothing }



-- | <p>Contains the output of DescribeRouteTables.</p>
newtype DescribeRouteTablesResult = DescribeRouteTablesResult 
  { "RouteTables" :: Maybe (RouteTableList)
  }
derive instance newtypeDescribeRouteTablesResult :: Newtype DescribeRouteTablesResult _
derive instance repGenericDescribeRouteTablesResult :: Generic DescribeRouteTablesResult _
instance showDescribeRouteTablesResult :: Show DescribeRouteTablesResult where show = genericShow
instance decodeDescribeRouteTablesResult :: Decode DescribeRouteTablesResult where decode = genericDecode options
instance encodeDescribeRouteTablesResult :: Encode DescribeRouteTablesResult where encode = genericEncode options

-- | Constructs DescribeRouteTablesResult from required parameters
newDescribeRouteTablesResult :: DescribeRouteTablesResult
newDescribeRouteTablesResult  = DescribeRouteTablesResult { "RouteTables": Nothing }

-- | Constructs DescribeRouteTablesResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeRouteTablesResult' :: ( { "RouteTables" :: Maybe (RouteTableList) } -> {"RouteTables" :: Maybe (RouteTableList) } ) -> DescribeRouteTablesResult
newDescribeRouteTablesResult'  customize = (DescribeRouteTablesResult <<< customize) { "RouteTables": Nothing }



-- | <p>Contains the parameters for DescribeScheduledInstanceAvailability.</p>
newtype DescribeScheduledInstanceAvailabilityRequest = DescribeScheduledInstanceAvailabilityRequest 
  { "DryRun" :: Maybe (Boolean)
  , "Filters" :: Maybe (FilterList)
  , "FirstSlotStartTimeRange" :: (SlotDateTimeRangeRequest)
  , "MaxResults" :: Maybe (Int)
  , "MaxSlotDurationInHours" :: Maybe (Int)
  , "MinSlotDurationInHours" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  , "Recurrence" :: (ScheduledInstanceRecurrenceRequest)
  }
derive instance newtypeDescribeScheduledInstanceAvailabilityRequest :: Newtype DescribeScheduledInstanceAvailabilityRequest _
derive instance repGenericDescribeScheduledInstanceAvailabilityRequest :: Generic DescribeScheduledInstanceAvailabilityRequest _
instance showDescribeScheduledInstanceAvailabilityRequest :: Show DescribeScheduledInstanceAvailabilityRequest where show = genericShow
instance decodeDescribeScheduledInstanceAvailabilityRequest :: Decode DescribeScheduledInstanceAvailabilityRequest where decode = genericDecode options
instance encodeDescribeScheduledInstanceAvailabilityRequest :: Encode DescribeScheduledInstanceAvailabilityRequest where encode = genericEncode options

-- | Constructs DescribeScheduledInstanceAvailabilityRequest from required parameters
newDescribeScheduledInstanceAvailabilityRequest :: SlotDateTimeRangeRequest -> ScheduledInstanceRecurrenceRequest -> DescribeScheduledInstanceAvailabilityRequest
newDescribeScheduledInstanceAvailabilityRequest _FirstSlotStartTimeRange _Recurrence = DescribeScheduledInstanceAvailabilityRequest { "FirstSlotStartTimeRange": _FirstSlotStartTimeRange, "Recurrence": _Recurrence, "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "MaxSlotDurationInHours": Nothing, "MinSlotDurationInHours": Nothing, "NextToken": Nothing }

-- | Constructs DescribeScheduledInstanceAvailabilityRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeScheduledInstanceAvailabilityRequest' :: SlotDateTimeRangeRequest -> ScheduledInstanceRecurrenceRequest -> ( { "DryRun" :: Maybe (Boolean) , "Filters" :: Maybe (FilterList) , "FirstSlotStartTimeRange" :: (SlotDateTimeRangeRequest) , "MaxResults" :: Maybe (Int) , "MaxSlotDurationInHours" :: Maybe (Int) , "MinSlotDurationInHours" :: Maybe (Int) , "NextToken" :: Maybe (String) , "Recurrence" :: (ScheduledInstanceRecurrenceRequest) } -> {"DryRun" :: Maybe (Boolean) , "Filters" :: Maybe (FilterList) , "FirstSlotStartTimeRange" :: (SlotDateTimeRangeRequest) , "MaxResults" :: Maybe (Int) , "MaxSlotDurationInHours" :: Maybe (Int) , "MinSlotDurationInHours" :: Maybe (Int) , "NextToken" :: Maybe (String) , "Recurrence" :: (ScheduledInstanceRecurrenceRequest) } ) -> DescribeScheduledInstanceAvailabilityRequest
newDescribeScheduledInstanceAvailabilityRequest' _FirstSlotStartTimeRange _Recurrence customize = (DescribeScheduledInstanceAvailabilityRequest <<< customize) { "FirstSlotStartTimeRange": _FirstSlotStartTimeRange, "Recurrence": _Recurrence, "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "MaxSlotDurationInHours": Nothing, "MinSlotDurationInHours": Nothing, "NextToken": Nothing }



-- | <p>Contains the output of DescribeScheduledInstanceAvailability.</p>
newtype DescribeScheduledInstanceAvailabilityResult = DescribeScheduledInstanceAvailabilityResult 
  { "NextToken" :: Maybe (String)
  , "ScheduledInstanceAvailabilitySet" :: Maybe (ScheduledInstanceAvailabilitySet)
  }
derive instance newtypeDescribeScheduledInstanceAvailabilityResult :: Newtype DescribeScheduledInstanceAvailabilityResult _
derive instance repGenericDescribeScheduledInstanceAvailabilityResult :: Generic DescribeScheduledInstanceAvailabilityResult _
instance showDescribeScheduledInstanceAvailabilityResult :: Show DescribeScheduledInstanceAvailabilityResult where show = genericShow
instance decodeDescribeScheduledInstanceAvailabilityResult :: Decode DescribeScheduledInstanceAvailabilityResult where decode = genericDecode options
instance encodeDescribeScheduledInstanceAvailabilityResult :: Encode DescribeScheduledInstanceAvailabilityResult where encode = genericEncode options

-- | Constructs DescribeScheduledInstanceAvailabilityResult from required parameters
newDescribeScheduledInstanceAvailabilityResult :: DescribeScheduledInstanceAvailabilityResult
newDescribeScheduledInstanceAvailabilityResult  = DescribeScheduledInstanceAvailabilityResult { "NextToken": Nothing, "ScheduledInstanceAvailabilitySet": Nothing }

-- | Constructs DescribeScheduledInstanceAvailabilityResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeScheduledInstanceAvailabilityResult' :: ( { "NextToken" :: Maybe (String) , "ScheduledInstanceAvailabilitySet" :: Maybe (ScheduledInstanceAvailabilitySet) } -> {"NextToken" :: Maybe (String) , "ScheduledInstanceAvailabilitySet" :: Maybe (ScheduledInstanceAvailabilitySet) } ) -> DescribeScheduledInstanceAvailabilityResult
newDescribeScheduledInstanceAvailabilityResult'  customize = (DescribeScheduledInstanceAvailabilityResult <<< customize) { "NextToken": Nothing, "ScheduledInstanceAvailabilitySet": Nothing }



-- | <p>Contains the parameters for DescribeScheduledInstances.</p>
newtype DescribeScheduledInstancesRequest = DescribeScheduledInstancesRequest 
  { "DryRun" :: Maybe (Boolean)
  , "Filters" :: Maybe (FilterList)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  , "ScheduledInstanceIds" :: Maybe (ScheduledInstanceIdRequestSet)
  , "SlotStartTimeRange" :: Maybe (SlotStartTimeRangeRequest)
  }
derive instance newtypeDescribeScheduledInstancesRequest :: Newtype DescribeScheduledInstancesRequest _
derive instance repGenericDescribeScheduledInstancesRequest :: Generic DescribeScheduledInstancesRequest _
instance showDescribeScheduledInstancesRequest :: Show DescribeScheduledInstancesRequest where show = genericShow
instance decodeDescribeScheduledInstancesRequest :: Decode DescribeScheduledInstancesRequest where decode = genericDecode options
instance encodeDescribeScheduledInstancesRequest :: Encode DescribeScheduledInstancesRequest where encode = genericEncode options

-- | Constructs DescribeScheduledInstancesRequest from required parameters
newDescribeScheduledInstancesRequest :: DescribeScheduledInstancesRequest
newDescribeScheduledInstancesRequest  = DescribeScheduledInstancesRequest { "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "ScheduledInstanceIds": Nothing, "SlotStartTimeRange": Nothing }

-- | Constructs DescribeScheduledInstancesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeScheduledInstancesRequest' :: ( { "DryRun" :: Maybe (Boolean) , "Filters" :: Maybe (FilterList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) , "ScheduledInstanceIds" :: Maybe (ScheduledInstanceIdRequestSet) , "SlotStartTimeRange" :: Maybe (SlotStartTimeRangeRequest) } -> {"DryRun" :: Maybe (Boolean) , "Filters" :: Maybe (FilterList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) , "ScheduledInstanceIds" :: Maybe (ScheduledInstanceIdRequestSet) , "SlotStartTimeRange" :: Maybe (SlotStartTimeRangeRequest) } ) -> DescribeScheduledInstancesRequest
newDescribeScheduledInstancesRequest'  customize = (DescribeScheduledInstancesRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "ScheduledInstanceIds": Nothing, "SlotStartTimeRange": Nothing }



-- | <p>Contains the output of DescribeScheduledInstances.</p>
newtype DescribeScheduledInstancesResult = DescribeScheduledInstancesResult 
  { "NextToken" :: Maybe (String)
  , "ScheduledInstanceSet" :: Maybe (ScheduledInstanceSet)
  }
derive instance newtypeDescribeScheduledInstancesResult :: Newtype DescribeScheduledInstancesResult _
derive instance repGenericDescribeScheduledInstancesResult :: Generic DescribeScheduledInstancesResult _
instance showDescribeScheduledInstancesResult :: Show DescribeScheduledInstancesResult where show = genericShow
instance decodeDescribeScheduledInstancesResult :: Decode DescribeScheduledInstancesResult where decode = genericDecode options
instance encodeDescribeScheduledInstancesResult :: Encode DescribeScheduledInstancesResult where encode = genericEncode options

-- | Constructs DescribeScheduledInstancesResult from required parameters
newDescribeScheduledInstancesResult :: DescribeScheduledInstancesResult
newDescribeScheduledInstancesResult  = DescribeScheduledInstancesResult { "NextToken": Nothing, "ScheduledInstanceSet": Nothing }

-- | Constructs DescribeScheduledInstancesResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeScheduledInstancesResult' :: ( { "NextToken" :: Maybe (String) , "ScheduledInstanceSet" :: Maybe (ScheduledInstanceSet) } -> {"NextToken" :: Maybe (String) , "ScheduledInstanceSet" :: Maybe (ScheduledInstanceSet) } ) -> DescribeScheduledInstancesResult
newDescribeScheduledInstancesResult'  customize = (DescribeScheduledInstancesResult <<< customize) { "NextToken": Nothing, "ScheduledInstanceSet": Nothing }



newtype DescribeSecurityGroupReferencesRequest = DescribeSecurityGroupReferencesRequest 
  { "DryRun" :: Maybe (Boolean)
  , "GroupId" :: (GroupIds)
  }
derive instance newtypeDescribeSecurityGroupReferencesRequest :: Newtype DescribeSecurityGroupReferencesRequest _
derive instance repGenericDescribeSecurityGroupReferencesRequest :: Generic DescribeSecurityGroupReferencesRequest _
instance showDescribeSecurityGroupReferencesRequest :: Show DescribeSecurityGroupReferencesRequest where show = genericShow
instance decodeDescribeSecurityGroupReferencesRequest :: Decode DescribeSecurityGroupReferencesRequest where decode = genericDecode options
instance encodeDescribeSecurityGroupReferencesRequest :: Encode DescribeSecurityGroupReferencesRequest where encode = genericEncode options

-- | Constructs DescribeSecurityGroupReferencesRequest from required parameters
newDescribeSecurityGroupReferencesRequest :: GroupIds -> DescribeSecurityGroupReferencesRequest
newDescribeSecurityGroupReferencesRequest _GroupId = DescribeSecurityGroupReferencesRequest { "GroupId": _GroupId, "DryRun": Nothing }

-- | Constructs DescribeSecurityGroupReferencesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeSecurityGroupReferencesRequest' :: GroupIds -> ( { "DryRun" :: Maybe (Boolean) , "GroupId" :: (GroupIds) } -> {"DryRun" :: Maybe (Boolean) , "GroupId" :: (GroupIds) } ) -> DescribeSecurityGroupReferencesRequest
newDescribeSecurityGroupReferencesRequest' _GroupId customize = (DescribeSecurityGroupReferencesRequest <<< customize) { "GroupId": _GroupId, "DryRun": Nothing }



newtype DescribeSecurityGroupReferencesResult = DescribeSecurityGroupReferencesResult 
  { "SecurityGroupReferenceSet" :: Maybe (SecurityGroupReferences)
  }
derive instance newtypeDescribeSecurityGroupReferencesResult :: Newtype DescribeSecurityGroupReferencesResult _
derive instance repGenericDescribeSecurityGroupReferencesResult :: Generic DescribeSecurityGroupReferencesResult _
instance showDescribeSecurityGroupReferencesResult :: Show DescribeSecurityGroupReferencesResult where show = genericShow
instance decodeDescribeSecurityGroupReferencesResult :: Decode DescribeSecurityGroupReferencesResult where decode = genericDecode options
instance encodeDescribeSecurityGroupReferencesResult :: Encode DescribeSecurityGroupReferencesResult where encode = genericEncode options

-- | Constructs DescribeSecurityGroupReferencesResult from required parameters
newDescribeSecurityGroupReferencesResult :: DescribeSecurityGroupReferencesResult
newDescribeSecurityGroupReferencesResult  = DescribeSecurityGroupReferencesResult { "SecurityGroupReferenceSet": Nothing }

-- | Constructs DescribeSecurityGroupReferencesResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeSecurityGroupReferencesResult' :: ( { "SecurityGroupReferenceSet" :: Maybe (SecurityGroupReferences) } -> {"SecurityGroupReferenceSet" :: Maybe (SecurityGroupReferences) } ) -> DescribeSecurityGroupReferencesResult
newDescribeSecurityGroupReferencesResult'  customize = (DescribeSecurityGroupReferencesResult <<< customize) { "SecurityGroupReferenceSet": Nothing }



-- | <p>Contains the parameters for DescribeSecurityGroups.</p>
newtype DescribeSecurityGroupsRequest = DescribeSecurityGroupsRequest 
  { "Filters" :: Maybe (FilterList)
  , "GroupIds" :: Maybe (GroupIdStringList)
  , "GroupNames" :: Maybe (GroupNameStringList)
  , "DryRun" :: Maybe (Boolean)
  , "NextToken" :: Maybe (String)
  , "MaxResults" :: Maybe (Int)
  }
derive instance newtypeDescribeSecurityGroupsRequest :: Newtype DescribeSecurityGroupsRequest _
derive instance repGenericDescribeSecurityGroupsRequest :: Generic DescribeSecurityGroupsRequest _
instance showDescribeSecurityGroupsRequest :: Show DescribeSecurityGroupsRequest where show = genericShow
instance decodeDescribeSecurityGroupsRequest :: Decode DescribeSecurityGroupsRequest where decode = genericDecode options
instance encodeDescribeSecurityGroupsRequest :: Encode DescribeSecurityGroupsRequest where encode = genericEncode options

-- | Constructs DescribeSecurityGroupsRequest from required parameters
newDescribeSecurityGroupsRequest :: DescribeSecurityGroupsRequest
newDescribeSecurityGroupsRequest  = DescribeSecurityGroupsRequest { "DryRun": Nothing, "Filters": Nothing, "GroupIds": Nothing, "GroupNames": Nothing, "MaxResults": Nothing, "NextToken": Nothing }

-- | Constructs DescribeSecurityGroupsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeSecurityGroupsRequest' :: ( { "Filters" :: Maybe (FilterList) , "GroupIds" :: Maybe (GroupIdStringList) , "GroupNames" :: Maybe (GroupNameStringList) , "DryRun" :: Maybe (Boolean) , "NextToken" :: Maybe (String) , "MaxResults" :: Maybe (Int) } -> {"Filters" :: Maybe (FilterList) , "GroupIds" :: Maybe (GroupIdStringList) , "GroupNames" :: Maybe (GroupNameStringList) , "DryRun" :: Maybe (Boolean) , "NextToken" :: Maybe (String) , "MaxResults" :: Maybe (Int) } ) -> DescribeSecurityGroupsRequest
newDescribeSecurityGroupsRequest'  customize = (DescribeSecurityGroupsRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "GroupIds": Nothing, "GroupNames": Nothing, "MaxResults": Nothing, "NextToken": Nothing }



-- | <p>Contains the output of DescribeSecurityGroups.</p>
newtype DescribeSecurityGroupsResult = DescribeSecurityGroupsResult 
  { "SecurityGroups" :: Maybe (SecurityGroupList)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeSecurityGroupsResult :: Newtype DescribeSecurityGroupsResult _
derive instance repGenericDescribeSecurityGroupsResult :: Generic DescribeSecurityGroupsResult _
instance showDescribeSecurityGroupsResult :: Show DescribeSecurityGroupsResult where show = genericShow
instance decodeDescribeSecurityGroupsResult :: Decode DescribeSecurityGroupsResult where decode = genericDecode options
instance encodeDescribeSecurityGroupsResult :: Encode DescribeSecurityGroupsResult where encode = genericEncode options

-- | Constructs DescribeSecurityGroupsResult from required parameters
newDescribeSecurityGroupsResult :: DescribeSecurityGroupsResult
newDescribeSecurityGroupsResult  = DescribeSecurityGroupsResult { "NextToken": Nothing, "SecurityGroups": Nothing }

-- | Constructs DescribeSecurityGroupsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeSecurityGroupsResult' :: ( { "SecurityGroups" :: Maybe (SecurityGroupList) , "NextToken" :: Maybe (String) } -> {"SecurityGroups" :: Maybe (SecurityGroupList) , "NextToken" :: Maybe (String) } ) -> DescribeSecurityGroupsResult
newDescribeSecurityGroupsResult'  customize = (DescribeSecurityGroupsResult <<< customize) { "NextToken": Nothing, "SecurityGroups": Nothing }



-- | <p>Contains the parameters for DescribeSnapshotAttribute.</p>
newtype DescribeSnapshotAttributeRequest = DescribeSnapshotAttributeRequest 
  { "Attribute" :: (SnapshotAttributeName)
  , "SnapshotId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDescribeSnapshotAttributeRequest :: Newtype DescribeSnapshotAttributeRequest _
derive instance repGenericDescribeSnapshotAttributeRequest :: Generic DescribeSnapshotAttributeRequest _
instance showDescribeSnapshotAttributeRequest :: Show DescribeSnapshotAttributeRequest where show = genericShow
instance decodeDescribeSnapshotAttributeRequest :: Decode DescribeSnapshotAttributeRequest where decode = genericDecode options
instance encodeDescribeSnapshotAttributeRequest :: Encode DescribeSnapshotAttributeRequest where encode = genericEncode options

-- | Constructs DescribeSnapshotAttributeRequest from required parameters
newDescribeSnapshotAttributeRequest :: SnapshotAttributeName -> String -> DescribeSnapshotAttributeRequest
newDescribeSnapshotAttributeRequest _Attribute _SnapshotId = DescribeSnapshotAttributeRequest { "Attribute": _Attribute, "SnapshotId": _SnapshotId, "DryRun": Nothing }

-- | Constructs DescribeSnapshotAttributeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeSnapshotAttributeRequest' :: SnapshotAttributeName -> String -> ( { "Attribute" :: (SnapshotAttributeName) , "SnapshotId" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"Attribute" :: (SnapshotAttributeName) , "SnapshotId" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> DescribeSnapshotAttributeRequest
newDescribeSnapshotAttributeRequest' _Attribute _SnapshotId customize = (DescribeSnapshotAttributeRequest <<< customize) { "Attribute": _Attribute, "SnapshotId": _SnapshotId, "DryRun": Nothing }



-- | <p>Contains the output of DescribeSnapshotAttribute.</p>
newtype DescribeSnapshotAttributeResult = DescribeSnapshotAttributeResult 
  { "CreateVolumePermissions" :: Maybe (CreateVolumePermissionList)
  , "ProductCodes" :: Maybe (ProductCodeList)
  , "SnapshotId" :: Maybe (String)
  }
derive instance newtypeDescribeSnapshotAttributeResult :: Newtype DescribeSnapshotAttributeResult _
derive instance repGenericDescribeSnapshotAttributeResult :: Generic DescribeSnapshotAttributeResult _
instance showDescribeSnapshotAttributeResult :: Show DescribeSnapshotAttributeResult where show = genericShow
instance decodeDescribeSnapshotAttributeResult :: Decode DescribeSnapshotAttributeResult where decode = genericDecode options
instance encodeDescribeSnapshotAttributeResult :: Encode DescribeSnapshotAttributeResult where encode = genericEncode options

-- | Constructs DescribeSnapshotAttributeResult from required parameters
newDescribeSnapshotAttributeResult :: DescribeSnapshotAttributeResult
newDescribeSnapshotAttributeResult  = DescribeSnapshotAttributeResult { "CreateVolumePermissions": Nothing, "ProductCodes": Nothing, "SnapshotId": Nothing }

-- | Constructs DescribeSnapshotAttributeResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeSnapshotAttributeResult' :: ( { "CreateVolumePermissions" :: Maybe (CreateVolumePermissionList) , "ProductCodes" :: Maybe (ProductCodeList) , "SnapshotId" :: Maybe (String) } -> {"CreateVolumePermissions" :: Maybe (CreateVolumePermissionList) , "ProductCodes" :: Maybe (ProductCodeList) , "SnapshotId" :: Maybe (String) } ) -> DescribeSnapshotAttributeResult
newDescribeSnapshotAttributeResult'  customize = (DescribeSnapshotAttributeResult <<< customize) { "CreateVolumePermissions": Nothing, "ProductCodes": Nothing, "SnapshotId": Nothing }



-- | <p>Contains the parameters for DescribeSnapshots.</p>
newtype DescribeSnapshotsRequest = DescribeSnapshotsRequest 
  { "Filters" :: Maybe (FilterList)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  , "OwnerIds" :: Maybe (OwnerStringList)
  , "RestorableByUserIds" :: Maybe (RestorableByStringList)
  , "SnapshotIds" :: Maybe (SnapshotIdStringList)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDescribeSnapshotsRequest :: Newtype DescribeSnapshotsRequest _
derive instance repGenericDescribeSnapshotsRequest :: Generic DescribeSnapshotsRequest _
instance showDescribeSnapshotsRequest :: Show DescribeSnapshotsRequest where show = genericShow
instance decodeDescribeSnapshotsRequest :: Decode DescribeSnapshotsRequest where decode = genericDecode options
instance encodeDescribeSnapshotsRequest :: Encode DescribeSnapshotsRequest where encode = genericEncode options

-- | Constructs DescribeSnapshotsRequest from required parameters
newDescribeSnapshotsRequest :: DescribeSnapshotsRequest
newDescribeSnapshotsRequest  = DescribeSnapshotsRequest { "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "OwnerIds": Nothing, "RestorableByUserIds": Nothing, "SnapshotIds": Nothing }

-- | Constructs DescribeSnapshotsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeSnapshotsRequest' :: ( { "Filters" :: Maybe (FilterList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) , "OwnerIds" :: Maybe (OwnerStringList) , "RestorableByUserIds" :: Maybe (RestorableByStringList) , "SnapshotIds" :: Maybe (SnapshotIdStringList) , "DryRun" :: Maybe (Boolean) } -> {"Filters" :: Maybe (FilterList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) , "OwnerIds" :: Maybe (OwnerStringList) , "RestorableByUserIds" :: Maybe (RestorableByStringList) , "SnapshotIds" :: Maybe (SnapshotIdStringList) , "DryRun" :: Maybe (Boolean) } ) -> DescribeSnapshotsRequest
newDescribeSnapshotsRequest'  customize = (DescribeSnapshotsRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "OwnerIds": Nothing, "RestorableByUserIds": Nothing, "SnapshotIds": Nothing }



-- | <p>Contains the output of DescribeSnapshots.</p>
newtype DescribeSnapshotsResult = DescribeSnapshotsResult 
  { "Snapshots" :: Maybe (SnapshotList)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeSnapshotsResult :: Newtype DescribeSnapshotsResult _
derive instance repGenericDescribeSnapshotsResult :: Generic DescribeSnapshotsResult _
instance showDescribeSnapshotsResult :: Show DescribeSnapshotsResult where show = genericShow
instance decodeDescribeSnapshotsResult :: Decode DescribeSnapshotsResult where decode = genericDecode options
instance encodeDescribeSnapshotsResult :: Encode DescribeSnapshotsResult where encode = genericEncode options

-- | Constructs DescribeSnapshotsResult from required parameters
newDescribeSnapshotsResult :: DescribeSnapshotsResult
newDescribeSnapshotsResult  = DescribeSnapshotsResult { "NextToken": Nothing, "Snapshots": Nothing }

-- | Constructs DescribeSnapshotsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeSnapshotsResult' :: ( { "Snapshots" :: Maybe (SnapshotList) , "NextToken" :: Maybe (String) } -> {"Snapshots" :: Maybe (SnapshotList) , "NextToken" :: Maybe (String) } ) -> DescribeSnapshotsResult
newDescribeSnapshotsResult'  customize = (DescribeSnapshotsResult <<< customize) { "NextToken": Nothing, "Snapshots": Nothing }



-- | <p>Contains the parameters for DescribeSpotDatafeedSubscription.</p>
newtype DescribeSpotDatafeedSubscriptionRequest = DescribeSpotDatafeedSubscriptionRequest 
  { "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDescribeSpotDatafeedSubscriptionRequest :: Newtype DescribeSpotDatafeedSubscriptionRequest _
derive instance repGenericDescribeSpotDatafeedSubscriptionRequest :: Generic DescribeSpotDatafeedSubscriptionRequest _
instance showDescribeSpotDatafeedSubscriptionRequest :: Show DescribeSpotDatafeedSubscriptionRequest where show = genericShow
instance decodeDescribeSpotDatafeedSubscriptionRequest :: Decode DescribeSpotDatafeedSubscriptionRequest where decode = genericDecode options
instance encodeDescribeSpotDatafeedSubscriptionRequest :: Encode DescribeSpotDatafeedSubscriptionRequest where encode = genericEncode options

-- | Constructs DescribeSpotDatafeedSubscriptionRequest from required parameters
newDescribeSpotDatafeedSubscriptionRequest :: DescribeSpotDatafeedSubscriptionRequest
newDescribeSpotDatafeedSubscriptionRequest  = DescribeSpotDatafeedSubscriptionRequest { "DryRun": Nothing }

-- | Constructs DescribeSpotDatafeedSubscriptionRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeSpotDatafeedSubscriptionRequest' :: ( { "DryRun" :: Maybe (Boolean) } -> {"DryRun" :: Maybe (Boolean) } ) -> DescribeSpotDatafeedSubscriptionRequest
newDescribeSpotDatafeedSubscriptionRequest'  customize = (DescribeSpotDatafeedSubscriptionRequest <<< customize) { "DryRun": Nothing }



-- | <p>Contains the output of DescribeSpotDatafeedSubscription.</p>
newtype DescribeSpotDatafeedSubscriptionResult = DescribeSpotDatafeedSubscriptionResult 
  { "SpotDatafeedSubscription" :: Maybe (SpotDatafeedSubscription)
  }
derive instance newtypeDescribeSpotDatafeedSubscriptionResult :: Newtype DescribeSpotDatafeedSubscriptionResult _
derive instance repGenericDescribeSpotDatafeedSubscriptionResult :: Generic DescribeSpotDatafeedSubscriptionResult _
instance showDescribeSpotDatafeedSubscriptionResult :: Show DescribeSpotDatafeedSubscriptionResult where show = genericShow
instance decodeDescribeSpotDatafeedSubscriptionResult :: Decode DescribeSpotDatafeedSubscriptionResult where decode = genericDecode options
instance encodeDescribeSpotDatafeedSubscriptionResult :: Encode DescribeSpotDatafeedSubscriptionResult where encode = genericEncode options

-- | Constructs DescribeSpotDatafeedSubscriptionResult from required parameters
newDescribeSpotDatafeedSubscriptionResult :: DescribeSpotDatafeedSubscriptionResult
newDescribeSpotDatafeedSubscriptionResult  = DescribeSpotDatafeedSubscriptionResult { "SpotDatafeedSubscription": Nothing }

-- | Constructs DescribeSpotDatafeedSubscriptionResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeSpotDatafeedSubscriptionResult' :: ( { "SpotDatafeedSubscription" :: Maybe (SpotDatafeedSubscription) } -> {"SpotDatafeedSubscription" :: Maybe (SpotDatafeedSubscription) } ) -> DescribeSpotDatafeedSubscriptionResult
newDescribeSpotDatafeedSubscriptionResult'  customize = (DescribeSpotDatafeedSubscriptionResult <<< customize) { "SpotDatafeedSubscription": Nothing }



-- | <p>Contains the parameters for DescribeSpotFleetInstances.</p>
newtype DescribeSpotFleetInstancesRequest = DescribeSpotFleetInstancesRequest 
  { "DryRun" :: Maybe (Boolean)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  , "SpotFleetRequestId" :: (String)
  }
derive instance newtypeDescribeSpotFleetInstancesRequest :: Newtype DescribeSpotFleetInstancesRequest _
derive instance repGenericDescribeSpotFleetInstancesRequest :: Generic DescribeSpotFleetInstancesRequest _
instance showDescribeSpotFleetInstancesRequest :: Show DescribeSpotFleetInstancesRequest where show = genericShow
instance decodeDescribeSpotFleetInstancesRequest :: Decode DescribeSpotFleetInstancesRequest where decode = genericDecode options
instance encodeDescribeSpotFleetInstancesRequest :: Encode DescribeSpotFleetInstancesRequest where encode = genericEncode options

-- | Constructs DescribeSpotFleetInstancesRequest from required parameters
newDescribeSpotFleetInstancesRequest :: String -> DescribeSpotFleetInstancesRequest
newDescribeSpotFleetInstancesRequest _SpotFleetRequestId = DescribeSpotFleetInstancesRequest { "SpotFleetRequestId": _SpotFleetRequestId, "DryRun": Nothing, "MaxResults": Nothing, "NextToken": Nothing }

-- | Constructs DescribeSpotFleetInstancesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeSpotFleetInstancesRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) , "SpotFleetRequestId" :: (String) } -> {"DryRun" :: Maybe (Boolean) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) , "SpotFleetRequestId" :: (String) } ) -> DescribeSpotFleetInstancesRequest
newDescribeSpotFleetInstancesRequest' _SpotFleetRequestId customize = (DescribeSpotFleetInstancesRequest <<< customize) { "SpotFleetRequestId": _SpotFleetRequestId, "DryRun": Nothing, "MaxResults": Nothing, "NextToken": Nothing }



-- | <p>Contains the output of DescribeSpotFleetInstances.</p>
newtype DescribeSpotFleetInstancesResponse = DescribeSpotFleetInstancesResponse 
  { "ActiveInstances" :: (ActiveInstanceSet)
  , "NextToken" :: Maybe (String)
  , "SpotFleetRequestId" :: (String)
  }
derive instance newtypeDescribeSpotFleetInstancesResponse :: Newtype DescribeSpotFleetInstancesResponse _
derive instance repGenericDescribeSpotFleetInstancesResponse :: Generic DescribeSpotFleetInstancesResponse _
instance showDescribeSpotFleetInstancesResponse :: Show DescribeSpotFleetInstancesResponse where show = genericShow
instance decodeDescribeSpotFleetInstancesResponse :: Decode DescribeSpotFleetInstancesResponse where decode = genericDecode options
instance encodeDescribeSpotFleetInstancesResponse :: Encode DescribeSpotFleetInstancesResponse where encode = genericEncode options

-- | Constructs DescribeSpotFleetInstancesResponse from required parameters
newDescribeSpotFleetInstancesResponse :: ActiveInstanceSet -> String -> DescribeSpotFleetInstancesResponse
newDescribeSpotFleetInstancesResponse _ActiveInstances _SpotFleetRequestId = DescribeSpotFleetInstancesResponse { "ActiveInstances": _ActiveInstances, "SpotFleetRequestId": _SpotFleetRequestId, "NextToken": Nothing }

-- | Constructs DescribeSpotFleetInstancesResponse's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeSpotFleetInstancesResponse' :: ActiveInstanceSet -> String -> ( { "ActiveInstances" :: (ActiveInstanceSet) , "NextToken" :: Maybe (String) , "SpotFleetRequestId" :: (String) } -> {"ActiveInstances" :: (ActiveInstanceSet) , "NextToken" :: Maybe (String) , "SpotFleetRequestId" :: (String) } ) -> DescribeSpotFleetInstancesResponse
newDescribeSpotFleetInstancesResponse' _ActiveInstances _SpotFleetRequestId customize = (DescribeSpotFleetInstancesResponse <<< customize) { "ActiveInstances": _ActiveInstances, "SpotFleetRequestId": _SpotFleetRequestId, "NextToken": Nothing }



-- | <p>Contains the parameters for DescribeSpotFleetRequestHistory.</p>
newtype DescribeSpotFleetRequestHistoryRequest = DescribeSpotFleetRequestHistoryRequest 
  { "DryRun" :: Maybe (Boolean)
  , "EventType" :: Maybe (EventType)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  , "SpotFleetRequestId" :: (String)
  , "StartTime" :: (DateTime)
  }
derive instance newtypeDescribeSpotFleetRequestHistoryRequest :: Newtype DescribeSpotFleetRequestHistoryRequest _
derive instance repGenericDescribeSpotFleetRequestHistoryRequest :: Generic DescribeSpotFleetRequestHistoryRequest _
instance showDescribeSpotFleetRequestHistoryRequest :: Show DescribeSpotFleetRequestHistoryRequest where show = genericShow
instance decodeDescribeSpotFleetRequestHistoryRequest :: Decode DescribeSpotFleetRequestHistoryRequest where decode = genericDecode options
instance encodeDescribeSpotFleetRequestHistoryRequest :: Encode DescribeSpotFleetRequestHistoryRequest where encode = genericEncode options

-- | Constructs DescribeSpotFleetRequestHistoryRequest from required parameters
newDescribeSpotFleetRequestHistoryRequest :: String -> DateTime -> DescribeSpotFleetRequestHistoryRequest
newDescribeSpotFleetRequestHistoryRequest _SpotFleetRequestId _StartTime = DescribeSpotFleetRequestHistoryRequest { "SpotFleetRequestId": _SpotFleetRequestId, "StartTime": _StartTime, "DryRun": Nothing, "EventType": Nothing, "MaxResults": Nothing, "NextToken": Nothing }

-- | Constructs DescribeSpotFleetRequestHistoryRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeSpotFleetRequestHistoryRequest' :: String -> DateTime -> ( { "DryRun" :: Maybe (Boolean) , "EventType" :: Maybe (EventType) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) , "SpotFleetRequestId" :: (String) , "StartTime" :: (DateTime) } -> {"DryRun" :: Maybe (Boolean) , "EventType" :: Maybe (EventType) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) , "SpotFleetRequestId" :: (String) , "StartTime" :: (DateTime) } ) -> DescribeSpotFleetRequestHistoryRequest
newDescribeSpotFleetRequestHistoryRequest' _SpotFleetRequestId _StartTime customize = (DescribeSpotFleetRequestHistoryRequest <<< customize) { "SpotFleetRequestId": _SpotFleetRequestId, "StartTime": _StartTime, "DryRun": Nothing, "EventType": Nothing, "MaxResults": Nothing, "NextToken": Nothing }



-- | <p>Contains the output of DescribeSpotFleetRequestHistory.</p>
newtype DescribeSpotFleetRequestHistoryResponse = DescribeSpotFleetRequestHistoryResponse 
  { "HistoryRecords" :: (HistoryRecords)
  , "LastEvaluatedTime" :: (DateTime)
  , "NextToken" :: Maybe (String)
  , "SpotFleetRequestId" :: (String)
  , "StartTime" :: (DateTime)
  }
derive instance newtypeDescribeSpotFleetRequestHistoryResponse :: Newtype DescribeSpotFleetRequestHistoryResponse _
derive instance repGenericDescribeSpotFleetRequestHistoryResponse :: Generic DescribeSpotFleetRequestHistoryResponse _
instance showDescribeSpotFleetRequestHistoryResponse :: Show DescribeSpotFleetRequestHistoryResponse where show = genericShow
instance decodeDescribeSpotFleetRequestHistoryResponse :: Decode DescribeSpotFleetRequestHistoryResponse where decode = genericDecode options
instance encodeDescribeSpotFleetRequestHistoryResponse :: Encode DescribeSpotFleetRequestHistoryResponse where encode = genericEncode options

-- | Constructs DescribeSpotFleetRequestHistoryResponse from required parameters
newDescribeSpotFleetRequestHistoryResponse :: HistoryRecords -> DateTime -> String -> DateTime -> DescribeSpotFleetRequestHistoryResponse
newDescribeSpotFleetRequestHistoryResponse _HistoryRecords _LastEvaluatedTime _SpotFleetRequestId _StartTime = DescribeSpotFleetRequestHistoryResponse { "HistoryRecords": _HistoryRecords, "LastEvaluatedTime": _LastEvaluatedTime, "SpotFleetRequestId": _SpotFleetRequestId, "StartTime": _StartTime, "NextToken": Nothing }

-- | Constructs DescribeSpotFleetRequestHistoryResponse's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeSpotFleetRequestHistoryResponse' :: HistoryRecords -> DateTime -> String -> DateTime -> ( { "HistoryRecords" :: (HistoryRecords) , "LastEvaluatedTime" :: (DateTime) , "NextToken" :: Maybe (String) , "SpotFleetRequestId" :: (String) , "StartTime" :: (DateTime) } -> {"HistoryRecords" :: (HistoryRecords) , "LastEvaluatedTime" :: (DateTime) , "NextToken" :: Maybe (String) , "SpotFleetRequestId" :: (String) , "StartTime" :: (DateTime) } ) -> DescribeSpotFleetRequestHistoryResponse
newDescribeSpotFleetRequestHistoryResponse' _HistoryRecords _LastEvaluatedTime _SpotFleetRequestId _StartTime customize = (DescribeSpotFleetRequestHistoryResponse <<< customize) { "HistoryRecords": _HistoryRecords, "LastEvaluatedTime": _LastEvaluatedTime, "SpotFleetRequestId": _SpotFleetRequestId, "StartTime": _StartTime, "NextToken": Nothing }



-- | <p>Contains the parameters for DescribeSpotFleetRequests.</p>
newtype DescribeSpotFleetRequestsRequest = DescribeSpotFleetRequestsRequest 
  { "DryRun" :: Maybe (Boolean)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  , "SpotFleetRequestIds" :: Maybe (ValueStringList)
  }
derive instance newtypeDescribeSpotFleetRequestsRequest :: Newtype DescribeSpotFleetRequestsRequest _
derive instance repGenericDescribeSpotFleetRequestsRequest :: Generic DescribeSpotFleetRequestsRequest _
instance showDescribeSpotFleetRequestsRequest :: Show DescribeSpotFleetRequestsRequest where show = genericShow
instance decodeDescribeSpotFleetRequestsRequest :: Decode DescribeSpotFleetRequestsRequest where decode = genericDecode options
instance encodeDescribeSpotFleetRequestsRequest :: Encode DescribeSpotFleetRequestsRequest where encode = genericEncode options

-- | Constructs DescribeSpotFleetRequestsRequest from required parameters
newDescribeSpotFleetRequestsRequest :: DescribeSpotFleetRequestsRequest
newDescribeSpotFleetRequestsRequest  = DescribeSpotFleetRequestsRequest { "DryRun": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "SpotFleetRequestIds": Nothing }

-- | Constructs DescribeSpotFleetRequestsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeSpotFleetRequestsRequest' :: ( { "DryRun" :: Maybe (Boolean) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) , "SpotFleetRequestIds" :: Maybe (ValueStringList) } -> {"DryRun" :: Maybe (Boolean) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) , "SpotFleetRequestIds" :: Maybe (ValueStringList) } ) -> DescribeSpotFleetRequestsRequest
newDescribeSpotFleetRequestsRequest'  customize = (DescribeSpotFleetRequestsRequest <<< customize) { "DryRun": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "SpotFleetRequestIds": Nothing }



-- | <p>Contains the output of DescribeSpotFleetRequests.</p>
newtype DescribeSpotFleetRequestsResponse = DescribeSpotFleetRequestsResponse 
  { "NextToken" :: Maybe (String)
  , "SpotFleetRequestConfigs" :: (SpotFleetRequestConfigSet)
  }
derive instance newtypeDescribeSpotFleetRequestsResponse :: Newtype DescribeSpotFleetRequestsResponse _
derive instance repGenericDescribeSpotFleetRequestsResponse :: Generic DescribeSpotFleetRequestsResponse _
instance showDescribeSpotFleetRequestsResponse :: Show DescribeSpotFleetRequestsResponse where show = genericShow
instance decodeDescribeSpotFleetRequestsResponse :: Decode DescribeSpotFleetRequestsResponse where decode = genericDecode options
instance encodeDescribeSpotFleetRequestsResponse :: Encode DescribeSpotFleetRequestsResponse where encode = genericEncode options

-- | Constructs DescribeSpotFleetRequestsResponse from required parameters
newDescribeSpotFleetRequestsResponse :: SpotFleetRequestConfigSet -> DescribeSpotFleetRequestsResponse
newDescribeSpotFleetRequestsResponse _SpotFleetRequestConfigs = DescribeSpotFleetRequestsResponse { "SpotFleetRequestConfigs": _SpotFleetRequestConfigs, "NextToken": Nothing }

-- | Constructs DescribeSpotFleetRequestsResponse's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeSpotFleetRequestsResponse' :: SpotFleetRequestConfigSet -> ( { "NextToken" :: Maybe (String) , "SpotFleetRequestConfigs" :: (SpotFleetRequestConfigSet) } -> {"NextToken" :: Maybe (String) , "SpotFleetRequestConfigs" :: (SpotFleetRequestConfigSet) } ) -> DescribeSpotFleetRequestsResponse
newDescribeSpotFleetRequestsResponse' _SpotFleetRequestConfigs customize = (DescribeSpotFleetRequestsResponse <<< customize) { "SpotFleetRequestConfigs": _SpotFleetRequestConfigs, "NextToken": Nothing }



-- | <p>Contains the parameters for DescribeSpotInstanceRequests.</p>
newtype DescribeSpotInstanceRequestsRequest = DescribeSpotInstanceRequestsRequest 
  { "Filters" :: Maybe (FilterList)
  , "DryRun" :: Maybe (Boolean)
  , "SpotInstanceRequestIds" :: Maybe (SpotInstanceRequestIdList)
  }
derive instance newtypeDescribeSpotInstanceRequestsRequest :: Newtype DescribeSpotInstanceRequestsRequest _
derive instance repGenericDescribeSpotInstanceRequestsRequest :: Generic DescribeSpotInstanceRequestsRequest _
instance showDescribeSpotInstanceRequestsRequest :: Show DescribeSpotInstanceRequestsRequest where show = genericShow
instance decodeDescribeSpotInstanceRequestsRequest :: Decode DescribeSpotInstanceRequestsRequest where decode = genericDecode options
instance encodeDescribeSpotInstanceRequestsRequest :: Encode DescribeSpotInstanceRequestsRequest where encode = genericEncode options

-- | Constructs DescribeSpotInstanceRequestsRequest from required parameters
newDescribeSpotInstanceRequestsRequest :: DescribeSpotInstanceRequestsRequest
newDescribeSpotInstanceRequestsRequest  = DescribeSpotInstanceRequestsRequest { "DryRun": Nothing, "Filters": Nothing, "SpotInstanceRequestIds": Nothing }

-- | Constructs DescribeSpotInstanceRequestsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeSpotInstanceRequestsRequest' :: ( { "Filters" :: Maybe (FilterList) , "DryRun" :: Maybe (Boolean) , "SpotInstanceRequestIds" :: Maybe (SpotInstanceRequestIdList) } -> {"Filters" :: Maybe (FilterList) , "DryRun" :: Maybe (Boolean) , "SpotInstanceRequestIds" :: Maybe (SpotInstanceRequestIdList) } ) -> DescribeSpotInstanceRequestsRequest
newDescribeSpotInstanceRequestsRequest'  customize = (DescribeSpotInstanceRequestsRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "SpotInstanceRequestIds": Nothing }



-- | <p>Contains the output of DescribeSpotInstanceRequests.</p>
newtype DescribeSpotInstanceRequestsResult = DescribeSpotInstanceRequestsResult 
  { "SpotInstanceRequests" :: Maybe (SpotInstanceRequestList)
  }
derive instance newtypeDescribeSpotInstanceRequestsResult :: Newtype DescribeSpotInstanceRequestsResult _
derive instance repGenericDescribeSpotInstanceRequestsResult :: Generic DescribeSpotInstanceRequestsResult _
instance showDescribeSpotInstanceRequestsResult :: Show DescribeSpotInstanceRequestsResult where show = genericShow
instance decodeDescribeSpotInstanceRequestsResult :: Decode DescribeSpotInstanceRequestsResult where decode = genericDecode options
instance encodeDescribeSpotInstanceRequestsResult :: Encode DescribeSpotInstanceRequestsResult where encode = genericEncode options

-- | Constructs DescribeSpotInstanceRequestsResult from required parameters
newDescribeSpotInstanceRequestsResult :: DescribeSpotInstanceRequestsResult
newDescribeSpotInstanceRequestsResult  = DescribeSpotInstanceRequestsResult { "SpotInstanceRequests": Nothing }

-- | Constructs DescribeSpotInstanceRequestsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeSpotInstanceRequestsResult' :: ( { "SpotInstanceRequests" :: Maybe (SpotInstanceRequestList) } -> {"SpotInstanceRequests" :: Maybe (SpotInstanceRequestList) } ) -> DescribeSpotInstanceRequestsResult
newDescribeSpotInstanceRequestsResult'  customize = (DescribeSpotInstanceRequestsResult <<< customize) { "SpotInstanceRequests": Nothing }



-- | <p>Contains the parameters for DescribeSpotPriceHistory.</p>
newtype DescribeSpotPriceHistoryRequest = DescribeSpotPriceHistoryRequest 
  { "Filters" :: Maybe (FilterList)
  , "AvailabilityZone" :: Maybe (String)
  , "DryRun" :: Maybe (Boolean)
  , "EndTime" :: Maybe (DateTime)
  , "InstanceTypes" :: Maybe (InstanceTypeList)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  , "ProductDescriptions" :: Maybe (ProductDescriptionList)
  , "StartTime" :: Maybe (DateTime)
  }
derive instance newtypeDescribeSpotPriceHistoryRequest :: Newtype DescribeSpotPriceHistoryRequest _
derive instance repGenericDescribeSpotPriceHistoryRequest :: Generic DescribeSpotPriceHistoryRequest _
instance showDescribeSpotPriceHistoryRequest :: Show DescribeSpotPriceHistoryRequest where show = genericShow
instance decodeDescribeSpotPriceHistoryRequest :: Decode DescribeSpotPriceHistoryRequest where decode = genericDecode options
instance encodeDescribeSpotPriceHistoryRequest :: Encode DescribeSpotPriceHistoryRequest where encode = genericEncode options

-- | Constructs DescribeSpotPriceHistoryRequest from required parameters
newDescribeSpotPriceHistoryRequest :: DescribeSpotPriceHistoryRequest
newDescribeSpotPriceHistoryRequest  = DescribeSpotPriceHistoryRequest { "AvailabilityZone": Nothing, "DryRun": Nothing, "EndTime": Nothing, "Filters": Nothing, "InstanceTypes": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "ProductDescriptions": Nothing, "StartTime": Nothing }

-- | Constructs DescribeSpotPriceHistoryRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeSpotPriceHistoryRequest' :: ( { "Filters" :: Maybe (FilterList) , "AvailabilityZone" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "EndTime" :: Maybe (DateTime) , "InstanceTypes" :: Maybe (InstanceTypeList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) , "ProductDescriptions" :: Maybe (ProductDescriptionList) , "StartTime" :: Maybe (DateTime) } -> {"Filters" :: Maybe (FilterList) , "AvailabilityZone" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "EndTime" :: Maybe (DateTime) , "InstanceTypes" :: Maybe (InstanceTypeList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) , "ProductDescriptions" :: Maybe (ProductDescriptionList) , "StartTime" :: Maybe (DateTime) } ) -> DescribeSpotPriceHistoryRequest
newDescribeSpotPriceHistoryRequest'  customize = (DescribeSpotPriceHistoryRequest <<< customize) { "AvailabilityZone": Nothing, "DryRun": Nothing, "EndTime": Nothing, "Filters": Nothing, "InstanceTypes": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "ProductDescriptions": Nothing, "StartTime": Nothing }



-- | <p>Contains the output of DescribeSpotPriceHistory.</p>
newtype DescribeSpotPriceHistoryResult = DescribeSpotPriceHistoryResult 
  { "NextToken" :: Maybe (String)
  , "SpotPriceHistory" :: Maybe (SpotPriceHistoryList)
  }
derive instance newtypeDescribeSpotPriceHistoryResult :: Newtype DescribeSpotPriceHistoryResult _
derive instance repGenericDescribeSpotPriceHistoryResult :: Generic DescribeSpotPriceHistoryResult _
instance showDescribeSpotPriceHistoryResult :: Show DescribeSpotPriceHistoryResult where show = genericShow
instance decodeDescribeSpotPriceHistoryResult :: Decode DescribeSpotPriceHistoryResult where decode = genericDecode options
instance encodeDescribeSpotPriceHistoryResult :: Encode DescribeSpotPriceHistoryResult where encode = genericEncode options

-- | Constructs DescribeSpotPriceHistoryResult from required parameters
newDescribeSpotPriceHistoryResult :: DescribeSpotPriceHistoryResult
newDescribeSpotPriceHistoryResult  = DescribeSpotPriceHistoryResult { "NextToken": Nothing, "SpotPriceHistory": Nothing }

-- | Constructs DescribeSpotPriceHistoryResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeSpotPriceHistoryResult' :: ( { "NextToken" :: Maybe (String) , "SpotPriceHistory" :: Maybe (SpotPriceHistoryList) } -> {"NextToken" :: Maybe (String) , "SpotPriceHistory" :: Maybe (SpotPriceHistoryList) } ) -> DescribeSpotPriceHistoryResult
newDescribeSpotPriceHistoryResult'  customize = (DescribeSpotPriceHistoryResult <<< customize) { "NextToken": Nothing, "SpotPriceHistory": Nothing }



newtype DescribeStaleSecurityGroupsRequest = DescribeStaleSecurityGroupsRequest 
  { "DryRun" :: Maybe (Boolean)
  , "MaxResults" :: Maybe (MaxResults)
  , "NextToken" :: Maybe (NextToken)
  , "VpcId" :: (String)
  }
derive instance newtypeDescribeStaleSecurityGroupsRequest :: Newtype DescribeStaleSecurityGroupsRequest _
derive instance repGenericDescribeStaleSecurityGroupsRequest :: Generic DescribeStaleSecurityGroupsRequest _
instance showDescribeStaleSecurityGroupsRequest :: Show DescribeStaleSecurityGroupsRequest where show = genericShow
instance decodeDescribeStaleSecurityGroupsRequest :: Decode DescribeStaleSecurityGroupsRequest where decode = genericDecode options
instance encodeDescribeStaleSecurityGroupsRequest :: Encode DescribeStaleSecurityGroupsRequest where encode = genericEncode options

-- | Constructs DescribeStaleSecurityGroupsRequest from required parameters
newDescribeStaleSecurityGroupsRequest :: String -> DescribeStaleSecurityGroupsRequest
newDescribeStaleSecurityGroupsRequest _VpcId = DescribeStaleSecurityGroupsRequest { "VpcId": _VpcId, "DryRun": Nothing, "MaxResults": Nothing, "NextToken": Nothing }

-- | Constructs DescribeStaleSecurityGroupsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeStaleSecurityGroupsRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "MaxResults" :: Maybe (MaxResults) , "NextToken" :: Maybe (NextToken) , "VpcId" :: (String) } -> {"DryRun" :: Maybe (Boolean) , "MaxResults" :: Maybe (MaxResults) , "NextToken" :: Maybe (NextToken) , "VpcId" :: (String) } ) -> DescribeStaleSecurityGroupsRequest
newDescribeStaleSecurityGroupsRequest' _VpcId customize = (DescribeStaleSecurityGroupsRequest <<< customize) { "VpcId": _VpcId, "DryRun": Nothing, "MaxResults": Nothing, "NextToken": Nothing }



newtype DescribeStaleSecurityGroupsResult = DescribeStaleSecurityGroupsResult 
  { "NextToken" :: Maybe (String)
  , "StaleSecurityGroupSet" :: Maybe (StaleSecurityGroupSet)
  }
derive instance newtypeDescribeStaleSecurityGroupsResult :: Newtype DescribeStaleSecurityGroupsResult _
derive instance repGenericDescribeStaleSecurityGroupsResult :: Generic DescribeStaleSecurityGroupsResult _
instance showDescribeStaleSecurityGroupsResult :: Show DescribeStaleSecurityGroupsResult where show = genericShow
instance decodeDescribeStaleSecurityGroupsResult :: Decode DescribeStaleSecurityGroupsResult where decode = genericDecode options
instance encodeDescribeStaleSecurityGroupsResult :: Encode DescribeStaleSecurityGroupsResult where encode = genericEncode options

-- | Constructs DescribeStaleSecurityGroupsResult from required parameters
newDescribeStaleSecurityGroupsResult :: DescribeStaleSecurityGroupsResult
newDescribeStaleSecurityGroupsResult  = DescribeStaleSecurityGroupsResult { "NextToken": Nothing, "StaleSecurityGroupSet": Nothing }

-- | Constructs DescribeStaleSecurityGroupsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeStaleSecurityGroupsResult' :: ( { "NextToken" :: Maybe (String) , "StaleSecurityGroupSet" :: Maybe (StaleSecurityGroupSet) } -> {"NextToken" :: Maybe (String) , "StaleSecurityGroupSet" :: Maybe (StaleSecurityGroupSet) } ) -> DescribeStaleSecurityGroupsResult
newDescribeStaleSecurityGroupsResult'  customize = (DescribeStaleSecurityGroupsResult <<< customize) { "NextToken": Nothing, "StaleSecurityGroupSet": Nothing }



-- | <p>Contains the parameters for DescribeSubnets.</p>
newtype DescribeSubnetsRequest = DescribeSubnetsRequest 
  { "Filters" :: Maybe (FilterList)
  , "SubnetIds" :: Maybe (SubnetIdStringList)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDescribeSubnetsRequest :: Newtype DescribeSubnetsRequest _
derive instance repGenericDescribeSubnetsRequest :: Generic DescribeSubnetsRequest _
instance showDescribeSubnetsRequest :: Show DescribeSubnetsRequest where show = genericShow
instance decodeDescribeSubnetsRequest :: Decode DescribeSubnetsRequest where decode = genericDecode options
instance encodeDescribeSubnetsRequest :: Encode DescribeSubnetsRequest where encode = genericEncode options

-- | Constructs DescribeSubnetsRequest from required parameters
newDescribeSubnetsRequest :: DescribeSubnetsRequest
newDescribeSubnetsRequest  = DescribeSubnetsRequest { "DryRun": Nothing, "Filters": Nothing, "SubnetIds": Nothing }

-- | Constructs DescribeSubnetsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeSubnetsRequest' :: ( { "Filters" :: Maybe (FilterList) , "SubnetIds" :: Maybe (SubnetIdStringList) , "DryRun" :: Maybe (Boolean) } -> {"Filters" :: Maybe (FilterList) , "SubnetIds" :: Maybe (SubnetIdStringList) , "DryRun" :: Maybe (Boolean) } ) -> DescribeSubnetsRequest
newDescribeSubnetsRequest'  customize = (DescribeSubnetsRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "SubnetIds": Nothing }



-- | <p>Contains the output of DescribeSubnets.</p>
newtype DescribeSubnetsResult = DescribeSubnetsResult 
  { "Subnets" :: Maybe (SubnetList)
  }
derive instance newtypeDescribeSubnetsResult :: Newtype DescribeSubnetsResult _
derive instance repGenericDescribeSubnetsResult :: Generic DescribeSubnetsResult _
instance showDescribeSubnetsResult :: Show DescribeSubnetsResult where show = genericShow
instance decodeDescribeSubnetsResult :: Decode DescribeSubnetsResult where decode = genericDecode options
instance encodeDescribeSubnetsResult :: Encode DescribeSubnetsResult where encode = genericEncode options

-- | Constructs DescribeSubnetsResult from required parameters
newDescribeSubnetsResult :: DescribeSubnetsResult
newDescribeSubnetsResult  = DescribeSubnetsResult { "Subnets": Nothing }

-- | Constructs DescribeSubnetsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeSubnetsResult' :: ( { "Subnets" :: Maybe (SubnetList) } -> {"Subnets" :: Maybe (SubnetList) } ) -> DescribeSubnetsResult
newDescribeSubnetsResult'  customize = (DescribeSubnetsResult <<< customize) { "Subnets": Nothing }



-- | <p>Contains the parameters for DescribeTags.</p>
newtype DescribeTagsRequest = DescribeTagsRequest 
  { "DryRun" :: Maybe (Boolean)
  , "Filters" :: Maybe (FilterList)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeTagsRequest :: Newtype DescribeTagsRequest _
derive instance repGenericDescribeTagsRequest :: Generic DescribeTagsRequest _
instance showDescribeTagsRequest :: Show DescribeTagsRequest where show = genericShow
instance decodeDescribeTagsRequest :: Decode DescribeTagsRequest where decode = genericDecode options
instance encodeDescribeTagsRequest :: Encode DescribeTagsRequest where encode = genericEncode options

-- | Constructs DescribeTagsRequest from required parameters
newDescribeTagsRequest :: DescribeTagsRequest
newDescribeTagsRequest  = DescribeTagsRequest { "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing }

-- | Constructs DescribeTagsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeTagsRequest' :: ( { "DryRun" :: Maybe (Boolean) , "Filters" :: Maybe (FilterList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } -> {"DryRun" :: Maybe (Boolean) , "Filters" :: Maybe (FilterList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } ) -> DescribeTagsRequest
newDescribeTagsRequest'  customize = (DescribeTagsRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing }



-- | <p>Contains the output of DescribeTags.</p>
newtype DescribeTagsResult = DescribeTagsResult 
  { "NextToken" :: Maybe (String)
  , "Tags" :: Maybe (TagDescriptionList)
  }
derive instance newtypeDescribeTagsResult :: Newtype DescribeTagsResult _
derive instance repGenericDescribeTagsResult :: Generic DescribeTagsResult _
instance showDescribeTagsResult :: Show DescribeTagsResult where show = genericShow
instance decodeDescribeTagsResult :: Decode DescribeTagsResult where decode = genericDecode options
instance encodeDescribeTagsResult :: Encode DescribeTagsResult where encode = genericEncode options

-- | Constructs DescribeTagsResult from required parameters
newDescribeTagsResult :: DescribeTagsResult
newDescribeTagsResult  = DescribeTagsResult { "NextToken": Nothing, "Tags": Nothing }

-- | Constructs DescribeTagsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeTagsResult' :: ( { "NextToken" :: Maybe (String) , "Tags" :: Maybe (TagDescriptionList) } -> {"NextToken" :: Maybe (String) , "Tags" :: Maybe (TagDescriptionList) } ) -> DescribeTagsResult
newDescribeTagsResult'  customize = (DescribeTagsResult <<< customize) { "NextToken": Nothing, "Tags": Nothing }



-- | <p>Contains the parameters for DescribeVolumeAttribute.</p>
newtype DescribeVolumeAttributeRequest = DescribeVolumeAttributeRequest 
  { "Attribute" :: Maybe (VolumeAttributeName)
  , "VolumeId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDescribeVolumeAttributeRequest :: Newtype DescribeVolumeAttributeRequest _
derive instance repGenericDescribeVolumeAttributeRequest :: Generic DescribeVolumeAttributeRequest _
instance showDescribeVolumeAttributeRequest :: Show DescribeVolumeAttributeRequest where show = genericShow
instance decodeDescribeVolumeAttributeRequest :: Decode DescribeVolumeAttributeRequest where decode = genericDecode options
instance encodeDescribeVolumeAttributeRequest :: Encode DescribeVolumeAttributeRequest where encode = genericEncode options

-- | Constructs DescribeVolumeAttributeRequest from required parameters
newDescribeVolumeAttributeRequest :: String -> DescribeVolumeAttributeRequest
newDescribeVolumeAttributeRequest _VolumeId = DescribeVolumeAttributeRequest { "VolumeId": _VolumeId, "Attribute": Nothing, "DryRun": Nothing }

-- | Constructs DescribeVolumeAttributeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVolumeAttributeRequest' :: String -> ( { "Attribute" :: Maybe (VolumeAttributeName) , "VolumeId" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"Attribute" :: Maybe (VolumeAttributeName) , "VolumeId" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> DescribeVolumeAttributeRequest
newDescribeVolumeAttributeRequest' _VolumeId customize = (DescribeVolumeAttributeRequest <<< customize) { "VolumeId": _VolumeId, "Attribute": Nothing, "DryRun": Nothing }



-- | <p>Contains the output of DescribeVolumeAttribute.</p>
newtype DescribeVolumeAttributeResult = DescribeVolumeAttributeResult 
  { "AutoEnableIO" :: Maybe (AttributeBooleanValue)
  , "ProductCodes" :: Maybe (ProductCodeList)
  , "VolumeId" :: Maybe (String)
  }
derive instance newtypeDescribeVolumeAttributeResult :: Newtype DescribeVolumeAttributeResult _
derive instance repGenericDescribeVolumeAttributeResult :: Generic DescribeVolumeAttributeResult _
instance showDescribeVolumeAttributeResult :: Show DescribeVolumeAttributeResult where show = genericShow
instance decodeDescribeVolumeAttributeResult :: Decode DescribeVolumeAttributeResult where decode = genericDecode options
instance encodeDescribeVolumeAttributeResult :: Encode DescribeVolumeAttributeResult where encode = genericEncode options

-- | Constructs DescribeVolumeAttributeResult from required parameters
newDescribeVolumeAttributeResult :: DescribeVolumeAttributeResult
newDescribeVolumeAttributeResult  = DescribeVolumeAttributeResult { "AutoEnableIO": Nothing, "ProductCodes": Nothing, "VolumeId": Nothing }

-- | Constructs DescribeVolumeAttributeResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVolumeAttributeResult' :: ( { "AutoEnableIO" :: Maybe (AttributeBooleanValue) , "ProductCodes" :: Maybe (ProductCodeList) , "VolumeId" :: Maybe (String) } -> {"AutoEnableIO" :: Maybe (AttributeBooleanValue) , "ProductCodes" :: Maybe (ProductCodeList) , "VolumeId" :: Maybe (String) } ) -> DescribeVolumeAttributeResult
newDescribeVolumeAttributeResult'  customize = (DescribeVolumeAttributeResult <<< customize) { "AutoEnableIO": Nothing, "ProductCodes": Nothing, "VolumeId": Nothing }



-- | <p>Contains the parameters for DescribeVolumeStatus.</p>
newtype DescribeVolumeStatusRequest = DescribeVolumeStatusRequest 
  { "Filters" :: Maybe (FilterList)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  , "VolumeIds" :: Maybe (VolumeIdStringList)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDescribeVolumeStatusRequest :: Newtype DescribeVolumeStatusRequest _
derive instance repGenericDescribeVolumeStatusRequest :: Generic DescribeVolumeStatusRequest _
instance showDescribeVolumeStatusRequest :: Show DescribeVolumeStatusRequest where show = genericShow
instance decodeDescribeVolumeStatusRequest :: Decode DescribeVolumeStatusRequest where decode = genericDecode options
instance encodeDescribeVolumeStatusRequest :: Encode DescribeVolumeStatusRequest where encode = genericEncode options

-- | Constructs DescribeVolumeStatusRequest from required parameters
newDescribeVolumeStatusRequest :: DescribeVolumeStatusRequest
newDescribeVolumeStatusRequest  = DescribeVolumeStatusRequest { "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "VolumeIds": Nothing }

-- | Constructs DescribeVolumeStatusRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVolumeStatusRequest' :: ( { "Filters" :: Maybe (FilterList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) , "VolumeIds" :: Maybe (VolumeIdStringList) , "DryRun" :: Maybe (Boolean) } -> {"Filters" :: Maybe (FilterList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) , "VolumeIds" :: Maybe (VolumeIdStringList) , "DryRun" :: Maybe (Boolean) } ) -> DescribeVolumeStatusRequest
newDescribeVolumeStatusRequest'  customize = (DescribeVolumeStatusRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "VolumeIds": Nothing }



-- | <p>Contains the output of DescribeVolumeStatus.</p>
newtype DescribeVolumeStatusResult = DescribeVolumeStatusResult 
  { "NextToken" :: Maybe (String)
  , "VolumeStatuses" :: Maybe (VolumeStatusList)
  }
derive instance newtypeDescribeVolumeStatusResult :: Newtype DescribeVolumeStatusResult _
derive instance repGenericDescribeVolumeStatusResult :: Generic DescribeVolumeStatusResult _
instance showDescribeVolumeStatusResult :: Show DescribeVolumeStatusResult where show = genericShow
instance decodeDescribeVolumeStatusResult :: Decode DescribeVolumeStatusResult where decode = genericDecode options
instance encodeDescribeVolumeStatusResult :: Encode DescribeVolumeStatusResult where encode = genericEncode options

-- | Constructs DescribeVolumeStatusResult from required parameters
newDescribeVolumeStatusResult :: DescribeVolumeStatusResult
newDescribeVolumeStatusResult  = DescribeVolumeStatusResult { "NextToken": Nothing, "VolumeStatuses": Nothing }

-- | Constructs DescribeVolumeStatusResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVolumeStatusResult' :: ( { "NextToken" :: Maybe (String) , "VolumeStatuses" :: Maybe (VolumeStatusList) } -> {"NextToken" :: Maybe (String) , "VolumeStatuses" :: Maybe (VolumeStatusList) } ) -> DescribeVolumeStatusResult
newDescribeVolumeStatusResult'  customize = (DescribeVolumeStatusResult <<< customize) { "NextToken": Nothing, "VolumeStatuses": Nothing }



newtype DescribeVolumesModificationsRequest = DescribeVolumesModificationsRequest 
  { "DryRun" :: Maybe (Boolean)
  , "VolumeIds" :: Maybe (VolumeIdStringList)
  , "Filters" :: Maybe (FilterList)
  , "NextToken" :: Maybe (String)
  , "MaxResults" :: Maybe (Int)
  }
derive instance newtypeDescribeVolumesModificationsRequest :: Newtype DescribeVolumesModificationsRequest _
derive instance repGenericDescribeVolumesModificationsRequest :: Generic DescribeVolumesModificationsRequest _
instance showDescribeVolumesModificationsRequest :: Show DescribeVolumesModificationsRequest where show = genericShow
instance decodeDescribeVolumesModificationsRequest :: Decode DescribeVolumesModificationsRequest where decode = genericDecode options
instance encodeDescribeVolumesModificationsRequest :: Encode DescribeVolumesModificationsRequest where encode = genericEncode options

-- | Constructs DescribeVolumesModificationsRequest from required parameters
newDescribeVolumesModificationsRequest :: DescribeVolumesModificationsRequest
newDescribeVolumesModificationsRequest  = DescribeVolumesModificationsRequest { "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "VolumeIds": Nothing }

-- | Constructs DescribeVolumesModificationsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVolumesModificationsRequest' :: ( { "DryRun" :: Maybe (Boolean) , "VolumeIds" :: Maybe (VolumeIdStringList) , "Filters" :: Maybe (FilterList) , "NextToken" :: Maybe (String) , "MaxResults" :: Maybe (Int) } -> {"DryRun" :: Maybe (Boolean) , "VolumeIds" :: Maybe (VolumeIdStringList) , "Filters" :: Maybe (FilterList) , "NextToken" :: Maybe (String) , "MaxResults" :: Maybe (Int) } ) -> DescribeVolumesModificationsRequest
newDescribeVolumesModificationsRequest'  customize = (DescribeVolumesModificationsRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "VolumeIds": Nothing }



newtype DescribeVolumesModificationsResult = DescribeVolumesModificationsResult 
  { "VolumesModifications" :: Maybe (VolumeModificationList)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeVolumesModificationsResult :: Newtype DescribeVolumesModificationsResult _
derive instance repGenericDescribeVolumesModificationsResult :: Generic DescribeVolumesModificationsResult _
instance showDescribeVolumesModificationsResult :: Show DescribeVolumesModificationsResult where show = genericShow
instance decodeDescribeVolumesModificationsResult :: Decode DescribeVolumesModificationsResult where decode = genericDecode options
instance encodeDescribeVolumesModificationsResult :: Encode DescribeVolumesModificationsResult where encode = genericEncode options

-- | Constructs DescribeVolumesModificationsResult from required parameters
newDescribeVolumesModificationsResult :: DescribeVolumesModificationsResult
newDescribeVolumesModificationsResult  = DescribeVolumesModificationsResult { "NextToken": Nothing, "VolumesModifications": Nothing }

-- | Constructs DescribeVolumesModificationsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVolumesModificationsResult' :: ( { "VolumesModifications" :: Maybe (VolumeModificationList) , "NextToken" :: Maybe (String) } -> {"VolumesModifications" :: Maybe (VolumeModificationList) , "NextToken" :: Maybe (String) } ) -> DescribeVolumesModificationsResult
newDescribeVolumesModificationsResult'  customize = (DescribeVolumesModificationsResult <<< customize) { "NextToken": Nothing, "VolumesModifications": Nothing }



-- | <p>Contains the parameters for DescribeVolumes.</p>
newtype DescribeVolumesRequest = DescribeVolumesRequest 
  { "Filters" :: Maybe (FilterList)
  , "VolumeIds" :: Maybe (VolumeIdStringList)
  , "DryRun" :: Maybe (Boolean)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeVolumesRequest :: Newtype DescribeVolumesRequest _
derive instance repGenericDescribeVolumesRequest :: Generic DescribeVolumesRequest _
instance showDescribeVolumesRequest :: Show DescribeVolumesRequest where show = genericShow
instance decodeDescribeVolumesRequest :: Decode DescribeVolumesRequest where decode = genericDecode options
instance encodeDescribeVolumesRequest :: Encode DescribeVolumesRequest where encode = genericEncode options

-- | Constructs DescribeVolumesRequest from required parameters
newDescribeVolumesRequest :: DescribeVolumesRequest
newDescribeVolumesRequest  = DescribeVolumesRequest { "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "VolumeIds": Nothing }

-- | Constructs DescribeVolumesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVolumesRequest' :: ( { "Filters" :: Maybe (FilterList) , "VolumeIds" :: Maybe (VolumeIdStringList) , "DryRun" :: Maybe (Boolean) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } -> {"Filters" :: Maybe (FilterList) , "VolumeIds" :: Maybe (VolumeIdStringList) , "DryRun" :: Maybe (Boolean) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } ) -> DescribeVolumesRequest
newDescribeVolumesRequest'  customize = (DescribeVolumesRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "VolumeIds": Nothing }



-- | <p>Contains the output of DescribeVolumes.</p>
newtype DescribeVolumesResult = DescribeVolumesResult 
  { "Volumes" :: Maybe (VolumeList)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeVolumesResult :: Newtype DescribeVolumesResult _
derive instance repGenericDescribeVolumesResult :: Generic DescribeVolumesResult _
instance showDescribeVolumesResult :: Show DescribeVolumesResult where show = genericShow
instance decodeDescribeVolumesResult :: Decode DescribeVolumesResult where decode = genericDecode options
instance encodeDescribeVolumesResult :: Encode DescribeVolumesResult where encode = genericEncode options

-- | Constructs DescribeVolumesResult from required parameters
newDescribeVolumesResult :: DescribeVolumesResult
newDescribeVolumesResult  = DescribeVolumesResult { "NextToken": Nothing, "Volumes": Nothing }

-- | Constructs DescribeVolumesResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVolumesResult' :: ( { "Volumes" :: Maybe (VolumeList) , "NextToken" :: Maybe (String) } -> {"Volumes" :: Maybe (VolumeList) , "NextToken" :: Maybe (String) } ) -> DescribeVolumesResult
newDescribeVolumesResult'  customize = (DescribeVolumesResult <<< customize) { "NextToken": Nothing, "Volumes": Nothing }



-- | <p>Contains the parameters for DescribeVpcAttribute.</p>
newtype DescribeVpcAttributeRequest = DescribeVpcAttributeRequest 
  { "Attribute" :: (VpcAttributeName)
  , "VpcId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDescribeVpcAttributeRequest :: Newtype DescribeVpcAttributeRequest _
derive instance repGenericDescribeVpcAttributeRequest :: Generic DescribeVpcAttributeRequest _
instance showDescribeVpcAttributeRequest :: Show DescribeVpcAttributeRequest where show = genericShow
instance decodeDescribeVpcAttributeRequest :: Decode DescribeVpcAttributeRequest where decode = genericDecode options
instance encodeDescribeVpcAttributeRequest :: Encode DescribeVpcAttributeRequest where encode = genericEncode options

-- | Constructs DescribeVpcAttributeRequest from required parameters
newDescribeVpcAttributeRequest :: VpcAttributeName -> String -> DescribeVpcAttributeRequest
newDescribeVpcAttributeRequest _Attribute _VpcId = DescribeVpcAttributeRequest { "Attribute": _Attribute, "VpcId": _VpcId, "DryRun": Nothing }

-- | Constructs DescribeVpcAttributeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVpcAttributeRequest' :: VpcAttributeName -> String -> ( { "Attribute" :: (VpcAttributeName) , "VpcId" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"Attribute" :: (VpcAttributeName) , "VpcId" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> DescribeVpcAttributeRequest
newDescribeVpcAttributeRequest' _Attribute _VpcId customize = (DescribeVpcAttributeRequest <<< customize) { "Attribute": _Attribute, "VpcId": _VpcId, "DryRun": Nothing }



-- | <p>Contains the output of DescribeVpcAttribute.</p>
newtype DescribeVpcAttributeResult = DescribeVpcAttributeResult 
  { "VpcId" :: Maybe (String)
  , "EnableDnsHostnames" :: Maybe (AttributeBooleanValue)
  , "EnableDnsSupport" :: Maybe (AttributeBooleanValue)
  }
derive instance newtypeDescribeVpcAttributeResult :: Newtype DescribeVpcAttributeResult _
derive instance repGenericDescribeVpcAttributeResult :: Generic DescribeVpcAttributeResult _
instance showDescribeVpcAttributeResult :: Show DescribeVpcAttributeResult where show = genericShow
instance decodeDescribeVpcAttributeResult :: Decode DescribeVpcAttributeResult where decode = genericDecode options
instance encodeDescribeVpcAttributeResult :: Encode DescribeVpcAttributeResult where encode = genericEncode options

-- | Constructs DescribeVpcAttributeResult from required parameters
newDescribeVpcAttributeResult :: DescribeVpcAttributeResult
newDescribeVpcAttributeResult  = DescribeVpcAttributeResult { "EnableDnsHostnames": Nothing, "EnableDnsSupport": Nothing, "VpcId": Nothing }

-- | Constructs DescribeVpcAttributeResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVpcAttributeResult' :: ( { "VpcId" :: Maybe (String) , "EnableDnsHostnames" :: Maybe (AttributeBooleanValue) , "EnableDnsSupport" :: Maybe (AttributeBooleanValue) } -> {"VpcId" :: Maybe (String) , "EnableDnsHostnames" :: Maybe (AttributeBooleanValue) , "EnableDnsSupport" :: Maybe (AttributeBooleanValue) } ) -> DescribeVpcAttributeResult
newDescribeVpcAttributeResult'  customize = (DescribeVpcAttributeResult <<< customize) { "EnableDnsHostnames": Nothing, "EnableDnsSupport": Nothing, "VpcId": Nothing }



-- | <p>Contains the parameters for DescribeVpcClassicLinkDnsSupport.</p>
newtype DescribeVpcClassicLinkDnsSupportRequest = DescribeVpcClassicLinkDnsSupportRequest 
  { "MaxResults" :: Maybe (MaxResults)
  , "NextToken" :: Maybe (NextToken)
  , "VpcIds" :: Maybe (VpcClassicLinkIdList)
  }
derive instance newtypeDescribeVpcClassicLinkDnsSupportRequest :: Newtype DescribeVpcClassicLinkDnsSupportRequest _
derive instance repGenericDescribeVpcClassicLinkDnsSupportRequest :: Generic DescribeVpcClassicLinkDnsSupportRequest _
instance showDescribeVpcClassicLinkDnsSupportRequest :: Show DescribeVpcClassicLinkDnsSupportRequest where show = genericShow
instance decodeDescribeVpcClassicLinkDnsSupportRequest :: Decode DescribeVpcClassicLinkDnsSupportRequest where decode = genericDecode options
instance encodeDescribeVpcClassicLinkDnsSupportRequest :: Encode DescribeVpcClassicLinkDnsSupportRequest where encode = genericEncode options

-- | Constructs DescribeVpcClassicLinkDnsSupportRequest from required parameters
newDescribeVpcClassicLinkDnsSupportRequest :: DescribeVpcClassicLinkDnsSupportRequest
newDescribeVpcClassicLinkDnsSupportRequest  = DescribeVpcClassicLinkDnsSupportRequest { "MaxResults": Nothing, "NextToken": Nothing, "VpcIds": Nothing }

-- | Constructs DescribeVpcClassicLinkDnsSupportRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVpcClassicLinkDnsSupportRequest' :: ( { "MaxResults" :: Maybe (MaxResults) , "NextToken" :: Maybe (NextToken) , "VpcIds" :: Maybe (VpcClassicLinkIdList) } -> {"MaxResults" :: Maybe (MaxResults) , "NextToken" :: Maybe (NextToken) , "VpcIds" :: Maybe (VpcClassicLinkIdList) } ) -> DescribeVpcClassicLinkDnsSupportRequest
newDescribeVpcClassicLinkDnsSupportRequest'  customize = (DescribeVpcClassicLinkDnsSupportRequest <<< customize) { "MaxResults": Nothing, "NextToken": Nothing, "VpcIds": Nothing }



-- | <p>Contains the output of DescribeVpcClassicLinkDnsSupport.</p>
newtype DescribeVpcClassicLinkDnsSupportResult = DescribeVpcClassicLinkDnsSupportResult 
  { "NextToken" :: Maybe (NextToken)
  , "Vpcs" :: Maybe (ClassicLinkDnsSupportList)
  }
derive instance newtypeDescribeVpcClassicLinkDnsSupportResult :: Newtype DescribeVpcClassicLinkDnsSupportResult _
derive instance repGenericDescribeVpcClassicLinkDnsSupportResult :: Generic DescribeVpcClassicLinkDnsSupportResult _
instance showDescribeVpcClassicLinkDnsSupportResult :: Show DescribeVpcClassicLinkDnsSupportResult where show = genericShow
instance decodeDescribeVpcClassicLinkDnsSupportResult :: Decode DescribeVpcClassicLinkDnsSupportResult where decode = genericDecode options
instance encodeDescribeVpcClassicLinkDnsSupportResult :: Encode DescribeVpcClassicLinkDnsSupportResult where encode = genericEncode options

-- | Constructs DescribeVpcClassicLinkDnsSupportResult from required parameters
newDescribeVpcClassicLinkDnsSupportResult :: DescribeVpcClassicLinkDnsSupportResult
newDescribeVpcClassicLinkDnsSupportResult  = DescribeVpcClassicLinkDnsSupportResult { "NextToken": Nothing, "Vpcs": Nothing }

-- | Constructs DescribeVpcClassicLinkDnsSupportResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVpcClassicLinkDnsSupportResult' :: ( { "NextToken" :: Maybe (NextToken) , "Vpcs" :: Maybe (ClassicLinkDnsSupportList) } -> {"NextToken" :: Maybe (NextToken) , "Vpcs" :: Maybe (ClassicLinkDnsSupportList) } ) -> DescribeVpcClassicLinkDnsSupportResult
newDescribeVpcClassicLinkDnsSupportResult'  customize = (DescribeVpcClassicLinkDnsSupportResult <<< customize) { "NextToken": Nothing, "Vpcs": Nothing }



-- | <p>Contains the parameters for DescribeVpcClassicLink.</p>
newtype DescribeVpcClassicLinkRequest = DescribeVpcClassicLinkRequest 
  { "Filters" :: Maybe (FilterList)
  , "DryRun" :: Maybe (Boolean)
  , "VpcIds" :: Maybe (VpcClassicLinkIdList)
  }
derive instance newtypeDescribeVpcClassicLinkRequest :: Newtype DescribeVpcClassicLinkRequest _
derive instance repGenericDescribeVpcClassicLinkRequest :: Generic DescribeVpcClassicLinkRequest _
instance showDescribeVpcClassicLinkRequest :: Show DescribeVpcClassicLinkRequest where show = genericShow
instance decodeDescribeVpcClassicLinkRequest :: Decode DescribeVpcClassicLinkRequest where decode = genericDecode options
instance encodeDescribeVpcClassicLinkRequest :: Encode DescribeVpcClassicLinkRequest where encode = genericEncode options

-- | Constructs DescribeVpcClassicLinkRequest from required parameters
newDescribeVpcClassicLinkRequest :: DescribeVpcClassicLinkRequest
newDescribeVpcClassicLinkRequest  = DescribeVpcClassicLinkRequest { "DryRun": Nothing, "Filters": Nothing, "VpcIds": Nothing }

-- | Constructs DescribeVpcClassicLinkRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVpcClassicLinkRequest' :: ( { "Filters" :: Maybe (FilterList) , "DryRun" :: Maybe (Boolean) , "VpcIds" :: Maybe (VpcClassicLinkIdList) } -> {"Filters" :: Maybe (FilterList) , "DryRun" :: Maybe (Boolean) , "VpcIds" :: Maybe (VpcClassicLinkIdList) } ) -> DescribeVpcClassicLinkRequest
newDescribeVpcClassicLinkRequest'  customize = (DescribeVpcClassicLinkRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "VpcIds": Nothing }



-- | <p>Contains the output of DescribeVpcClassicLink.</p>
newtype DescribeVpcClassicLinkResult = DescribeVpcClassicLinkResult 
  { "Vpcs" :: Maybe (VpcClassicLinkList)
  }
derive instance newtypeDescribeVpcClassicLinkResult :: Newtype DescribeVpcClassicLinkResult _
derive instance repGenericDescribeVpcClassicLinkResult :: Generic DescribeVpcClassicLinkResult _
instance showDescribeVpcClassicLinkResult :: Show DescribeVpcClassicLinkResult where show = genericShow
instance decodeDescribeVpcClassicLinkResult :: Decode DescribeVpcClassicLinkResult where decode = genericDecode options
instance encodeDescribeVpcClassicLinkResult :: Encode DescribeVpcClassicLinkResult where encode = genericEncode options

-- | Constructs DescribeVpcClassicLinkResult from required parameters
newDescribeVpcClassicLinkResult :: DescribeVpcClassicLinkResult
newDescribeVpcClassicLinkResult  = DescribeVpcClassicLinkResult { "Vpcs": Nothing }

-- | Constructs DescribeVpcClassicLinkResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVpcClassicLinkResult' :: ( { "Vpcs" :: Maybe (VpcClassicLinkList) } -> {"Vpcs" :: Maybe (VpcClassicLinkList) } ) -> DescribeVpcClassicLinkResult
newDescribeVpcClassicLinkResult'  customize = (DescribeVpcClassicLinkResult <<< customize) { "Vpcs": Nothing }



newtype DescribeVpcEndpointConnectionNotificationsRequest = DescribeVpcEndpointConnectionNotificationsRequest 
  { "DryRun" :: Maybe (Boolean)
  , "ConnectionNotificationId" :: Maybe (String)
  , "Filters" :: Maybe (FilterList)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeVpcEndpointConnectionNotificationsRequest :: Newtype DescribeVpcEndpointConnectionNotificationsRequest _
derive instance repGenericDescribeVpcEndpointConnectionNotificationsRequest :: Generic DescribeVpcEndpointConnectionNotificationsRequest _
instance showDescribeVpcEndpointConnectionNotificationsRequest :: Show DescribeVpcEndpointConnectionNotificationsRequest where show = genericShow
instance decodeDescribeVpcEndpointConnectionNotificationsRequest :: Decode DescribeVpcEndpointConnectionNotificationsRequest where decode = genericDecode options
instance encodeDescribeVpcEndpointConnectionNotificationsRequest :: Encode DescribeVpcEndpointConnectionNotificationsRequest where encode = genericEncode options

-- | Constructs DescribeVpcEndpointConnectionNotificationsRequest from required parameters
newDescribeVpcEndpointConnectionNotificationsRequest :: DescribeVpcEndpointConnectionNotificationsRequest
newDescribeVpcEndpointConnectionNotificationsRequest  = DescribeVpcEndpointConnectionNotificationsRequest { "ConnectionNotificationId": Nothing, "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing }

-- | Constructs DescribeVpcEndpointConnectionNotificationsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVpcEndpointConnectionNotificationsRequest' :: ( { "DryRun" :: Maybe (Boolean) , "ConnectionNotificationId" :: Maybe (String) , "Filters" :: Maybe (FilterList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } -> {"DryRun" :: Maybe (Boolean) , "ConnectionNotificationId" :: Maybe (String) , "Filters" :: Maybe (FilterList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } ) -> DescribeVpcEndpointConnectionNotificationsRequest
newDescribeVpcEndpointConnectionNotificationsRequest'  customize = (DescribeVpcEndpointConnectionNotificationsRequest <<< customize) { "ConnectionNotificationId": Nothing, "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing }



newtype DescribeVpcEndpointConnectionNotificationsResult = DescribeVpcEndpointConnectionNotificationsResult 
  { "ConnectionNotificationSet" :: Maybe (ConnectionNotificationSet)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeVpcEndpointConnectionNotificationsResult :: Newtype DescribeVpcEndpointConnectionNotificationsResult _
derive instance repGenericDescribeVpcEndpointConnectionNotificationsResult :: Generic DescribeVpcEndpointConnectionNotificationsResult _
instance showDescribeVpcEndpointConnectionNotificationsResult :: Show DescribeVpcEndpointConnectionNotificationsResult where show = genericShow
instance decodeDescribeVpcEndpointConnectionNotificationsResult :: Decode DescribeVpcEndpointConnectionNotificationsResult where decode = genericDecode options
instance encodeDescribeVpcEndpointConnectionNotificationsResult :: Encode DescribeVpcEndpointConnectionNotificationsResult where encode = genericEncode options

-- | Constructs DescribeVpcEndpointConnectionNotificationsResult from required parameters
newDescribeVpcEndpointConnectionNotificationsResult :: DescribeVpcEndpointConnectionNotificationsResult
newDescribeVpcEndpointConnectionNotificationsResult  = DescribeVpcEndpointConnectionNotificationsResult { "ConnectionNotificationSet": Nothing, "NextToken": Nothing }

-- | Constructs DescribeVpcEndpointConnectionNotificationsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVpcEndpointConnectionNotificationsResult' :: ( { "ConnectionNotificationSet" :: Maybe (ConnectionNotificationSet) , "NextToken" :: Maybe (String) } -> {"ConnectionNotificationSet" :: Maybe (ConnectionNotificationSet) , "NextToken" :: Maybe (String) } ) -> DescribeVpcEndpointConnectionNotificationsResult
newDescribeVpcEndpointConnectionNotificationsResult'  customize = (DescribeVpcEndpointConnectionNotificationsResult <<< customize) { "ConnectionNotificationSet": Nothing, "NextToken": Nothing }



newtype DescribeVpcEndpointConnectionsRequest = DescribeVpcEndpointConnectionsRequest 
  { "DryRun" :: Maybe (Boolean)
  , "Filters" :: Maybe (FilterList)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeVpcEndpointConnectionsRequest :: Newtype DescribeVpcEndpointConnectionsRequest _
derive instance repGenericDescribeVpcEndpointConnectionsRequest :: Generic DescribeVpcEndpointConnectionsRequest _
instance showDescribeVpcEndpointConnectionsRequest :: Show DescribeVpcEndpointConnectionsRequest where show = genericShow
instance decodeDescribeVpcEndpointConnectionsRequest :: Decode DescribeVpcEndpointConnectionsRequest where decode = genericDecode options
instance encodeDescribeVpcEndpointConnectionsRequest :: Encode DescribeVpcEndpointConnectionsRequest where encode = genericEncode options

-- | Constructs DescribeVpcEndpointConnectionsRequest from required parameters
newDescribeVpcEndpointConnectionsRequest :: DescribeVpcEndpointConnectionsRequest
newDescribeVpcEndpointConnectionsRequest  = DescribeVpcEndpointConnectionsRequest { "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing }

-- | Constructs DescribeVpcEndpointConnectionsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVpcEndpointConnectionsRequest' :: ( { "DryRun" :: Maybe (Boolean) , "Filters" :: Maybe (FilterList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } -> {"DryRun" :: Maybe (Boolean) , "Filters" :: Maybe (FilterList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } ) -> DescribeVpcEndpointConnectionsRequest
newDescribeVpcEndpointConnectionsRequest'  customize = (DescribeVpcEndpointConnectionsRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing }



newtype DescribeVpcEndpointConnectionsResult = DescribeVpcEndpointConnectionsResult 
  { "VpcEndpointConnections" :: Maybe (VpcEndpointConnectionSet)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeVpcEndpointConnectionsResult :: Newtype DescribeVpcEndpointConnectionsResult _
derive instance repGenericDescribeVpcEndpointConnectionsResult :: Generic DescribeVpcEndpointConnectionsResult _
instance showDescribeVpcEndpointConnectionsResult :: Show DescribeVpcEndpointConnectionsResult where show = genericShow
instance decodeDescribeVpcEndpointConnectionsResult :: Decode DescribeVpcEndpointConnectionsResult where decode = genericDecode options
instance encodeDescribeVpcEndpointConnectionsResult :: Encode DescribeVpcEndpointConnectionsResult where encode = genericEncode options

-- | Constructs DescribeVpcEndpointConnectionsResult from required parameters
newDescribeVpcEndpointConnectionsResult :: DescribeVpcEndpointConnectionsResult
newDescribeVpcEndpointConnectionsResult  = DescribeVpcEndpointConnectionsResult { "NextToken": Nothing, "VpcEndpointConnections": Nothing }

-- | Constructs DescribeVpcEndpointConnectionsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVpcEndpointConnectionsResult' :: ( { "VpcEndpointConnections" :: Maybe (VpcEndpointConnectionSet) , "NextToken" :: Maybe (String) } -> {"VpcEndpointConnections" :: Maybe (VpcEndpointConnectionSet) , "NextToken" :: Maybe (String) } ) -> DescribeVpcEndpointConnectionsResult
newDescribeVpcEndpointConnectionsResult'  customize = (DescribeVpcEndpointConnectionsResult <<< customize) { "NextToken": Nothing, "VpcEndpointConnections": Nothing }



newtype DescribeVpcEndpointServiceConfigurationsRequest = DescribeVpcEndpointServiceConfigurationsRequest 
  { "DryRun" :: Maybe (Boolean)
  , "ServiceIds" :: Maybe (ValueStringList)
  , "Filters" :: Maybe (FilterList)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeVpcEndpointServiceConfigurationsRequest :: Newtype DescribeVpcEndpointServiceConfigurationsRequest _
derive instance repGenericDescribeVpcEndpointServiceConfigurationsRequest :: Generic DescribeVpcEndpointServiceConfigurationsRequest _
instance showDescribeVpcEndpointServiceConfigurationsRequest :: Show DescribeVpcEndpointServiceConfigurationsRequest where show = genericShow
instance decodeDescribeVpcEndpointServiceConfigurationsRequest :: Decode DescribeVpcEndpointServiceConfigurationsRequest where decode = genericDecode options
instance encodeDescribeVpcEndpointServiceConfigurationsRequest :: Encode DescribeVpcEndpointServiceConfigurationsRequest where encode = genericEncode options

-- | Constructs DescribeVpcEndpointServiceConfigurationsRequest from required parameters
newDescribeVpcEndpointServiceConfigurationsRequest :: DescribeVpcEndpointServiceConfigurationsRequest
newDescribeVpcEndpointServiceConfigurationsRequest  = DescribeVpcEndpointServiceConfigurationsRequest { "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "ServiceIds": Nothing }

-- | Constructs DescribeVpcEndpointServiceConfigurationsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVpcEndpointServiceConfigurationsRequest' :: ( { "DryRun" :: Maybe (Boolean) , "ServiceIds" :: Maybe (ValueStringList) , "Filters" :: Maybe (FilterList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } -> {"DryRun" :: Maybe (Boolean) , "ServiceIds" :: Maybe (ValueStringList) , "Filters" :: Maybe (FilterList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } ) -> DescribeVpcEndpointServiceConfigurationsRequest
newDescribeVpcEndpointServiceConfigurationsRequest'  customize = (DescribeVpcEndpointServiceConfigurationsRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "ServiceIds": Nothing }



newtype DescribeVpcEndpointServiceConfigurationsResult = DescribeVpcEndpointServiceConfigurationsResult 
  { "ServiceConfigurations" :: Maybe (ServiceConfigurationSet)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeVpcEndpointServiceConfigurationsResult :: Newtype DescribeVpcEndpointServiceConfigurationsResult _
derive instance repGenericDescribeVpcEndpointServiceConfigurationsResult :: Generic DescribeVpcEndpointServiceConfigurationsResult _
instance showDescribeVpcEndpointServiceConfigurationsResult :: Show DescribeVpcEndpointServiceConfigurationsResult where show = genericShow
instance decodeDescribeVpcEndpointServiceConfigurationsResult :: Decode DescribeVpcEndpointServiceConfigurationsResult where decode = genericDecode options
instance encodeDescribeVpcEndpointServiceConfigurationsResult :: Encode DescribeVpcEndpointServiceConfigurationsResult where encode = genericEncode options

-- | Constructs DescribeVpcEndpointServiceConfigurationsResult from required parameters
newDescribeVpcEndpointServiceConfigurationsResult :: DescribeVpcEndpointServiceConfigurationsResult
newDescribeVpcEndpointServiceConfigurationsResult  = DescribeVpcEndpointServiceConfigurationsResult { "NextToken": Nothing, "ServiceConfigurations": Nothing }

-- | Constructs DescribeVpcEndpointServiceConfigurationsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVpcEndpointServiceConfigurationsResult' :: ( { "ServiceConfigurations" :: Maybe (ServiceConfigurationSet) , "NextToken" :: Maybe (String) } -> {"ServiceConfigurations" :: Maybe (ServiceConfigurationSet) , "NextToken" :: Maybe (String) } ) -> DescribeVpcEndpointServiceConfigurationsResult
newDescribeVpcEndpointServiceConfigurationsResult'  customize = (DescribeVpcEndpointServiceConfigurationsResult <<< customize) { "NextToken": Nothing, "ServiceConfigurations": Nothing }



newtype DescribeVpcEndpointServicePermissionsRequest = DescribeVpcEndpointServicePermissionsRequest 
  { "DryRun" :: Maybe (Boolean)
  , "ServiceId" :: (String)
  , "Filters" :: Maybe (FilterList)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeVpcEndpointServicePermissionsRequest :: Newtype DescribeVpcEndpointServicePermissionsRequest _
derive instance repGenericDescribeVpcEndpointServicePermissionsRequest :: Generic DescribeVpcEndpointServicePermissionsRequest _
instance showDescribeVpcEndpointServicePermissionsRequest :: Show DescribeVpcEndpointServicePermissionsRequest where show = genericShow
instance decodeDescribeVpcEndpointServicePermissionsRequest :: Decode DescribeVpcEndpointServicePermissionsRequest where decode = genericDecode options
instance encodeDescribeVpcEndpointServicePermissionsRequest :: Encode DescribeVpcEndpointServicePermissionsRequest where encode = genericEncode options

-- | Constructs DescribeVpcEndpointServicePermissionsRequest from required parameters
newDescribeVpcEndpointServicePermissionsRequest :: String -> DescribeVpcEndpointServicePermissionsRequest
newDescribeVpcEndpointServicePermissionsRequest _ServiceId = DescribeVpcEndpointServicePermissionsRequest { "ServiceId": _ServiceId, "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing }

-- | Constructs DescribeVpcEndpointServicePermissionsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVpcEndpointServicePermissionsRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "ServiceId" :: (String) , "Filters" :: Maybe (FilterList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } -> {"DryRun" :: Maybe (Boolean) , "ServiceId" :: (String) , "Filters" :: Maybe (FilterList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } ) -> DescribeVpcEndpointServicePermissionsRequest
newDescribeVpcEndpointServicePermissionsRequest' _ServiceId customize = (DescribeVpcEndpointServicePermissionsRequest <<< customize) { "ServiceId": _ServiceId, "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing }



newtype DescribeVpcEndpointServicePermissionsResult = DescribeVpcEndpointServicePermissionsResult 
  { "AllowedPrincipals" :: Maybe (AllowedPrincipalSet)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeVpcEndpointServicePermissionsResult :: Newtype DescribeVpcEndpointServicePermissionsResult _
derive instance repGenericDescribeVpcEndpointServicePermissionsResult :: Generic DescribeVpcEndpointServicePermissionsResult _
instance showDescribeVpcEndpointServicePermissionsResult :: Show DescribeVpcEndpointServicePermissionsResult where show = genericShow
instance decodeDescribeVpcEndpointServicePermissionsResult :: Decode DescribeVpcEndpointServicePermissionsResult where decode = genericDecode options
instance encodeDescribeVpcEndpointServicePermissionsResult :: Encode DescribeVpcEndpointServicePermissionsResult where encode = genericEncode options

-- | Constructs DescribeVpcEndpointServicePermissionsResult from required parameters
newDescribeVpcEndpointServicePermissionsResult :: DescribeVpcEndpointServicePermissionsResult
newDescribeVpcEndpointServicePermissionsResult  = DescribeVpcEndpointServicePermissionsResult { "AllowedPrincipals": Nothing, "NextToken": Nothing }

-- | Constructs DescribeVpcEndpointServicePermissionsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVpcEndpointServicePermissionsResult' :: ( { "AllowedPrincipals" :: Maybe (AllowedPrincipalSet) , "NextToken" :: Maybe (String) } -> {"AllowedPrincipals" :: Maybe (AllowedPrincipalSet) , "NextToken" :: Maybe (String) } ) -> DescribeVpcEndpointServicePermissionsResult
newDescribeVpcEndpointServicePermissionsResult'  customize = (DescribeVpcEndpointServicePermissionsResult <<< customize) { "AllowedPrincipals": Nothing, "NextToken": Nothing }



-- | <p>Contains the parameters for DescribeVpcEndpointServices.</p>
newtype DescribeVpcEndpointServicesRequest = DescribeVpcEndpointServicesRequest 
  { "DryRun" :: Maybe (Boolean)
  , "ServiceNames" :: Maybe (ValueStringList)
  , "Filters" :: Maybe (FilterList)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeVpcEndpointServicesRequest :: Newtype DescribeVpcEndpointServicesRequest _
derive instance repGenericDescribeVpcEndpointServicesRequest :: Generic DescribeVpcEndpointServicesRequest _
instance showDescribeVpcEndpointServicesRequest :: Show DescribeVpcEndpointServicesRequest where show = genericShow
instance decodeDescribeVpcEndpointServicesRequest :: Decode DescribeVpcEndpointServicesRequest where decode = genericDecode options
instance encodeDescribeVpcEndpointServicesRequest :: Encode DescribeVpcEndpointServicesRequest where encode = genericEncode options

-- | Constructs DescribeVpcEndpointServicesRequest from required parameters
newDescribeVpcEndpointServicesRequest :: DescribeVpcEndpointServicesRequest
newDescribeVpcEndpointServicesRequest  = DescribeVpcEndpointServicesRequest { "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "ServiceNames": Nothing }

-- | Constructs DescribeVpcEndpointServicesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVpcEndpointServicesRequest' :: ( { "DryRun" :: Maybe (Boolean) , "ServiceNames" :: Maybe (ValueStringList) , "Filters" :: Maybe (FilterList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } -> {"DryRun" :: Maybe (Boolean) , "ServiceNames" :: Maybe (ValueStringList) , "Filters" :: Maybe (FilterList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } ) -> DescribeVpcEndpointServicesRequest
newDescribeVpcEndpointServicesRequest'  customize = (DescribeVpcEndpointServicesRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "ServiceNames": Nothing }



-- | <p>Contains the output of DescribeVpcEndpointServices.</p>
newtype DescribeVpcEndpointServicesResult = DescribeVpcEndpointServicesResult 
  { "ServiceNames" :: Maybe (ValueStringList)
  , "ServiceDetails" :: Maybe (ServiceDetailSet)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeVpcEndpointServicesResult :: Newtype DescribeVpcEndpointServicesResult _
derive instance repGenericDescribeVpcEndpointServicesResult :: Generic DescribeVpcEndpointServicesResult _
instance showDescribeVpcEndpointServicesResult :: Show DescribeVpcEndpointServicesResult where show = genericShow
instance decodeDescribeVpcEndpointServicesResult :: Decode DescribeVpcEndpointServicesResult where decode = genericDecode options
instance encodeDescribeVpcEndpointServicesResult :: Encode DescribeVpcEndpointServicesResult where encode = genericEncode options

-- | Constructs DescribeVpcEndpointServicesResult from required parameters
newDescribeVpcEndpointServicesResult :: DescribeVpcEndpointServicesResult
newDescribeVpcEndpointServicesResult  = DescribeVpcEndpointServicesResult { "NextToken": Nothing, "ServiceDetails": Nothing, "ServiceNames": Nothing }

-- | Constructs DescribeVpcEndpointServicesResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVpcEndpointServicesResult' :: ( { "ServiceNames" :: Maybe (ValueStringList) , "ServiceDetails" :: Maybe (ServiceDetailSet) , "NextToken" :: Maybe (String) } -> {"ServiceNames" :: Maybe (ValueStringList) , "ServiceDetails" :: Maybe (ServiceDetailSet) , "NextToken" :: Maybe (String) } ) -> DescribeVpcEndpointServicesResult
newDescribeVpcEndpointServicesResult'  customize = (DescribeVpcEndpointServicesResult <<< customize) { "NextToken": Nothing, "ServiceDetails": Nothing, "ServiceNames": Nothing }



-- | <p>Contains the parameters for DescribeVpcEndpoints.</p>
newtype DescribeVpcEndpointsRequest = DescribeVpcEndpointsRequest 
  { "DryRun" :: Maybe (Boolean)
  , "VpcEndpointIds" :: Maybe (ValueStringList)
  , "Filters" :: Maybe (FilterList)
  , "MaxResults" :: Maybe (Int)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeVpcEndpointsRequest :: Newtype DescribeVpcEndpointsRequest _
derive instance repGenericDescribeVpcEndpointsRequest :: Generic DescribeVpcEndpointsRequest _
instance showDescribeVpcEndpointsRequest :: Show DescribeVpcEndpointsRequest where show = genericShow
instance decodeDescribeVpcEndpointsRequest :: Decode DescribeVpcEndpointsRequest where decode = genericDecode options
instance encodeDescribeVpcEndpointsRequest :: Encode DescribeVpcEndpointsRequest where encode = genericEncode options

-- | Constructs DescribeVpcEndpointsRequest from required parameters
newDescribeVpcEndpointsRequest :: DescribeVpcEndpointsRequest
newDescribeVpcEndpointsRequest  = DescribeVpcEndpointsRequest { "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "VpcEndpointIds": Nothing }

-- | Constructs DescribeVpcEndpointsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVpcEndpointsRequest' :: ( { "DryRun" :: Maybe (Boolean) , "VpcEndpointIds" :: Maybe (ValueStringList) , "Filters" :: Maybe (FilterList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } -> {"DryRun" :: Maybe (Boolean) , "VpcEndpointIds" :: Maybe (ValueStringList) , "Filters" :: Maybe (FilterList) , "MaxResults" :: Maybe (Int) , "NextToken" :: Maybe (String) } ) -> DescribeVpcEndpointsRequest
newDescribeVpcEndpointsRequest'  customize = (DescribeVpcEndpointsRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "MaxResults": Nothing, "NextToken": Nothing, "VpcEndpointIds": Nothing }



-- | <p>Contains the output of DescribeVpcEndpoints.</p>
newtype DescribeVpcEndpointsResult = DescribeVpcEndpointsResult 
  { "VpcEndpoints" :: Maybe (VpcEndpointSet)
  , "NextToken" :: Maybe (String)
  }
derive instance newtypeDescribeVpcEndpointsResult :: Newtype DescribeVpcEndpointsResult _
derive instance repGenericDescribeVpcEndpointsResult :: Generic DescribeVpcEndpointsResult _
instance showDescribeVpcEndpointsResult :: Show DescribeVpcEndpointsResult where show = genericShow
instance decodeDescribeVpcEndpointsResult :: Decode DescribeVpcEndpointsResult where decode = genericDecode options
instance encodeDescribeVpcEndpointsResult :: Encode DescribeVpcEndpointsResult where encode = genericEncode options

-- | Constructs DescribeVpcEndpointsResult from required parameters
newDescribeVpcEndpointsResult :: DescribeVpcEndpointsResult
newDescribeVpcEndpointsResult  = DescribeVpcEndpointsResult { "NextToken": Nothing, "VpcEndpoints": Nothing }

-- | Constructs DescribeVpcEndpointsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVpcEndpointsResult' :: ( { "VpcEndpoints" :: Maybe (VpcEndpointSet) , "NextToken" :: Maybe (String) } -> {"VpcEndpoints" :: Maybe (VpcEndpointSet) , "NextToken" :: Maybe (String) } ) -> DescribeVpcEndpointsResult
newDescribeVpcEndpointsResult'  customize = (DescribeVpcEndpointsResult <<< customize) { "NextToken": Nothing, "VpcEndpoints": Nothing }



-- | <p>Contains the parameters for DescribeVpcPeeringConnections.</p>
newtype DescribeVpcPeeringConnectionsRequest = DescribeVpcPeeringConnectionsRequest 
  { "Filters" :: Maybe (FilterList)
  , "DryRun" :: Maybe (Boolean)
  , "VpcPeeringConnectionIds" :: Maybe (ValueStringList)
  }
derive instance newtypeDescribeVpcPeeringConnectionsRequest :: Newtype DescribeVpcPeeringConnectionsRequest _
derive instance repGenericDescribeVpcPeeringConnectionsRequest :: Generic DescribeVpcPeeringConnectionsRequest _
instance showDescribeVpcPeeringConnectionsRequest :: Show DescribeVpcPeeringConnectionsRequest where show = genericShow
instance decodeDescribeVpcPeeringConnectionsRequest :: Decode DescribeVpcPeeringConnectionsRequest where decode = genericDecode options
instance encodeDescribeVpcPeeringConnectionsRequest :: Encode DescribeVpcPeeringConnectionsRequest where encode = genericEncode options

-- | Constructs DescribeVpcPeeringConnectionsRequest from required parameters
newDescribeVpcPeeringConnectionsRequest :: DescribeVpcPeeringConnectionsRequest
newDescribeVpcPeeringConnectionsRequest  = DescribeVpcPeeringConnectionsRequest { "DryRun": Nothing, "Filters": Nothing, "VpcPeeringConnectionIds": Nothing }

-- | Constructs DescribeVpcPeeringConnectionsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVpcPeeringConnectionsRequest' :: ( { "Filters" :: Maybe (FilterList) , "DryRun" :: Maybe (Boolean) , "VpcPeeringConnectionIds" :: Maybe (ValueStringList) } -> {"Filters" :: Maybe (FilterList) , "DryRun" :: Maybe (Boolean) , "VpcPeeringConnectionIds" :: Maybe (ValueStringList) } ) -> DescribeVpcPeeringConnectionsRequest
newDescribeVpcPeeringConnectionsRequest'  customize = (DescribeVpcPeeringConnectionsRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "VpcPeeringConnectionIds": Nothing }



-- | <p>Contains the output of DescribeVpcPeeringConnections.</p>
newtype DescribeVpcPeeringConnectionsResult = DescribeVpcPeeringConnectionsResult 
  { "VpcPeeringConnections" :: Maybe (VpcPeeringConnectionList)
  }
derive instance newtypeDescribeVpcPeeringConnectionsResult :: Newtype DescribeVpcPeeringConnectionsResult _
derive instance repGenericDescribeVpcPeeringConnectionsResult :: Generic DescribeVpcPeeringConnectionsResult _
instance showDescribeVpcPeeringConnectionsResult :: Show DescribeVpcPeeringConnectionsResult where show = genericShow
instance decodeDescribeVpcPeeringConnectionsResult :: Decode DescribeVpcPeeringConnectionsResult where decode = genericDecode options
instance encodeDescribeVpcPeeringConnectionsResult :: Encode DescribeVpcPeeringConnectionsResult where encode = genericEncode options

-- | Constructs DescribeVpcPeeringConnectionsResult from required parameters
newDescribeVpcPeeringConnectionsResult :: DescribeVpcPeeringConnectionsResult
newDescribeVpcPeeringConnectionsResult  = DescribeVpcPeeringConnectionsResult { "VpcPeeringConnections": Nothing }

-- | Constructs DescribeVpcPeeringConnectionsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVpcPeeringConnectionsResult' :: ( { "VpcPeeringConnections" :: Maybe (VpcPeeringConnectionList) } -> {"VpcPeeringConnections" :: Maybe (VpcPeeringConnectionList) } ) -> DescribeVpcPeeringConnectionsResult
newDescribeVpcPeeringConnectionsResult'  customize = (DescribeVpcPeeringConnectionsResult <<< customize) { "VpcPeeringConnections": Nothing }



-- | <p>Contains the parameters for DescribeVpcs.</p>
newtype DescribeVpcsRequest = DescribeVpcsRequest 
  { "Filters" :: Maybe (FilterList)
  , "VpcIds" :: Maybe (VpcIdStringList)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDescribeVpcsRequest :: Newtype DescribeVpcsRequest _
derive instance repGenericDescribeVpcsRequest :: Generic DescribeVpcsRequest _
instance showDescribeVpcsRequest :: Show DescribeVpcsRequest where show = genericShow
instance decodeDescribeVpcsRequest :: Decode DescribeVpcsRequest where decode = genericDecode options
instance encodeDescribeVpcsRequest :: Encode DescribeVpcsRequest where encode = genericEncode options

-- | Constructs DescribeVpcsRequest from required parameters
newDescribeVpcsRequest :: DescribeVpcsRequest
newDescribeVpcsRequest  = DescribeVpcsRequest { "DryRun": Nothing, "Filters": Nothing, "VpcIds": Nothing }

-- | Constructs DescribeVpcsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVpcsRequest' :: ( { "Filters" :: Maybe (FilterList) , "VpcIds" :: Maybe (VpcIdStringList) , "DryRun" :: Maybe (Boolean) } -> {"Filters" :: Maybe (FilterList) , "VpcIds" :: Maybe (VpcIdStringList) , "DryRun" :: Maybe (Boolean) } ) -> DescribeVpcsRequest
newDescribeVpcsRequest'  customize = (DescribeVpcsRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "VpcIds": Nothing }



-- | <p>Contains the output of DescribeVpcs.</p>
newtype DescribeVpcsResult = DescribeVpcsResult 
  { "Vpcs" :: Maybe (VpcList)
  }
derive instance newtypeDescribeVpcsResult :: Newtype DescribeVpcsResult _
derive instance repGenericDescribeVpcsResult :: Generic DescribeVpcsResult _
instance showDescribeVpcsResult :: Show DescribeVpcsResult where show = genericShow
instance decodeDescribeVpcsResult :: Decode DescribeVpcsResult where decode = genericDecode options
instance encodeDescribeVpcsResult :: Encode DescribeVpcsResult where encode = genericEncode options

-- | Constructs DescribeVpcsResult from required parameters
newDescribeVpcsResult :: DescribeVpcsResult
newDescribeVpcsResult  = DescribeVpcsResult { "Vpcs": Nothing }

-- | Constructs DescribeVpcsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVpcsResult' :: ( { "Vpcs" :: Maybe (VpcList) } -> {"Vpcs" :: Maybe (VpcList) } ) -> DescribeVpcsResult
newDescribeVpcsResult'  customize = (DescribeVpcsResult <<< customize) { "Vpcs": Nothing }



-- | <p>Contains the parameters for DescribeVpnConnections.</p>
newtype DescribeVpnConnectionsRequest = DescribeVpnConnectionsRequest 
  { "Filters" :: Maybe (FilterList)
  , "VpnConnectionIds" :: Maybe (VpnConnectionIdStringList)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDescribeVpnConnectionsRequest :: Newtype DescribeVpnConnectionsRequest _
derive instance repGenericDescribeVpnConnectionsRequest :: Generic DescribeVpnConnectionsRequest _
instance showDescribeVpnConnectionsRequest :: Show DescribeVpnConnectionsRequest where show = genericShow
instance decodeDescribeVpnConnectionsRequest :: Decode DescribeVpnConnectionsRequest where decode = genericDecode options
instance encodeDescribeVpnConnectionsRequest :: Encode DescribeVpnConnectionsRequest where encode = genericEncode options

-- | Constructs DescribeVpnConnectionsRequest from required parameters
newDescribeVpnConnectionsRequest :: DescribeVpnConnectionsRequest
newDescribeVpnConnectionsRequest  = DescribeVpnConnectionsRequest { "DryRun": Nothing, "Filters": Nothing, "VpnConnectionIds": Nothing }

-- | Constructs DescribeVpnConnectionsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVpnConnectionsRequest' :: ( { "Filters" :: Maybe (FilterList) , "VpnConnectionIds" :: Maybe (VpnConnectionIdStringList) , "DryRun" :: Maybe (Boolean) } -> {"Filters" :: Maybe (FilterList) , "VpnConnectionIds" :: Maybe (VpnConnectionIdStringList) , "DryRun" :: Maybe (Boolean) } ) -> DescribeVpnConnectionsRequest
newDescribeVpnConnectionsRequest'  customize = (DescribeVpnConnectionsRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "VpnConnectionIds": Nothing }



-- | <p>Contains the output of DescribeVpnConnections.</p>
newtype DescribeVpnConnectionsResult = DescribeVpnConnectionsResult 
  { "VpnConnections" :: Maybe (VpnConnectionList)
  }
derive instance newtypeDescribeVpnConnectionsResult :: Newtype DescribeVpnConnectionsResult _
derive instance repGenericDescribeVpnConnectionsResult :: Generic DescribeVpnConnectionsResult _
instance showDescribeVpnConnectionsResult :: Show DescribeVpnConnectionsResult where show = genericShow
instance decodeDescribeVpnConnectionsResult :: Decode DescribeVpnConnectionsResult where decode = genericDecode options
instance encodeDescribeVpnConnectionsResult :: Encode DescribeVpnConnectionsResult where encode = genericEncode options

-- | Constructs DescribeVpnConnectionsResult from required parameters
newDescribeVpnConnectionsResult :: DescribeVpnConnectionsResult
newDescribeVpnConnectionsResult  = DescribeVpnConnectionsResult { "VpnConnections": Nothing }

-- | Constructs DescribeVpnConnectionsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVpnConnectionsResult' :: ( { "VpnConnections" :: Maybe (VpnConnectionList) } -> {"VpnConnections" :: Maybe (VpnConnectionList) } ) -> DescribeVpnConnectionsResult
newDescribeVpnConnectionsResult'  customize = (DescribeVpnConnectionsResult <<< customize) { "VpnConnections": Nothing }



-- | <p>Contains the parameters for DescribeVpnGateways.</p>
newtype DescribeVpnGatewaysRequest = DescribeVpnGatewaysRequest 
  { "Filters" :: Maybe (FilterList)
  , "VpnGatewayIds" :: Maybe (VpnGatewayIdStringList)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDescribeVpnGatewaysRequest :: Newtype DescribeVpnGatewaysRequest _
derive instance repGenericDescribeVpnGatewaysRequest :: Generic DescribeVpnGatewaysRequest _
instance showDescribeVpnGatewaysRequest :: Show DescribeVpnGatewaysRequest where show = genericShow
instance decodeDescribeVpnGatewaysRequest :: Decode DescribeVpnGatewaysRequest where decode = genericDecode options
instance encodeDescribeVpnGatewaysRequest :: Encode DescribeVpnGatewaysRequest where encode = genericEncode options

-- | Constructs DescribeVpnGatewaysRequest from required parameters
newDescribeVpnGatewaysRequest :: DescribeVpnGatewaysRequest
newDescribeVpnGatewaysRequest  = DescribeVpnGatewaysRequest { "DryRun": Nothing, "Filters": Nothing, "VpnGatewayIds": Nothing }

-- | Constructs DescribeVpnGatewaysRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVpnGatewaysRequest' :: ( { "Filters" :: Maybe (FilterList) , "VpnGatewayIds" :: Maybe (VpnGatewayIdStringList) , "DryRun" :: Maybe (Boolean) } -> {"Filters" :: Maybe (FilterList) , "VpnGatewayIds" :: Maybe (VpnGatewayIdStringList) , "DryRun" :: Maybe (Boolean) } ) -> DescribeVpnGatewaysRequest
newDescribeVpnGatewaysRequest'  customize = (DescribeVpnGatewaysRequest <<< customize) { "DryRun": Nothing, "Filters": Nothing, "VpnGatewayIds": Nothing }



-- | <p>Contains the output of DescribeVpnGateways.</p>
newtype DescribeVpnGatewaysResult = DescribeVpnGatewaysResult 
  { "VpnGateways" :: Maybe (VpnGatewayList)
  }
derive instance newtypeDescribeVpnGatewaysResult :: Newtype DescribeVpnGatewaysResult _
derive instance repGenericDescribeVpnGatewaysResult :: Generic DescribeVpnGatewaysResult _
instance showDescribeVpnGatewaysResult :: Show DescribeVpnGatewaysResult where show = genericShow
instance decodeDescribeVpnGatewaysResult :: Decode DescribeVpnGatewaysResult where decode = genericDecode options
instance encodeDescribeVpnGatewaysResult :: Encode DescribeVpnGatewaysResult where encode = genericEncode options

-- | Constructs DescribeVpnGatewaysResult from required parameters
newDescribeVpnGatewaysResult :: DescribeVpnGatewaysResult
newDescribeVpnGatewaysResult  = DescribeVpnGatewaysResult { "VpnGateways": Nothing }

-- | Constructs DescribeVpnGatewaysResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDescribeVpnGatewaysResult' :: ( { "VpnGateways" :: Maybe (VpnGatewayList) } -> {"VpnGateways" :: Maybe (VpnGatewayList) } ) -> DescribeVpnGatewaysResult
newDescribeVpnGatewaysResult'  customize = (DescribeVpnGatewaysResult <<< customize) { "VpnGateways": Nothing }



-- | <p>Contains the parameters for DetachClassicLinkVpc.</p>
newtype DetachClassicLinkVpcRequest = DetachClassicLinkVpcRequest 
  { "DryRun" :: Maybe (Boolean)
  , "InstanceId" :: (String)
  , "VpcId" :: (String)
  }
derive instance newtypeDetachClassicLinkVpcRequest :: Newtype DetachClassicLinkVpcRequest _
derive instance repGenericDetachClassicLinkVpcRequest :: Generic DetachClassicLinkVpcRequest _
instance showDetachClassicLinkVpcRequest :: Show DetachClassicLinkVpcRequest where show = genericShow
instance decodeDetachClassicLinkVpcRequest :: Decode DetachClassicLinkVpcRequest where decode = genericDecode options
instance encodeDetachClassicLinkVpcRequest :: Encode DetachClassicLinkVpcRequest where encode = genericEncode options

-- | Constructs DetachClassicLinkVpcRequest from required parameters
newDetachClassicLinkVpcRequest :: String -> String -> DetachClassicLinkVpcRequest
newDetachClassicLinkVpcRequest _InstanceId _VpcId = DetachClassicLinkVpcRequest { "InstanceId": _InstanceId, "VpcId": _VpcId, "DryRun": Nothing }

-- | Constructs DetachClassicLinkVpcRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDetachClassicLinkVpcRequest' :: String -> String -> ( { "DryRun" :: Maybe (Boolean) , "InstanceId" :: (String) , "VpcId" :: (String) } -> {"DryRun" :: Maybe (Boolean) , "InstanceId" :: (String) , "VpcId" :: (String) } ) -> DetachClassicLinkVpcRequest
newDetachClassicLinkVpcRequest' _InstanceId _VpcId customize = (DetachClassicLinkVpcRequest <<< customize) { "InstanceId": _InstanceId, "VpcId": _VpcId, "DryRun": Nothing }



-- | <p>Contains the output of DetachClassicLinkVpc.</p>
newtype DetachClassicLinkVpcResult = DetachClassicLinkVpcResult 
  { "Return" :: Maybe (Boolean)
  }
derive instance newtypeDetachClassicLinkVpcResult :: Newtype DetachClassicLinkVpcResult _
derive instance repGenericDetachClassicLinkVpcResult :: Generic DetachClassicLinkVpcResult _
instance showDetachClassicLinkVpcResult :: Show DetachClassicLinkVpcResult where show = genericShow
instance decodeDetachClassicLinkVpcResult :: Decode DetachClassicLinkVpcResult where decode = genericDecode options
instance encodeDetachClassicLinkVpcResult :: Encode DetachClassicLinkVpcResult where encode = genericEncode options

-- | Constructs DetachClassicLinkVpcResult from required parameters
newDetachClassicLinkVpcResult :: DetachClassicLinkVpcResult
newDetachClassicLinkVpcResult  = DetachClassicLinkVpcResult { "Return": Nothing }

-- | Constructs DetachClassicLinkVpcResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDetachClassicLinkVpcResult' :: ( { "Return" :: Maybe (Boolean) } -> {"Return" :: Maybe (Boolean) } ) -> DetachClassicLinkVpcResult
newDetachClassicLinkVpcResult'  customize = (DetachClassicLinkVpcResult <<< customize) { "Return": Nothing }



-- | <p>Contains the parameters for DetachInternetGateway.</p>
newtype DetachInternetGatewayRequest = DetachInternetGatewayRequest 
  { "DryRun" :: Maybe (Boolean)
  , "InternetGatewayId" :: (String)
  , "VpcId" :: (String)
  }
derive instance newtypeDetachInternetGatewayRequest :: Newtype DetachInternetGatewayRequest _
derive instance repGenericDetachInternetGatewayRequest :: Generic DetachInternetGatewayRequest _
instance showDetachInternetGatewayRequest :: Show DetachInternetGatewayRequest where show = genericShow
instance decodeDetachInternetGatewayRequest :: Decode DetachInternetGatewayRequest where decode = genericDecode options
instance encodeDetachInternetGatewayRequest :: Encode DetachInternetGatewayRequest where encode = genericEncode options

-- | Constructs DetachInternetGatewayRequest from required parameters
newDetachInternetGatewayRequest :: String -> String -> DetachInternetGatewayRequest
newDetachInternetGatewayRequest _InternetGatewayId _VpcId = DetachInternetGatewayRequest { "InternetGatewayId": _InternetGatewayId, "VpcId": _VpcId, "DryRun": Nothing }

-- | Constructs DetachInternetGatewayRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDetachInternetGatewayRequest' :: String -> String -> ( { "DryRun" :: Maybe (Boolean) , "InternetGatewayId" :: (String) , "VpcId" :: (String) } -> {"DryRun" :: Maybe (Boolean) , "InternetGatewayId" :: (String) , "VpcId" :: (String) } ) -> DetachInternetGatewayRequest
newDetachInternetGatewayRequest' _InternetGatewayId _VpcId customize = (DetachInternetGatewayRequest <<< customize) { "InternetGatewayId": _InternetGatewayId, "VpcId": _VpcId, "DryRun": Nothing }



-- | <p>Contains the parameters for DetachNetworkInterface.</p>
newtype DetachNetworkInterfaceRequest = DetachNetworkInterfaceRequest 
  { "AttachmentId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  , "Force" :: Maybe (Boolean)
  }
derive instance newtypeDetachNetworkInterfaceRequest :: Newtype DetachNetworkInterfaceRequest _
derive instance repGenericDetachNetworkInterfaceRequest :: Generic DetachNetworkInterfaceRequest _
instance showDetachNetworkInterfaceRequest :: Show DetachNetworkInterfaceRequest where show = genericShow
instance decodeDetachNetworkInterfaceRequest :: Decode DetachNetworkInterfaceRequest where decode = genericDecode options
instance encodeDetachNetworkInterfaceRequest :: Encode DetachNetworkInterfaceRequest where encode = genericEncode options

-- | Constructs DetachNetworkInterfaceRequest from required parameters
newDetachNetworkInterfaceRequest :: String -> DetachNetworkInterfaceRequest
newDetachNetworkInterfaceRequest _AttachmentId = DetachNetworkInterfaceRequest { "AttachmentId": _AttachmentId, "DryRun": Nothing, "Force": Nothing }

-- | Constructs DetachNetworkInterfaceRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDetachNetworkInterfaceRequest' :: String -> ( { "AttachmentId" :: (String) , "DryRun" :: Maybe (Boolean) , "Force" :: Maybe (Boolean) } -> {"AttachmentId" :: (String) , "DryRun" :: Maybe (Boolean) , "Force" :: Maybe (Boolean) } ) -> DetachNetworkInterfaceRequest
newDetachNetworkInterfaceRequest' _AttachmentId customize = (DetachNetworkInterfaceRequest <<< customize) { "AttachmentId": _AttachmentId, "DryRun": Nothing, "Force": Nothing }



-- | <p>Contains the parameters for DetachVolume.</p>
newtype DetachVolumeRequest = DetachVolumeRequest 
  { "Device" :: Maybe (String)
  , "Force" :: Maybe (Boolean)
  , "InstanceId" :: Maybe (String)
  , "VolumeId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDetachVolumeRequest :: Newtype DetachVolumeRequest _
derive instance repGenericDetachVolumeRequest :: Generic DetachVolumeRequest _
instance showDetachVolumeRequest :: Show DetachVolumeRequest where show = genericShow
instance decodeDetachVolumeRequest :: Decode DetachVolumeRequest where decode = genericDecode options
instance encodeDetachVolumeRequest :: Encode DetachVolumeRequest where encode = genericEncode options

-- | Constructs DetachVolumeRequest from required parameters
newDetachVolumeRequest :: String -> DetachVolumeRequest
newDetachVolumeRequest _VolumeId = DetachVolumeRequest { "VolumeId": _VolumeId, "Device": Nothing, "DryRun": Nothing, "Force": Nothing, "InstanceId": Nothing }

-- | Constructs DetachVolumeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDetachVolumeRequest' :: String -> ( { "Device" :: Maybe (String) , "Force" :: Maybe (Boolean) , "InstanceId" :: Maybe (String) , "VolumeId" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"Device" :: Maybe (String) , "Force" :: Maybe (Boolean) , "InstanceId" :: Maybe (String) , "VolumeId" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> DetachVolumeRequest
newDetachVolumeRequest' _VolumeId customize = (DetachVolumeRequest <<< customize) { "VolumeId": _VolumeId, "Device": Nothing, "DryRun": Nothing, "Force": Nothing, "InstanceId": Nothing }



-- | <p>Contains the parameters for DetachVpnGateway.</p>
newtype DetachVpnGatewayRequest = DetachVpnGatewayRequest 
  { "VpcId" :: (String)
  , "VpnGatewayId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDetachVpnGatewayRequest :: Newtype DetachVpnGatewayRequest _
derive instance repGenericDetachVpnGatewayRequest :: Generic DetachVpnGatewayRequest _
instance showDetachVpnGatewayRequest :: Show DetachVpnGatewayRequest where show = genericShow
instance decodeDetachVpnGatewayRequest :: Decode DetachVpnGatewayRequest where decode = genericDecode options
instance encodeDetachVpnGatewayRequest :: Encode DetachVpnGatewayRequest where encode = genericEncode options

-- | Constructs DetachVpnGatewayRequest from required parameters
newDetachVpnGatewayRequest :: String -> String -> DetachVpnGatewayRequest
newDetachVpnGatewayRequest _VpcId _VpnGatewayId = DetachVpnGatewayRequest { "VpcId": _VpcId, "VpnGatewayId": _VpnGatewayId, "DryRun": Nothing }

-- | Constructs DetachVpnGatewayRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDetachVpnGatewayRequest' :: String -> String -> ( { "VpcId" :: (String) , "VpnGatewayId" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"VpcId" :: (String) , "VpnGatewayId" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> DetachVpnGatewayRequest
newDetachVpnGatewayRequest' _VpcId _VpnGatewayId customize = (DetachVpnGatewayRequest <<< customize) { "VpcId": _VpcId, "VpnGatewayId": _VpnGatewayId, "DryRun": Nothing }



newtype DeviceType = DeviceType String
derive instance newtypeDeviceType :: Newtype DeviceType _
derive instance repGenericDeviceType :: Generic DeviceType _
instance showDeviceType :: Show DeviceType where show = genericShow
instance decodeDeviceType :: Decode DeviceType where decode = genericDecode options
instance encodeDeviceType :: Encode DeviceType where encode = genericEncode options



-- | <p>Describes a DHCP configuration option.</p>
newtype DhcpConfiguration = DhcpConfiguration 
  { "Key" :: Maybe (String)
  , "Values" :: Maybe (DhcpConfigurationValueList)
  }
derive instance newtypeDhcpConfiguration :: Newtype DhcpConfiguration _
derive instance repGenericDhcpConfiguration :: Generic DhcpConfiguration _
instance showDhcpConfiguration :: Show DhcpConfiguration where show = genericShow
instance decodeDhcpConfiguration :: Decode DhcpConfiguration where decode = genericDecode options
instance encodeDhcpConfiguration :: Encode DhcpConfiguration where encode = genericEncode options

-- | Constructs DhcpConfiguration from required parameters
newDhcpConfiguration :: DhcpConfiguration
newDhcpConfiguration  = DhcpConfiguration { "Key": Nothing, "Values": Nothing }

-- | Constructs DhcpConfiguration's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDhcpConfiguration' :: ( { "Key" :: Maybe (String) , "Values" :: Maybe (DhcpConfigurationValueList) } -> {"Key" :: Maybe (String) , "Values" :: Maybe (DhcpConfigurationValueList) } ) -> DhcpConfiguration
newDhcpConfiguration'  customize = (DhcpConfiguration <<< customize) { "Key": Nothing, "Values": Nothing }



newtype DhcpConfigurationList = DhcpConfigurationList (Array DhcpConfiguration)
derive instance newtypeDhcpConfigurationList :: Newtype DhcpConfigurationList _
derive instance repGenericDhcpConfigurationList :: Generic DhcpConfigurationList _
instance showDhcpConfigurationList :: Show DhcpConfigurationList where show = genericShow
instance decodeDhcpConfigurationList :: Decode DhcpConfigurationList where decode = genericDecode options
instance encodeDhcpConfigurationList :: Encode DhcpConfigurationList where encode = genericEncode options



newtype DhcpConfigurationValueList = DhcpConfigurationValueList (Array AttributeValue)
derive instance newtypeDhcpConfigurationValueList :: Newtype DhcpConfigurationValueList _
derive instance repGenericDhcpConfigurationValueList :: Generic DhcpConfigurationValueList _
instance showDhcpConfigurationValueList :: Show DhcpConfigurationValueList where show = genericShow
instance decodeDhcpConfigurationValueList :: Decode DhcpConfigurationValueList where decode = genericDecode options
instance encodeDhcpConfigurationValueList :: Encode DhcpConfigurationValueList where encode = genericEncode options



-- | <p>Describes a set of DHCP options.</p>
newtype DhcpOptions = DhcpOptions 
  { "DhcpConfigurations" :: Maybe (DhcpConfigurationList)
  , "DhcpOptionsId" :: Maybe (String)
  , "Tags" :: Maybe (TagList)
  }
derive instance newtypeDhcpOptions :: Newtype DhcpOptions _
derive instance repGenericDhcpOptions :: Generic DhcpOptions _
instance showDhcpOptions :: Show DhcpOptions where show = genericShow
instance decodeDhcpOptions :: Decode DhcpOptions where decode = genericDecode options
instance encodeDhcpOptions :: Encode DhcpOptions where encode = genericEncode options

-- | Constructs DhcpOptions from required parameters
newDhcpOptions :: DhcpOptions
newDhcpOptions  = DhcpOptions { "DhcpConfigurations": Nothing, "DhcpOptionsId": Nothing, "Tags": Nothing }

-- | Constructs DhcpOptions's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDhcpOptions' :: ( { "DhcpConfigurations" :: Maybe (DhcpConfigurationList) , "DhcpOptionsId" :: Maybe (String) , "Tags" :: Maybe (TagList) } -> {"DhcpConfigurations" :: Maybe (DhcpConfigurationList) , "DhcpOptionsId" :: Maybe (String) , "Tags" :: Maybe (TagList) } ) -> DhcpOptions
newDhcpOptions'  customize = (DhcpOptions <<< customize) { "DhcpConfigurations": Nothing, "DhcpOptionsId": Nothing, "Tags": Nothing }



newtype DhcpOptionsIdStringList = DhcpOptionsIdStringList (Array String)
derive instance newtypeDhcpOptionsIdStringList :: Newtype DhcpOptionsIdStringList _
derive instance repGenericDhcpOptionsIdStringList :: Generic DhcpOptionsIdStringList _
instance showDhcpOptionsIdStringList :: Show DhcpOptionsIdStringList where show = genericShow
instance decodeDhcpOptionsIdStringList :: Decode DhcpOptionsIdStringList where decode = genericDecode options
instance encodeDhcpOptionsIdStringList :: Encode DhcpOptionsIdStringList where encode = genericEncode options



newtype DhcpOptionsList = DhcpOptionsList (Array DhcpOptions)
derive instance newtypeDhcpOptionsList :: Newtype DhcpOptionsList _
derive instance repGenericDhcpOptionsList :: Generic DhcpOptionsList _
instance showDhcpOptionsList :: Show DhcpOptionsList where show = genericShow
instance decodeDhcpOptionsList :: Decode DhcpOptionsList where decode = genericDecode options
instance encodeDhcpOptionsList :: Encode DhcpOptionsList where encode = genericEncode options



-- | <p>Contains the parameters for DisableVgwRoutePropagation.</p>
newtype DisableVgwRoutePropagationRequest = DisableVgwRoutePropagationRequest 
  { "GatewayId" :: (String)
  , "RouteTableId" :: (String)
  }
derive instance newtypeDisableVgwRoutePropagationRequest :: Newtype DisableVgwRoutePropagationRequest _
derive instance repGenericDisableVgwRoutePropagationRequest :: Generic DisableVgwRoutePropagationRequest _
instance showDisableVgwRoutePropagationRequest :: Show DisableVgwRoutePropagationRequest where show = genericShow
instance decodeDisableVgwRoutePropagationRequest :: Decode DisableVgwRoutePropagationRequest where decode = genericDecode options
instance encodeDisableVgwRoutePropagationRequest :: Encode DisableVgwRoutePropagationRequest where encode = genericEncode options

-- | Constructs DisableVgwRoutePropagationRequest from required parameters
newDisableVgwRoutePropagationRequest :: String -> String -> DisableVgwRoutePropagationRequest
newDisableVgwRoutePropagationRequest _GatewayId _RouteTableId = DisableVgwRoutePropagationRequest { "GatewayId": _GatewayId, "RouteTableId": _RouteTableId }

-- | Constructs DisableVgwRoutePropagationRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDisableVgwRoutePropagationRequest' :: String -> String -> ( { "GatewayId" :: (String) , "RouteTableId" :: (String) } -> {"GatewayId" :: (String) , "RouteTableId" :: (String) } ) -> DisableVgwRoutePropagationRequest
newDisableVgwRoutePropagationRequest' _GatewayId _RouteTableId customize = (DisableVgwRoutePropagationRequest <<< customize) { "GatewayId": _GatewayId, "RouteTableId": _RouteTableId }



-- | <p>Contains the parameters for DisableVpcClassicLinkDnsSupport.</p>
newtype DisableVpcClassicLinkDnsSupportRequest = DisableVpcClassicLinkDnsSupportRequest 
  { "VpcId" :: Maybe (String)
  }
derive instance newtypeDisableVpcClassicLinkDnsSupportRequest :: Newtype DisableVpcClassicLinkDnsSupportRequest _
derive instance repGenericDisableVpcClassicLinkDnsSupportRequest :: Generic DisableVpcClassicLinkDnsSupportRequest _
instance showDisableVpcClassicLinkDnsSupportRequest :: Show DisableVpcClassicLinkDnsSupportRequest where show = genericShow
instance decodeDisableVpcClassicLinkDnsSupportRequest :: Decode DisableVpcClassicLinkDnsSupportRequest where decode = genericDecode options
instance encodeDisableVpcClassicLinkDnsSupportRequest :: Encode DisableVpcClassicLinkDnsSupportRequest where encode = genericEncode options

-- | Constructs DisableVpcClassicLinkDnsSupportRequest from required parameters
newDisableVpcClassicLinkDnsSupportRequest :: DisableVpcClassicLinkDnsSupportRequest
newDisableVpcClassicLinkDnsSupportRequest  = DisableVpcClassicLinkDnsSupportRequest { "VpcId": Nothing }

-- | Constructs DisableVpcClassicLinkDnsSupportRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDisableVpcClassicLinkDnsSupportRequest' :: ( { "VpcId" :: Maybe (String) } -> {"VpcId" :: Maybe (String) } ) -> DisableVpcClassicLinkDnsSupportRequest
newDisableVpcClassicLinkDnsSupportRequest'  customize = (DisableVpcClassicLinkDnsSupportRequest <<< customize) { "VpcId": Nothing }



-- | <p>Contains the output of DisableVpcClassicLinkDnsSupport.</p>
newtype DisableVpcClassicLinkDnsSupportResult = DisableVpcClassicLinkDnsSupportResult 
  { "Return" :: Maybe (Boolean)
  }
derive instance newtypeDisableVpcClassicLinkDnsSupportResult :: Newtype DisableVpcClassicLinkDnsSupportResult _
derive instance repGenericDisableVpcClassicLinkDnsSupportResult :: Generic DisableVpcClassicLinkDnsSupportResult _
instance showDisableVpcClassicLinkDnsSupportResult :: Show DisableVpcClassicLinkDnsSupportResult where show = genericShow
instance decodeDisableVpcClassicLinkDnsSupportResult :: Decode DisableVpcClassicLinkDnsSupportResult where decode = genericDecode options
instance encodeDisableVpcClassicLinkDnsSupportResult :: Encode DisableVpcClassicLinkDnsSupportResult where encode = genericEncode options

-- | Constructs DisableVpcClassicLinkDnsSupportResult from required parameters
newDisableVpcClassicLinkDnsSupportResult :: DisableVpcClassicLinkDnsSupportResult
newDisableVpcClassicLinkDnsSupportResult  = DisableVpcClassicLinkDnsSupportResult { "Return": Nothing }

-- | Constructs DisableVpcClassicLinkDnsSupportResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDisableVpcClassicLinkDnsSupportResult' :: ( { "Return" :: Maybe (Boolean) } -> {"Return" :: Maybe (Boolean) } ) -> DisableVpcClassicLinkDnsSupportResult
newDisableVpcClassicLinkDnsSupportResult'  customize = (DisableVpcClassicLinkDnsSupportResult <<< customize) { "Return": Nothing }



-- | <p>Contains the parameters for DisableVpcClassicLink.</p>
newtype DisableVpcClassicLinkRequest = DisableVpcClassicLinkRequest 
  { "DryRun" :: Maybe (Boolean)
  , "VpcId" :: (String)
  }
derive instance newtypeDisableVpcClassicLinkRequest :: Newtype DisableVpcClassicLinkRequest _
derive instance repGenericDisableVpcClassicLinkRequest :: Generic DisableVpcClassicLinkRequest _
instance showDisableVpcClassicLinkRequest :: Show DisableVpcClassicLinkRequest where show = genericShow
instance decodeDisableVpcClassicLinkRequest :: Decode DisableVpcClassicLinkRequest where decode = genericDecode options
instance encodeDisableVpcClassicLinkRequest :: Encode DisableVpcClassicLinkRequest where encode = genericEncode options

-- | Constructs DisableVpcClassicLinkRequest from required parameters
newDisableVpcClassicLinkRequest :: String -> DisableVpcClassicLinkRequest
newDisableVpcClassicLinkRequest _VpcId = DisableVpcClassicLinkRequest { "VpcId": _VpcId, "DryRun": Nothing }

-- | Constructs DisableVpcClassicLinkRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDisableVpcClassicLinkRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "VpcId" :: (String) } -> {"DryRun" :: Maybe (Boolean) , "VpcId" :: (String) } ) -> DisableVpcClassicLinkRequest
newDisableVpcClassicLinkRequest' _VpcId customize = (DisableVpcClassicLinkRequest <<< customize) { "VpcId": _VpcId, "DryRun": Nothing }



-- | <p>Contains the output of DisableVpcClassicLink.</p>
newtype DisableVpcClassicLinkResult = DisableVpcClassicLinkResult 
  { "Return" :: Maybe (Boolean)
  }
derive instance newtypeDisableVpcClassicLinkResult :: Newtype DisableVpcClassicLinkResult _
derive instance repGenericDisableVpcClassicLinkResult :: Generic DisableVpcClassicLinkResult _
instance showDisableVpcClassicLinkResult :: Show DisableVpcClassicLinkResult where show = genericShow
instance decodeDisableVpcClassicLinkResult :: Decode DisableVpcClassicLinkResult where decode = genericDecode options
instance encodeDisableVpcClassicLinkResult :: Encode DisableVpcClassicLinkResult where encode = genericEncode options

-- | Constructs DisableVpcClassicLinkResult from required parameters
newDisableVpcClassicLinkResult :: DisableVpcClassicLinkResult
newDisableVpcClassicLinkResult  = DisableVpcClassicLinkResult { "Return": Nothing }

-- | Constructs DisableVpcClassicLinkResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDisableVpcClassicLinkResult' :: ( { "Return" :: Maybe (Boolean) } -> {"Return" :: Maybe (Boolean) } ) -> DisableVpcClassicLinkResult
newDisableVpcClassicLinkResult'  customize = (DisableVpcClassicLinkResult <<< customize) { "Return": Nothing }



-- | <p>Contains the parameters for DisassociateAddress.</p>
newtype DisassociateAddressRequest = DisassociateAddressRequest 
  { "AssociationId" :: Maybe (String)
  , "PublicIp" :: Maybe (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDisassociateAddressRequest :: Newtype DisassociateAddressRequest _
derive instance repGenericDisassociateAddressRequest :: Generic DisassociateAddressRequest _
instance showDisassociateAddressRequest :: Show DisassociateAddressRequest where show = genericShow
instance decodeDisassociateAddressRequest :: Decode DisassociateAddressRequest where decode = genericDecode options
instance encodeDisassociateAddressRequest :: Encode DisassociateAddressRequest where encode = genericEncode options

-- | Constructs DisassociateAddressRequest from required parameters
newDisassociateAddressRequest :: DisassociateAddressRequest
newDisassociateAddressRequest  = DisassociateAddressRequest { "AssociationId": Nothing, "DryRun": Nothing, "PublicIp": Nothing }

-- | Constructs DisassociateAddressRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDisassociateAddressRequest' :: ( { "AssociationId" :: Maybe (String) , "PublicIp" :: Maybe (String) , "DryRun" :: Maybe (Boolean) } -> {"AssociationId" :: Maybe (String) , "PublicIp" :: Maybe (String) , "DryRun" :: Maybe (Boolean) } ) -> DisassociateAddressRequest
newDisassociateAddressRequest'  customize = (DisassociateAddressRequest <<< customize) { "AssociationId": Nothing, "DryRun": Nothing, "PublicIp": Nothing }



newtype DisassociateIamInstanceProfileRequest = DisassociateIamInstanceProfileRequest 
  { "AssociationId" :: (String)
  }
derive instance newtypeDisassociateIamInstanceProfileRequest :: Newtype DisassociateIamInstanceProfileRequest _
derive instance repGenericDisassociateIamInstanceProfileRequest :: Generic DisassociateIamInstanceProfileRequest _
instance showDisassociateIamInstanceProfileRequest :: Show DisassociateIamInstanceProfileRequest where show = genericShow
instance decodeDisassociateIamInstanceProfileRequest :: Decode DisassociateIamInstanceProfileRequest where decode = genericDecode options
instance encodeDisassociateIamInstanceProfileRequest :: Encode DisassociateIamInstanceProfileRequest where encode = genericEncode options

-- | Constructs DisassociateIamInstanceProfileRequest from required parameters
newDisassociateIamInstanceProfileRequest :: String -> DisassociateIamInstanceProfileRequest
newDisassociateIamInstanceProfileRequest _AssociationId = DisassociateIamInstanceProfileRequest { "AssociationId": _AssociationId }

-- | Constructs DisassociateIamInstanceProfileRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDisassociateIamInstanceProfileRequest' :: String -> ( { "AssociationId" :: (String) } -> {"AssociationId" :: (String) } ) -> DisassociateIamInstanceProfileRequest
newDisassociateIamInstanceProfileRequest' _AssociationId customize = (DisassociateIamInstanceProfileRequest <<< customize) { "AssociationId": _AssociationId }



newtype DisassociateIamInstanceProfileResult = DisassociateIamInstanceProfileResult 
  { "IamInstanceProfileAssociation" :: Maybe (IamInstanceProfileAssociation)
  }
derive instance newtypeDisassociateIamInstanceProfileResult :: Newtype DisassociateIamInstanceProfileResult _
derive instance repGenericDisassociateIamInstanceProfileResult :: Generic DisassociateIamInstanceProfileResult _
instance showDisassociateIamInstanceProfileResult :: Show DisassociateIamInstanceProfileResult where show = genericShow
instance decodeDisassociateIamInstanceProfileResult :: Decode DisassociateIamInstanceProfileResult where decode = genericDecode options
instance encodeDisassociateIamInstanceProfileResult :: Encode DisassociateIamInstanceProfileResult where encode = genericEncode options

-- | Constructs DisassociateIamInstanceProfileResult from required parameters
newDisassociateIamInstanceProfileResult :: DisassociateIamInstanceProfileResult
newDisassociateIamInstanceProfileResult  = DisassociateIamInstanceProfileResult { "IamInstanceProfileAssociation": Nothing }

-- | Constructs DisassociateIamInstanceProfileResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDisassociateIamInstanceProfileResult' :: ( { "IamInstanceProfileAssociation" :: Maybe (IamInstanceProfileAssociation) } -> {"IamInstanceProfileAssociation" :: Maybe (IamInstanceProfileAssociation) } ) -> DisassociateIamInstanceProfileResult
newDisassociateIamInstanceProfileResult'  customize = (DisassociateIamInstanceProfileResult <<< customize) { "IamInstanceProfileAssociation": Nothing }



-- | <p>Contains the parameters for DisassociateRouteTable.</p>
newtype DisassociateRouteTableRequest = DisassociateRouteTableRequest 
  { "AssociationId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeDisassociateRouteTableRequest :: Newtype DisassociateRouteTableRequest _
derive instance repGenericDisassociateRouteTableRequest :: Generic DisassociateRouteTableRequest _
instance showDisassociateRouteTableRequest :: Show DisassociateRouteTableRequest where show = genericShow
instance decodeDisassociateRouteTableRequest :: Decode DisassociateRouteTableRequest where decode = genericDecode options
instance encodeDisassociateRouteTableRequest :: Encode DisassociateRouteTableRequest where encode = genericEncode options

-- | Constructs DisassociateRouteTableRequest from required parameters
newDisassociateRouteTableRequest :: String -> DisassociateRouteTableRequest
newDisassociateRouteTableRequest _AssociationId = DisassociateRouteTableRequest { "AssociationId": _AssociationId, "DryRun": Nothing }

-- | Constructs DisassociateRouteTableRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDisassociateRouteTableRequest' :: String -> ( { "AssociationId" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"AssociationId" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> DisassociateRouteTableRequest
newDisassociateRouteTableRequest' _AssociationId customize = (DisassociateRouteTableRequest <<< customize) { "AssociationId": _AssociationId, "DryRun": Nothing }



newtype DisassociateSubnetCidrBlockRequest = DisassociateSubnetCidrBlockRequest 
  { "AssociationId" :: (String)
  }
derive instance newtypeDisassociateSubnetCidrBlockRequest :: Newtype DisassociateSubnetCidrBlockRequest _
derive instance repGenericDisassociateSubnetCidrBlockRequest :: Generic DisassociateSubnetCidrBlockRequest _
instance showDisassociateSubnetCidrBlockRequest :: Show DisassociateSubnetCidrBlockRequest where show = genericShow
instance decodeDisassociateSubnetCidrBlockRequest :: Decode DisassociateSubnetCidrBlockRequest where decode = genericDecode options
instance encodeDisassociateSubnetCidrBlockRequest :: Encode DisassociateSubnetCidrBlockRequest where encode = genericEncode options

-- | Constructs DisassociateSubnetCidrBlockRequest from required parameters
newDisassociateSubnetCidrBlockRequest :: String -> DisassociateSubnetCidrBlockRequest
newDisassociateSubnetCidrBlockRequest _AssociationId = DisassociateSubnetCidrBlockRequest { "AssociationId": _AssociationId }

-- | Constructs DisassociateSubnetCidrBlockRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDisassociateSubnetCidrBlockRequest' :: String -> ( { "AssociationId" :: (String) } -> {"AssociationId" :: (String) } ) -> DisassociateSubnetCidrBlockRequest
newDisassociateSubnetCidrBlockRequest' _AssociationId customize = (DisassociateSubnetCidrBlockRequest <<< customize) { "AssociationId": _AssociationId }



newtype DisassociateSubnetCidrBlockResult = DisassociateSubnetCidrBlockResult 
  { "Ipv6CidrBlockAssociation" :: Maybe (SubnetIpv6CidrBlockAssociation)
  , "SubnetId" :: Maybe (String)
  }
derive instance newtypeDisassociateSubnetCidrBlockResult :: Newtype DisassociateSubnetCidrBlockResult _
derive instance repGenericDisassociateSubnetCidrBlockResult :: Generic DisassociateSubnetCidrBlockResult _
instance showDisassociateSubnetCidrBlockResult :: Show DisassociateSubnetCidrBlockResult where show = genericShow
instance decodeDisassociateSubnetCidrBlockResult :: Decode DisassociateSubnetCidrBlockResult where decode = genericDecode options
instance encodeDisassociateSubnetCidrBlockResult :: Encode DisassociateSubnetCidrBlockResult where encode = genericEncode options

-- | Constructs DisassociateSubnetCidrBlockResult from required parameters
newDisassociateSubnetCidrBlockResult :: DisassociateSubnetCidrBlockResult
newDisassociateSubnetCidrBlockResult  = DisassociateSubnetCidrBlockResult { "Ipv6CidrBlockAssociation": Nothing, "SubnetId": Nothing }

-- | Constructs DisassociateSubnetCidrBlockResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDisassociateSubnetCidrBlockResult' :: ( { "Ipv6CidrBlockAssociation" :: Maybe (SubnetIpv6CidrBlockAssociation) , "SubnetId" :: Maybe (String) } -> {"Ipv6CidrBlockAssociation" :: Maybe (SubnetIpv6CidrBlockAssociation) , "SubnetId" :: Maybe (String) } ) -> DisassociateSubnetCidrBlockResult
newDisassociateSubnetCidrBlockResult'  customize = (DisassociateSubnetCidrBlockResult <<< customize) { "Ipv6CidrBlockAssociation": Nothing, "SubnetId": Nothing }



newtype DisassociateVpcCidrBlockRequest = DisassociateVpcCidrBlockRequest 
  { "AssociationId" :: (String)
  }
derive instance newtypeDisassociateVpcCidrBlockRequest :: Newtype DisassociateVpcCidrBlockRequest _
derive instance repGenericDisassociateVpcCidrBlockRequest :: Generic DisassociateVpcCidrBlockRequest _
instance showDisassociateVpcCidrBlockRequest :: Show DisassociateVpcCidrBlockRequest where show = genericShow
instance decodeDisassociateVpcCidrBlockRequest :: Decode DisassociateVpcCidrBlockRequest where decode = genericDecode options
instance encodeDisassociateVpcCidrBlockRequest :: Encode DisassociateVpcCidrBlockRequest where encode = genericEncode options

-- | Constructs DisassociateVpcCidrBlockRequest from required parameters
newDisassociateVpcCidrBlockRequest :: String -> DisassociateVpcCidrBlockRequest
newDisassociateVpcCidrBlockRequest _AssociationId = DisassociateVpcCidrBlockRequest { "AssociationId": _AssociationId }

-- | Constructs DisassociateVpcCidrBlockRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDisassociateVpcCidrBlockRequest' :: String -> ( { "AssociationId" :: (String) } -> {"AssociationId" :: (String) } ) -> DisassociateVpcCidrBlockRequest
newDisassociateVpcCidrBlockRequest' _AssociationId customize = (DisassociateVpcCidrBlockRequest <<< customize) { "AssociationId": _AssociationId }



newtype DisassociateVpcCidrBlockResult = DisassociateVpcCidrBlockResult 
  { "Ipv6CidrBlockAssociation" :: Maybe (VpcIpv6CidrBlockAssociation)
  , "CidrBlockAssociation" :: Maybe (VpcCidrBlockAssociation)
  , "VpcId" :: Maybe (String)
  }
derive instance newtypeDisassociateVpcCidrBlockResult :: Newtype DisassociateVpcCidrBlockResult _
derive instance repGenericDisassociateVpcCidrBlockResult :: Generic DisassociateVpcCidrBlockResult _
instance showDisassociateVpcCidrBlockResult :: Show DisassociateVpcCidrBlockResult where show = genericShow
instance decodeDisassociateVpcCidrBlockResult :: Decode DisassociateVpcCidrBlockResult where decode = genericDecode options
instance encodeDisassociateVpcCidrBlockResult :: Encode DisassociateVpcCidrBlockResult where encode = genericEncode options

-- | Constructs DisassociateVpcCidrBlockResult from required parameters
newDisassociateVpcCidrBlockResult :: DisassociateVpcCidrBlockResult
newDisassociateVpcCidrBlockResult  = DisassociateVpcCidrBlockResult { "CidrBlockAssociation": Nothing, "Ipv6CidrBlockAssociation": Nothing, "VpcId": Nothing }

-- | Constructs DisassociateVpcCidrBlockResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDisassociateVpcCidrBlockResult' :: ( { "Ipv6CidrBlockAssociation" :: Maybe (VpcIpv6CidrBlockAssociation) , "CidrBlockAssociation" :: Maybe (VpcCidrBlockAssociation) , "VpcId" :: Maybe (String) } -> {"Ipv6CidrBlockAssociation" :: Maybe (VpcIpv6CidrBlockAssociation) , "CidrBlockAssociation" :: Maybe (VpcCidrBlockAssociation) , "VpcId" :: Maybe (String) } ) -> DisassociateVpcCidrBlockResult
newDisassociateVpcCidrBlockResult'  customize = (DisassociateVpcCidrBlockResult <<< customize) { "CidrBlockAssociation": Nothing, "Ipv6CidrBlockAssociation": Nothing, "VpcId": Nothing }



-- | <p>Describes a disk image.</p>
newtype DiskImage = DiskImage 
  { "Description" :: Maybe (String)
  , "Image" :: Maybe (DiskImageDetail)
  , "Volume" :: Maybe (VolumeDetail)
  }
derive instance newtypeDiskImage :: Newtype DiskImage _
derive instance repGenericDiskImage :: Generic DiskImage _
instance showDiskImage :: Show DiskImage where show = genericShow
instance decodeDiskImage :: Decode DiskImage where decode = genericDecode options
instance encodeDiskImage :: Encode DiskImage where encode = genericEncode options

-- | Constructs DiskImage from required parameters
newDiskImage :: DiskImage
newDiskImage  = DiskImage { "Description": Nothing, "Image": Nothing, "Volume": Nothing }

-- | Constructs DiskImage's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDiskImage' :: ( { "Description" :: Maybe (String) , "Image" :: Maybe (DiskImageDetail) , "Volume" :: Maybe (VolumeDetail) } -> {"Description" :: Maybe (String) , "Image" :: Maybe (DiskImageDetail) , "Volume" :: Maybe (VolumeDetail) } ) -> DiskImage
newDiskImage'  customize = (DiskImage <<< customize) { "Description": Nothing, "Image": Nothing, "Volume": Nothing }



-- | <p>Describes a disk image.</p>
newtype DiskImageDescription = DiskImageDescription 
  { "Checksum" :: Maybe (String)
  , "Format" :: (DiskImageFormat)
  , "ImportManifestUrl" :: (String)
  , "Size" :: (Number)
  }
derive instance newtypeDiskImageDescription :: Newtype DiskImageDescription _
derive instance repGenericDiskImageDescription :: Generic DiskImageDescription _
instance showDiskImageDescription :: Show DiskImageDescription where show = genericShow
instance decodeDiskImageDescription :: Decode DiskImageDescription where decode = genericDecode options
instance encodeDiskImageDescription :: Encode DiskImageDescription where encode = genericEncode options

-- | Constructs DiskImageDescription from required parameters
newDiskImageDescription :: DiskImageFormat -> String -> Number -> DiskImageDescription
newDiskImageDescription _Format _ImportManifestUrl _Size = DiskImageDescription { "Format": _Format, "ImportManifestUrl": _ImportManifestUrl, "Size": _Size, "Checksum": Nothing }

-- | Constructs DiskImageDescription's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDiskImageDescription' :: DiskImageFormat -> String -> Number -> ( { "Checksum" :: Maybe (String) , "Format" :: (DiskImageFormat) , "ImportManifestUrl" :: (String) , "Size" :: (Number) } -> {"Checksum" :: Maybe (String) , "Format" :: (DiskImageFormat) , "ImportManifestUrl" :: (String) , "Size" :: (Number) } ) -> DiskImageDescription
newDiskImageDescription' _Format _ImportManifestUrl _Size customize = (DiskImageDescription <<< customize) { "Format": _Format, "ImportManifestUrl": _ImportManifestUrl, "Size": _Size, "Checksum": Nothing }



-- | <p>Describes a disk image.</p>
newtype DiskImageDetail = DiskImageDetail 
  { "Bytes" :: (Number)
  , "Format" :: (DiskImageFormat)
  , "ImportManifestUrl" :: (String)
  }
derive instance newtypeDiskImageDetail :: Newtype DiskImageDetail _
derive instance repGenericDiskImageDetail :: Generic DiskImageDetail _
instance showDiskImageDetail :: Show DiskImageDetail where show = genericShow
instance decodeDiskImageDetail :: Decode DiskImageDetail where decode = genericDecode options
instance encodeDiskImageDetail :: Encode DiskImageDetail where encode = genericEncode options

-- | Constructs DiskImageDetail from required parameters
newDiskImageDetail :: Number -> DiskImageFormat -> String -> DiskImageDetail
newDiskImageDetail _Bytes _Format _ImportManifestUrl = DiskImageDetail { "Bytes": _Bytes, "Format": _Format, "ImportManifestUrl": _ImportManifestUrl }

-- | Constructs DiskImageDetail's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDiskImageDetail' :: Number -> DiskImageFormat -> String -> ( { "Bytes" :: (Number) , "Format" :: (DiskImageFormat) , "ImportManifestUrl" :: (String) } -> {"Bytes" :: (Number) , "Format" :: (DiskImageFormat) , "ImportManifestUrl" :: (String) } ) -> DiskImageDetail
newDiskImageDetail' _Bytes _Format _ImportManifestUrl customize = (DiskImageDetail <<< customize) { "Bytes": _Bytes, "Format": _Format, "ImportManifestUrl": _ImportManifestUrl }



newtype DiskImageFormat = DiskImageFormat String
derive instance newtypeDiskImageFormat :: Newtype DiskImageFormat _
derive instance repGenericDiskImageFormat :: Generic DiskImageFormat _
instance showDiskImageFormat :: Show DiskImageFormat where show = genericShow
instance decodeDiskImageFormat :: Decode DiskImageFormat where decode = genericDecode options
instance encodeDiskImageFormat :: Encode DiskImageFormat where encode = genericEncode options



newtype DiskImageList = DiskImageList (Array DiskImage)
derive instance newtypeDiskImageList :: Newtype DiskImageList _
derive instance repGenericDiskImageList :: Generic DiskImageList _
instance showDiskImageList :: Show DiskImageList where show = genericShow
instance decodeDiskImageList :: Decode DiskImageList where decode = genericDecode options
instance encodeDiskImageList :: Encode DiskImageList where encode = genericEncode options



-- | <p>Describes a disk image volume.</p>
newtype DiskImageVolumeDescription = DiskImageVolumeDescription 
  { "Id" :: (String)
  , "Size" :: Maybe (Number)
  }
derive instance newtypeDiskImageVolumeDescription :: Newtype DiskImageVolumeDescription _
derive instance repGenericDiskImageVolumeDescription :: Generic DiskImageVolumeDescription _
instance showDiskImageVolumeDescription :: Show DiskImageVolumeDescription where show = genericShow
instance decodeDiskImageVolumeDescription :: Decode DiskImageVolumeDescription where decode = genericDecode options
instance encodeDiskImageVolumeDescription :: Encode DiskImageVolumeDescription where encode = genericEncode options

-- | Constructs DiskImageVolumeDescription from required parameters
newDiskImageVolumeDescription :: String -> DiskImageVolumeDescription
newDiskImageVolumeDescription _Id = DiskImageVolumeDescription { "Id": _Id, "Size": Nothing }

-- | Constructs DiskImageVolumeDescription's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDiskImageVolumeDescription' :: String -> ( { "Id" :: (String) , "Size" :: Maybe (Number) } -> {"Id" :: (String) , "Size" :: Maybe (Number) } ) -> DiskImageVolumeDescription
newDiskImageVolumeDescription' _Id customize = (DiskImageVolumeDescription <<< customize) { "Id": _Id, "Size": Nothing }



-- | <p>Describes a DNS entry.</p>
newtype DnsEntry = DnsEntry 
  { "DnsName" :: Maybe (String)
  , "HostedZoneId" :: Maybe (String)
  }
derive instance newtypeDnsEntry :: Newtype DnsEntry _
derive instance repGenericDnsEntry :: Generic DnsEntry _
instance showDnsEntry :: Show DnsEntry where show = genericShow
instance decodeDnsEntry :: Decode DnsEntry where decode = genericDecode options
instance encodeDnsEntry :: Encode DnsEntry where encode = genericEncode options

-- | Constructs DnsEntry from required parameters
newDnsEntry :: DnsEntry
newDnsEntry  = DnsEntry { "DnsName": Nothing, "HostedZoneId": Nothing }

-- | Constructs DnsEntry's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newDnsEntry' :: ( { "DnsName" :: Maybe (String) , "HostedZoneId" :: Maybe (String) } -> {"DnsName" :: Maybe (String) , "HostedZoneId" :: Maybe (String) } ) -> DnsEntry
newDnsEntry'  customize = (DnsEntry <<< customize) { "DnsName": Nothing, "HostedZoneId": Nothing }



newtype DnsEntrySet = DnsEntrySet (Array DnsEntry)
derive instance newtypeDnsEntrySet :: Newtype DnsEntrySet _
derive instance repGenericDnsEntrySet :: Generic DnsEntrySet _
instance showDnsEntrySet :: Show DnsEntrySet where show = genericShow
instance decodeDnsEntrySet :: Decode DnsEntrySet where decode = genericDecode options
instance encodeDnsEntrySet :: Encode DnsEntrySet where encode = genericEncode options



newtype DomainType = DomainType String
derive instance newtypeDomainType :: Newtype DomainType _
derive instance repGenericDomainType :: Generic DomainType _
instance showDomainType :: Show DomainType where show = genericShow
instance decodeDomainType :: Decode DomainType where decode = genericDecode options
instance encodeDomainType :: Encode DomainType where encode = genericEncode options



-- | <p>Describes a block device for an EBS volume.</p>
newtype EbsBlockDevice = EbsBlockDevice 
  { "Encrypted" :: Maybe (Boolean)
  , "DeleteOnTermination" :: Maybe (Boolean)
  , "Iops" :: Maybe (Int)
  , "KmsKeyId" :: Maybe (String)
  , "SnapshotId" :: Maybe (String)
  , "VolumeSize" :: Maybe (Int)
  , "VolumeType" :: Maybe (VolumeType)
  }
derive instance newtypeEbsBlockDevice :: Newtype EbsBlockDevice _
derive instance repGenericEbsBlockDevice :: Generic EbsBlockDevice _
instance showEbsBlockDevice :: Show EbsBlockDevice where show = genericShow
instance decodeEbsBlockDevice :: Decode EbsBlockDevice where decode = genericDecode options
instance encodeEbsBlockDevice :: Encode EbsBlockDevice where encode = genericEncode options

-- | Constructs EbsBlockDevice from required parameters
newEbsBlockDevice :: EbsBlockDevice
newEbsBlockDevice  = EbsBlockDevice { "DeleteOnTermination": Nothing, "Encrypted": Nothing, "Iops": Nothing, "KmsKeyId": Nothing, "SnapshotId": Nothing, "VolumeSize": Nothing, "VolumeType": Nothing }

-- | Constructs EbsBlockDevice's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newEbsBlockDevice' :: ( { "Encrypted" :: Maybe (Boolean) , "DeleteOnTermination" :: Maybe (Boolean) , "Iops" :: Maybe (Int) , "KmsKeyId" :: Maybe (String) , "SnapshotId" :: Maybe (String) , "VolumeSize" :: Maybe (Int) , "VolumeType" :: Maybe (VolumeType) } -> {"Encrypted" :: Maybe (Boolean) , "DeleteOnTermination" :: Maybe (Boolean) , "Iops" :: Maybe (Int) , "KmsKeyId" :: Maybe (String) , "SnapshotId" :: Maybe (String) , "VolumeSize" :: Maybe (Int) , "VolumeType" :: Maybe (VolumeType) } ) -> EbsBlockDevice
newEbsBlockDevice'  customize = (EbsBlockDevice <<< customize) { "DeleteOnTermination": Nothing, "Encrypted": Nothing, "Iops": Nothing, "KmsKeyId": Nothing, "SnapshotId": Nothing, "VolumeSize": Nothing, "VolumeType": Nothing }



-- | <p>Describes a parameter used to set up an EBS volume in a block device mapping.</p>
newtype EbsInstanceBlockDevice = EbsInstanceBlockDevice 
  { "AttachTime" :: Maybe (DateTime)
  , "DeleteOnTermination" :: Maybe (Boolean)
  , "Status" :: Maybe (AttachmentStatus)
  , "VolumeId" :: Maybe (String)
  }
derive instance newtypeEbsInstanceBlockDevice :: Newtype EbsInstanceBlockDevice _
derive instance repGenericEbsInstanceBlockDevice :: Generic EbsInstanceBlockDevice _
instance showEbsInstanceBlockDevice :: Show EbsInstanceBlockDevice where show = genericShow
instance decodeEbsInstanceBlockDevice :: Decode EbsInstanceBlockDevice where decode = genericDecode options
instance encodeEbsInstanceBlockDevice :: Encode EbsInstanceBlockDevice where encode = genericEncode options

-- | Constructs EbsInstanceBlockDevice from required parameters
newEbsInstanceBlockDevice :: EbsInstanceBlockDevice
newEbsInstanceBlockDevice  = EbsInstanceBlockDevice { "AttachTime": Nothing, "DeleteOnTermination": Nothing, "Status": Nothing, "VolumeId": Nothing }

-- | Constructs EbsInstanceBlockDevice's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newEbsInstanceBlockDevice' :: ( { "AttachTime" :: Maybe (DateTime) , "DeleteOnTermination" :: Maybe (Boolean) , "Status" :: Maybe (AttachmentStatus) , "VolumeId" :: Maybe (String) } -> {"AttachTime" :: Maybe (DateTime) , "DeleteOnTermination" :: Maybe (Boolean) , "Status" :: Maybe (AttachmentStatus) , "VolumeId" :: Maybe (String) } ) -> EbsInstanceBlockDevice
newEbsInstanceBlockDevice'  customize = (EbsInstanceBlockDevice <<< customize) { "AttachTime": Nothing, "DeleteOnTermination": Nothing, "Status": Nothing, "VolumeId": Nothing }



-- | <p>Describes information used to set up an EBS volume specified in a block device mapping.</p>
newtype EbsInstanceBlockDeviceSpecification = EbsInstanceBlockDeviceSpecification 
  { "DeleteOnTermination" :: Maybe (Boolean)
  , "VolumeId" :: Maybe (String)
  }
derive instance newtypeEbsInstanceBlockDeviceSpecification :: Newtype EbsInstanceBlockDeviceSpecification _
derive instance repGenericEbsInstanceBlockDeviceSpecification :: Generic EbsInstanceBlockDeviceSpecification _
instance showEbsInstanceBlockDeviceSpecification :: Show EbsInstanceBlockDeviceSpecification where show = genericShow
instance decodeEbsInstanceBlockDeviceSpecification :: Decode EbsInstanceBlockDeviceSpecification where decode = genericDecode options
instance encodeEbsInstanceBlockDeviceSpecification :: Encode EbsInstanceBlockDeviceSpecification where encode = genericEncode options

-- | Constructs EbsInstanceBlockDeviceSpecification from required parameters
newEbsInstanceBlockDeviceSpecification :: EbsInstanceBlockDeviceSpecification
newEbsInstanceBlockDeviceSpecification  = EbsInstanceBlockDeviceSpecification { "DeleteOnTermination": Nothing, "VolumeId": Nothing }

-- | Constructs EbsInstanceBlockDeviceSpecification's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newEbsInstanceBlockDeviceSpecification' :: ( { "DeleteOnTermination" :: Maybe (Boolean) , "VolumeId" :: Maybe (String) } -> {"DeleteOnTermination" :: Maybe (Boolean) , "VolumeId" :: Maybe (String) } ) -> EbsInstanceBlockDeviceSpecification
newEbsInstanceBlockDeviceSpecification'  customize = (EbsInstanceBlockDeviceSpecification <<< customize) { "DeleteOnTermination": Nothing, "VolumeId": Nothing }



-- | <p>Describes an egress-only Internet gateway.</p>
newtype EgressOnlyInternetGateway = EgressOnlyInternetGateway 
  { "Attachments" :: Maybe (InternetGatewayAttachmentList)
  , "EgressOnlyInternetGatewayId" :: Maybe (EgressOnlyInternetGatewayId)
  }
derive instance newtypeEgressOnlyInternetGateway :: Newtype EgressOnlyInternetGateway _
derive instance repGenericEgressOnlyInternetGateway :: Generic EgressOnlyInternetGateway _
instance showEgressOnlyInternetGateway :: Show EgressOnlyInternetGateway where show = genericShow
instance decodeEgressOnlyInternetGateway :: Decode EgressOnlyInternetGateway where decode = genericDecode options
instance encodeEgressOnlyInternetGateway :: Encode EgressOnlyInternetGateway where encode = genericEncode options

-- | Constructs EgressOnlyInternetGateway from required parameters
newEgressOnlyInternetGateway :: EgressOnlyInternetGateway
newEgressOnlyInternetGateway  = EgressOnlyInternetGateway { "Attachments": Nothing, "EgressOnlyInternetGatewayId": Nothing }

-- | Constructs EgressOnlyInternetGateway's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newEgressOnlyInternetGateway' :: ( { "Attachments" :: Maybe (InternetGatewayAttachmentList) , "EgressOnlyInternetGatewayId" :: Maybe (EgressOnlyInternetGatewayId) } -> {"Attachments" :: Maybe (InternetGatewayAttachmentList) , "EgressOnlyInternetGatewayId" :: Maybe (EgressOnlyInternetGatewayId) } ) -> EgressOnlyInternetGateway
newEgressOnlyInternetGateway'  customize = (EgressOnlyInternetGateway <<< customize) { "Attachments": Nothing, "EgressOnlyInternetGatewayId": Nothing }



newtype EgressOnlyInternetGatewayId = EgressOnlyInternetGatewayId String
derive instance newtypeEgressOnlyInternetGatewayId :: Newtype EgressOnlyInternetGatewayId _
derive instance repGenericEgressOnlyInternetGatewayId :: Generic EgressOnlyInternetGatewayId _
instance showEgressOnlyInternetGatewayId :: Show EgressOnlyInternetGatewayId where show = genericShow
instance decodeEgressOnlyInternetGatewayId :: Decode EgressOnlyInternetGatewayId where decode = genericDecode options
instance encodeEgressOnlyInternetGatewayId :: Encode EgressOnlyInternetGatewayId where encode = genericEncode options



newtype EgressOnlyInternetGatewayIdList = EgressOnlyInternetGatewayIdList (Array EgressOnlyInternetGatewayId)
derive instance newtypeEgressOnlyInternetGatewayIdList :: Newtype EgressOnlyInternetGatewayIdList _
derive instance repGenericEgressOnlyInternetGatewayIdList :: Generic EgressOnlyInternetGatewayIdList _
instance showEgressOnlyInternetGatewayIdList :: Show EgressOnlyInternetGatewayIdList where show = genericShow
instance decodeEgressOnlyInternetGatewayIdList :: Decode EgressOnlyInternetGatewayIdList where decode = genericDecode options
instance encodeEgressOnlyInternetGatewayIdList :: Encode EgressOnlyInternetGatewayIdList where encode = genericEncode options



newtype EgressOnlyInternetGatewayList = EgressOnlyInternetGatewayList (Array EgressOnlyInternetGateway)
derive instance newtypeEgressOnlyInternetGatewayList :: Newtype EgressOnlyInternetGatewayList _
derive instance repGenericEgressOnlyInternetGatewayList :: Generic EgressOnlyInternetGatewayList _
instance showEgressOnlyInternetGatewayList :: Show EgressOnlyInternetGatewayList where show = genericShow
instance decodeEgressOnlyInternetGatewayList :: Decode EgressOnlyInternetGatewayList where decode = genericDecode options
instance encodeEgressOnlyInternetGatewayList :: Encode EgressOnlyInternetGatewayList where encode = genericEncode options



-- | <p>Describes the association between an instance and an Elastic GPU.</p>
newtype ElasticGpuAssociation = ElasticGpuAssociation 
  { "ElasticGpuId" :: Maybe (String)
  , "ElasticGpuAssociationId" :: Maybe (String)
  , "ElasticGpuAssociationState" :: Maybe (String)
  , "ElasticGpuAssociationTime" :: Maybe (String)
  }
derive instance newtypeElasticGpuAssociation :: Newtype ElasticGpuAssociation _
derive instance repGenericElasticGpuAssociation :: Generic ElasticGpuAssociation _
instance showElasticGpuAssociation :: Show ElasticGpuAssociation where show = genericShow
instance decodeElasticGpuAssociation :: Decode ElasticGpuAssociation where decode = genericDecode options
instance encodeElasticGpuAssociation :: Encode ElasticGpuAssociation where encode = genericEncode options

-- | Constructs ElasticGpuAssociation from required parameters
newElasticGpuAssociation :: ElasticGpuAssociation
newElasticGpuAssociation  = ElasticGpuAssociation { "ElasticGpuAssociationId": Nothing, "ElasticGpuAssociationState": Nothing, "ElasticGpuAssociationTime": Nothing, "ElasticGpuId": Nothing }

-- | Constructs ElasticGpuAssociation's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newElasticGpuAssociation' :: ( { "ElasticGpuId" :: Maybe (String) , "ElasticGpuAssociationId" :: Maybe (String) , "ElasticGpuAssociationState" :: Maybe (String) , "ElasticGpuAssociationTime" :: Maybe (String) } -> {"ElasticGpuId" :: Maybe (String) , "ElasticGpuAssociationId" :: Maybe (String) , "ElasticGpuAssociationState" :: Maybe (String) , "ElasticGpuAssociationTime" :: Maybe (String) } ) -> ElasticGpuAssociation
newElasticGpuAssociation'  customize = (ElasticGpuAssociation <<< customize) { "ElasticGpuAssociationId": Nothing, "ElasticGpuAssociationState": Nothing, "ElasticGpuAssociationTime": Nothing, "ElasticGpuId": Nothing }



newtype ElasticGpuAssociationList = ElasticGpuAssociationList (Array ElasticGpuAssociation)
derive instance newtypeElasticGpuAssociationList :: Newtype ElasticGpuAssociationList _
derive instance repGenericElasticGpuAssociationList :: Generic ElasticGpuAssociationList _
instance showElasticGpuAssociationList :: Show ElasticGpuAssociationList where show = genericShow
instance decodeElasticGpuAssociationList :: Decode ElasticGpuAssociationList where decode = genericDecode options
instance encodeElasticGpuAssociationList :: Encode ElasticGpuAssociationList where encode = genericEncode options



-- | <p>Describes the status of an Elastic GPU.</p>
newtype ElasticGpuHealth = ElasticGpuHealth 
  { "Status" :: Maybe (ElasticGpuStatus)
  }
derive instance newtypeElasticGpuHealth :: Newtype ElasticGpuHealth _
derive instance repGenericElasticGpuHealth :: Generic ElasticGpuHealth _
instance showElasticGpuHealth :: Show ElasticGpuHealth where show = genericShow
instance decodeElasticGpuHealth :: Decode ElasticGpuHealth where decode = genericDecode options
instance encodeElasticGpuHealth :: Encode ElasticGpuHealth where encode = genericEncode options

-- | Constructs ElasticGpuHealth from required parameters
newElasticGpuHealth :: ElasticGpuHealth
newElasticGpuHealth  = ElasticGpuHealth { "Status": Nothing }

-- | Constructs ElasticGpuHealth's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newElasticGpuHealth' :: ( { "Status" :: Maybe (ElasticGpuStatus) } -> {"Status" :: Maybe (ElasticGpuStatus) } ) -> ElasticGpuHealth
newElasticGpuHealth'  customize = (ElasticGpuHealth <<< customize) { "Status": Nothing }



newtype ElasticGpuIdSet = ElasticGpuIdSet (Array String)
derive instance newtypeElasticGpuIdSet :: Newtype ElasticGpuIdSet _
derive instance repGenericElasticGpuIdSet :: Generic ElasticGpuIdSet _
instance showElasticGpuIdSet :: Show ElasticGpuIdSet where show = genericShow
instance decodeElasticGpuIdSet :: Decode ElasticGpuIdSet where decode = genericDecode options
instance encodeElasticGpuIdSet :: Encode ElasticGpuIdSet where encode = genericEncode options



newtype ElasticGpuSet = ElasticGpuSet (Array ElasticGpus)
derive instance newtypeElasticGpuSet :: Newtype ElasticGpuSet _
derive instance repGenericElasticGpuSet :: Generic ElasticGpuSet _
instance showElasticGpuSet :: Show ElasticGpuSet where show = genericShow
instance decodeElasticGpuSet :: Decode ElasticGpuSet where decode = genericDecode options
instance encodeElasticGpuSet :: Encode ElasticGpuSet where encode = genericEncode options



-- | <p>A specification for an Elastic GPU.</p>
newtype ElasticGpuSpecification = ElasticGpuSpecification 
  { "Type" :: (String)
  }
derive instance newtypeElasticGpuSpecification :: Newtype ElasticGpuSpecification _
derive instance repGenericElasticGpuSpecification :: Generic ElasticGpuSpecification _
instance showElasticGpuSpecification :: Show ElasticGpuSpecification where show = genericShow
instance decodeElasticGpuSpecification :: Decode ElasticGpuSpecification where decode = genericDecode options
instance encodeElasticGpuSpecification :: Encode ElasticGpuSpecification where encode = genericEncode options

-- | Constructs ElasticGpuSpecification from required parameters
newElasticGpuSpecification :: String -> ElasticGpuSpecification
newElasticGpuSpecification _Type = ElasticGpuSpecification { "Type": _Type }

-- | Constructs ElasticGpuSpecification's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newElasticGpuSpecification' :: String -> ( { "Type" :: (String) } -> {"Type" :: (String) } ) -> ElasticGpuSpecification
newElasticGpuSpecification' _Type customize = (ElasticGpuSpecification <<< customize) { "Type": _Type }



newtype ElasticGpuSpecificationList = ElasticGpuSpecificationList (Array ElasticGpuSpecification)
derive instance newtypeElasticGpuSpecificationList :: Newtype ElasticGpuSpecificationList _
derive instance repGenericElasticGpuSpecificationList :: Generic ElasticGpuSpecificationList _
instance showElasticGpuSpecificationList :: Show ElasticGpuSpecificationList where show = genericShow
instance decodeElasticGpuSpecificationList :: Decode ElasticGpuSpecificationList where decode = genericDecode options
instance encodeElasticGpuSpecificationList :: Encode ElasticGpuSpecificationList where encode = genericEncode options



-- | <p>Describes an elastic GPU.</p>
newtype ElasticGpuSpecificationResponse = ElasticGpuSpecificationResponse 
  { "Type" :: Maybe (String)
  }
derive instance newtypeElasticGpuSpecificationResponse :: Newtype ElasticGpuSpecificationResponse _
derive instance repGenericElasticGpuSpecificationResponse :: Generic ElasticGpuSpecificationResponse _
instance showElasticGpuSpecificationResponse :: Show ElasticGpuSpecificationResponse where show = genericShow
instance decodeElasticGpuSpecificationResponse :: Decode ElasticGpuSpecificationResponse where decode = genericDecode options
instance encodeElasticGpuSpecificationResponse :: Encode ElasticGpuSpecificationResponse where encode = genericEncode options

-- | Constructs ElasticGpuSpecificationResponse from required parameters
newElasticGpuSpecificationResponse :: ElasticGpuSpecificationResponse
newElasticGpuSpecificationResponse  = ElasticGpuSpecificationResponse { "Type": Nothing }

-- | Constructs ElasticGpuSpecificationResponse's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newElasticGpuSpecificationResponse' :: ( { "Type" :: Maybe (String) } -> {"Type" :: Maybe (String) } ) -> ElasticGpuSpecificationResponse
newElasticGpuSpecificationResponse'  customize = (ElasticGpuSpecificationResponse <<< customize) { "Type": Nothing }



newtype ElasticGpuSpecificationResponseList = ElasticGpuSpecificationResponseList (Array ElasticGpuSpecificationResponse)
derive instance newtypeElasticGpuSpecificationResponseList :: Newtype ElasticGpuSpecificationResponseList _
derive instance repGenericElasticGpuSpecificationResponseList :: Generic ElasticGpuSpecificationResponseList _
instance showElasticGpuSpecificationResponseList :: Show ElasticGpuSpecificationResponseList where show = genericShow
instance decodeElasticGpuSpecificationResponseList :: Decode ElasticGpuSpecificationResponseList where decode = genericDecode options
instance encodeElasticGpuSpecificationResponseList :: Encode ElasticGpuSpecificationResponseList where encode = genericEncode options



newtype ElasticGpuSpecifications = ElasticGpuSpecifications (Array ElasticGpuSpecification)
derive instance newtypeElasticGpuSpecifications :: Newtype ElasticGpuSpecifications _
derive instance repGenericElasticGpuSpecifications :: Generic ElasticGpuSpecifications _
instance showElasticGpuSpecifications :: Show ElasticGpuSpecifications where show = genericShow
instance decodeElasticGpuSpecifications :: Decode ElasticGpuSpecifications where decode = genericDecode options
instance encodeElasticGpuSpecifications :: Encode ElasticGpuSpecifications where encode = genericEncode options



newtype ElasticGpuState = ElasticGpuState String
derive instance newtypeElasticGpuState :: Newtype ElasticGpuState _
derive instance repGenericElasticGpuState :: Generic ElasticGpuState _
instance showElasticGpuState :: Show ElasticGpuState where show = genericShow
instance decodeElasticGpuState :: Decode ElasticGpuState where decode = genericDecode options
instance encodeElasticGpuState :: Encode ElasticGpuState where encode = genericEncode options



newtype ElasticGpuStatus = ElasticGpuStatus String
derive instance newtypeElasticGpuStatus :: Newtype ElasticGpuStatus _
derive instance repGenericElasticGpuStatus :: Generic ElasticGpuStatus _
instance showElasticGpuStatus :: Show ElasticGpuStatus where show = genericShow
instance decodeElasticGpuStatus :: Decode ElasticGpuStatus where decode = genericDecode options
instance encodeElasticGpuStatus :: Encode ElasticGpuStatus where encode = genericEncode options



-- | <p>Describes an Elastic GPU.</p>
newtype ElasticGpus = ElasticGpus 
  { "ElasticGpuId" :: Maybe (String)
  , "AvailabilityZone" :: Maybe (String)
  , "ElasticGpuType" :: Maybe (String)
  , "ElasticGpuHealth" :: Maybe (ElasticGpuHealth)
  , "ElasticGpuState" :: Maybe (ElasticGpuState)
  , "InstanceId" :: Maybe (String)
  }
derive instance newtypeElasticGpus :: Newtype ElasticGpus _
derive instance repGenericElasticGpus :: Generic ElasticGpus _
instance showElasticGpus :: Show ElasticGpus where show = genericShow
instance decodeElasticGpus :: Decode ElasticGpus where decode = genericDecode options
instance encodeElasticGpus :: Encode ElasticGpus where encode = genericEncode options

-- | Constructs ElasticGpus from required parameters
newElasticGpus :: ElasticGpus
newElasticGpus  = ElasticGpus { "AvailabilityZone": Nothing, "ElasticGpuHealth": Nothing, "ElasticGpuId": Nothing, "ElasticGpuState": Nothing, "ElasticGpuType": Nothing, "InstanceId": Nothing }

-- | Constructs ElasticGpus's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newElasticGpus' :: ( { "ElasticGpuId" :: Maybe (String) , "AvailabilityZone" :: Maybe (String) , "ElasticGpuType" :: Maybe (String) , "ElasticGpuHealth" :: Maybe (ElasticGpuHealth) , "ElasticGpuState" :: Maybe (ElasticGpuState) , "InstanceId" :: Maybe (String) } -> {"ElasticGpuId" :: Maybe (String) , "AvailabilityZone" :: Maybe (String) , "ElasticGpuType" :: Maybe (String) , "ElasticGpuHealth" :: Maybe (ElasticGpuHealth) , "ElasticGpuState" :: Maybe (ElasticGpuState) , "InstanceId" :: Maybe (String) } ) -> ElasticGpus
newElasticGpus'  customize = (ElasticGpus <<< customize) { "AvailabilityZone": Nothing, "ElasticGpuHealth": Nothing, "ElasticGpuId": Nothing, "ElasticGpuState": Nothing, "ElasticGpuType": Nothing, "InstanceId": Nothing }



-- | <p>Contains the parameters for EnableVgwRoutePropagation.</p>
newtype EnableVgwRoutePropagationRequest = EnableVgwRoutePropagationRequest 
  { "GatewayId" :: (String)
  , "RouteTableId" :: (String)
  }
derive instance newtypeEnableVgwRoutePropagationRequest :: Newtype EnableVgwRoutePropagationRequest _
derive instance repGenericEnableVgwRoutePropagationRequest :: Generic EnableVgwRoutePropagationRequest _
instance showEnableVgwRoutePropagationRequest :: Show EnableVgwRoutePropagationRequest where show = genericShow
instance decodeEnableVgwRoutePropagationRequest :: Decode EnableVgwRoutePropagationRequest where decode = genericDecode options
instance encodeEnableVgwRoutePropagationRequest :: Encode EnableVgwRoutePropagationRequest where encode = genericEncode options

-- | Constructs EnableVgwRoutePropagationRequest from required parameters
newEnableVgwRoutePropagationRequest :: String -> String -> EnableVgwRoutePropagationRequest
newEnableVgwRoutePropagationRequest _GatewayId _RouteTableId = EnableVgwRoutePropagationRequest { "GatewayId": _GatewayId, "RouteTableId": _RouteTableId }

-- | Constructs EnableVgwRoutePropagationRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newEnableVgwRoutePropagationRequest' :: String -> String -> ( { "GatewayId" :: (String) , "RouteTableId" :: (String) } -> {"GatewayId" :: (String) , "RouteTableId" :: (String) } ) -> EnableVgwRoutePropagationRequest
newEnableVgwRoutePropagationRequest' _GatewayId _RouteTableId customize = (EnableVgwRoutePropagationRequest <<< customize) { "GatewayId": _GatewayId, "RouteTableId": _RouteTableId }



-- | <p>Contains the parameters for EnableVolumeIO.</p>
newtype EnableVolumeIORequest = EnableVolumeIORequest 
  { "DryRun" :: Maybe (Boolean)
  , "VolumeId" :: (String)
  }
derive instance newtypeEnableVolumeIORequest :: Newtype EnableVolumeIORequest _
derive instance repGenericEnableVolumeIORequest :: Generic EnableVolumeIORequest _
instance showEnableVolumeIORequest :: Show EnableVolumeIORequest where show = genericShow
instance decodeEnableVolumeIORequest :: Decode EnableVolumeIORequest where decode = genericDecode options
instance encodeEnableVolumeIORequest :: Encode EnableVolumeIORequest where encode = genericEncode options

-- | Constructs EnableVolumeIORequest from required parameters
newEnableVolumeIORequest :: String -> EnableVolumeIORequest
newEnableVolumeIORequest _VolumeId = EnableVolumeIORequest { "VolumeId": _VolumeId, "DryRun": Nothing }

-- | Constructs EnableVolumeIORequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newEnableVolumeIORequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "VolumeId" :: (String) } -> {"DryRun" :: Maybe (Boolean) , "VolumeId" :: (String) } ) -> EnableVolumeIORequest
newEnableVolumeIORequest' _VolumeId customize = (EnableVolumeIORequest <<< customize) { "VolumeId": _VolumeId, "DryRun": Nothing }



-- | <p>Contains the parameters for EnableVpcClassicLinkDnsSupport.</p>
newtype EnableVpcClassicLinkDnsSupportRequest = EnableVpcClassicLinkDnsSupportRequest 
  { "VpcId" :: Maybe (String)
  }
derive instance newtypeEnableVpcClassicLinkDnsSupportRequest :: Newtype EnableVpcClassicLinkDnsSupportRequest _
derive instance repGenericEnableVpcClassicLinkDnsSupportRequest :: Generic EnableVpcClassicLinkDnsSupportRequest _
instance showEnableVpcClassicLinkDnsSupportRequest :: Show EnableVpcClassicLinkDnsSupportRequest where show = genericShow
instance decodeEnableVpcClassicLinkDnsSupportRequest :: Decode EnableVpcClassicLinkDnsSupportRequest where decode = genericDecode options
instance encodeEnableVpcClassicLinkDnsSupportRequest :: Encode EnableVpcClassicLinkDnsSupportRequest where encode = genericEncode options

-- | Constructs EnableVpcClassicLinkDnsSupportRequest from required parameters
newEnableVpcClassicLinkDnsSupportRequest :: EnableVpcClassicLinkDnsSupportRequest
newEnableVpcClassicLinkDnsSupportRequest  = EnableVpcClassicLinkDnsSupportRequest { "VpcId": Nothing }

-- | Constructs EnableVpcClassicLinkDnsSupportRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newEnableVpcClassicLinkDnsSupportRequest' :: ( { "VpcId" :: Maybe (String) } -> {"VpcId" :: Maybe (String) } ) -> EnableVpcClassicLinkDnsSupportRequest
newEnableVpcClassicLinkDnsSupportRequest'  customize = (EnableVpcClassicLinkDnsSupportRequest <<< customize) { "VpcId": Nothing }



-- | <p>Contains the output of EnableVpcClassicLinkDnsSupport.</p>
newtype EnableVpcClassicLinkDnsSupportResult = EnableVpcClassicLinkDnsSupportResult 
  { "Return" :: Maybe (Boolean)
  }
derive instance newtypeEnableVpcClassicLinkDnsSupportResult :: Newtype EnableVpcClassicLinkDnsSupportResult _
derive instance repGenericEnableVpcClassicLinkDnsSupportResult :: Generic EnableVpcClassicLinkDnsSupportResult _
instance showEnableVpcClassicLinkDnsSupportResult :: Show EnableVpcClassicLinkDnsSupportResult where show = genericShow
instance decodeEnableVpcClassicLinkDnsSupportResult :: Decode EnableVpcClassicLinkDnsSupportResult where decode = genericDecode options
instance encodeEnableVpcClassicLinkDnsSupportResult :: Encode EnableVpcClassicLinkDnsSupportResult where encode = genericEncode options

-- | Constructs EnableVpcClassicLinkDnsSupportResult from required parameters
newEnableVpcClassicLinkDnsSupportResult :: EnableVpcClassicLinkDnsSupportResult
newEnableVpcClassicLinkDnsSupportResult  = EnableVpcClassicLinkDnsSupportResult { "Return": Nothing }

-- | Constructs EnableVpcClassicLinkDnsSupportResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newEnableVpcClassicLinkDnsSupportResult' :: ( { "Return" :: Maybe (Boolean) } -> {"Return" :: Maybe (Boolean) } ) -> EnableVpcClassicLinkDnsSupportResult
newEnableVpcClassicLinkDnsSupportResult'  customize = (EnableVpcClassicLinkDnsSupportResult <<< customize) { "Return": Nothing }



-- | <p>Contains the parameters for EnableVpcClassicLink.</p>
newtype EnableVpcClassicLinkRequest = EnableVpcClassicLinkRequest 
  { "DryRun" :: Maybe (Boolean)
  , "VpcId" :: (String)
  }
derive instance newtypeEnableVpcClassicLinkRequest :: Newtype EnableVpcClassicLinkRequest _
derive instance repGenericEnableVpcClassicLinkRequest :: Generic EnableVpcClassicLinkRequest _
instance showEnableVpcClassicLinkRequest :: Show EnableVpcClassicLinkRequest where show = genericShow
instance decodeEnableVpcClassicLinkRequest :: Decode EnableVpcClassicLinkRequest where decode = genericDecode options
instance encodeEnableVpcClassicLinkRequest :: Encode EnableVpcClassicLinkRequest where encode = genericEncode options

-- | Constructs EnableVpcClassicLinkRequest from required parameters
newEnableVpcClassicLinkRequest :: String -> EnableVpcClassicLinkRequest
newEnableVpcClassicLinkRequest _VpcId = EnableVpcClassicLinkRequest { "VpcId": _VpcId, "DryRun": Nothing }

-- | Constructs EnableVpcClassicLinkRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newEnableVpcClassicLinkRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "VpcId" :: (String) } -> {"DryRun" :: Maybe (Boolean) , "VpcId" :: (String) } ) -> EnableVpcClassicLinkRequest
newEnableVpcClassicLinkRequest' _VpcId customize = (EnableVpcClassicLinkRequest <<< customize) { "VpcId": _VpcId, "DryRun": Nothing }



-- | <p>Contains the output of EnableVpcClassicLink.</p>
newtype EnableVpcClassicLinkResult = EnableVpcClassicLinkResult 
  { "Return" :: Maybe (Boolean)
  }
derive instance newtypeEnableVpcClassicLinkResult :: Newtype EnableVpcClassicLinkResult _
derive instance repGenericEnableVpcClassicLinkResult :: Generic EnableVpcClassicLinkResult _
instance showEnableVpcClassicLinkResult :: Show EnableVpcClassicLinkResult where show = genericShow
instance decodeEnableVpcClassicLinkResult :: Decode EnableVpcClassicLinkResult where decode = genericDecode options
instance encodeEnableVpcClassicLinkResult :: Encode EnableVpcClassicLinkResult where encode = genericEncode options

-- | Constructs EnableVpcClassicLinkResult from required parameters
newEnableVpcClassicLinkResult :: EnableVpcClassicLinkResult
newEnableVpcClassicLinkResult  = EnableVpcClassicLinkResult { "Return": Nothing }

-- | Constructs EnableVpcClassicLinkResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newEnableVpcClassicLinkResult' :: ( { "Return" :: Maybe (Boolean) } -> {"Return" :: Maybe (Boolean) } ) -> EnableVpcClassicLinkResult
newEnableVpcClassicLinkResult'  customize = (EnableVpcClassicLinkResult <<< customize) { "Return": Nothing }



newtype EventCode = EventCode String
derive instance newtypeEventCode :: Newtype EventCode _
derive instance repGenericEventCode :: Generic EventCode _
instance showEventCode :: Show EventCode where show = genericShow
instance decodeEventCode :: Decode EventCode where decode = genericDecode options
instance encodeEventCode :: Encode EventCode where encode = genericEncode options



-- | <p>Describes a Spot Fleet event.</p>
newtype EventInformation = EventInformation 
  { "EventDescription" :: Maybe (String)
  , "EventSubType" :: Maybe (String)
  , "InstanceId" :: Maybe (String)
  }
derive instance newtypeEventInformation :: Newtype EventInformation _
derive instance repGenericEventInformation :: Generic EventInformation _
instance showEventInformation :: Show EventInformation where show = genericShow
instance decodeEventInformation :: Decode EventInformation where decode = genericDecode options
instance encodeEventInformation :: Encode EventInformation where encode = genericEncode options

-- | Constructs EventInformation from required parameters
newEventInformation :: EventInformation
newEventInformation  = EventInformation { "EventDescription": Nothing, "EventSubType": Nothing, "InstanceId": Nothing }

-- | Constructs EventInformation's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newEventInformation' :: ( { "EventDescription" :: Maybe (String) , "EventSubType" :: Maybe (String) , "InstanceId" :: Maybe (String) } -> {"EventDescription" :: Maybe (String) , "EventSubType" :: Maybe (String) , "InstanceId" :: Maybe (String) } ) -> EventInformation
newEventInformation'  customize = (EventInformation <<< customize) { "EventDescription": Nothing, "EventSubType": Nothing, "InstanceId": Nothing }



newtype EventType = EventType String
derive instance newtypeEventType :: Newtype EventType _
derive instance repGenericEventType :: Generic EventType _
instance showEventType :: Show EventType where show = genericShow
instance decodeEventType :: Decode EventType where decode = genericDecode options
instance encodeEventType :: Encode EventType where encode = genericEncode options



newtype ExcessCapacityTerminationPolicy = ExcessCapacityTerminationPolicy String
derive instance newtypeExcessCapacityTerminationPolicy :: Newtype ExcessCapacityTerminationPolicy _
derive instance repGenericExcessCapacityTerminationPolicy :: Generic ExcessCapacityTerminationPolicy _
instance showExcessCapacityTerminationPolicy :: Show ExcessCapacityTerminationPolicy where show = genericShow
instance decodeExcessCapacityTerminationPolicy :: Decode ExcessCapacityTerminationPolicy where decode = genericDecode options
instance encodeExcessCapacityTerminationPolicy :: Encode ExcessCapacityTerminationPolicy where encode = genericEncode options



newtype ExecutableByStringList = ExecutableByStringList (Array String)
derive instance newtypeExecutableByStringList :: Newtype ExecutableByStringList _
derive instance repGenericExecutableByStringList :: Generic ExecutableByStringList _
instance showExecutableByStringList :: Show ExecutableByStringList where show = genericShow
instance decodeExecutableByStringList :: Decode ExecutableByStringList where decode = genericDecode options
instance encodeExecutableByStringList :: Encode ExecutableByStringList where encode = genericEncode options



newtype ExportEnvironment = ExportEnvironment String
derive instance newtypeExportEnvironment :: Newtype ExportEnvironment _
derive instance repGenericExportEnvironment :: Generic ExportEnvironment _
instance showExportEnvironment :: Show ExportEnvironment where show = genericShow
instance decodeExportEnvironment :: Decode ExportEnvironment where decode = genericDecode options
instance encodeExportEnvironment :: Encode ExportEnvironment where encode = genericEncode options



-- | <p>Describes an instance export task.</p>
newtype ExportTask = ExportTask 
  { "Description" :: Maybe (String)
  , "ExportTaskId" :: Maybe (String)
  , "ExportToS3Task" :: Maybe (ExportToS3Task)
  , "InstanceExportDetails" :: Maybe (InstanceExportDetails)
  , "State" :: Maybe (ExportTaskState)
  , "StatusMessage" :: Maybe (String)
  }
derive instance newtypeExportTask :: Newtype ExportTask _
derive instance repGenericExportTask :: Generic ExportTask _
instance showExportTask :: Show ExportTask where show = genericShow
instance decodeExportTask :: Decode ExportTask where decode = genericDecode options
instance encodeExportTask :: Encode ExportTask where encode = genericEncode options

-- | Constructs ExportTask from required parameters
newExportTask :: ExportTask
newExportTask  = ExportTask { "Description": Nothing, "ExportTaskId": Nothing, "ExportToS3Task": Nothing, "InstanceExportDetails": Nothing, "State": Nothing, "StatusMessage": Nothing }

-- | Constructs ExportTask's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newExportTask' :: ( { "Description" :: Maybe (String) , "ExportTaskId" :: Maybe (String) , "ExportToS3Task" :: Maybe (ExportToS3Task) , "InstanceExportDetails" :: Maybe (InstanceExportDetails) , "State" :: Maybe (ExportTaskState) , "StatusMessage" :: Maybe (String) } -> {"Description" :: Maybe (String) , "ExportTaskId" :: Maybe (String) , "ExportToS3Task" :: Maybe (ExportToS3Task) , "InstanceExportDetails" :: Maybe (InstanceExportDetails) , "State" :: Maybe (ExportTaskState) , "StatusMessage" :: Maybe (String) } ) -> ExportTask
newExportTask'  customize = (ExportTask <<< customize) { "Description": Nothing, "ExportTaskId": Nothing, "ExportToS3Task": Nothing, "InstanceExportDetails": Nothing, "State": Nothing, "StatusMessage": Nothing }



newtype ExportTaskIdStringList = ExportTaskIdStringList (Array String)
derive instance newtypeExportTaskIdStringList :: Newtype ExportTaskIdStringList _
derive instance repGenericExportTaskIdStringList :: Generic ExportTaskIdStringList _
instance showExportTaskIdStringList :: Show ExportTaskIdStringList where show = genericShow
instance decodeExportTaskIdStringList :: Decode ExportTaskIdStringList where decode = genericDecode options
instance encodeExportTaskIdStringList :: Encode ExportTaskIdStringList where encode = genericEncode options



newtype ExportTaskList = ExportTaskList (Array ExportTask)
derive instance newtypeExportTaskList :: Newtype ExportTaskList _
derive instance repGenericExportTaskList :: Generic ExportTaskList _
instance showExportTaskList :: Show ExportTaskList where show = genericShow
instance decodeExportTaskList :: Decode ExportTaskList where decode = genericDecode options
instance encodeExportTaskList :: Encode ExportTaskList where encode = genericEncode options



newtype ExportTaskState = ExportTaskState String
derive instance newtypeExportTaskState :: Newtype ExportTaskState _
derive instance repGenericExportTaskState :: Generic ExportTaskState _
instance showExportTaskState :: Show ExportTaskState where show = genericShow
instance decodeExportTaskState :: Decode ExportTaskState where decode = genericDecode options
instance encodeExportTaskState :: Encode ExportTaskState where encode = genericEncode options



-- | <p>Describes the format and location for an instance export task.</p>
newtype ExportToS3Task = ExportToS3Task 
  { "ContainerFormat" :: Maybe (ContainerFormat)
  , "DiskImageFormat" :: Maybe (DiskImageFormat)
  , "S3Bucket" :: Maybe (String)
  , "S3Key" :: Maybe (String)
  }
derive instance newtypeExportToS3Task :: Newtype ExportToS3Task _
derive instance repGenericExportToS3Task :: Generic ExportToS3Task _
instance showExportToS3Task :: Show ExportToS3Task where show = genericShow
instance decodeExportToS3Task :: Decode ExportToS3Task where decode = genericDecode options
instance encodeExportToS3Task :: Encode ExportToS3Task where encode = genericEncode options

-- | Constructs ExportToS3Task from required parameters
newExportToS3Task :: ExportToS3Task
newExportToS3Task  = ExportToS3Task { "ContainerFormat": Nothing, "DiskImageFormat": Nothing, "S3Bucket": Nothing, "S3Key": Nothing }

-- | Constructs ExportToS3Task's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newExportToS3Task' :: ( { "ContainerFormat" :: Maybe (ContainerFormat) , "DiskImageFormat" :: Maybe (DiskImageFormat) , "S3Bucket" :: Maybe (String) , "S3Key" :: Maybe (String) } -> {"ContainerFormat" :: Maybe (ContainerFormat) , "DiskImageFormat" :: Maybe (DiskImageFormat) , "S3Bucket" :: Maybe (String) , "S3Key" :: Maybe (String) } ) -> ExportToS3Task
newExportToS3Task'  customize = (ExportToS3Task <<< customize) { "ContainerFormat": Nothing, "DiskImageFormat": Nothing, "S3Bucket": Nothing, "S3Key": Nothing }



-- | <p>Describes an instance export task.</p>
newtype ExportToS3TaskSpecification = ExportToS3TaskSpecification 
  { "ContainerFormat" :: Maybe (ContainerFormat)
  , "DiskImageFormat" :: Maybe (DiskImageFormat)
  , "S3Bucket" :: Maybe (String)
  , "S3Prefix" :: Maybe (String)
  }
derive instance newtypeExportToS3TaskSpecification :: Newtype ExportToS3TaskSpecification _
derive instance repGenericExportToS3TaskSpecification :: Generic ExportToS3TaskSpecification _
instance showExportToS3TaskSpecification :: Show ExportToS3TaskSpecification where show = genericShow
instance decodeExportToS3TaskSpecification :: Decode ExportToS3TaskSpecification where decode = genericDecode options
instance encodeExportToS3TaskSpecification :: Encode ExportToS3TaskSpecification where encode = genericEncode options

-- | Constructs ExportToS3TaskSpecification from required parameters
newExportToS3TaskSpecification :: ExportToS3TaskSpecification
newExportToS3TaskSpecification  = ExportToS3TaskSpecification { "ContainerFormat": Nothing, "DiskImageFormat": Nothing, "S3Bucket": Nothing, "S3Prefix": Nothing }

-- | Constructs ExportToS3TaskSpecification's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newExportToS3TaskSpecification' :: ( { "ContainerFormat" :: Maybe (ContainerFormat) , "DiskImageFormat" :: Maybe (DiskImageFormat) , "S3Bucket" :: Maybe (String) , "S3Prefix" :: Maybe (String) } -> {"ContainerFormat" :: Maybe (ContainerFormat) , "DiskImageFormat" :: Maybe (DiskImageFormat) , "S3Bucket" :: Maybe (String) , "S3Prefix" :: Maybe (String) } ) -> ExportToS3TaskSpecification
newExportToS3TaskSpecification'  customize = (ExportToS3TaskSpecification <<< customize) { "ContainerFormat": Nothing, "DiskImageFormat": Nothing, "S3Bucket": Nothing, "S3Prefix": Nothing }



-- | <p>A filter name and value pair that is used to return a more specific list of results. Filters can be used to match a set of resources by various criteria, such as tags, attributes, or IDs.</p>
newtype Filter = Filter 
  { "Name" :: Maybe (String)
  , "Values" :: Maybe (ValueStringList)
  }
derive instance newtypeFilter :: Newtype Filter _
derive instance repGenericFilter :: Generic Filter _
instance showFilter :: Show Filter where show = genericShow
instance decodeFilter :: Decode Filter where decode = genericDecode options
instance encodeFilter :: Encode Filter where encode = genericEncode options

-- | Constructs Filter from required parameters
newFilter :: Filter
newFilter  = Filter { "Name": Nothing, "Values": Nothing }

-- | Constructs Filter's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newFilter' :: ( { "Name" :: Maybe (String) , "Values" :: Maybe (ValueStringList) } -> {"Name" :: Maybe (String) , "Values" :: Maybe (ValueStringList) } ) -> Filter
newFilter'  customize = (Filter <<< customize) { "Name": Nothing, "Values": Nothing }



newtype FilterList = FilterList (Array Filter)
derive instance newtypeFilterList :: Newtype FilterList _
derive instance repGenericFilterList :: Generic FilterList _
instance showFilterList :: Show FilterList where show = genericShow
instance decodeFilterList :: Decode FilterList where decode = genericDecode options
instance encodeFilterList :: Encode FilterList where encode = genericEncode options



-- | <p>Describes a launch template.</p>
newtype FleetLaunchTemplateSpecification = FleetLaunchTemplateSpecification 
  { "LaunchTemplateId" :: Maybe (String)
  , "LaunchTemplateName" :: Maybe (LaunchTemplateName)
  , "Version" :: Maybe (String)
  }
derive instance newtypeFleetLaunchTemplateSpecification :: Newtype FleetLaunchTemplateSpecification _
derive instance repGenericFleetLaunchTemplateSpecification :: Generic FleetLaunchTemplateSpecification _
instance showFleetLaunchTemplateSpecification :: Show FleetLaunchTemplateSpecification where show = genericShow
instance decodeFleetLaunchTemplateSpecification :: Decode FleetLaunchTemplateSpecification where decode = genericDecode options
instance encodeFleetLaunchTemplateSpecification :: Encode FleetLaunchTemplateSpecification where encode = genericEncode options

-- | Constructs FleetLaunchTemplateSpecification from required parameters
newFleetLaunchTemplateSpecification :: FleetLaunchTemplateSpecification
newFleetLaunchTemplateSpecification  = FleetLaunchTemplateSpecification { "LaunchTemplateId": Nothing, "LaunchTemplateName": Nothing, "Version": Nothing }

-- | Constructs FleetLaunchTemplateSpecification's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newFleetLaunchTemplateSpecification' :: ( { "LaunchTemplateId" :: Maybe (String) , "LaunchTemplateName" :: Maybe (LaunchTemplateName) , "Version" :: Maybe (String) } -> {"LaunchTemplateId" :: Maybe (String) , "LaunchTemplateName" :: Maybe (LaunchTemplateName) , "Version" :: Maybe (String) } ) -> FleetLaunchTemplateSpecification
newFleetLaunchTemplateSpecification'  customize = (FleetLaunchTemplateSpecification <<< customize) { "LaunchTemplateId": Nothing, "LaunchTemplateName": Nothing, "Version": Nothing }



newtype FleetType = FleetType String
derive instance newtypeFleetType :: Newtype FleetType _
derive instance repGenericFleetType :: Generic FleetType _
instance showFleetType :: Show FleetType where show = genericShow
instance decodeFleetType :: Decode FleetType where decode = genericDecode options
instance encodeFleetType :: Encode FleetType where encode = genericEncode options



-- | <p>Describes a flow log.</p>
newtype FlowLog = FlowLog 
  { "CreationTime" :: Maybe (DateTime)
  , "DeliverLogsErrorMessage" :: Maybe (String)
  , "DeliverLogsPermissionArn" :: Maybe (String)
  , "DeliverLogsStatus" :: Maybe (String)
  , "FlowLogId" :: Maybe (String)
  , "FlowLogStatus" :: Maybe (String)
  , "LogGroupName" :: Maybe (String)
  , "ResourceId" :: Maybe (String)
  , "TrafficType" :: Maybe (TrafficType)
  }
derive instance newtypeFlowLog :: Newtype FlowLog _
derive instance repGenericFlowLog :: Generic FlowLog _
instance showFlowLog :: Show FlowLog where show = genericShow
instance decodeFlowLog :: Decode FlowLog where decode = genericDecode options
instance encodeFlowLog :: Encode FlowLog where encode = genericEncode options

-- | Constructs FlowLog from required parameters
newFlowLog :: FlowLog
newFlowLog  = FlowLog { "CreationTime": Nothing, "DeliverLogsErrorMessage": Nothing, "DeliverLogsPermissionArn": Nothing, "DeliverLogsStatus": Nothing, "FlowLogId": Nothing, "FlowLogStatus": Nothing, "LogGroupName": Nothing, "ResourceId": Nothing, "TrafficType": Nothing }

-- | Constructs FlowLog's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newFlowLog' :: ( { "CreationTime" :: Maybe (DateTime) , "DeliverLogsErrorMessage" :: Maybe (String) , "DeliverLogsPermissionArn" :: Maybe (String) , "DeliverLogsStatus" :: Maybe (String) , "FlowLogId" :: Maybe (String) , "FlowLogStatus" :: Maybe (String) , "LogGroupName" :: Maybe (String) , "ResourceId" :: Maybe (String) , "TrafficType" :: Maybe (TrafficType) } -> {"CreationTime" :: Maybe (DateTime) , "DeliverLogsErrorMessage" :: Maybe (String) , "DeliverLogsPermissionArn" :: Maybe (String) , "DeliverLogsStatus" :: Maybe (String) , "FlowLogId" :: Maybe (String) , "FlowLogStatus" :: Maybe (String) , "LogGroupName" :: Maybe (String) , "ResourceId" :: Maybe (String) , "TrafficType" :: Maybe (TrafficType) } ) -> FlowLog
newFlowLog'  customize = (FlowLog <<< customize) { "CreationTime": Nothing, "DeliverLogsErrorMessage": Nothing, "DeliverLogsPermissionArn": Nothing, "DeliverLogsStatus": Nothing, "FlowLogId": Nothing, "FlowLogStatus": Nothing, "LogGroupName": Nothing, "ResourceId": Nothing, "TrafficType": Nothing }



newtype FlowLogSet = FlowLogSet (Array FlowLog)
derive instance newtypeFlowLogSet :: Newtype FlowLogSet _
derive instance repGenericFlowLogSet :: Generic FlowLogSet _
instance showFlowLogSet :: Show FlowLogSet where show = genericShow
instance decodeFlowLogSet :: Decode FlowLogSet where decode = genericDecode options
instance encodeFlowLogSet :: Encode FlowLogSet where encode = genericEncode options



newtype FlowLogsResourceType = FlowLogsResourceType String
derive instance newtypeFlowLogsResourceType :: Newtype FlowLogsResourceType _
derive instance repGenericFlowLogsResourceType :: Generic FlowLogsResourceType _
instance showFlowLogsResourceType :: Show FlowLogsResourceType where show = genericShow
instance decodeFlowLogsResourceType :: Decode FlowLogsResourceType where decode = genericDecode options
instance encodeFlowLogsResourceType :: Encode FlowLogsResourceType where encode = genericEncode options



-- | <p>Describes an Amazon FPGA image (AFI).</p>
newtype FpgaImage = FpgaImage 
  { "FpgaImageId" :: Maybe (String)
  , "FpgaImageGlobalId" :: Maybe (String)
  , "Name" :: Maybe (String)
  , "Description" :: Maybe (String)
  , "ShellVersion" :: Maybe (String)
  , "PciId" :: Maybe (PciId)
  , "State" :: Maybe (FpgaImageState)
  , "CreateTime" :: Maybe (DateTime)
  , "UpdateTime" :: Maybe (DateTime)
  , "OwnerId" :: Maybe (String)
  , "OwnerAlias" :: Maybe (String)
  , "ProductCodes" :: Maybe (ProductCodeList)
  , "Tags" :: Maybe (TagList)
  , "Public" :: Maybe (Boolean)
  }
derive instance newtypeFpgaImage :: Newtype FpgaImage _
derive instance repGenericFpgaImage :: Generic FpgaImage _
instance showFpgaImage :: Show FpgaImage where show = genericShow
instance decodeFpgaImage :: Decode FpgaImage where decode = genericDecode options
instance encodeFpgaImage :: Encode FpgaImage where encode = genericEncode options

-- | Constructs FpgaImage from required parameters
newFpgaImage :: FpgaImage
newFpgaImage  = FpgaImage { "CreateTime": Nothing, "Description": Nothing, "FpgaImageGlobalId": Nothing, "FpgaImageId": Nothing, "Name": Nothing, "OwnerAlias": Nothing, "OwnerId": Nothing, "PciId": Nothing, "ProductCodes": Nothing, "Public": Nothing, "ShellVersion": Nothing, "State": Nothing, "Tags": Nothing, "UpdateTime": Nothing }

-- | Constructs FpgaImage's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newFpgaImage' :: ( { "FpgaImageId" :: Maybe (String) , "FpgaImageGlobalId" :: Maybe (String) , "Name" :: Maybe (String) , "Description" :: Maybe (String) , "ShellVersion" :: Maybe (String) , "PciId" :: Maybe (PciId) , "State" :: Maybe (FpgaImageState) , "CreateTime" :: Maybe (DateTime) , "UpdateTime" :: Maybe (DateTime) , "OwnerId" :: Maybe (String) , "OwnerAlias" :: Maybe (String) , "ProductCodes" :: Maybe (ProductCodeList) , "Tags" :: Maybe (TagList) , "Public" :: Maybe (Boolean) } -> {"FpgaImageId" :: Maybe (String) , "FpgaImageGlobalId" :: Maybe (String) , "Name" :: Maybe (String) , "Description" :: Maybe (String) , "ShellVersion" :: Maybe (String) , "PciId" :: Maybe (PciId) , "State" :: Maybe (FpgaImageState) , "CreateTime" :: Maybe (DateTime) , "UpdateTime" :: Maybe (DateTime) , "OwnerId" :: Maybe (String) , "OwnerAlias" :: Maybe (String) , "ProductCodes" :: Maybe (ProductCodeList) , "Tags" :: Maybe (TagList) , "Public" :: Maybe (Boolean) } ) -> FpgaImage
newFpgaImage'  customize = (FpgaImage <<< customize) { "CreateTime": Nothing, "Description": Nothing, "FpgaImageGlobalId": Nothing, "FpgaImageId": Nothing, "Name": Nothing, "OwnerAlias": Nothing, "OwnerId": Nothing, "PciId": Nothing, "ProductCodes": Nothing, "Public": Nothing, "ShellVersion": Nothing, "State": Nothing, "Tags": Nothing, "UpdateTime": Nothing }



-- | <p>Describes an Amazon FPGA image (AFI) attribute.</p>
newtype FpgaImageAttribute = FpgaImageAttribute 
  { "FpgaImageId" :: Maybe (String)
  , "Name" :: Maybe (String)
  , "Description" :: Maybe (String)
  , "LoadPermissions" :: Maybe (LoadPermissionList)
  , "ProductCodes" :: Maybe (ProductCodeList)
  }
derive instance newtypeFpgaImageAttribute :: Newtype FpgaImageAttribute _
derive instance repGenericFpgaImageAttribute :: Generic FpgaImageAttribute _
instance showFpgaImageAttribute :: Show FpgaImageAttribute where show = genericShow
instance decodeFpgaImageAttribute :: Decode FpgaImageAttribute where decode = genericDecode options
instance encodeFpgaImageAttribute :: Encode FpgaImageAttribute where encode = genericEncode options

-- | Constructs FpgaImageAttribute from required parameters
newFpgaImageAttribute :: FpgaImageAttribute
newFpgaImageAttribute  = FpgaImageAttribute { "Description": Nothing, "FpgaImageId": Nothing, "LoadPermissions": Nothing, "Name": Nothing, "ProductCodes": Nothing }

-- | Constructs FpgaImageAttribute's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newFpgaImageAttribute' :: ( { "FpgaImageId" :: Maybe (String) , "Name" :: Maybe (String) , "Description" :: Maybe (String) , "LoadPermissions" :: Maybe (LoadPermissionList) , "ProductCodes" :: Maybe (ProductCodeList) } -> {"FpgaImageId" :: Maybe (String) , "Name" :: Maybe (String) , "Description" :: Maybe (String) , "LoadPermissions" :: Maybe (LoadPermissionList) , "ProductCodes" :: Maybe (ProductCodeList) } ) -> FpgaImageAttribute
newFpgaImageAttribute'  customize = (FpgaImageAttribute <<< customize) { "Description": Nothing, "FpgaImageId": Nothing, "LoadPermissions": Nothing, "Name": Nothing, "ProductCodes": Nothing }



newtype FpgaImageAttributeName = FpgaImageAttributeName String
derive instance newtypeFpgaImageAttributeName :: Newtype FpgaImageAttributeName _
derive instance repGenericFpgaImageAttributeName :: Generic FpgaImageAttributeName _
instance showFpgaImageAttributeName :: Show FpgaImageAttributeName where show = genericShow
instance decodeFpgaImageAttributeName :: Decode FpgaImageAttributeName where decode = genericDecode options
instance encodeFpgaImageAttributeName :: Encode FpgaImageAttributeName where encode = genericEncode options



newtype FpgaImageIdList = FpgaImageIdList (Array String)
derive instance newtypeFpgaImageIdList :: Newtype FpgaImageIdList _
derive instance repGenericFpgaImageIdList :: Generic FpgaImageIdList _
instance showFpgaImageIdList :: Show FpgaImageIdList where show = genericShow
instance decodeFpgaImageIdList :: Decode FpgaImageIdList where decode = genericDecode options
instance encodeFpgaImageIdList :: Encode FpgaImageIdList where encode = genericEncode options



newtype FpgaImageList = FpgaImageList (Array FpgaImage)
derive instance newtypeFpgaImageList :: Newtype FpgaImageList _
derive instance repGenericFpgaImageList :: Generic FpgaImageList _
instance showFpgaImageList :: Show FpgaImageList where show = genericShow
instance decodeFpgaImageList :: Decode FpgaImageList where decode = genericDecode options
instance encodeFpgaImageList :: Encode FpgaImageList where encode = genericEncode options



-- | <p>Describes the state of the bitstream generation process for an Amazon FPGA image (AFI).</p>
newtype FpgaImageState = FpgaImageState 
  { "Code" :: Maybe (FpgaImageStateCode)
  , "Message" :: Maybe (String)
  }
derive instance newtypeFpgaImageState :: Newtype FpgaImageState _
derive instance repGenericFpgaImageState :: Generic FpgaImageState _
instance showFpgaImageState :: Show FpgaImageState where show = genericShow
instance decodeFpgaImageState :: Decode FpgaImageState where decode = genericDecode options
instance encodeFpgaImageState :: Encode FpgaImageState where encode = genericEncode options

-- | Constructs FpgaImageState from required parameters
newFpgaImageState :: FpgaImageState
newFpgaImageState  = FpgaImageState { "Code": Nothing, "Message": Nothing }

-- | Constructs FpgaImageState's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newFpgaImageState' :: ( { "Code" :: Maybe (FpgaImageStateCode) , "Message" :: Maybe (String) } -> {"Code" :: Maybe (FpgaImageStateCode) , "Message" :: Maybe (String) } ) -> FpgaImageState
newFpgaImageState'  customize = (FpgaImageState <<< customize) { "Code": Nothing, "Message": Nothing }



newtype FpgaImageStateCode = FpgaImageStateCode String
derive instance newtypeFpgaImageStateCode :: Newtype FpgaImageStateCode _
derive instance repGenericFpgaImageStateCode :: Generic FpgaImageStateCode _
instance showFpgaImageStateCode :: Show FpgaImageStateCode where show = genericShow
instance decodeFpgaImageStateCode :: Decode FpgaImageStateCode where decode = genericDecode options
instance encodeFpgaImageStateCode :: Encode FpgaImageStateCode where encode = genericEncode options



newtype GatewayType = GatewayType String
derive instance newtypeGatewayType :: Newtype GatewayType _
derive instance repGenericGatewayType :: Generic GatewayType _
instance showGatewayType :: Show GatewayType where show = genericShow
instance decodeGatewayType :: Decode GatewayType where decode = genericDecode options
instance encodeGatewayType :: Encode GatewayType where encode = genericEncode options



-- | <p>Contains the parameters for GetConsoleOutput.</p>
newtype GetConsoleOutputRequest = GetConsoleOutputRequest 
  { "InstanceId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeGetConsoleOutputRequest :: Newtype GetConsoleOutputRequest _
derive instance repGenericGetConsoleOutputRequest :: Generic GetConsoleOutputRequest _
instance showGetConsoleOutputRequest :: Show GetConsoleOutputRequest where show = genericShow
instance decodeGetConsoleOutputRequest :: Decode GetConsoleOutputRequest where decode = genericDecode options
instance encodeGetConsoleOutputRequest :: Encode GetConsoleOutputRequest where encode = genericEncode options

-- | Constructs GetConsoleOutputRequest from required parameters
newGetConsoleOutputRequest :: String -> GetConsoleOutputRequest
newGetConsoleOutputRequest _InstanceId = GetConsoleOutputRequest { "InstanceId": _InstanceId, "DryRun": Nothing }

-- | Constructs GetConsoleOutputRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newGetConsoleOutputRequest' :: String -> ( { "InstanceId" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"InstanceId" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> GetConsoleOutputRequest
newGetConsoleOutputRequest' _InstanceId customize = (GetConsoleOutputRequest <<< customize) { "InstanceId": _InstanceId, "DryRun": Nothing }



-- | <p>Contains the output of GetConsoleOutput.</p>
newtype GetConsoleOutputResult = GetConsoleOutputResult 
  { "InstanceId" :: Maybe (String)
  , "Output" :: Maybe (String)
  , "Timestamp" :: Maybe (DateTime)
  }
derive instance newtypeGetConsoleOutputResult :: Newtype GetConsoleOutputResult _
derive instance repGenericGetConsoleOutputResult :: Generic GetConsoleOutputResult _
instance showGetConsoleOutputResult :: Show GetConsoleOutputResult where show = genericShow
instance decodeGetConsoleOutputResult :: Decode GetConsoleOutputResult where decode = genericDecode options
instance encodeGetConsoleOutputResult :: Encode GetConsoleOutputResult where encode = genericEncode options

-- | Constructs GetConsoleOutputResult from required parameters
newGetConsoleOutputResult :: GetConsoleOutputResult
newGetConsoleOutputResult  = GetConsoleOutputResult { "InstanceId": Nothing, "Output": Nothing, "Timestamp": Nothing }

-- | Constructs GetConsoleOutputResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newGetConsoleOutputResult' :: ( { "InstanceId" :: Maybe (String) , "Output" :: Maybe (String) , "Timestamp" :: Maybe (DateTime) } -> {"InstanceId" :: Maybe (String) , "Output" :: Maybe (String) , "Timestamp" :: Maybe (DateTime) } ) -> GetConsoleOutputResult
newGetConsoleOutputResult'  customize = (GetConsoleOutputResult <<< customize) { "InstanceId": Nothing, "Output": Nothing, "Timestamp": Nothing }



-- | <p>Contains the parameters for the request.</p>
newtype GetConsoleScreenshotRequest = GetConsoleScreenshotRequest 
  { "DryRun" :: Maybe (Boolean)
  , "InstanceId" :: (String)
  , "WakeUp" :: Maybe (Boolean)
  }
derive instance newtypeGetConsoleScreenshotRequest :: Newtype GetConsoleScreenshotRequest _
derive instance repGenericGetConsoleScreenshotRequest :: Generic GetConsoleScreenshotRequest _
instance showGetConsoleScreenshotRequest :: Show GetConsoleScreenshotRequest where show = genericShow
instance decodeGetConsoleScreenshotRequest :: Decode GetConsoleScreenshotRequest where decode = genericDecode options
instance encodeGetConsoleScreenshotRequest :: Encode GetConsoleScreenshotRequest where encode = genericEncode options

-- | Constructs GetConsoleScreenshotRequest from required parameters
newGetConsoleScreenshotRequest :: String -> GetConsoleScreenshotRequest
newGetConsoleScreenshotRequest _InstanceId = GetConsoleScreenshotRequest { "InstanceId": _InstanceId, "DryRun": Nothing, "WakeUp": Nothing }

-- | Constructs GetConsoleScreenshotRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newGetConsoleScreenshotRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "InstanceId" :: (String) , "WakeUp" :: Maybe (Boolean) } -> {"DryRun" :: Maybe (Boolean) , "InstanceId" :: (String) , "WakeUp" :: Maybe (Boolean) } ) -> GetConsoleScreenshotRequest
newGetConsoleScreenshotRequest' _InstanceId customize = (GetConsoleScreenshotRequest <<< customize) { "InstanceId": _InstanceId, "DryRun": Nothing, "WakeUp": Nothing }



-- | <p>Contains the output of the request.</p>
newtype GetConsoleScreenshotResult = GetConsoleScreenshotResult 
  { "ImageData" :: Maybe (String)
  , "InstanceId" :: Maybe (String)
  }
derive instance newtypeGetConsoleScreenshotResult :: Newtype GetConsoleScreenshotResult _
derive instance repGenericGetConsoleScreenshotResult :: Generic GetConsoleScreenshotResult _
instance showGetConsoleScreenshotResult :: Show GetConsoleScreenshotResult where show = genericShow
instance decodeGetConsoleScreenshotResult :: Decode GetConsoleScreenshotResult where decode = genericDecode options
instance encodeGetConsoleScreenshotResult :: Encode GetConsoleScreenshotResult where encode = genericEncode options

-- | Constructs GetConsoleScreenshotResult from required parameters
newGetConsoleScreenshotResult :: GetConsoleScreenshotResult
newGetConsoleScreenshotResult  = GetConsoleScreenshotResult { "ImageData": Nothing, "InstanceId": Nothing }

-- | Constructs GetConsoleScreenshotResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newGetConsoleScreenshotResult' :: ( { "ImageData" :: Maybe (String) , "InstanceId" :: Maybe (String) } -> {"ImageData" :: Maybe (String) , "InstanceId" :: Maybe (String) } ) -> GetConsoleScreenshotResult
newGetConsoleScreenshotResult'  customize = (GetConsoleScreenshotResult <<< customize) { "ImageData": Nothing, "InstanceId": Nothing }



newtype GetHostReservationPurchasePreviewRequest = GetHostReservationPurchasePreviewRequest 
  { "HostIdSet" :: (RequestHostIdSet)
  , "OfferingId" :: (String)
  }
derive instance newtypeGetHostReservationPurchasePreviewRequest :: Newtype GetHostReservationPurchasePreviewRequest _
derive instance repGenericGetHostReservationPurchasePreviewRequest :: Generic GetHostReservationPurchasePreviewRequest _
instance showGetHostReservationPurchasePreviewRequest :: Show GetHostReservationPurchasePreviewRequest where show = genericShow
instance decodeGetHostReservationPurchasePreviewRequest :: Decode GetHostReservationPurchasePreviewRequest where decode = genericDecode options
instance encodeGetHostReservationPurchasePreviewRequest :: Encode GetHostReservationPurchasePreviewRequest where encode = genericEncode options

-- | Constructs GetHostReservationPurchasePreviewRequest from required parameters
newGetHostReservationPurchasePreviewRequest :: RequestHostIdSet -> String -> GetHostReservationPurchasePreviewRequest
newGetHostReservationPurchasePreviewRequest _HostIdSet _OfferingId = GetHostReservationPurchasePreviewRequest { "HostIdSet": _HostIdSet, "OfferingId": _OfferingId }

-- | Constructs GetHostReservationPurchasePreviewRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newGetHostReservationPurchasePreviewRequest' :: RequestHostIdSet -> String -> ( { "HostIdSet" :: (RequestHostIdSet) , "OfferingId" :: (String) } -> {"HostIdSet" :: (RequestHostIdSet) , "OfferingId" :: (String) } ) -> GetHostReservationPurchasePreviewRequest
newGetHostReservationPurchasePreviewRequest' _HostIdSet _OfferingId customize = (GetHostReservationPurchasePreviewRequest <<< customize) { "HostIdSet": _HostIdSet, "OfferingId": _OfferingId }



newtype GetHostReservationPurchasePreviewResult = GetHostReservationPurchasePreviewResult 
  { "CurrencyCode" :: Maybe (CurrencyCodeValues)
  , "Purchase" :: Maybe (PurchaseSet)
  , "TotalHourlyPrice" :: Maybe (String)
  , "TotalUpfrontPrice" :: Maybe (String)
  }
derive instance newtypeGetHostReservationPurchasePreviewResult :: Newtype GetHostReservationPurchasePreviewResult _
derive instance repGenericGetHostReservationPurchasePreviewResult :: Generic GetHostReservationPurchasePreviewResult _
instance showGetHostReservationPurchasePreviewResult :: Show GetHostReservationPurchasePreviewResult where show = genericShow
instance decodeGetHostReservationPurchasePreviewResult :: Decode GetHostReservationPurchasePreviewResult where decode = genericDecode options
instance encodeGetHostReservationPurchasePreviewResult :: Encode GetHostReservationPurchasePreviewResult where encode = genericEncode options

-- | Constructs GetHostReservationPurchasePreviewResult from required parameters
newGetHostReservationPurchasePreviewResult :: GetHostReservationPurchasePreviewResult
newGetHostReservationPurchasePreviewResult  = GetHostReservationPurchasePreviewResult { "CurrencyCode": Nothing, "Purchase": Nothing, "TotalHourlyPrice": Nothing, "TotalUpfrontPrice": Nothing }

-- | Constructs GetHostReservationPurchasePreviewResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newGetHostReservationPurchasePreviewResult' :: ( { "CurrencyCode" :: Maybe (CurrencyCodeValues) , "Purchase" :: Maybe (PurchaseSet) , "TotalHourlyPrice" :: Maybe (String) , "TotalUpfrontPrice" :: Maybe (String) } -> {"CurrencyCode" :: Maybe (CurrencyCodeValues) , "Purchase" :: Maybe (PurchaseSet) , "TotalHourlyPrice" :: Maybe (String) , "TotalUpfrontPrice" :: Maybe (String) } ) -> GetHostReservationPurchasePreviewResult
newGetHostReservationPurchasePreviewResult'  customize = (GetHostReservationPurchasePreviewResult <<< customize) { "CurrencyCode": Nothing, "Purchase": Nothing, "TotalHourlyPrice": Nothing, "TotalUpfrontPrice": Nothing }



newtype GetLaunchTemplateDataRequest = GetLaunchTemplateDataRequest 
  { "DryRun" :: Maybe (Boolean)
  , "InstanceId" :: (String)
  }
derive instance newtypeGetLaunchTemplateDataRequest :: Newtype GetLaunchTemplateDataRequest _
derive instance repGenericGetLaunchTemplateDataRequest :: Generic GetLaunchTemplateDataRequest _
instance showGetLaunchTemplateDataRequest :: Show GetLaunchTemplateDataRequest where show = genericShow
instance decodeGetLaunchTemplateDataRequest :: Decode GetLaunchTemplateDataRequest where decode = genericDecode options
instance encodeGetLaunchTemplateDataRequest :: Encode GetLaunchTemplateDataRequest where encode = genericEncode options

-- | Constructs GetLaunchTemplateDataRequest from required parameters
newGetLaunchTemplateDataRequest :: String -> GetLaunchTemplateDataRequest
newGetLaunchTemplateDataRequest _InstanceId = GetLaunchTemplateDataRequest { "InstanceId": _InstanceId, "DryRun": Nothing }

-- | Constructs GetLaunchTemplateDataRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newGetLaunchTemplateDataRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "InstanceId" :: (String) } -> {"DryRun" :: Maybe (Boolean) , "InstanceId" :: (String) } ) -> GetLaunchTemplateDataRequest
newGetLaunchTemplateDataRequest' _InstanceId customize = (GetLaunchTemplateDataRequest <<< customize) { "InstanceId": _InstanceId, "DryRun": Nothing }



newtype GetLaunchTemplateDataResult = GetLaunchTemplateDataResult 
  { "LaunchTemplateData" :: Maybe (ResponseLaunchTemplateData)
  }
derive instance newtypeGetLaunchTemplateDataResult :: Newtype GetLaunchTemplateDataResult _
derive instance repGenericGetLaunchTemplateDataResult :: Generic GetLaunchTemplateDataResult _
instance showGetLaunchTemplateDataResult :: Show GetLaunchTemplateDataResult where show = genericShow
instance decodeGetLaunchTemplateDataResult :: Decode GetLaunchTemplateDataResult where decode = genericDecode options
instance encodeGetLaunchTemplateDataResult :: Encode GetLaunchTemplateDataResult where encode = genericEncode options

-- | Constructs GetLaunchTemplateDataResult from required parameters
newGetLaunchTemplateDataResult :: GetLaunchTemplateDataResult
newGetLaunchTemplateDataResult  = GetLaunchTemplateDataResult { "LaunchTemplateData": Nothing }

-- | Constructs GetLaunchTemplateDataResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newGetLaunchTemplateDataResult' :: ( { "LaunchTemplateData" :: Maybe (ResponseLaunchTemplateData) } -> {"LaunchTemplateData" :: Maybe (ResponseLaunchTemplateData) } ) -> GetLaunchTemplateDataResult
newGetLaunchTemplateDataResult'  customize = (GetLaunchTemplateDataResult <<< customize) { "LaunchTemplateData": Nothing }



-- | <p>Contains the parameters for GetPasswordData.</p>
newtype GetPasswordDataRequest = GetPasswordDataRequest 
  { "InstanceId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeGetPasswordDataRequest :: Newtype GetPasswordDataRequest _
derive instance repGenericGetPasswordDataRequest :: Generic GetPasswordDataRequest _
instance showGetPasswordDataRequest :: Show GetPasswordDataRequest where show = genericShow
instance decodeGetPasswordDataRequest :: Decode GetPasswordDataRequest where decode = genericDecode options
instance encodeGetPasswordDataRequest :: Encode GetPasswordDataRequest where encode = genericEncode options

-- | Constructs GetPasswordDataRequest from required parameters
newGetPasswordDataRequest :: String -> GetPasswordDataRequest
newGetPasswordDataRequest _InstanceId = GetPasswordDataRequest { "InstanceId": _InstanceId, "DryRun": Nothing }

-- | Constructs GetPasswordDataRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newGetPasswordDataRequest' :: String -> ( { "InstanceId" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"InstanceId" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> GetPasswordDataRequest
newGetPasswordDataRequest' _InstanceId customize = (GetPasswordDataRequest <<< customize) { "InstanceId": _InstanceId, "DryRun": Nothing }



-- | <p>Contains the output of GetPasswordData.</p>
newtype GetPasswordDataResult = GetPasswordDataResult 
  { "InstanceId" :: Maybe (String)
  , "PasswordData" :: Maybe (String)
  , "Timestamp" :: Maybe (DateTime)
  }
derive instance newtypeGetPasswordDataResult :: Newtype GetPasswordDataResult _
derive instance repGenericGetPasswordDataResult :: Generic GetPasswordDataResult _
instance showGetPasswordDataResult :: Show GetPasswordDataResult where show = genericShow
instance decodeGetPasswordDataResult :: Decode GetPasswordDataResult where decode = genericDecode options
instance encodeGetPasswordDataResult :: Encode GetPasswordDataResult where encode = genericEncode options

-- | Constructs GetPasswordDataResult from required parameters
newGetPasswordDataResult :: GetPasswordDataResult
newGetPasswordDataResult  = GetPasswordDataResult { "InstanceId": Nothing, "PasswordData": Nothing, "Timestamp": Nothing }

-- | Constructs GetPasswordDataResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newGetPasswordDataResult' :: ( { "InstanceId" :: Maybe (String) , "PasswordData" :: Maybe (String) , "Timestamp" :: Maybe (DateTime) } -> {"InstanceId" :: Maybe (String) , "PasswordData" :: Maybe (String) , "Timestamp" :: Maybe (DateTime) } ) -> GetPasswordDataResult
newGetPasswordDataResult'  customize = (GetPasswordDataResult <<< customize) { "InstanceId": Nothing, "PasswordData": Nothing, "Timestamp": Nothing }



-- | <p>Contains the parameters for GetReservedInstanceExchangeQuote.</p>
newtype GetReservedInstancesExchangeQuoteRequest = GetReservedInstancesExchangeQuoteRequest 
  { "DryRun" :: Maybe (Boolean)
  , "ReservedInstanceIds" :: (ReservedInstanceIdSet)
  , "TargetConfigurations" :: Maybe (TargetConfigurationRequestSet)
  }
derive instance newtypeGetReservedInstancesExchangeQuoteRequest :: Newtype GetReservedInstancesExchangeQuoteRequest _
derive instance repGenericGetReservedInstancesExchangeQuoteRequest :: Generic GetReservedInstancesExchangeQuoteRequest _
instance showGetReservedInstancesExchangeQuoteRequest :: Show GetReservedInstancesExchangeQuoteRequest where show = genericShow
instance decodeGetReservedInstancesExchangeQuoteRequest :: Decode GetReservedInstancesExchangeQuoteRequest where decode = genericDecode options
instance encodeGetReservedInstancesExchangeQuoteRequest :: Encode GetReservedInstancesExchangeQuoteRequest where encode = genericEncode options

-- | Constructs GetReservedInstancesExchangeQuoteRequest from required parameters
newGetReservedInstancesExchangeQuoteRequest :: ReservedInstanceIdSet -> GetReservedInstancesExchangeQuoteRequest
newGetReservedInstancesExchangeQuoteRequest _ReservedInstanceIds = GetReservedInstancesExchangeQuoteRequest { "ReservedInstanceIds": _ReservedInstanceIds, "DryRun": Nothing, "TargetConfigurations": Nothing }

-- | Constructs GetReservedInstancesExchangeQuoteRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newGetReservedInstancesExchangeQuoteRequest' :: ReservedInstanceIdSet -> ( { "DryRun" :: Maybe (Boolean) , "ReservedInstanceIds" :: (ReservedInstanceIdSet) , "TargetConfigurations" :: Maybe (TargetConfigurationRequestSet) } -> {"DryRun" :: Maybe (Boolean) , "ReservedInstanceIds" :: (ReservedInstanceIdSet) , "TargetConfigurations" :: Maybe (TargetConfigurationRequestSet) } ) -> GetReservedInstancesExchangeQuoteRequest
newGetReservedInstancesExchangeQuoteRequest' _ReservedInstanceIds customize = (GetReservedInstancesExchangeQuoteRequest <<< customize) { "ReservedInstanceIds": _ReservedInstanceIds, "DryRun": Nothing, "TargetConfigurations": Nothing }



-- | <p>Contains the output of GetReservedInstancesExchangeQuote.</p>
newtype GetReservedInstancesExchangeQuoteResult = GetReservedInstancesExchangeQuoteResult 
  { "CurrencyCode" :: Maybe (String)
  , "IsValidExchange" :: Maybe (Boolean)
  , "OutputReservedInstancesWillExpireAt" :: Maybe (DateTime)
  , "PaymentDue" :: Maybe (String)
  , "ReservedInstanceValueRollup" :: Maybe (ReservationValue)
  , "ReservedInstanceValueSet" :: Maybe (ReservedInstanceReservationValueSet)
  , "TargetConfigurationValueRollup" :: Maybe (ReservationValue)
  , "TargetConfigurationValueSet" :: Maybe (TargetReservationValueSet)
  , "ValidationFailureReason" :: Maybe (String)
  }
derive instance newtypeGetReservedInstancesExchangeQuoteResult :: Newtype GetReservedInstancesExchangeQuoteResult _
derive instance repGenericGetReservedInstancesExchangeQuoteResult :: Generic GetReservedInstancesExchangeQuoteResult _
instance showGetReservedInstancesExchangeQuoteResult :: Show GetReservedInstancesExchangeQuoteResult where show = genericShow
instance decodeGetReservedInstancesExchangeQuoteResult :: Decode GetReservedInstancesExchangeQuoteResult where decode = genericDecode options
instance encodeGetReservedInstancesExchangeQuoteResult :: Encode GetReservedInstancesExchangeQuoteResult where encode = genericEncode options

-- | Constructs GetReservedInstancesExchangeQuoteResult from required parameters
newGetReservedInstancesExchangeQuoteResult :: GetReservedInstancesExchangeQuoteResult
newGetReservedInstancesExchangeQuoteResult  = GetReservedInstancesExchangeQuoteResult { "CurrencyCode": Nothing, "IsValidExchange": Nothing, "OutputReservedInstancesWillExpireAt": Nothing, "PaymentDue": Nothing, "ReservedInstanceValueRollup": Nothing, "ReservedInstanceValueSet": Nothing, "TargetConfigurationValueRollup": Nothing, "TargetConfigurationValueSet": Nothing, "ValidationFailureReason": Nothing }

-- | Constructs GetReservedInstancesExchangeQuoteResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newGetReservedInstancesExchangeQuoteResult' :: ( { "CurrencyCode" :: Maybe (String) , "IsValidExchange" :: Maybe (Boolean) , "OutputReservedInstancesWillExpireAt" :: Maybe (DateTime) , "PaymentDue" :: Maybe (String) , "ReservedInstanceValueRollup" :: Maybe (ReservationValue) , "ReservedInstanceValueSet" :: Maybe (ReservedInstanceReservationValueSet) , "TargetConfigurationValueRollup" :: Maybe (ReservationValue) , "TargetConfigurationValueSet" :: Maybe (TargetReservationValueSet) , "ValidationFailureReason" :: Maybe (String) } -> {"CurrencyCode" :: Maybe (String) , "IsValidExchange" :: Maybe (Boolean) , "OutputReservedInstancesWillExpireAt" :: Maybe (DateTime) , "PaymentDue" :: Maybe (String) , "ReservedInstanceValueRollup" :: Maybe (ReservationValue) , "ReservedInstanceValueSet" :: Maybe (ReservedInstanceReservationValueSet) , "TargetConfigurationValueRollup" :: Maybe (ReservationValue) , "TargetConfigurationValueSet" :: Maybe (TargetReservationValueSet) , "ValidationFailureReason" :: Maybe (String) } ) -> GetReservedInstancesExchangeQuoteResult
newGetReservedInstancesExchangeQuoteResult'  customize = (GetReservedInstancesExchangeQuoteResult <<< customize) { "CurrencyCode": Nothing, "IsValidExchange": Nothing, "OutputReservedInstancesWillExpireAt": Nothing, "PaymentDue": Nothing, "ReservedInstanceValueRollup": Nothing, "ReservedInstanceValueSet": Nothing, "TargetConfigurationValueRollup": Nothing, "TargetConfigurationValueSet": Nothing, "ValidationFailureReason": Nothing }



newtype GroupIdStringList = GroupIdStringList (Array String)
derive instance newtypeGroupIdStringList :: Newtype GroupIdStringList _
derive instance repGenericGroupIdStringList :: Generic GroupIdStringList _
instance showGroupIdStringList :: Show GroupIdStringList where show = genericShow
instance decodeGroupIdStringList :: Decode GroupIdStringList where decode = genericDecode options
instance encodeGroupIdStringList :: Encode GroupIdStringList where encode = genericEncode options



-- | <p>Describes a security group.</p>
newtype GroupIdentifier = GroupIdentifier 
  { "GroupName" :: Maybe (String)
  , "GroupId" :: Maybe (String)
  }
derive instance newtypeGroupIdentifier :: Newtype GroupIdentifier _
derive instance repGenericGroupIdentifier :: Generic GroupIdentifier _
instance showGroupIdentifier :: Show GroupIdentifier where show = genericShow
instance decodeGroupIdentifier :: Decode GroupIdentifier where decode = genericDecode options
instance encodeGroupIdentifier :: Encode GroupIdentifier where encode = genericEncode options

-- | Constructs GroupIdentifier from required parameters
newGroupIdentifier :: GroupIdentifier
newGroupIdentifier  = GroupIdentifier { "GroupId": Nothing, "GroupName": Nothing }

-- | Constructs GroupIdentifier's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newGroupIdentifier' :: ( { "GroupName" :: Maybe (String) , "GroupId" :: Maybe (String) } -> {"GroupName" :: Maybe (String) , "GroupId" :: Maybe (String) } ) -> GroupIdentifier
newGroupIdentifier'  customize = (GroupIdentifier <<< customize) { "GroupId": Nothing, "GroupName": Nothing }



newtype GroupIdentifierList = GroupIdentifierList (Array GroupIdentifier)
derive instance newtypeGroupIdentifierList :: Newtype GroupIdentifierList _
derive instance repGenericGroupIdentifierList :: Generic GroupIdentifierList _
instance showGroupIdentifierList :: Show GroupIdentifierList where show = genericShow
instance decodeGroupIdentifierList :: Decode GroupIdentifierList where decode = genericDecode options
instance encodeGroupIdentifierList :: Encode GroupIdentifierList where encode = genericEncode options



newtype GroupIdentifierSet = GroupIdentifierSet (Array SecurityGroupIdentifier)
derive instance newtypeGroupIdentifierSet :: Newtype GroupIdentifierSet _
derive instance repGenericGroupIdentifierSet :: Generic GroupIdentifierSet _
instance showGroupIdentifierSet :: Show GroupIdentifierSet where show = genericShow
instance decodeGroupIdentifierSet :: Decode GroupIdentifierSet where decode = genericDecode options
instance encodeGroupIdentifierSet :: Encode GroupIdentifierSet where encode = genericEncode options



newtype GroupIds = GroupIds (Array String)
derive instance newtypeGroupIds :: Newtype GroupIds _
derive instance repGenericGroupIds :: Generic GroupIds _
instance showGroupIds :: Show GroupIds where show = genericShow
instance decodeGroupIds :: Decode GroupIds where decode = genericDecode options
instance encodeGroupIds :: Encode GroupIds where encode = genericEncode options



newtype GroupNameStringList = GroupNameStringList (Array String)
derive instance newtypeGroupNameStringList :: Newtype GroupNameStringList _
derive instance repGenericGroupNameStringList :: Generic GroupNameStringList _
instance showGroupNameStringList :: Show GroupNameStringList where show = genericShow
instance decodeGroupNameStringList :: Decode GroupNameStringList where decode = genericDecode options
instance encodeGroupNameStringList :: Encode GroupNameStringList where encode = genericEncode options



-- | <p>Describes an event in the history of the Spot Fleet request.</p>
newtype HistoryRecord = HistoryRecord 
  { "EventInformation" :: (EventInformation)
  , "EventType" :: (EventType)
  , "Timestamp" :: (DateTime)
  }
derive instance newtypeHistoryRecord :: Newtype HistoryRecord _
derive instance repGenericHistoryRecord :: Generic HistoryRecord _
instance showHistoryRecord :: Show HistoryRecord where show = genericShow
instance decodeHistoryRecord :: Decode HistoryRecord where decode = genericDecode options
instance encodeHistoryRecord :: Encode HistoryRecord where encode = genericEncode options

-- | Constructs HistoryRecord from required parameters
newHistoryRecord :: EventInformation -> EventType -> DateTime -> HistoryRecord
newHistoryRecord _EventInformation _EventType _Timestamp = HistoryRecord { "EventInformation": _EventInformation, "EventType": _EventType, "Timestamp": _Timestamp }

-- | Constructs HistoryRecord's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newHistoryRecord' :: EventInformation -> EventType -> DateTime -> ( { "EventInformation" :: (EventInformation) , "EventType" :: (EventType) , "Timestamp" :: (DateTime) } -> {"EventInformation" :: (EventInformation) , "EventType" :: (EventType) , "Timestamp" :: (DateTime) } ) -> HistoryRecord
newHistoryRecord' _EventInformation _EventType _Timestamp customize = (HistoryRecord <<< customize) { "EventInformation": _EventInformation, "EventType": _EventType, "Timestamp": _Timestamp }



newtype HistoryRecords = HistoryRecords (Array HistoryRecord)
derive instance newtypeHistoryRecords :: Newtype HistoryRecords _
derive instance repGenericHistoryRecords :: Generic HistoryRecords _
instance showHistoryRecords :: Show HistoryRecords where show = genericShow
instance decodeHistoryRecords :: Decode HistoryRecords where decode = genericDecode options
instance encodeHistoryRecords :: Encode HistoryRecords where encode = genericEncode options



-- | <p>Describes the properties of the Dedicated Host.</p>
newtype Host = Host 
  { "AutoPlacement" :: Maybe (AutoPlacement)
  , "AvailabilityZone" :: Maybe (String)
  , "AvailableCapacity" :: Maybe (AvailableCapacity)
  , "ClientToken" :: Maybe (String)
  , "HostId" :: Maybe (String)
  , "HostProperties" :: Maybe (HostProperties)
  , "HostReservationId" :: Maybe (String)
  , "Instances" :: Maybe (HostInstanceList)
  , "State" :: Maybe (AllocationState)
  }
derive instance newtypeHost :: Newtype Host _
derive instance repGenericHost :: Generic Host _
instance showHost :: Show Host where show = genericShow
instance decodeHost :: Decode Host where decode = genericDecode options
instance encodeHost :: Encode Host where encode = genericEncode options

-- | Constructs Host from required parameters
newHost :: Host
newHost  = Host { "AutoPlacement": Nothing, "AvailabilityZone": Nothing, "AvailableCapacity": Nothing, "ClientToken": Nothing, "HostId": Nothing, "HostProperties": Nothing, "HostReservationId": Nothing, "Instances": Nothing, "State": Nothing }

-- | Constructs Host's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newHost' :: ( { "AutoPlacement" :: Maybe (AutoPlacement) , "AvailabilityZone" :: Maybe (String) , "AvailableCapacity" :: Maybe (AvailableCapacity) , "ClientToken" :: Maybe (String) , "HostId" :: Maybe (String) , "HostProperties" :: Maybe (HostProperties) , "HostReservationId" :: Maybe (String) , "Instances" :: Maybe (HostInstanceList) , "State" :: Maybe (AllocationState) } -> {"AutoPlacement" :: Maybe (AutoPlacement) , "AvailabilityZone" :: Maybe (String) , "AvailableCapacity" :: Maybe (AvailableCapacity) , "ClientToken" :: Maybe (String) , "HostId" :: Maybe (String) , "HostProperties" :: Maybe (HostProperties) , "HostReservationId" :: Maybe (String) , "Instances" :: Maybe (HostInstanceList) , "State" :: Maybe (AllocationState) } ) -> Host
newHost'  customize = (Host <<< customize) { "AutoPlacement": Nothing, "AvailabilityZone": Nothing, "AvailableCapacity": Nothing, "ClientToken": Nothing, "HostId": Nothing, "HostProperties": Nothing, "HostReservationId": Nothing, "Instances": Nothing, "State": Nothing }



-- | <p>Describes an instance running on a Dedicated Host.</p>
newtype HostInstance = HostInstance 
  { "InstanceId" :: Maybe (String)
  , "InstanceType" :: Maybe (String)
  }
derive instance newtypeHostInstance :: Newtype HostInstance _
derive instance repGenericHostInstance :: Generic HostInstance _
instance showHostInstance :: Show HostInstance where show = genericShow
instance decodeHostInstance :: Decode HostInstance where decode = genericDecode options
instance encodeHostInstance :: Encode HostInstance where encode = genericEncode options

-- | Constructs HostInstance from required parameters
newHostInstance :: HostInstance
newHostInstance  = HostInstance { "InstanceId": Nothing, "InstanceType": Nothing }

-- | Constructs HostInstance's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newHostInstance' :: ( { "InstanceId" :: Maybe (String) , "InstanceType" :: Maybe (String) } -> {"InstanceId" :: Maybe (String) , "InstanceType" :: Maybe (String) } ) -> HostInstance
newHostInstance'  customize = (HostInstance <<< customize) { "InstanceId": Nothing, "InstanceType": Nothing }



newtype HostInstanceList = HostInstanceList (Array HostInstance)
derive instance newtypeHostInstanceList :: Newtype HostInstanceList _
derive instance repGenericHostInstanceList :: Generic HostInstanceList _
instance showHostInstanceList :: Show HostInstanceList where show = genericShow
instance decodeHostInstanceList :: Decode HostInstanceList where decode = genericDecode options
instance encodeHostInstanceList :: Encode HostInstanceList where encode = genericEncode options



newtype HostList = HostList (Array Host)
derive instance newtypeHostList :: Newtype HostList _
derive instance repGenericHostList :: Generic HostList _
instance showHostList :: Show HostList where show = genericShow
instance decodeHostList :: Decode HostList where decode = genericDecode options
instance encodeHostList :: Encode HostList where encode = genericEncode options



-- | <p>Details about the Dedicated Host Reservation offering.</p>
newtype HostOffering = HostOffering 
  { "CurrencyCode" :: Maybe (CurrencyCodeValues)
  , "Duration" :: Maybe (Int)
  , "HourlyPrice" :: Maybe (String)
  , "InstanceFamily" :: Maybe (String)
  , "OfferingId" :: Maybe (String)
  , "PaymentOption" :: Maybe (PaymentOption)
  , "UpfrontPrice" :: Maybe (String)
  }
derive instance newtypeHostOffering :: Newtype HostOffering _
derive instance repGenericHostOffering :: Generic HostOffering _
instance showHostOffering :: Show HostOffering where show = genericShow
instance decodeHostOffering :: Decode HostOffering where decode = genericDecode options
instance encodeHostOffering :: Encode HostOffering where encode = genericEncode options

-- | Constructs HostOffering from required parameters
newHostOffering :: HostOffering
newHostOffering  = HostOffering { "CurrencyCode": Nothing, "Duration": Nothing, "HourlyPrice": Nothing, "InstanceFamily": Nothing, "OfferingId": Nothing, "PaymentOption": Nothing, "UpfrontPrice": Nothing }

-- | Constructs HostOffering's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newHostOffering' :: ( { "CurrencyCode" :: Maybe (CurrencyCodeValues) , "Duration" :: Maybe (Int) , "HourlyPrice" :: Maybe (String) , "InstanceFamily" :: Maybe (String) , "OfferingId" :: Maybe (String) , "PaymentOption" :: Maybe (PaymentOption) , "UpfrontPrice" :: Maybe (String) } -> {"CurrencyCode" :: Maybe (CurrencyCodeValues) , "Duration" :: Maybe (Int) , "HourlyPrice" :: Maybe (String) , "InstanceFamily" :: Maybe (String) , "OfferingId" :: Maybe (String) , "PaymentOption" :: Maybe (PaymentOption) , "UpfrontPrice" :: Maybe (String) } ) -> HostOffering
newHostOffering'  customize = (HostOffering <<< customize) { "CurrencyCode": Nothing, "Duration": Nothing, "HourlyPrice": Nothing, "InstanceFamily": Nothing, "OfferingId": Nothing, "PaymentOption": Nothing, "UpfrontPrice": Nothing }



newtype HostOfferingSet = HostOfferingSet (Array HostOffering)
derive instance newtypeHostOfferingSet :: Newtype HostOfferingSet _
derive instance repGenericHostOfferingSet :: Generic HostOfferingSet _
instance showHostOfferingSet :: Show HostOfferingSet where show = genericShow
instance decodeHostOfferingSet :: Decode HostOfferingSet where decode = genericDecode options
instance encodeHostOfferingSet :: Encode HostOfferingSet where encode = genericEncode options



-- | <p>Describes properties of a Dedicated Host.</p>
newtype HostProperties = HostProperties 
  { "Cores" :: Maybe (Int)
  , "InstanceType" :: Maybe (String)
  , "Sockets" :: Maybe (Int)
  , "TotalVCpus" :: Maybe (Int)
  }
derive instance newtypeHostProperties :: Newtype HostProperties _
derive instance repGenericHostProperties :: Generic HostProperties _
instance showHostProperties :: Show HostProperties where show = genericShow
instance decodeHostProperties :: Decode HostProperties where decode = genericDecode options
instance encodeHostProperties :: Encode HostProperties where encode = genericEncode options

-- | Constructs HostProperties from required parameters
newHostProperties :: HostProperties
newHostProperties  = HostProperties { "Cores": Nothing, "InstanceType": Nothing, "Sockets": Nothing, "TotalVCpus": Nothing }

-- | Constructs HostProperties's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newHostProperties' :: ( { "Cores" :: Maybe (Int) , "InstanceType" :: Maybe (String) , "Sockets" :: Maybe (Int) , "TotalVCpus" :: Maybe (Int) } -> {"Cores" :: Maybe (Int) , "InstanceType" :: Maybe (String) , "Sockets" :: Maybe (Int) , "TotalVCpus" :: Maybe (Int) } ) -> HostProperties
newHostProperties'  customize = (HostProperties <<< customize) { "Cores": Nothing, "InstanceType": Nothing, "Sockets": Nothing, "TotalVCpus": Nothing }



-- | <p>Details about the Dedicated Host Reservation and associated Dedicated Hosts.</p>
newtype HostReservation = HostReservation 
  { "Count" :: Maybe (Int)
  , "CurrencyCode" :: Maybe (CurrencyCodeValues)
  , "Duration" :: Maybe (Int)
  , "End" :: Maybe (DateTime)
  , "HostIdSet" :: Maybe (ResponseHostIdSet)
  , "HostReservationId" :: Maybe (String)
  , "HourlyPrice" :: Maybe (String)
  , "InstanceFamily" :: Maybe (String)
  , "OfferingId" :: Maybe (String)
  , "PaymentOption" :: Maybe (PaymentOption)
  , "Start" :: Maybe (DateTime)
  , "State" :: Maybe (ReservationState)
  , "UpfrontPrice" :: Maybe (String)
  }
derive instance newtypeHostReservation :: Newtype HostReservation _
derive instance repGenericHostReservation :: Generic HostReservation _
instance showHostReservation :: Show HostReservation where show = genericShow
instance decodeHostReservation :: Decode HostReservation where decode = genericDecode options
instance encodeHostReservation :: Encode HostReservation where encode = genericEncode options

-- | Constructs HostReservation from required parameters
newHostReservation :: HostReservation
newHostReservation  = HostReservation { "Count": Nothing, "CurrencyCode": Nothing, "Duration": Nothing, "End": Nothing, "HostIdSet": Nothing, "HostReservationId": Nothing, "HourlyPrice": Nothing, "InstanceFamily": Nothing, "OfferingId": Nothing, "PaymentOption": Nothing, "Start": Nothing, "State": Nothing, "UpfrontPrice": Nothing }

-- | Constructs HostReservation's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newHostReservation' :: ( { "Count" :: Maybe (Int) , "CurrencyCode" :: Maybe (CurrencyCodeValues) , "Duration" :: Maybe (Int) , "End" :: Maybe (DateTime) , "HostIdSet" :: Maybe (ResponseHostIdSet) , "HostReservationId" :: Maybe (String) , "HourlyPrice" :: Maybe (String) , "InstanceFamily" :: Maybe (String) , "OfferingId" :: Maybe (String) , "PaymentOption" :: Maybe (PaymentOption) , "Start" :: Maybe (DateTime) , "State" :: Maybe (ReservationState) , "UpfrontPrice" :: Maybe (String) } -> {"Count" :: Maybe (Int) , "CurrencyCode" :: Maybe (CurrencyCodeValues) , "Duration" :: Maybe (Int) , "End" :: Maybe (DateTime) , "HostIdSet" :: Maybe (ResponseHostIdSet) , "HostReservationId" :: Maybe (String) , "HourlyPrice" :: Maybe (String) , "InstanceFamily" :: Maybe (String) , "OfferingId" :: Maybe (String) , "PaymentOption" :: Maybe (PaymentOption) , "Start" :: Maybe (DateTime) , "State" :: Maybe (ReservationState) , "UpfrontPrice" :: Maybe (String) } ) -> HostReservation
newHostReservation'  customize = (HostReservation <<< customize) { "Count": Nothing, "CurrencyCode": Nothing, "Duration": Nothing, "End": Nothing, "HostIdSet": Nothing, "HostReservationId": Nothing, "HourlyPrice": Nothing, "InstanceFamily": Nothing, "OfferingId": Nothing, "PaymentOption": Nothing, "Start": Nothing, "State": Nothing, "UpfrontPrice": Nothing }



newtype HostReservationIdSet = HostReservationIdSet (Array String)
derive instance newtypeHostReservationIdSet :: Newtype HostReservationIdSet _
derive instance repGenericHostReservationIdSet :: Generic HostReservationIdSet _
instance showHostReservationIdSet :: Show HostReservationIdSet where show = genericShow
instance decodeHostReservationIdSet :: Decode HostReservationIdSet where decode = genericDecode options
instance encodeHostReservationIdSet :: Encode HostReservationIdSet where encode = genericEncode options



newtype HostReservationSet = HostReservationSet (Array HostReservation)
derive instance newtypeHostReservationSet :: Newtype HostReservationSet _
derive instance repGenericHostReservationSet :: Generic HostReservationSet _
instance showHostReservationSet :: Show HostReservationSet where show = genericShow
instance decodeHostReservationSet :: Decode HostReservationSet where decode = genericDecode options
instance encodeHostReservationSet :: Encode HostReservationSet where encode = genericEncode options



newtype HostTenancy = HostTenancy String
derive instance newtypeHostTenancy :: Newtype HostTenancy _
derive instance repGenericHostTenancy :: Generic HostTenancy _
instance showHostTenancy :: Show HostTenancy where show = genericShow
instance decodeHostTenancy :: Decode HostTenancy where decode = genericDecode options
instance encodeHostTenancy :: Encode HostTenancy where encode = genericEncode options



newtype HypervisorType = HypervisorType String
derive instance newtypeHypervisorType :: Newtype HypervisorType _
derive instance repGenericHypervisorType :: Generic HypervisorType _
instance showHypervisorType :: Show HypervisorType where show = genericShow
instance decodeHypervisorType :: Decode HypervisorType where decode = genericDecode options
instance encodeHypervisorType :: Encode HypervisorType where encode = genericEncode options



-- | <p>Describes an IAM instance profile.</p>
newtype IamInstanceProfile = IamInstanceProfile 
  { "Arn" :: Maybe (String)
  , "Id" :: Maybe (String)
  }
derive instance newtypeIamInstanceProfile :: Newtype IamInstanceProfile _
derive instance repGenericIamInstanceProfile :: Generic IamInstanceProfile _
instance showIamInstanceProfile :: Show IamInstanceProfile where show = genericShow
instance decodeIamInstanceProfile :: Decode IamInstanceProfile where decode = genericDecode options
instance encodeIamInstanceProfile :: Encode IamInstanceProfile where encode = genericEncode options

-- | Constructs IamInstanceProfile from required parameters
newIamInstanceProfile :: IamInstanceProfile
newIamInstanceProfile  = IamInstanceProfile { "Arn": Nothing, "Id": Nothing }

-- | Constructs IamInstanceProfile's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newIamInstanceProfile' :: ( { "Arn" :: Maybe (String) , "Id" :: Maybe (String) } -> {"Arn" :: Maybe (String) , "Id" :: Maybe (String) } ) -> IamInstanceProfile
newIamInstanceProfile'  customize = (IamInstanceProfile <<< customize) { "Arn": Nothing, "Id": Nothing }



-- | <p>Describes an association between an IAM instance profile and an instance.</p>
newtype IamInstanceProfileAssociation = IamInstanceProfileAssociation 
  { "AssociationId" :: Maybe (String)
  , "InstanceId" :: Maybe (String)
  , "IamInstanceProfile" :: Maybe (IamInstanceProfile)
  , "State" :: Maybe (IamInstanceProfileAssociationState)
  , "Timestamp" :: Maybe (DateTime)
  }
derive instance newtypeIamInstanceProfileAssociation :: Newtype IamInstanceProfileAssociation _
derive instance repGenericIamInstanceProfileAssociation :: Generic IamInstanceProfileAssociation _
instance showIamInstanceProfileAssociation :: Show IamInstanceProfileAssociation where show = genericShow
instance decodeIamInstanceProfileAssociation :: Decode IamInstanceProfileAssociation where decode = genericDecode options
instance encodeIamInstanceProfileAssociation :: Encode IamInstanceProfileAssociation where encode = genericEncode options

-- | Constructs IamInstanceProfileAssociation from required parameters
newIamInstanceProfileAssociation :: IamInstanceProfileAssociation
newIamInstanceProfileAssociation  = IamInstanceProfileAssociation { "AssociationId": Nothing, "IamInstanceProfile": Nothing, "InstanceId": Nothing, "State": Nothing, "Timestamp": Nothing }

-- | Constructs IamInstanceProfileAssociation's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newIamInstanceProfileAssociation' :: ( { "AssociationId" :: Maybe (String) , "InstanceId" :: Maybe (String) , "IamInstanceProfile" :: Maybe (IamInstanceProfile) , "State" :: Maybe (IamInstanceProfileAssociationState) , "Timestamp" :: Maybe (DateTime) } -> {"AssociationId" :: Maybe (String) , "InstanceId" :: Maybe (String) , "IamInstanceProfile" :: Maybe (IamInstanceProfile) , "State" :: Maybe (IamInstanceProfileAssociationState) , "Timestamp" :: Maybe (DateTime) } ) -> IamInstanceProfileAssociation
newIamInstanceProfileAssociation'  customize = (IamInstanceProfileAssociation <<< customize) { "AssociationId": Nothing, "IamInstanceProfile": Nothing, "InstanceId": Nothing, "State": Nothing, "Timestamp": Nothing }



newtype IamInstanceProfileAssociationSet = IamInstanceProfileAssociationSet (Array IamInstanceProfileAssociation)
derive instance newtypeIamInstanceProfileAssociationSet :: Newtype IamInstanceProfileAssociationSet _
derive instance repGenericIamInstanceProfileAssociationSet :: Generic IamInstanceProfileAssociationSet _
instance showIamInstanceProfileAssociationSet :: Show IamInstanceProfileAssociationSet where show = genericShow
instance decodeIamInstanceProfileAssociationSet :: Decode IamInstanceProfileAssociationSet where decode = genericDecode options
instance encodeIamInstanceProfileAssociationSet :: Encode IamInstanceProfileAssociationSet where encode = genericEncode options



newtype IamInstanceProfileAssociationState = IamInstanceProfileAssociationState String
derive instance newtypeIamInstanceProfileAssociationState :: Newtype IamInstanceProfileAssociationState _
derive instance repGenericIamInstanceProfileAssociationState :: Generic IamInstanceProfileAssociationState _
instance showIamInstanceProfileAssociationState :: Show IamInstanceProfileAssociationState where show = genericShow
instance decodeIamInstanceProfileAssociationState :: Decode IamInstanceProfileAssociationState where decode = genericDecode options
instance encodeIamInstanceProfileAssociationState :: Encode IamInstanceProfileAssociationState where encode = genericEncode options



-- | <p>Describes an IAM instance profile.</p>
newtype IamInstanceProfileSpecification = IamInstanceProfileSpecification 
  { "Arn" :: Maybe (String)
  , "Name" :: Maybe (String)
  }
derive instance newtypeIamInstanceProfileSpecification :: Newtype IamInstanceProfileSpecification _
derive instance repGenericIamInstanceProfileSpecification :: Generic IamInstanceProfileSpecification _
instance showIamInstanceProfileSpecification :: Show IamInstanceProfileSpecification where show = genericShow
instance decodeIamInstanceProfileSpecification :: Decode IamInstanceProfileSpecification where decode = genericDecode options
instance encodeIamInstanceProfileSpecification :: Encode IamInstanceProfileSpecification where encode = genericEncode options

-- | Constructs IamInstanceProfileSpecification from required parameters
newIamInstanceProfileSpecification :: IamInstanceProfileSpecification
newIamInstanceProfileSpecification  = IamInstanceProfileSpecification { "Arn": Nothing, "Name": Nothing }

-- | Constructs IamInstanceProfileSpecification's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newIamInstanceProfileSpecification' :: ( { "Arn" :: Maybe (String) , "Name" :: Maybe (String) } -> {"Arn" :: Maybe (String) , "Name" :: Maybe (String) } ) -> IamInstanceProfileSpecification
newIamInstanceProfileSpecification'  customize = (IamInstanceProfileSpecification <<< customize) { "Arn": Nothing, "Name": Nothing }



-- | <p>Describes the ICMP type and code.</p>
newtype IcmpTypeCode = IcmpTypeCode 
  { "Code" :: Maybe (Int)
  , "Type" :: Maybe (Int)
  }
derive instance newtypeIcmpTypeCode :: Newtype IcmpTypeCode _
derive instance repGenericIcmpTypeCode :: Generic IcmpTypeCode _
instance showIcmpTypeCode :: Show IcmpTypeCode where show = genericShow
instance decodeIcmpTypeCode :: Decode IcmpTypeCode where decode = genericDecode options
instance encodeIcmpTypeCode :: Encode IcmpTypeCode where encode = genericEncode options

-- | Constructs IcmpTypeCode from required parameters
newIcmpTypeCode :: IcmpTypeCode
newIcmpTypeCode  = IcmpTypeCode { "Code": Nothing, "Type": Nothing }

-- | Constructs IcmpTypeCode's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newIcmpTypeCode' :: ( { "Code" :: Maybe (Int) , "Type" :: Maybe (Int) } -> {"Code" :: Maybe (Int) , "Type" :: Maybe (Int) } ) -> IcmpTypeCode
newIcmpTypeCode'  customize = (IcmpTypeCode <<< customize) { "Code": Nothing, "Type": Nothing }



-- | <p>Describes the ID format for a resource.</p>
newtype IdFormat = IdFormat 
  { "Deadline" :: Maybe (DateTime)
  , "Resource" :: Maybe (String)
  , "UseLongIds" :: Maybe (Boolean)
  }
derive instance newtypeIdFormat :: Newtype IdFormat _
derive instance repGenericIdFormat :: Generic IdFormat _
instance showIdFormat :: Show IdFormat where show = genericShow
instance decodeIdFormat :: Decode IdFormat where decode = genericDecode options
instance encodeIdFormat :: Encode IdFormat where encode = genericEncode options

-- | Constructs IdFormat from required parameters
newIdFormat :: IdFormat
newIdFormat  = IdFormat { "Deadline": Nothing, "Resource": Nothing, "UseLongIds": Nothing }

-- | Constructs IdFormat's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newIdFormat' :: ( { "Deadline" :: Maybe (DateTime) , "Resource" :: Maybe (String) , "UseLongIds" :: Maybe (Boolean) } -> {"Deadline" :: Maybe (DateTime) , "Resource" :: Maybe (String) , "UseLongIds" :: Maybe (Boolean) } ) -> IdFormat
newIdFormat'  customize = (IdFormat <<< customize) { "Deadline": Nothing, "Resource": Nothing, "UseLongIds": Nothing }



newtype IdFormatList = IdFormatList (Array IdFormat)
derive instance newtypeIdFormatList :: Newtype IdFormatList _
derive instance repGenericIdFormatList :: Generic IdFormatList _
instance showIdFormatList :: Show IdFormatList where show = genericShow
instance decodeIdFormatList :: Decode IdFormatList where decode = genericDecode options
instance encodeIdFormatList :: Encode IdFormatList where encode = genericEncode options



-- | <p>Describes an image.</p>
newtype Image = Image 
  { "Architecture" :: Maybe (ArchitectureValues)
  , "CreationDate" :: Maybe (String)
  , "ImageId" :: Maybe (String)
  , "ImageLocation" :: Maybe (String)
  , "ImageType" :: Maybe (ImageTypeValues)
  , "Public" :: Maybe (Boolean)
  , "KernelId" :: Maybe (String)
  , "OwnerId" :: Maybe (String)
  , "Platform" :: Maybe (PlatformValues)
  , "ProductCodes" :: Maybe (ProductCodeList)
  , "RamdiskId" :: Maybe (String)
  , "State" :: Maybe (ImageState)
  , "BlockDeviceMappings" :: Maybe (BlockDeviceMappingList)
  , "Description" :: Maybe (String)
  , "EnaSupport" :: Maybe (Boolean)
  , "Hypervisor" :: Maybe (HypervisorType)
  , "ImageOwnerAlias" :: Maybe (String)
  , "Name" :: Maybe (String)
  , "RootDeviceName" :: Maybe (String)
  , "RootDeviceType" :: Maybe (DeviceType)
  , "SriovNetSupport" :: Maybe (String)
  , "StateReason" :: Maybe (StateReason)
  , "Tags" :: Maybe (TagList)
  , "VirtualizationType" :: Maybe (VirtualizationType)
  }
derive instance newtypeImage :: Newtype Image _
derive instance repGenericImage :: Generic Image _
instance showImage :: Show Image where show = genericShow
instance decodeImage :: Decode Image where decode = genericDecode options
instance encodeImage :: Encode Image where encode = genericEncode options

-- | Constructs Image from required parameters
newImage :: Image
newImage  = Image { "Architecture": Nothing, "BlockDeviceMappings": Nothing, "CreationDate": Nothing, "Description": Nothing, "EnaSupport": Nothing, "Hypervisor": Nothing, "ImageId": Nothing, "ImageLocation": Nothing, "ImageOwnerAlias": Nothing, "ImageType": Nothing, "KernelId": Nothing, "Name": Nothing, "OwnerId": Nothing, "Platform": Nothing, "ProductCodes": Nothing, "Public": Nothing, "RamdiskId": Nothing, "RootDeviceName": Nothing, "RootDeviceType": Nothing, "SriovNetSupport": Nothing, "State": Nothing, "StateReason": Nothing, "Tags": Nothing, "VirtualizationType": Nothing }

-- | Constructs Image's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newImage' :: ( { "Architecture" :: Maybe (ArchitectureValues) , "CreationDate" :: Maybe (String) , "ImageId" :: Maybe (String) , "ImageLocation" :: Maybe (String) , "ImageType" :: Maybe (ImageTypeValues) , "Public" :: Maybe (Boolean) , "KernelId" :: Maybe (String) , "OwnerId" :: Maybe (String) , "Platform" :: Maybe (PlatformValues) , "ProductCodes" :: Maybe (ProductCodeList) , "RamdiskId" :: Maybe (String) , "State" :: Maybe (ImageState) , "BlockDeviceMappings" :: Maybe (BlockDeviceMappingList) , "Description" :: Maybe (String) , "EnaSupport" :: Maybe (Boolean) , "Hypervisor" :: Maybe (HypervisorType) , "ImageOwnerAlias" :: Maybe (String) , "Name" :: Maybe (String) , "RootDeviceName" :: Maybe (String) , "RootDeviceType" :: Maybe (DeviceType) , "SriovNetSupport" :: Maybe (String) , "StateReason" :: Maybe (StateReason) , "Tags" :: Maybe (TagList) , "VirtualizationType" :: Maybe (VirtualizationType) } -> {"Architecture" :: Maybe (ArchitectureValues) , "CreationDate" :: Maybe (String) , "ImageId" :: Maybe (String) , "ImageLocation" :: Maybe (String) , "ImageType" :: Maybe (ImageTypeValues) , "Public" :: Maybe (Boolean) , "KernelId" :: Maybe (String) , "OwnerId" :: Maybe (String) , "Platform" :: Maybe (PlatformValues) , "ProductCodes" :: Maybe (ProductCodeList) , "RamdiskId" :: Maybe (String) , "State" :: Maybe (ImageState) , "BlockDeviceMappings" :: Maybe (BlockDeviceMappingList) , "Description" :: Maybe (String) , "EnaSupport" :: Maybe (Boolean) , "Hypervisor" :: Maybe (HypervisorType) , "ImageOwnerAlias" :: Maybe (String) , "Name" :: Maybe (String) , "RootDeviceName" :: Maybe (String) , "RootDeviceType" :: Maybe (DeviceType) , "SriovNetSupport" :: Maybe (String) , "StateReason" :: Maybe (StateReason) , "Tags" :: Maybe (TagList) , "VirtualizationType" :: Maybe (VirtualizationType) } ) -> Image
newImage'  customize = (Image <<< customize) { "Architecture": Nothing, "BlockDeviceMappings": Nothing, "CreationDate": Nothing, "Description": Nothing, "EnaSupport": Nothing, "Hypervisor": Nothing, "ImageId": Nothing, "ImageLocation": Nothing, "ImageOwnerAlias": Nothing, "ImageType": Nothing, "KernelId": Nothing, "Name": Nothing, "OwnerId": Nothing, "Platform": Nothing, "ProductCodes": Nothing, "Public": Nothing, "RamdiskId": Nothing, "RootDeviceName": Nothing, "RootDeviceType": Nothing, "SriovNetSupport": Nothing, "State": Nothing, "StateReason": Nothing, "Tags": Nothing, "VirtualizationType": Nothing }



-- | <p>Describes an image attribute.</p>
newtype ImageAttribute = ImageAttribute 
  { "BlockDeviceMappings" :: Maybe (BlockDeviceMappingList)
  , "ImageId" :: Maybe (String)
  , "LaunchPermissions" :: Maybe (LaunchPermissionList)
  , "ProductCodes" :: Maybe (ProductCodeList)
  , "Description" :: Maybe (AttributeValue)
  , "KernelId" :: Maybe (AttributeValue)
  , "RamdiskId" :: Maybe (AttributeValue)
  , "SriovNetSupport" :: Maybe (AttributeValue)
  }
derive instance newtypeImageAttribute :: Newtype ImageAttribute _
derive instance repGenericImageAttribute :: Generic ImageAttribute _
instance showImageAttribute :: Show ImageAttribute where show = genericShow
instance decodeImageAttribute :: Decode ImageAttribute where decode = genericDecode options
instance encodeImageAttribute :: Encode ImageAttribute where encode = genericEncode options

-- | Constructs ImageAttribute from required parameters
newImageAttribute :: ImageAttribute
newImageAttribute  = ImageAttribute { "BlockDeviceMappings": Nothing, "Description": Nothing, "ImageId": Nothing, "KernelId": Nothing, "LaunchPermissions": Nothing, "ProductCodes": Nothing, "RamdiskId": Nothing, "SriovNetSupport": Nothing }

-- | Constructs ImageAttribute's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newImageAttribute' :: ( { "BlockDeviceMappings" :: Maybe (BlockDeviceMappingList) , "ImageId" :: Maybe (String) , "LaunchPermissions" :: Maybe (LaunchPermissionList) , "ProductCodes" :: Maybe (ProductCodeList) , "Description" :: Maybe (AttributeValue) , "KernelId" :: Maybe (AttributeValue) , "RamdiskId" :: Maybe (AttributeValue) , "SriovNetSupport" :: Maybe (AttributeValue) } -> {"BlockDeviceMappings" :: Maybe (BlockDeviceMappingList) , "ImageId" :: Maybe (String) , "LaunchPermissions" :: Maybe (LaunchPermissionList) , "ProductCodes" :: Maybe (ProductCodeList) , "Description" :: Maybe (AttributeValue) , "KernelId" :: Maybe (AttributeValue) , "RamdiskId" :: Maybe (AttributeValue) , "SriovNetSupport" :: Maybe (AttributeValue) } ) -> ImageAttribute
newImageAttribute'  customize = (ImageAttribute <<< customize) { "BlockDeviceMappings": Nothing, "Description": Nothing, "ImageId": Nothing, "KernelId": Nothing, "LaunchPermissions": Nothing, "ProductCodes": Nothing, "RamdiskId": Nothing, "SriovNetSupport": Nothing }



newtype ImageAttributeName = ImageAttributeName String
derive instance newtypeImageAttributeName :: Newtype ImageAttributeName _
derive instance repGenericImageAttributeName :: Generic ImageAttributeName _
instance showImageAttributeName :: Show ImageAttributeName where show = genericShow
instance decodeImageAttributeName :: Decode ImageAttributeName where decode = genericDecode options
instance encodeImageAttributeName :: Encode ImageAttributeName where encode = genericEncode options



-- | <p>Describes the disk container object for an import image task.</p>
newtype ImageDiskContainer = ImageDiskContainer 
  { "Description" :: Maybe (String)
  , "DeviceName" :: Maybe (String)
  , "Format" :: Maybe (String)
  , "SnapshotId" :: Maybe (String)
  , "Url" :: Maybe (String)
  , "UserBucket" :: Maybe (UserBucket)
  }
derive instance newtypeImageDiskContainer :: Newtype ImageDiskContainer _
derive instance repGenericImageDiskContainer :: Generic ImageDiskContainer _
instance showImageDiskContainer :: Show ImageDiskContainer where show = genericShow
instance decodeImageDiskContainer :: Decode ImageDiskContainer where decode = genericDecode options
instance encodeImageDiskContainer :: Encode ImageDiskContainer where encode = genericEncode options

-- | Constructs ImageDiskContainer from required parameters
newImageDiskContainer :: ImageDiskContainer
newImageDiskContainer  = ImageDiskContainer { "Description": Nothing, "DeviceName": Nothing, "Format": Nothing, "SnapshotId": Nothing, "Url": Nothing, "UserBucket": Nothing }

-- | Constructs ImageDiskContainer's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newImageDiskContainer' :: ( { "Description" :: Maybe (String) , "DeviceName" :: Maybe (String) , "Format" :: Maybe (String) , "SnapshotId" :: Maybe (String) , "Url" :: Maybe (String) , "UserBucket" :: Maybe (UserBucket) } -> {"Description" :: Maybe (String) , "DeviceName" :: Maybe (String) , "Format" :: Maybe (String) , "SnapshotId" :: Maybe (String) , "Url" :: Maybe (String) , "UserBucket" :: Maybe (UserBucket) } ) -> ImageDiskContainer
newImageDiskContainer'  customize = (ImageDiskContainer <<< customize) { "Description": Nothing, "DeviceName": Nothing, "Format": Nothing, "SnapshotId": Nothing, "Url": Nothing, "UserBucket": Nothing }



newtype ImageDiskContainerList = ImageDiskContainerList (Array ImageDiskContainer)
derive instance newtypeImageDiskContainerList :: Newtype ImageDiskContainerList _
derive instance repGenericImageDiskContainerList :: Generic ImageDiskContainerList _
instance showImageDiskContainerList :: Show ImageDiskContainerList where show = genericShow
instance decodeImageDiskContainerList :: Decode ImageDiskContainerList where decode = genericDecode options
instance encodeImageDiskContainerList :: Encode ImageDiskContainerList where encode = genericEncode options



newtype ImageIdStringList = ImageIdStringList (Array String)
derive instance newtypeImageIdStringList :: Newtype ImageIdStringList _
derive instance repGenericImageIdStringList :: Generic ImageIdStringList _
instance showImageIdStringList :: Show ImageIdStringList where show = genericShow
instance decodeImageIdStringList :: Decode ImageIdStringList where decode = genericDecode options
instance encodeImageIdStringList :: Encode ImageIdStringList where encode = genericEncode options



newtype ImageList = ImageList (Array Image)
derive instance newtypeImageList :: Newtype ImageList _
derive instance repGenericImageList :: Generic ImageList _
instance showImageList :: Show ImageList where show = genericShow
instance decodeImageList :: Decode ImageList where decode = genericDecode options
instance encodeImageList :: Encode ImageList where encode = genericEncode options



newtype ImageState = ImageState String
derive instance newtypeImageState :: Newtype ImageState _
derive instance repGenericImageState :: Generic ImageState _
instance showImageState :: Show ImageState where show = genericShow
instance decodeImageState :: Decode ImageState where decode = genericDecode options
instance encodeImageState :: Encode ImageState where encode = genericEncode options



newtype ImageTypeValues = ImageTypeValues String
derive instance newtypeImageTypeValues :: Newtype ImageTypeValues _
derive instance repGenericImageTypeValues :: Generic ImageTypeValues _
instance showImageTypeValues :: Show ImageTypeValues where show = genericShow
instance decodeImageTypeValues :: Decode ImageTypeValues where decode = genericDecode options
instance encodeImageTypeValues :: Encode ImageTypeValues where encode = genericEncode options



-- | <p>Contains the parameters for ImportImage.</p>
newtype ImportImageRequest = ImportImageRequest 
  { "Architecture" :: Maybe (String)
  , "ClientData" :: Maybe (ClientData)
  , "ClientToken" :: Maybe (String)
  , "Description" :: Maybe (String)
  , "DiskContainers" :: Maybe (ImageDiskContainerList)
  , "DryRun" :: Maybe (Boolean)
  , "Hypervisor" :: Maybe (String)
  , "LicenseType" :: Maybe (String)
  , "Platform" :: Maybe (String)
  , "RoleName" :: Maybe (String)
  }
derive instance newtypeImportImageRequest :: Newtype ImportImageRequest _
derive instance repGenericImportImageRequest :: Generic ImportImageRequest _
instance showImportImageRequest :: Show ImportImageRequest where show = genericShow
instance decodeImportImageRequest :: Decode ImportImageRequest where decode = genericDecode options
instance encodeImportImageRequest :: Encode ImportImageRequest where encode = genericEncode options

-- | Constructs ImportImageRequest from required parameters
newImportImageRequest :: ImportImageRequest
newImportImageRequest  = ImportImageRequest { "Architecture": Nothing, "ClientData": Nothing, "ClientToken": Nothing, "Description": Nothing, "DiskContainers": Nothing, "DryRun": Nothing, "Hypervisor": Nothing, "LicenseType": Nothing, "Platform": Nothing, "RoleName": Nothing }

-- | Constructs ImportImageRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newImportImageRequest' :: ( { "Architecture" :: Maybe (String) , "ClientData" :: Maybe (ClientData) , "ClientToken" :: Maybe (String) , "Description" :: Maybe (String) , "DiskContainers" :: Maybe (ImageDiskContainerList) , "DryRun" :: Maybe (Boolean) , "Hypervisor" :: Maybe (String) , "LicenseType" :: Maybe (String) , "Platform" :: Maybe (String) , "RoleName" :: Maybe (String) } -> {"Architecture" :: Maybe (String) , "ClientData" :: Maybe (ClientData) , "ClientToken" :: Maybe (String) , "Description" :: Maybe (String) , "DiskContainers" :: Maybe (ImageDiskContainerList) , "DryRun" :: Maybe (Boolean) , "Hypervisor" :: Maybe (String) , "LicenseType" :: Maybe (String) , "Platform" :: Maybe (String) , "RoleName" :: Maybe (String) } ) -> ImportImageRequest
newImportImageRequest'  customize = (ImportImageRequest <<< customize) { "Architecture": Nothing, "ClientData": Nothing, "ClientToken": Nothing, "Description": Nothing, "DiskContainers": Nothing, "DryRun": Nothing, "Hypervisor": Nothing, "LicenseType": Nothing, "Platform": Nothing, "RoleName": Nothing }



-- | <p>Contains the output for ImportImage.</p>
newtype ImportImageResult = ImportImageResult 
  { "Architecture" :: Maybe (String)
  , "Description" :: Maybe (String)
  , "Hypervisor" :: Maybe (String)
  , "ImageId" :: Maybe (String)
  , "ImportTaskId" :: Maybe (String)
  , "LicenseType" :: Maybe (String)
  , "Platform" :: Maybe (String)
  , "Progress" :: Maybe (String)
  , "SnapshotDetails" :: Maybe (SnapshotDetailList)
  , "Status" :: Maybe (String)
  , "StatusMessage" :: Maybe (String)
  }
derive instance newtypeImportImageResult :: Newtype ImportImageResult _
derive instance repGenericImportImageResult :: Generic ImportImageResult _
instance showImportImageResult :: Show ImportImageResult where show = genericShow
instance decodeImportImageResult :: Decode ImportImageResult where decode = genericDecode options
instance encodeImportImageResult :: Encode ImportImageResult where encode = genericEncode options

-- | Constructs ImportImageResult from required parameters
newImportImageResult :: ImportImageResult
newImportImageResult  = ImportImageResult { "Architecture": Nothing, "Description": Nothing, "Hypervisor": Nothing, "ImageId": Nothing, "ImportTaskId": Nothing, "LicenseType": Nothing, "Platform": Nothing, "Progress": Nothing, "SnapshotDetails": Nothing, "Status": Nothing, "StatusMessage": Nothing }

-- | Constructs ImportImageResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newImportImageResult' :: ( { "Architecture" :: Maybe (String) , "Description" :: Maybe (String) , "Hypervisor" :: Maybe (String) , "ImageId" :: Maybe (String) , "ImportTaskId" :: Maybe (String) , "LicenseType" :: Maybe (String) , "Platform" :: Maybe (String) , "Progress" :: Maybe (String) , "SnapshotDetails" :: Maybe (SnapshotDetailList) , "Status" :: Maybe (String) , "StatusMessage" :: Maybe (String) } -> {"Architecture" :: Maybe (String) , "Description" :: Maybe (String) , "Hypervisor" :: Maybe (String) , "ImageId" :: Maybe (String) , "ImportTaskId" :: Maybe (String) , "LicenseType" :: Maybe (String) , "Platform" :: Maybe (String) , "Progress" :: Maybe (String) , "SnapshotDetails" :: Maybe (SnapshotDetailList) , "Status" :: Maybe (String) , "StatusMessage" :: Maybe (String) } ) -> ImportImageResult
newImportImageResult'  customize = (ImportImageResult <<< customize) { "Architecture": Nothing, "Description": Nothing, "Hypervisor": Nothing, "ImageId": Nothing, "ImportTaskId": Nothing, "LicenseType": Nothing, "Platform": Nothing, "Progress": Nothing, "SnapshotDetails": Nothing, "Status": Nothing, "StatusMessage": Nothing }



-- | <p>Describes an import image task.</p>
newtype ImportImageTask = ImportImageTask 
  { "Architecture" :: Maybe (String)
  , "Description" :: Maybe (String)
  , "Hypervisor" :: Maybe (String)
  , "ImageId" :: Maybe (String)
  , "ImportTaskId" :: Maybe (String)
  , "LicenseType" :: Maybe (String)
  , "Platform" :: Maybe (String)
  , "Progress" :: Maybe (String)
  , "SnapshotDetails" :: Maybe (SnapshotDetailList)
  , "Status" :: Maybe (String)
  , "StatusMessage" :: Maybe (String)
  }
derive instance newtypeImportImageTask :: Newtype ImportImageTask _
derive instance repGenericImportImageTask :: Generic ImportImageTask _
instance showImportImageTask :: Show ImportImageTask where show = genericShow
instance decodeImportImageTask :: Decode ImportImageTask where decode = genericDecode options
instance encodeImportImageTask :: Encode ImportImageTask where encode = genericEncode options

-- | Constructs ImportImageTask from required parameters
newImportImageTask :: ImportImageTask
newImportImageTask  = ImportImageTask { "Architecture": Nothing, "Description": Nothing, "Hypervisor": Nothing, "ImageId": Nothing, "ImportTaskId": Nothing, "LicenseType": Nothing, "Platform": Nothing, "Progress": Nothing, "SnapshotDetails": Nothing, "Status": Nothing, "StatusMessage": Nothing }

-- | Constructs ImportImageTask's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newImportImageTask' :: ( { "Architecture" :: Maybe (String) , "Description" :: Maybe (String) , "Hypervisor" :: Maybe (String) , "ImageId" :: Maybe (String) , "ImportTaskId" :: Maybe (String) , "LicenseType" :: Maybe (String) , "Platform" :: Maybe (String) , "Progress" :: Maybe (String) , "SnapshotDetails" :: Maybe (SnapshotDetailList) , "Status" :: Maybe (String) , "StatusMessage" :: Maybe (String) } -> {"Architecture" :: Maybe (String) , "Description" :: Maybe (String) , "Hypervisor" :: Maybe (String) , "ImageId" :: Maybe (String) , "ImportTaskId" :: Maybe (String) , "LicenseType" :: Maybe (String) , "Platform" :: Maybe (String) , "Progress" :: Maybe (String) , "SnapshotDetails" :: Maybe (SnapshotDetailList) , "Status" :: Maybe (String) , "StatusMessage" :: Maybe (String) } ) -> ImportImageTask
newImportImageTask'  customize = (ImportImageTask <<< customize) { "Architecture": Nothing, "Description": Nothing, "Hypervisor": Nothing, "ImageId": Nothing, "ImportTaskId": Nothing, "LicenseType": Nothing, "Platform": Nothing, "Progress": Nothing, "SnapshotDetails": Nothing, "Status": Nothing, "StatusMessage": Nothing }



newtype ImportImageTaskList = ImportImageTaskList (Array ImportImageTask)
derive instance newtypeImportImageTaskList :: Newtype ImportImageTaskList _
derive instance repGenericImportImageTaskList :: Generic ImportImageTaskList _
instance showImportImageTaskList :: Show ImportImageTaskList where show = genericShow
instance decodeImportImageTaskList :: Decode ImportImageTaskList where decode = genericDecode options
instance encodeImportImageTaskList :: Encode ImportImageTaskList where encode = genericEncode options



-- | <p>Describes the launch specification for VM import.</p>
newtype ImportInstanceLaunchSpecification = ImportInstanceLaunchSpecification 
  { "AdditionalInfo" :: Maybe (String)
  , "Architecture" :: Maybe (ArchitectureValues)
  , "GroupIds" :: Maybe (SecurityGroupIdStringList)
  , "GroupNames" :: Maybe (SecurityGroupStringList)
  , "InstanceInitiatedShutdownBehavior" :: Maybe (ShutdownBehavior)
  , "InstanceType" :: Maybe (InstanceType)
  , "Monitoring" :: Maybe (Boolean)
  , "Placement" :: Maybe (Placement)
  , "PrivateIpAddress" :: Maybe (String)
  , "SubnetId" :: Maybe (String)
  , "UserData" :: Maybe (UserData)
  }
derive instance newtypeImportInstanceLaunchSpecification :: Newtype ImportInstanceLaunchSpecification _
derive instance repGenericImportInstanceLaunchSpecification :: Generic ImportInstanceLaunchSpecification _
instance showImportInstanceLaunchSpecification :: Show ImportInstanceLaunchSpecification where show = genericShow
instance decodeImportInstanceLaunchSpecification :: Decode ImportInstanceLaunchSpecification where decode = genericDecode options
instance encodeImportInstanceLaunchSpecification :: Encode ImportInstanceLaunchSpecification where encode = genericEncode options

-- | Constructs ImportInstanceLaunchSpecification from required parameters
newImportInstanceLaunchSpecification :: ImportInstanceLaunchSpecification
newImportInstanceLaunchSpecification  = ImportInstanceLaunchSpecification { "AdditionalInfo": Nothing, "Architecture": Nothing, "GroupIds": Nothing, "GroupNames": Nothing, "InstanceInitiatedShutdownBehavior": Nothing, "InstanceType": Nothing, "Monitoring": Nothing, "Placement": Nothing, "PrivateIpAddress": Nothing, "SubnetId": Nothing, "UserData": Nothing }

-- | Constructs ImportInstanceLaunchSpecification's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newImportInstanceLaunchSpecification' :: ( { "AdditionalInfo" :: Maybe (String) , "Architecture" :: Maybe (ArchitectureValues) , "GroupIds" :: Maybe (SecurityGroupIdStringList) , "GroupNames" :: Maybe (SecurityGroupStringList) , "InstanceInitiatedShutdownBehavior" :: Maybe (ShutdownBehavior) , "InstanceType" :: Maybe (InstanceType) , "Monitoring" :: Maybe (Boolean) , "Placement" :: Maybe (Placement) , "PrivateIpAddress" :: Maybe (String) , "SubnetId" :: Maybe (String) , "UserData" :: Maybe (UserData) } -> {"AdditionalInfo" :: Maybe (String) , "Architecture" :: Maybe (ArchitectureValues) , "GroupIds" :: Maybe (SecurityGroupIdStringList) , "GroupNames" :: Maybe (SecurityGroupStringList) , "InstanceInitiatedShutdownBehavior" :: Maybe (ShutdownBehavior) , "InstanceType" :: Maybe (InstanceType) , "Monitoring" :: Maybe (Boolean) , "Placement" :: Maybe (Placement) , "PrivateIpAddress" :: Maybe (String) , "SubnetId" :: Maybe (String) , "UserData" :: Maybe (UserData) } ) -> ImportInstanceLaunchSpecification
newImportInstanceLaunchSpecification'  customize = (ImportInstanceLaunchSpecification <<< customize) { "AdditionalInfo": Nothing, "Architecture": Nothing, "GroupIds": Nothing, "GroupNames": Nothing, "InstanceInitiatedShutdownBehavior": Nothing, "InstanceType": Nothing, "Monitoring": Nothing, "Placement": Nothing, "PrivateIpAddress": Nothing, "SubnetId": Nothing, "UserData": Nothing }



-- | <p>Contains the parameters for ImportInstance.</p>
newtype ImportInstanceRequest = ImportInstanceRequest 
  { "Description" :: Maybe (String)
  , "DiskImages" :: Maybe (DiskImageList)
  , "DryRun" :: Maybe (Boolean)
  , "LaunchSpecification" :: Maybe (ImportInstanceLaunchSpecification)
  , "Platform" :: (PlatformValues)
  }
derive instance newtypeImportInstanceRequest :: Newtype ImportInstanceRequest _
derive instance repGenericImportInstanceRequest :: Generic ImportInstanceRequest _
instance showImportInstanceRequest :: Show ImportInstanceRequest where show = genericShow
instance decodeImportInstanceRequest :: Decode ImportInstanceRequest where decode = genericDecode options
instance encodeImportInstanceRequest :: Encode ImportInstanceRequest where encode = genericEncode options

-- | Constructs ImportInstanceRequest from required parameters
newImportInstanceRequest :: PlatformValues -> ImportInstanceRequest
newImportInstanceRequest _Platform = ImportInstanceRequest { "Platform": _Platform, "Description": Nothing, "DiskImages": Nothing, "DryRun": Nothing, "LaunchSpecification": Nothing }

-- | Constructs ImportInstanceRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newImportInstanceRequest' :: PlatformValues -> ( { "Description" :: Maybe (String) , "DiskImages" :: Maybe (DiskImageList) , "DryRun" :: Maybe (Boolean) , "LaunchSpecification" :: Maybe (ImportInstanceLaunchSpecification) , "Platform" :: (PlatformValues) } -> {"Description" :: Maybe (String) , "DiskImages" :: Maybe (DiskImageList) , "DryRun" :: Maybe (Boolean) , "LaunchSpecification" :: Maybe (ImportInstanceLaunchSpecification) , "Platform" :: (PlatformValues) } ) -> ImportInstanceRequest
newImportInstanceRequest' _Platform customize = (ImportInstanceRequest <<< customize) { "Platform": _Platform, "Description": Nothing, "DiskImages": Nothing, "DryRun": Nothing, "LaunchSpecification": Nothing }



-- | <p>Contains the output for ImportInstance.</p>
newtype ImportInstanceResult = ImportInstanceResult 
  { "ConversionTask" :: Maybe (ConversionTask)
  }
derive instance newtypeImportInstanceResult :: Newtype ImportInstanceResult _
derive instance repGenericImportInstanceResult :: Generic ImportInstanceResult _
instance showImportInstanceResult :: Show ImportInstanceResult where show = genericShow
instance decodeImportInstanceResult :: Decode ImportInstanceResult where decode = genericDecode options
instance encodeImportInstanceResult :: Encode ImportInstanceResult where encode = genericEncode options

-- | Constructs ImportInstanceResult from required parameters
newImportInstanceResult :: ImportInstanceResult
newImportInstanceResult  = ImportInstanceResult { "ConversionTask": Nothing }

-- | Constructs ImportInstanceResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newImportInstanceResult' :: ( { "ConversionTask" :: Maybe (ConversionTask) } -> {"ConversionTask" :: Maybe (ConversionTask) } ) -> ImportInstanceResult
newImportInstanceResult'  customize = (ImportInstanceResult <<< customize) { "ConversionTask": Nothing }



-- | <p>Describes an import instance task.</p>
newtype ImportInstanceTaskDetails = ImportInstanceTaskDetails 
  { "Description" :: Maybe (String)
  , "InstanceId" :: Maybe (String)
  , "Platform" :: Maybe (PlatformValues)
  , "Volumes" :: (ImportInstanceVolumeDetailSet)
  }
derive instance newtypeImportInstanceTaskDetails :: Newtype ImportInstanceTaskDetails _
derive instance repGenericImportInstanceTaskDetails :: Generic ImportInstanceTaskDetails _
instance showImportInstanceTaskDetails :: Show ImportInstanceTaskDetails where show = genericShow
instance decodeImportInstanceTaskDetails :: Decode ImportInstanceTaskDetails where decode = genericDecode options
instance encodeImportInstanceTaskDetails :: Encode ImportInstanceTaskDetails where encode = genericEncode options

-- | Constructs ImportInstanceTaskDetails from required parameters
newImportInstanceTaskDetails :: ImportInstanceVolumeDetailSet -> ImportInstanceTaskDetails
newImportInstanceTaskDetails _Volumes = ImportInstanceTaskDetails { "Volumes": _Volumes, "Description": Nothing, "InstanceId": Nothing, "Platform": Nothing }

-- | Constructs ImportInstanceTaskDetails's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newImportInstanceTaskDetails' :: ImportInstanceVolumeDetailSet -> ( { "Description" :: Maybe (String) , "InstanceId" :: Maybe (String) , "Platform" :: Maybe (PlatformValues) , "Volumes" :: (ImportInstanceVolumeDetailSet) } -> {"Description" :: Maybe (String) , "InstanceId" :: Maybe (String) , "Platform" :: Maybe (PlatformValues) , "Volumes" :: (ImportInstanceVolumeDetailSet) } ) -> ImportInstanceTaskDetails
newImportInstanceTaskDetails' _Volumes customize = (ImportInstanceTaskDetails <<< customize) { "Volumes": _Volumes, "Description": Nothing, "InstanceId": Nothing, "Platform": Nothing }



-- | <p>Describes an import volume task.</p>
newtype ImportInstanceVolumeDetailItem = ImportInstanceVolumeDetailItem 
  { "AvailabilityZone" :: (String)
  , "BytesConverted" :: (Number)
  , "Description" :: Maybe (String)
  , "Image" :: (DiskImageDescription)
  , "Status" :: (String)
  , "StatusMessage" :: Maybe (String)
  , "Volume" :: (DiskImageVolumeDescription)
  }
derive instance newtypeImportInstanceVolumeDetailItem :: Newtype ImportInstanceVolumeDetailItem _
derive instance repGenericImportInstanceVolumeDetailItem :: Generic ImportInstanceVolumeDetailItem _
instance showImportInstanceVolumeDetailItem :: Show ImportInstanceVolumeDetailItem where show = genericShow
instance decodeImportInstanceVolumeDetailItem :: Decode ImportInstanceVolumeDetailItem where decode = genericDecode options
instance encodeImportInstanceVolumeDetailItem :: Encode ImportInstanceVolumeDetailItem where encode = genericEncode options

-- | Constructs ImportInstanceVolumeDetailItem from required parameters
newImportInstanceVolumeDetailItem :: String -> Number -> DiskImageDescription -> String -> DiskImageVolumeDescription -> ImportInstanceVolumeDetailItem
newImportInstanceVolumeDetailItem _AvailabilityZone _BytesConverted _Image _Status _Volume = ImportInstanceVolumeDetailItem { "AvailabilityZone": _AvailabilityZone, "BytesConverted": _BytesConverted, "Image": _Image, "Status": _Status, "Volume": _Volume, "Description": Nothing, "StatusMessage": Nothing }

-- | Constructs ImportInstanceVolumeDetailItem's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newImportInstanceVolumeDetailItem' :: String -> Number -> DiskImageDescription -> String -> DiskImageVolumeDescription -> ( { "AvailabilityZone" :: (String) , "BytesConverted" :: (Number) , "Description" :: Maybe (String) , "Image" :: (DiskImageDescription) , "Status" :: (String) , "StatusMessage" :: Maybe (String) , "Volume" :: (DiskImageVolumeDescription) } -> {"AvailabilityZone" :: (String) , "BytesConverted" :: (Number) , "Description" :: Maybe (String) , "Image" :: (DiskImageDescription) , "Status" :: (String) , "StatusMessage" :: Maybe (String) , "Volume" :: (DiskImageVolumeDescription) } ) -> ImportInstanceVolumeDetailItem
newImportInstanceVolumeDetailItem' _AvailabilityZone _BytesConverted _Image _Status _Volume customize = (ImportInstanceVolumeDetailItem <<< customize) { "AvailabilityZone": _AvailabilityZone, "BytesConverted": _BytesConverted, "Image": _Image, "Status": _Status, "Volume": _Volume, "Description": Nothing, "StatusMessage": Nothing }



newtype ImportInstanceVolumeDetailSet = ImportInstanceVolumeDetailSet (Array ImportInstanceVolumeDetailItem)
derive instance newtypeImportInstanceVolumeDetailSet :: Newtype ImportInstanceVolumeDetailSet _
derive instance repGenericImportInstanceVolumeDetailSet :: Generic ImportInstanceVolumeDetailSet _
instance showImportInstanceVolumeDetailSet :: Show ImportInstanceVolumeDetailSet where show = genericShow
instance decodeImportInstanceVolumeDetailSet :: Decode ImportInstanceVolumeDetailSet where decode = genericDecode options
instance encodeImportInstanceVolumeDetailSet :: Encode ImportInstanceVolumeDetailSet where encode = genericEncode options



-- | <p>Contains the parameters for ImportKeyPair.</p>
newtype ImportKeyPairRequest = ImportKeyPairRequest 
  { "DryRun" :: Maybe (Boolean)
  , "KeyName" :: (String)
  , "PublicKeyMaterial" :: (String)
  }
derive instance newtypeImportKeyPairRequest :: Newtype ImportKeyPairRequest _
derive instance repGenericImportKeyPairRequest :: Generic ImportKeyPairRequest _
instance showImportKeyPairRequest :: Show ImportKeyPairRequest where show = genericShow
instance decodeImportKeyPairRequest :: Decode ImportKeyPairRequest where decode = genericDecode options
instance encodeImportKeyPairRequest :: Encode ImportKeyPairRequest where encode = genericEncode options

-- | Constructs ImportKeyPairRequest from required parameters
newImportKeyPairRequest :: String -> String -> ImportKeyPairRequest
newImportKeyPairRequest _KeyName _PublicKeyMaterial = ImportKeyPairRequest { "KeyName": _KeyName, "PublicKeyMaterial": _PublicKeyMaterial, "DryRun": Nothing }

-- | Constructs ImportKeyPairRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newImportKeyPairRequest' :: String -> String -> ( { "DryRun" :: Maybe (Boolean) , "KeyName" :: (String) , "PublicKeyMaterial" :: (String) } -> {"DryRun" :: Maybe (Boolean) , "KeyName" :: (String) , "PublicKeyMaterial" :: (String) } ) -> ImportKeyPairRequest
newImportKeyPairRequest' _KeyName _PublicKeyMaterial customize = (ImportKeyPairRequest <<< customize) { "KeyName": _KeyName, "PublicKeyMaterial": _PublicKeyMaterial, "DryRun": Nothing }



-- | <p>Contains the output of ImportKeyPair.</p>
newtype ImportKeyPairResult = ImportKeyPairResult 
  { "KeyFingerprint" :: Maybe (String)
  , "KeyName" :: Maybe (String)
  }
derive instance newtypeImportKeyPairResult :: Newtype ImportKeyPairResult _
derive instance repGenericImportKeyPairResult :: Generic ImportKeyPairResult _
instance showImportKeyPairResult :: Show ImportKeyPairResult where show = genericShow
instance decodeImportKeyPairResult :: Decode ImportKeyPairResult where decode = genericDecode options
instance encodeImportKeyPairResult :: Encode ImportKeyPairResult where encode = genericEncode options

-- | Constructs ImportKeyPairResult from required parameters
newImportKeyPairResult :: ImportKeyPairResult
newImportKeyPairResult  = ImportKeyPairResult { "KeyFingerprint": Nothing, "KeyName": Nothing }

-- | Constructs ImportKeyPairResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newImportKeyPairResult' :: ( { "KeyFingerprint" :: Maybe (String) , "KeyName" :: Maybe (String) } -> {"KeyFingerprint" :: Maybe (String) , "KeyName" :: Maybe (String) } ) -> ImportKeyPairResult
newImportKeyPairResult'  customize = (ImportKeyPairResult <<< customize) { "KeyFingerprint": Nothing, "KeyName": Nothing }



-- | <p>Contains the parameters for ImportSnapshot.</p>
newtype ImportSnapshotRequest = ImportSnapshotRequest 
  { "ClientData" :: Maybe (ClientData)
  , "ClientToken" :: Maybe (String)
  , "Description" :: Maybe (String)
  , "DiskContainer" :: Maybe (SnapshotDiskContainer)
  , "DryRun" :: Maybe (Boolean)
  , "RoleName" :: Maybe (String)
  }
derive instance newtypeImportSnapshotRequest :: Newtype ImportSnapshotRequest _
derive instance repGenericImportSnapshotRequest :: Generic ImportSnapshotRequest _
instance showImportSnapshotRequest :: Show ImportSnapshotRequest where show = genericShow
instance decodeImportSnapshotRequest :: Decode ImportSnapshotRequest where decode = genericDecode options
instance encodeImportSnapshotRequest :: Encode ImportSnapshotRequest where encode = genericEncode options

-- | Constructs ImportSnapshotRequest from required parameters
newImportSnapshotRequest :: ImportSnapshotRequest
newImportSnapshotRequest  = ImportSnapshotRequest { "ClientData": Nothing, "ClientToken": Nothing, "Description": Nothing, "DiskContainer": Nothing, "DryRun": Nothing, "RoleName": Nothing }

-- | Constructs ImportSnapshotRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newImportSnapshotRequest' :: ( { "ClientData" :: Maybe (ClientData) , "ClientToken" :: Maybe (String) , "Description" :: Maybe (String) , "DiskContainer" :: Maybe (SnapshotDiskContainer) , "DryRun" :: Maybe (Boolean) , "RoleName" :: Maybe (String) } -> {"ClientData" :: Maybe (ClientData) , "ClientToken" :: Maybe (String) , "Description" :: Maybe (String) , "DiskContainer" :: Maybe (SnapshotDiskContainer) , "DryRun" :: Maybe (Boolean) , "RoleName" :: Maybe (String) } ) -> ImportSnapshotRequest
newImportSnapshotRequest'  customize = (ImportSnapshotRequest <<< customize) { "ClientData": Nothing, "ClientToken": Nothing, "Description": Nothing, "DiskContainer": Nothing, "DryRun": Nothing, "RoleName": Nothing }



-- | <p>Contains the output for ImportSnapshot.</p>
newtype ImportSnapshotResult = ImportSnapshotResult 
  { "Description" :: Maybe (String)
  , "ImportTaskId" :: Maybe (String)
  , "SnapshotTaskDetail" :: Maybe (SnapshotTaskDetail)
  }
derive instance newtypeImportSnapshotResult :: Newtype ImportSnapshotResult _
derive instance repGenericImportSnapshotResult :: Generic ImportSnapshotResult _
instance showImportSnapshotResult :: Show ImportSnapshotResult where show = genericShow
instance decodeImportSnapshotResult :: Decode ImportSnapshotResult where decode = genericDecode options
instance encodeImportSnapshotResult :: Encode ImportSnapshotResult where encode = genericEncode options

-- | Constructs ImportSnapshotResult from required parameters
newImportSnapshotResult :: ImportSnapshotResult
newImportSnapshotResult  = ImportSnapshotResult { "Description": Nothing, "ImportTaskId": Nothing, "SnapshotTaskDetail": Nothing }

-- | Constructs ImportSnapshotResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newImportSnapshotResult' :: ( { "Description" :: Maybe (String) , "ImportTaskId" :: Maybe (String) , "SnapshotTaskDetail" :: Maybe (SnapshotTaskDetail) } -> {"Description" :: Maybe (String) , "ImportTaskId" :: Maybe (String) , "SnapshotTaskDetail" :: Maybe (SnapshotTaskDetail) } ) -> ImportSnapshotResult
newImportSnapshotResult'  customize = (ImportSnapshotResult <<< customize) { "Description": Nothing, "ImportTaskId": Nothing, "SnapshotTaskDetail": Nothing }



-- | <p>Describes an import snapshot task.</p>
newtype ImportSnapshotTask = ImportSnapshotTask 
  { "Description" :: Maybe (String)
  , "ImportTaskId" :: Maybe (String)
  , "SnapshotTaskDetail" :: Maybe (SnapshotTaskDetail)
  }
derive instance newtypeImportSnapshotTask :: Newtype ImportSnapshotTask _
derive instance repGenericImportSnapshotTask :: Generic ImportSnapshotTask _
instance showImportSnapshotTask :: Show ImportSnapshotTask where show = genericShow
instance decodeImportSnapshotTask :: Decode ImportSnapshotTask where decode = genericDecode options
instance encodeImportSnapshotTask :: Encode ImportSnapshotTask where encode = genericEncode options

-- | Constructs ImportSnapshotTask from required parameters
newImportSnapshotTask :: ImportSnapshotTask
newImportSnapshotTask  = ImportSnapshotTask { "Description": Nothing, "ImportTaskId": Nothing, "SnapshotTaskDetail": Nothing }

-- | Constructs ImportSnapshotTask's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newImportSnapshotTask' :: ( { "Description" :: Maybe (String) , "ImportTaskId" :: Maybe (String) , "SnapshotTaskDetail" :: Maybe (SnapshotTaskDetail) } -> {"Description" :: Maybe (String) , "ImportTaskId" :: Maybe (String) , "SnapshotTaskDetail" :: Maybe (SnapshotTaskDetail) } ) -> ImportSnapshotTask
newImportSnapshotTask'  customize = (ImportSnapshotTask <<< customize) { "Description": Nothing, "ImportTaskId": Nothing, "SnapshotTaskDetail": Nothing }



newtype ImportSnapshotTaskList = ImportSnapshotTaskList (Array ImportSnapshotTask)
derive instance newtypeImportSnapshotTaskList :: Newtype ImportSnapshotTaskList _
derive instance repGenericImportSnapshotTaskList :: Generic ImportSnapshotTaskList _
instance showImportSnapshotTaskList :: Show ImportSnapshotTaskList where show = genericShow
instance decodeImportSnapshotTaskList :: Decode ImportSnapshotTaskList where decode = genericDecode options
instance encodeImportSnapshotTaskList :: Encode ImportSnapshotTaskList where encode = genericEncode options



newtype ImportTaskIdList = ImportTaskIdList (Array String)
derive instance newtypeImportTaskIdList :: Newtype ImportTaskIdList _
derive instance repGenericImportTaskIdList :: Generic ImportTaskIdList _
instance showImportTaskIdList :: Show ImportTaskIdList where show = genericShow
instance decodeImportTaskIdList :: Decode ImportTaskIdList where decode = genericDecode options
instance encodeImportTaskIdList :: Encode ImportTaskIdList where encode = genericEncode options



-- | <p>Contains the parameters for ImportVolume.</p>
newtype ImportVolumeRequest = ImportVolumeRequest 
  { "AvailabilityZone" :: (String)
  , "Description" :: Maybe (String)
  , "DryRun" :: Maybe (Boolean)
  , "Image" :: (DiskImageDetail)
  , "Volume" :: (VolumeDetail)
  }
derive instance newtypeImportVolumeRequest :: Newtype ImportVolumeRequest _
derive instance repGenericImportVolumeRequest :: Generic ImportVolumeRequest _
instance showImportVolumeRequest :: Show ImportVolumeRequest where show = genericShow
instance decodeImportVolumeRequest :: Decode ImportVolumeRequest where decode = genericDecode options
instance encodeImportVolumeRequest :: Encode ImportVolumeRequest where encode = genericEncode options

-- | Constructs ImportVolumeRequest from required parameters
newImportVolumeRequest :: String -> DiskImageDetail -> VolumeDetail -> ImportVolumeRequest
newImportVolumeRequest _AvailabilityZone _Image _Volume = ImportVolumeRequest { "AvailabilityZone": _AvailabilityZone, "Image": _Image, "Volume": _Volume, "Description": Nothing, "DryRun": Nothing }

-- | Constructs ImportVolumeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newImportVolumeRequest' :: String -> DiskImageDetail -> VolumeDetail -> ( { "AvailabilityZone" :: (String) , "Description" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "Image" :: (DiskImageDetail) , "Volume" :: (VolumeDetail) } -> {"AvailabilityZone" :: (String) , "Description" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "Image" :: (DiskImageDetail) , "Volume" :: (VolumeDetail) } ) -> ImportVolumeRequest
newImportVolumeRequest' _AvailabilityZone _Image _Volume customize = (ImportVolumeRequest <<< customize) { "AvailabilityZone": _AvailabilityZone, "Image": _Image, "Volume": _Volume, "Description": Nothing, "DryRun": Nothing }



-- | <p>Contains the output for ImportVolume.</p>
newtype ImportVolumeResult = ImportVolumeResult 
  { "ConversionTask" :: Maybe (ConversionTask)
  }
derive instance newtypeImportVolumeResult :: Newtype ImportVolumeResult _
derive instance repGenericImportVolumeResult :: Generic ImportVolumeResult _
instance showImportVolumeResult :: Show ImportVolumeResult where show = genericShow
instance decodeImportVolumeResult :: Decode ImportVolumeResult where decode = genericDecode options
instance encodeImportVolumeResult :: Encode ImportVolumeResult where encode = genericEncode options

-- | Constructs ImportVolumeResult from required parameters
newImportVolumeResult :: ImportVolumeResult
newImportVolumeResult  = ImportVolumeResult { "ConversionTask": Nothing }

-- | Constructs ImportVolumeResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newImportVolumeResult' :: ( { "ConversionTask" :: Maybe (ConversionTask) } -> {"ConversionTask" :: Maybe (ConversionTask) } ) -> ImportVolumeResult
newImportVolumeResult'  customize = (ImportVolumeResult <<< customize) { "ConversionTask": Nothing }



-- | <p>Describes an import volume task.</p>
newtype ImportVolumeTaskDetails = ImportVolumeTaskDetails 
  { "AvailabilityZone" :: (String)
  , "BytesConverted" :: (Number)
  , "Description" :: Maybe (String)
  , "Image" :: (DiskImageDescription)
  , "Volume" :: (DiskImageVolumeDescription)
  }
derive instance newtypeImportVolumeTaskDetails :: Newtype ImportVolumeTaskDetails _
derive instance repGenericImportVolumeTaskDetails :: Generic ImportVolumeTaskDetails _
instance showImportVolumeTaskDetails :: Show ImportVolumeTaskDetails where show = genericShow
instance decodeImportVolumeTaskDetails :: Decode ImportVolumeTaskDetails where decode = genericDecode options
instance encodeImportVolumeTaskDetails :: Encode ImportVolumeTaskDetails where encode = genericEncode options

-- | Constructs ImportVolumeTaskDetails from required parameters
newImportVolumeTaskDetails :: String -> Number -> DiskImageDescription -> DiskImageVolumeDescription -> ImportVolumeTaskDetails
newImportVolumeTaskDetails _AvailabilityZone _BytesConverted _Image _Volume = ImportVolumeTaskDetails { "AvailabilityZone": _AvailabilityZone, "BytesConverted": _BytesConverted, "Image": _Image, "Volume": _Volume, "Description": Nothing }

-- | Constructs ImportVolumeTaskDetails's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newImportVolumeTaskDetails' :: String -> Number -> DiskImageDescription -> DiskImageVolumeDescription -> ( { "AvailabilityZone" :: (String) , "BytesConverted" :: (Number) , "Description" :: Maybe (String) , "Image" :: (DiskImageDescription) , "Volume" :: (DiskImageVolumeDescription) } -> {"AvailabilityZone" :: (String) , "BytesConverted" :: (Number) , "Description" :: Maybe (String) , "Image" :: (DiskImageDescription) , "Volume" :: (DiskImageVolumeDescription) } ) -> ImportVolumeTaskDetails
newImportVolumeTaskDetails' _AvailabilityZone _BytesConverted _Image _Volume customize = (ImportVolumeTaskDetails <<< customize) { "AvailabilityZone": _AvailabilityZone, "BytesConverted": _BytesConverted, "Image": _Image, "Volume": _Volume, "Description": Nothing }



-- | <p>Describes an instance.</p>
newtype Instance = Instance 
  { "AmiLaunchIndex" :: Maybe (Int)
  , "ImageId" :: Maybe (String)
  , "InstanceId" :: Maybe (String)
  , "InstanceType" :: Maybe (InstanceType)
  , "KernelId" :: Maybe (String)
  , "KeyName" :: Maybe (String)
  , "LaunchTime" :: Maybe (DateTime)
  , "Monitoring" :: Maybe (Monitoring)
  , "Placement" :: Maybe (Placement)
  , "Platform" :: Maybe (PlatformValues)
  , "PrivateDnsName" :: Maybe (String)
  , "PrivateIpAddress" :: Maybe (String)
  , "ProductCodes" :: Maybe (ProductCodeList)
  , "PublicDnsName" :: Maybe (String)
  , "PublicIpAddress" :: Maybe (String)
  , "RamdiskId" :: Maybe (String)
  , "State" :: Maybe (InstanceState)
  , "StateTransitionReason" :: Maybe (String)
  , "SubnetId" :: Maybe (String)
  , "VpcId" :: Maybe (String)
  , "Architecture" :: Maybe (ArchitectureValues)
  , "BlockDeviceMappings" :: Maybe (InstanceBlockDeviceMappingList)
  , "ClientToken" :: Maybe (String)
  , "EbsOptimized" :: Maybe (Boolean)
  , "EnaSupport" :: Maybe (Boolean)
  , "Hypervisor" :: Maybe (HypervisorType)
  , "IamInstanceProfile" :: Maybe (IamInstanceProfile)
  , "InstanceLifecycle" :: Maybe (InstanceLifecycleType)
  , "ElasticGpuAssociations" :: Maybe (ElasticGpuAssociationList)
  , "NetworkInterfaces" :: Maybe (InstanceNetworkInterfaceList)
  , "RootDeviceName" :: Maybe (String)
  , "RootDeviceType" :: Maybe (DeviceType)
  , "SecurityGroups" :: Maybe (GroupIdentifierList)
  , "SourceDestCheck" :: Maybe (Boolean)
  , "SpotInstanceRequestId" :: Maybe (String)
  , "SriovNetSupport" :: Maybe (String)
  , "StateReason" :: Maybe (StateReason)
  , "Tags" :: Maybe (TagList)
  , "VirtualizationType" :: Maybe (VirtualizationType)
  }
derive instance newtypeInstance :: Newtype Instance _
derive instance repGenericInstance :: Generic Instance _
instance showInstance :: Show Instance where show = genericShow
instance decodeInstance :: Decode Instance where decode = genericDecode options
instance encodeInstance :: Encode Instance where encode = genericEncode options

-- | Constructs Instance from required parameters
newInstance :: Instance
newInstance  = Instance { "AmiLaunchIndex": Nothing, "Architecture": Nothing, "BlockDeviceMappings": Nothing, "ClientToken": Nothing, "EbsOptimized": Nothing, "ElasticGpuAssociations": Nothing, "EnaSupport": Nothing, "Hypervisor": Nothing, "IamInstanceProfile": Nothing, "ImageId": Nothing, "InstanceId": Nothing, "InstanceLifecycle": Nothing, "InstanceType": Nothing, "KernelId": Nothing, "KeyName": Nothing, "LaunchTime": Nothing, "Monitoring": Nothing, "NetworkInterfaces": Nothing, "Placement": Nothing, "Platform": Nothing, "PrivateDnsName": Nothing, "PrivateIpAddress": Nothing, "ProductCodes": Nothing, "PublicDnsName": Nothing, "PublicIpAddress": Nothing, "RamdiskId": Nothing, "RootDeviceName": Nothing, "RootDeviceType": Nothing, "SecurityGroups": Nothing, "SourceDestCheck": Nothing, "SpotInstanceRequestId": Nothing, "SriovNetSupport": Nothing, "State": Nothing, "StateReason": Nothing, "StateTransitionReason": Nothing, "SubnetId": Nothing, "Tags": Nothing, "VirtualizationType": Nothing, "VpcId": Nothing }

-- | Constructs Instance's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newInstance' :: ( { "AmiLaunchIndex" :: Maybe (Int) , "ImageId" :: Maybe (String) , "InstanceId" :: Maybe (String) , "InstanceType" :: Maybe (InstanceType) , "KernelId" :: Maybe (String) , "KeyName" :: Maybe (String) , "LaunchTime" :: Maybe (DateTime) , "Monitoring" :: Maybe (Monitoring) , "Placement" :: Maybe (Placement) , "Platform" :: Maybe (PlatformValues) , "PrivateDnsName" :: Maybe (String) , "PrivateIpAddress" :: Maybe (String) , "ProductCodes" :: Maybe (ProductCodeList) , "PublicDnsName" :: Maybe (String) , "PublicIpAddress" :: Maybe (String) , "RamdiskId" :: Maybe (String) , "State" :: Maybe (InstanceState) , "StateTransitionReason" :: Maybe (String) , "SubnetId" :: Maybe (String) , "VpcId" :: Maybe (String) , "Architecture" :: Maybe (ArchitectureValues) , "BlockDeviceMappings" :: Maybe (InstanceBlockDeviceMappingList) , "ClientToken" :: Maybe (String) , "EbsOptimized" :: Maybe (Boolean) , "EnaSupport" :: Maybe (Boolean) , "Hypervisor" :: Maybe (HypervisorType) , "IamInstanceProfile" :: Maybe (IamInstanceProfile) , "InstanceLifecycle" :: Maybe (InstanceLifecycleType) , "ElasticGpuAssociations" :: Maybe (ElasticGpuAssociationList) , "NetworkInterfaces" :: Maybe (InstanceNetworkInterfaceList) , "RootDeviceName" :: Maybe (String) , "RootDeviceType" :: Maybe (DeviceType) , "SecurityGroups" :: Maybe (GroupIdentifierList) , "SourceDestCheck" :: Maybe (Boolean) , "SpotInstanceRequestId" :: Maybe (String) , "SriovNetSupport" :: Maybe (String) , "StateReason" :: Maybe (StateReason) , "Tags" :: Maybe (TagList) , "VirtualizationType" :: Maybe (VirtualizationType) } -> {"AmiLaunchIndex" :: Maybe (Int) , "ImageId" :: Maybe (String) , "InstanceId" :: Maybe (String) , "InstanceType" :: Maybe (InstanceType) , "KernelId" :: Maybe (String) , "KeyName" :: Maybe (String) , "LaunchTime" :: Maybe (DateTime) , "Monitoring" :: Maybe (Monitoring) , "Placement" :: Maybe (Placement) , "Platform" :: Maybe (PlatformValues) , "PrivateDnsName" :: Maybe (String) , "PrivateIpAddress" :: Maybe (String) , "ProductCodes" :: Maybe (ProductCodeList) , "PublicDnsName" :: Maybe (String) , "PublicIpAddress" :: Maybe (String) , "RamdiskId" :: Maybe (String) , "State" :: Maybe (InstanceState) , "StateTransitionReason" :: Maybe (String) , "SubnetId" :: Maybe (String) , "VpcId" :: Maybe (String) , "Architecture" :: Maybe (ArchitectureValues) , "BlockDeviceMappings" :: Maybe (InstanceBlockDeviceMappingList) , "ClientToken" :: Maybe (String) , "EbsOptimized" :: Maybe (Boolean) , "EnaSupport" :: Maybe (Boolean) , "Hypervisor" :: Maybe (HypervisorType) , "IamInstanceProfile" :: Maybe (IamInstanceProfile) , "InstanceLifecycle" :: Maybe (InstanceLifecycleType) , "ElasticGpuAssociations" :: Maybe (ElasticGpuAssociationList) , "NetworkInterfaces" :: Maybe (InstanceNetworkInterfaceList) , "RootDeviceName" :: Maybe (String) , "RootDeviceType" :: Maybe (DeviceType) , "SecurityGroups" :: Maybe (GroupIdentifierList) , "SourceDestCheck" :: Maybe (Boolean) , "SpotInstanceRequestId" :: Maybe (String) , "SriovNetSupport" :: Maybe (String) , "StateReason" :: Maybe (StateReason) , "Tags" :: Maybe (TagList) , "VirtualizationType" :: Maybe (VirtualizationType) } ) -> Instance
newInstance'  customize = (Instance <<< customize) { "AmiLaunchIndex": Nothing, "Architecture": Nothing, "BlockDeviceMappings": Nothing, "ClientToken": Nothing, "EbsOptimized": Nothing, "ElasticGpuAssociations": Nothing, "EnaSupport": Nothing, "Hypervisor": Nothing, "IamInstanceProfile": Nothing, "ImageId": Nothing, "InstanceId": Nothing, "InstanceLifecycle": Nothing, "InstanceType": Nothing, "KernelId": Nothing, "KeyName": Nothing, "LaunchTime": Nothing, "Monitoring": Nothing, "NetworkInterfaces": Nothing, "Placement": Nothing, "Platform": Nothing, "PrivateDnsName": Nothing, "PrivateIpAddress": Nothing, "ProductCodes": Nothing, "PublicDnsName": Nothing, "PublicIpAddress": Nothing, "RamdiskId": Nothing, "RootDeviceName": Nothing, "RootDeviceType": Nothing, "SecurityGroups": Nothing, "SourceDestCheck": Nothing, "SpotInstanceRequestId": Nothing, "SriovNetSupport": Nothing, "State": Nothing, "StateReason": Nothing, "StateTransitionReason": Nothing, "SubnetId": Nothing, "Tags": Nothing, "VirtualizationType": Nothing, "VpcId": Nothing }



-- | <p>Describes an instance attribute.</p>
newtype InstanceAttribute = InstanceAttribute 
  { "Groups" :: Maybe (GroupIdentifierList)
  , "BlockDeviceMappings" :: Maybe (InstanceBlockDeviceMappingList)
  , "DisableApiTermination" :: Maybe (AttributeBooleanValue)
  , "EnaSupport" :: Maybe (AttributeBooleanValue)
  , "EbsOptimized" :: Maybe (AttributeBooleanValue)
  , "InstanceId" :: Maybe (String)
  , "InstanceInitiatedShutdownBehavior" :: Maybe (AttributeValue)
  , "InstanceType" :: Maybe (AttributeValue)
  , "KernelId" :: Maybe (AttributeValue)
  , "ProductCodes" :: Maybe (ProductCodeList)
  , "RamdiskId" :: Maybe (AttributeValue)
  , "RootDeviceName" :: Maybe (AttributeValue)
  , "SourceDestCheck" :: Maybe (AttributeBooleanValue)
  , "SriovNetSupport" :: Maybe (AttributeValue)
  , "UserData" :: Maybe (AttributeValue)
  }
derive instance newtypeInstanceAttribute :: Newtype InstanceAttribute _
derive instance repGenericInstanceAttribute :: Generic InstanceAttribute _
instance showInstanceAttribute :: Show InstanceAttribute where show = genericShow
instance decodeInstanceAttribute :: Decode InstanceAttribute where decode = genericDecode options
instance encodeInstanceAttribute :: Encode InstanceAttribute where encode = genericEncode options

-- | Constructs InstanceAttribute from required parameters
newInstanceAttribute :: InstanceAttribute
newInstanceAttribute  = InstanceAttribute { "BlockDeviceMappings": Nothing, "DisableApiTermination": Nothing, "EbsOptimized": Nothing, "EnaSupport": Nothing, "Groups": Nothing, "InstanceId": Nothing, "InstanceInitiatedShutdownBehavior": Nothing, "InstanceType": Nothing, "KernelId": Nothing, "ProductCodes": Nothing, "RamdiskId": Nothing, "RootDeviceName": Nothing, "SourceDestCheck": Nothing, "SriovNetSupport": Nothing, "UserData": Nothing }

-- | Constructs InstanceAttribute's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newInstanceAttribute' :: ( { "Groups" :: Maybe (GroupIdentifierList) , "BlockDeviceMappings" :: Maybe (InstanceBlockDeviceMappingList) , "DisableApiTermination" :: Maybe (AttributeBooleanValue) , "EnaSupport" :: Maybe (AttributeBooleanValue) , "EbsOptimized" :: Maybe (AttributeBooleanValue) , "InstanceId" :: Maybe (String) , "InstanceInitiatedShutdownBehavior" :: Maybe (AttributeValue) , "InstanceType" :: Maybe (AttributeValue) , "KernelId" :: Maybe (AttributeValue) , "ProductCodes" :: Maybe (ProductCodeList) , "RamdiskId" :: Maybe (AttributeValue) , "RootDeviceName" :: Maybe (AttributeValue) , "SourceDestCheck" :: Maybe (AttributeBooleanValue) , "SriovNetSupport" :: Maybe (AttributeValue) , "UserData" :: Maybe (AttributeValue) } -> {"Groups" :: Maybe (GroupIdentifierList) , "BlockDeviceMappings" :: Maybe (InstanceBlockDeviceMappingList) , "DisableApiTermination" :: Maybe (AttributeBooleanValue) , "EnaSupport" :: Maybe (AttributeBooleanValue) , "EbsOptimized" :: Maybe (AttributeBooleanValue) , "InstanceId" :: Maybe (String) , "InstanceInitiatedShutdownBehavior" :: Maybe (AttributeValue) , "InstanceType" :: Maybe (AttributeValue) , "KernelId" :: Maybe (AttributeValue) , "ProductCodes" :: Maybe (ProductCodeList) , "RamdiskId" :: Maybe (AttributeValue) , "RootDeviceName" :: Maybe (AttributeValue) , "SourceDestCheck" :: Maybe (AttributeBooleanValue) , "SriovNetSupport" :: Maybe (AttributeValue) , "UserData" :: Maybe (AttributeValue) } ) -> InstanceAttribute
newInstanceAttribute'  customize = (InstanceAttribute <<< customize) { "BlockDeviceMappings": Nothing, "DisableApiTermination": Nothing, "EbsOptimized": Nothing, "EnaSupport": Nothing, "Groups": Nothing, "InstanceId": Nothing, "InstanceInitiatedShutdownBehavior": Nothing, "InstanceType": Nothing, "KernelId": Nothing, "ProductCodes": Nothing, "RamdiskId": Nothing, "RootDeviceName": Nothing, "SourceDestCheck": Nothing, "SriovNetSupport": Nothing, "UserData": Nothing }



newtype InstanceAttributeName = InstanceAttributeName String
derive instance newtypeInstanceAttributeName :: Newtype InstanceAttributeName _
derive instance repGenericInstanceAttributeName :: Generic InstanceAttributeName _
instance showInstanceAttributeName :: Show InstanceAttributeName where show = genericShow
instance decodeInstanceAttributeName :: Decode InstanceAttributeName where decode = genericDecode options
instance encodeInstanceAttributeName :: Encode InstanceAttributeName where encode = genericEncode options



-- | <p>Describes a block device mapping.</p>
newtype InstanceBlockDeviceMapping = InstanceBlockDeviceMapping 
  { "DeviceName" :: Maybe (String)
  , "Ebs" :: Maybe (EbsInstanceBlockDevice)
  }
derive instance newtypeInstanceBlockDeviceMapping :: Newtype InstanceBlockDeviceMapping _
derive instance repGenericInstanceBlockDeviceMapping :: Generic InstanceBlockDeviceMapping _
instance showInstanceBlockDeviceMapping :: Show InstanceBlockDeviceMapping where show = genericShow
instance decodeInstanceBlockDeviceMapping :: Decode InstanceBlockDeviceMapping where decode = genericDecode options
instance encodeInstanceBlockDeviceMapping :: Encode InstanceBlockDeviceMapping where encode = genericEncode options

-- | Constructs InstanceBlockDeviceMapping from required parameters
newInstanceBlockDeviceMapping :: InstanceBlockDeviceMapping
newInstanceBlockDeviceMapping  = InstanceBlockDeviceMapping { "DeviceName": Nothing, "Ebs": Nothing }

-- | Constructs InstanceBlockDeviceMapping's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newInstanceBlockDeviceMapping' :: ( { "DeviceName" :: Maybe (String) , "Ebs" :: Maybe (EbsInstanceBlockDevice) } -> {"DeviceName" :: Maybe (String) , "Ebs" :: Maybe (EbsInstanceBlockDevice) } ) -> InstanceBlockDeviceMapping
newInstanceBlockDeviceMapping'  customize = (InstanceBlockDeviceMapping <<< customize) { "DeviceName": Nothing, "Ebs": Nothing }



newtype InstanceBlockDeviceMappingList = InstanceBlockDeviceMappingList (Array InstanceBlockDeviceMapping)
derive instance newtypeInstanceBlockDeviceMappingList :: Newtype InstanceBlockDeviceMappingList _
derive instance repGenericInstanceBlockDeviceMappingList :: Generic InstanceBlockDeviceMappingList _
instance showInstanceBlockDeviceMappingList :: Show InstanceBlockDeviceMappingList where show = genericShow
instance decodeInstanceBlockDeviceMappingList :: Decode InstanceBlockDeviceMappingList where decode = genericDecode options
instance encodeInstanceBlockDeviceMappingList :: Encode InstanceBlockDeviceMappingList where encode = genericEncode options



-- | <p>Describes a block device mapping entry.</p>
newtype InstanceBlockDeviceMappingSpecification = InstanceBlockDeviceMappingSpecification 
  { "DeviceName" :: Maybe (String)
  , "Ebs" :: Maybe (EbsInstanceBlockDeviceSpecification)
  , "NoDevice" :: Maybe (String)
  , "VirtualName" :: Maybe (String)
  }
derive instance newtypeInstanceBlockDeviceMappingSpecification :: Newtype InstanceBlockDeviceMappingSpecification _
derive instance repGenericInstanceBlockDeviceMappingSpecification :: Generic InstanceBlockDeviceMappingSpecification _
instance showInstanceBlockDeviceMappingSpecification :: Show InstanceBlockDeviceMappingSpecification where show = genericShow
instance decodeInstanceBlockDeviceMappingSpecification :: Decode InstanceBlockDeviceMappingSpecification where decode = genericDecode options
instance encodeInstanceBlockDeviceMappingSpecification :: Encode InstanceBlockDeviceMappingSpecification where encode = genericEncode options

-- | Constructs InstanceBlockDeviceMappingSpecification from required parameters
newInstanceBlockDeviceMappingSpecification :: InstanceBlockDeviceMappingSpecification
newInstanceBlockDeviceMappingSpecification  = InstanceBlockDeviceMappingSpecification { "DeviceName": Nothing, "Ebs": Nothing, "NoDevice": Nothing, "VirtualName": Nothing }

-- | Constructs InstanceBlockDeviceMappingSpecification's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newInstanceBlockDeviceMappingSpecification' :: ( { "DeviceName" :: Maybe (String) , "Ebs" :: Maybe (EbsInstanceBlockDeviceSpecification) , "NoDevice" :: Maybe (String) , "VirtualName" :: Maybe (String) } -> {"DeviceName" :: Maybe (String) , "Ebs" :: Maybe (EbsInstanceBlockDeviceSpecification) , "NoDevice" :: Maybe (String) , "VirtualName" :: Maybe (String) } ) -> InstanceBlockDeviceMappingSpecification
newInstanceBlockDeviceMappingSpecification'  customize = (InstanceBlockDeviceMappingSpecification <<< customize) { "DeviceName": Nothing, "Ebs": Nothing, "NoDevice": Nothing, "VirtualName": Nothing }



newtype InstanceBlockDeviceMappingSpecificationList = InstanceBlockDeviceMappingSpecificationList (Array InstanceBlockDeviceMappingSpecification)
derive instance newtypeInstanceBlockDeviceMappingSpecificationList :: Newtype InstanceBlockDeviceMappingSpecificationList _
derive instance repGenericInstanceBlockDeviceMappingSpecificationList :: Generic InstanceBlockDeviceMappingSpecificationList _
instance showInstanceBlockDeviceMappingSpecificationList :: Show InstanceBlockDeviceMappingSpecificationList where show = genericShow
instance decodeInstanceBlockDeviceMappingSpecificationList :: Decode InstanceBlockDeviceMappingSpecificationList where decode = genericDecode options
instance encodeInstanceBlockDeviceMappingSpecificationList :: Encode InstanceBlockDeviceMappingSpecificationList where encode = genericEncode options



-- | <p>Information about the instance type that the Dedicated Host supports.</p>
newtype InstanceCapacity = InstanceCapacity 
  { "AvailableCapacity" :: Maybe (Int)
  , "InstanceType" :: Maybe (String)
  , "TotalCapacity" :: Maybe (Int)
  }
derive instance newtypeInstanceCapacity :: Newtype InstanceCapacity _
derive instance repGenericInstanceCapacity :: Generic InstanceCapacity _
instance showInstanceCapacity :: Show InstanceCapacity where show = genericShow
instance decodeInstanceCapacity :: Decode InstanceCapacity where decode = genericDecode options
instance encodeInstanceCapacity :: Encode InstanceCapacity where encode = genericEncode options

-- | Constructs InstanceCapacity from required parameters
newInstanceCapacity :: InstanceCapacity
newInstanceCapacity  = InstanceCapacity { "AvailableCapacity": Nothing, "InstanceType": Nothing, "TotalCapacity": Nothing }

-- | Constructs InstanceCapacity's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newInstanceCapacity' :: ( { "AvailableCapacity" :: Maybe (Int) , "InstanceType" :: Maybe (String) , "TotalCapacity" :: Maybe (Int) } -> {"AvailableCapacity" :: Maybe (Int) , "InstanceType" :: Maybe (String) , "TotalCapacity" :: Maybe (Int) } ) -> InstanceCapacity
newInstanceCapacity'  customize = (InstanceCapacity <<< customize) { "AvailableCapacity": Nothing, "InstanceType": Nothing, "TotalCapacity": Nothing }



-- | <p>Describes a Reserved Instance listing state.</p>
newtype InstanceCount = InstanceCount 
  { "InstanceCount" :: Maybe (Int)
  , "State" :: Maybe (ListingState)
  }
derive instance newtypeInstanceCount :: Newtype InstanceCount _
derive instance repGenericInstanceCount :: Generic InstanceCount _
instance showInstanceCount :: Show InstanceCount where show = genericShow
instance decodeInstanceCount :: Decode InstanceCount where decode = genericDecode options
instance encodeInstanceCount :: Encode InstanceCount where encode = genericEncode options

-- | Constructs InstanceCount from required parameters
newInstanceCount :: InstanceCount
newInstanceCount  = InstanceCount { "InstanceCount": Nothing, "State": Nothing }

-- | Constructs InstanceCount's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newInstanceCount' :: ( { "InstanceCount" :: Maybe (Int) , "State" :: Maybe (ListingState) } -> {"InstanceCount" :: Maybe (Int) , "State" :: Maybe (ListingState) } ) -> InstanceCount
newInstanceCount'  customize = (InstanceCount <<< customize) { "InstanceCount": Nothing, "State": Nothing }



newtype InstanceCountList = InstanceCountList (Array InstanceCount)
derive instance newtypeInstanceCountList :: Newtype InstanceCountList _
derive instance repGenericInstanceCountList :: Generic InstanceCountList _
instance showInstanceCountList :: Show InstanceCountList where show = genericShow
instance decodeInstanceCountList :: Decode InstanceCountList where decode = genericDecode options
instance encodeInstanceCountList :: Encode InstanceCountList where encode = genericEncode options



-- | <p>Describes the credit option for CPU usage of a T2 instance. </p>
newtype InstanceCreditSpecification = InstanceCreditSpecification 
  { "InstanceId" :: Maybe (String)
  , "CpuCredits" :: Maybe (String)
  }
derive instance newtypeInstanceCreditSpecification :: Newtype InstanceCreditSpecification _
derive instance repGenericInstanceCreditSpecification :: Generic InstanceCreditSpecification _
instance showInstanceCreditSpecification :: Show InstanceCreditSpecification where show = genericShow
instance decodeInstanceCreditSpecification :: Decode InstanceCreditSpecification where decode = genericDecode options
instance encodeInstanceCreditSpecification :: Encode InstanceCreditSpecification where encode = genericEncode options

-- | Constructs InstanceCreditSpecification from required parameters
newInstanceCreditSpecification :: InstanceCreditSpecification
newInstanceCreditSpecification  = InstanceCreditSpecification { "CpuCredits": Nothing, "InstanceId": Nothing }

-- | Constructs InstanceCreditSpecification's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newInstanceCreditSpecification' :: ( { "InstanceId" :: Maybe (String) , "CpuCredits" :: Maybe (String) } -> {"InstanceId" :: Maybe (String) , "CpuCredits" :: Maybe (String) } ) -> InstanceCreditSpecification
newInstanceCreditSpecification'  customize = (InstanceCreditSpecification <<< customize) { "CpuCredits": Nothing, "InstanceId": Nothing }



newtype InstanceCreditSpecificationList = InstanceCreditSpecificationList (Array InstanceCreditSpecification)
derive instance newtypeInstanceCreditSpecificationList :: Newtype InstanceCreditSpecificationList _
derive instance repGenericInstanceCreditSpecificationList :: Generic InstanceCreditSpecificationList _
instance showInstanceCreditSpecificationList :: Show InstanceCreditSpecificationList where show = genericShow
instance decodeInstanceCreditSpecificationList :: Decode InstanceCreditSpecificationList where decode = genericDecode options
instance encodeInstanceCreditSpecificationList :: Encode InstanceCreditSpecificationList where encode = genericEncode options



newtype InstanceCreditSpecificationListRequest = InstanceCreditSpecificationListRequest (Array InstanceCreditSpecificationRequest)
derive instance newtypeInstanceCreditSpecificationListRequest :: Newtype InstanceCreditSpecificationListRequest _
derive instance repGenericInstanceCreditSpecificationListRequest :: Generic InstanceCreditSpecificationListRequest _
instance showInstanceCreditSpecificationListRequest :: Show InstanceCreditSpecificationListRequest where show = genericShow
instance decodeInstanceCreditSpecificationListRequest :: Decode InstanceCreditSpecificationListRequest where decode = genericDecode options
instance encodeInstanceCreditSpecificationListRequest :: Encode InstanceCreditSpecificationListRequest where encode = genericEncode options



-- | <p>Describes the credit option for CPU usage of a T2 instance.</p>
newtype InstanceCreditSpecificationRequest = InstanceCreditSpecificationRequest 
  { "InstanceId" :: Maybe (String)
  , "CpuCredits" :: Maybe (String)
  }
derive instance newtypeInstanceCreditSpecificationRequest :: Newtype InstanceCreditSpecificationRequest _
derive instance repGenericInstanceCreditSpecificationRequest :: Generic InstanceCreditSpecificationRequest _
instance showInstanceCreditSpecificationRequest :: Show InstanceCreditSpecificationRequest where show = genericShow
instance decodeInstanceCreditSpecificationRequest :: Decode InstanceCreditSpecificationRequest where decode = genericDecode options
instance encodeInstanceCreditSpecificationRequest :: Encode InstanceCreditSpecificationRequest where encode = genericEncode options

-- | Constructs InstanceCreditSpecificationRequest from required parameters
newInstanceCreditSpecificationRequest :: InstanceCreditSpecificationRequest
newInstanceCreditSpecificationRequest  = InstanceCreditSpecificationRequest { "CpuCredits": Nothing, "InstanceId": Nothing }

-- | Constructs InstanceCreditSpecificationRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newInstanceCreditSpecificationRequest' :: ( { "InstanceId" :: Maybe (String) , "CpuCredits" :: Maybe (String) } -> {"InstanceId" :: Maybe (String) , "CpuCredits" :: Maybe (String) } ) -> InstanceCreditSpecificationRequest
newInstanceCreditSpecificationRequest'  customize = (InstanceCreditSpecificationRequest <<< customize) { "CpuCredits": Nothing, "InstanceId": Nothing }



-- | <p>Describes an instance to export.</p>
newtype InstanceExportDetails = InstanceExportDetails 
  { "InstanceId" :: Maybe (String)
  , "TargetEnvironment" :: Maybe (ExportEnvironment)
  }
derive instance newtypeInstanceExportDetails :: Newtype InstanceExportDetails _
derive instance repGenericInstanceExportDetails :: Generic InstanceExportDetails _
instance showInstanceExportDetails :: Show InstanceExportDetails where show = genericShow
instance decodeInstanceExportDetails :: Decode InstanceExportDetails where decode = genericDecode options
instance encodeInstanceExportDetails :: Encode InstanceExportDetails where encode = genericEncode options

-- | Constructs InstanceExportDetails from required parameters
newInstanceExportDetails :: InstanceExportDetails
newInstanceExportDetails  = InstanceExportDetails { "InstanceId": Nothing, "TargetEnvironment": Nothing }

-- | Constructs InstanceExportDetails's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newInstanceExportDetails' :: ( { "InstanceId" :: Maybe (String) , "TargetEnvironment" :: Maybe (ExportEnvironment) } -> {"InstanceId" :: Maybe (String) , "TargetEnvironment" :: Maybe (ExportEnvironment) } ) -> InstanceExportDetails
newInstanceExportDetails'  customize = (InstanceExportDetails <<< customize) { "InstanceId": Nothing, "TargetEnvironment": Nothing }



newtype InstanceHealthStatus = InstanceHealthStatus String
derive instance newtypeInstanceHealthStatus :: Newtype InstanceHealthStatus _
derive instance repGenericInstanceHealthStatus :: Generic InstanceHealthStatus _
instance showInstanceHealthStatus :: Show InstanceHealthStatus where show = genericShow
instance decodeInstanceHealthStatus :: Decode InstanceHealthStatus where decode = genericDecode options
instance encodeInstanceHealthStatus :: Encode InstanceHealthStatus where encode = genericEncode options



newtype InstanceIdSet = InstanceIdSet (Array String)
derive instance newtypeInstanceIdSet :: Newtype InstanceIdSet _
derive instance repGenericInstanceIdSet :: Generic InstanceIdSet _
instance showInstanceIdSet :: Show InstanceIdSet where show = genericShow
instance decodeInstanceIdSet :: Decode InstanceIdSet where decode = genericDecode options
instance encodeInstanceIdSet :: Encode InstanceIdSet where encode = genericEncode options



newtype InstanceIdStringList = InstanceIdStringList (Array String)
derive instance newtypeInstanceIdStringList :: Newtype InstanceIdStringList _
derive instance repGenericInstanceIdStringList :: Generic InstanceIdStringList _
instance showInstanceIdStringList :: Show InstanceIdStringList where show = genericShow
instance decodeInstanceIdStringList :: Decode InstanceIdStringList where decode = genericDecode options
instance encodeInstanceIdStringList :: Encode InstanceIdStringList where encode = genericEncode options



newtype InstanceInterruptionBehavior = InstanceInterruptionBehavior String
derive instance newtypeInstanceInterruptionBehavior :: Newtype InstanceInterruptionBehavior _
derive instance repGenericInstanceInterruptionBehavior :: Generic InstanceInterruptionBehavior _
instance showInstanceInterruptionBehavior :: Show InstanceInterruptionBehavior where show = genericShow
instance decodeInstanceInterruptionBehavior :: Decode InstanceInterruptionBehavior where decode = genericDecode options
instance encodeInstanceInterruptionBehavior :: Encode InstanceInterruptionBehavior where encode = genericEncode options



-- | <p>Describes an IPv6 address.</p>
newtype InstanceIpv6Address = InstanceIpv6Address 
  { "Ipv6Address" :: Maybe (String)
  }
derive instance newtypeInstanceIpv6Address :: Newtype InstanceIpv6Address _
derive instance repGenericInstanceIpv6Address :: Generic InstanceIpv6Address _
instance showInstanceIpv6Address :: Show InstanceIpv6Address where show = genericShow
instance decodeInstanceIpv6Address :: Decode InstanceIpv6Address where decode = genericDecode options
instance encodeInstanceIpv6Address :: Encode InstanceIpv6Address where encode = genericEncode options

-- | Constructs InstanceIpv6Address from required parameters
newInstanceIpv6Address :: InstanceIpv6Address
newInstanceIpv6Address  = InstanceIpv6Address { "Ipv6Address": Nothing }

-- | Constructs InstanceIpv6Address's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newInstanceIpv6Address' :: ( { "Ipv6Address" :: Maybe (String) } -> {"Ipv6Address" :: Maybe (String) } ) -> InstanceIpv6Address
newInstanceIpv6Address'  customize = (InstanceIpv6Address <<< customize) { "Ipv6Address": Nothing }



newtype InstanceIpv6AddressList = InstanceIpv6AddressList (Array InstanceIpv6Address)
derive instance newtypeInstanceIpv6AddressList :: Newtype InstanceIpv6AddressList _
derive instance repGenericInstanceIpv6AddressList :: Generic InstanceIpv6AddressList _
instance showInstanceIpv6AddressList :: Show InstanceIpv6AddressList where show = genericShow
instance decodeInstanceIpv6AddressList :: Decode InstanceIpv6AddressList where decode = genericDecode options
instance encodeInstanceIpv6AddressList :: Encode InstanceIpv6AddressList where encode = genericEncode options



newtype InstanceIpv6AddressListRequest = InstanceIpv6AddressListRequest (Array InstanceIpv6AddressRequest)
derive instance newtypeInstanceIpv6AddressListRequest :: Newtype InstanceIpv6AddressListRequest _
derive instance repGenericInstanceIpv6AddressListRequest :: Generic InstanceIpv6AddressListRequest _
instance showInstanceIpv6AddressListRequest :: Show InstanceIpv6AddressListRequest where show = genericShow
instance decodeInstanceIpv6AddressListRequest :: Decode InstanceIpv6AddressListRequest where decode = genericDecode options
instance encodeInstanceIpv6AddressListRequest :: Encode InstanceIpv6AddressListRequest where encode = genericEncode options



-- | <p>Describes an IPv6 address.</p>
newtype InstanceIpv6AddressRequest = InstanceIpv6AddressRequest 
  { "Ipv6Address" :: Maybe (String)
  }
derive instance newtypeInstanceIpv6AddressRequest :: Newtype InstanceIpv6AddressRequest _
derive instance repGenericInstanceIpv6AddressRequest :: Generic InstanceIpv6AddressRequest _
instance showInstanceIpv6AddressRequest :: Show InstanceIpv6AddressRequest where show = genericShow
instance decodeInstanceIpv6AddressRequest :: Decode InstanceIpv6AddressRequest where decode = genericDecode options
instance encodeInstanceIpv6AddressRequest :: Encode InstanceIpv6AddressRequest where encode = genericEncode options

-- | Constructs InstanceIpv6AddressRequest from required parameters
newInstanceIpv6AddressRequest :: InstanceIpv6AddressRequest
newInstanceIpv6AddressRequest  = InstanceIpv6AddressRequest { "Ipv6Address": Nothing }

-- | Constructs InstanceIpv6AddressRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newInstanceIpv6AddressRequest' :: ( { "Ipv6Address" :: Maybe (String) } -> {"Ipv6Address" :: Maybe (String) } ) -> InstanceIpv6AddressRequest
newInstanceIpv6AddressRequest'  customize = (InstanceIpv6AddressRequest <<< customize) { "Ipv6Address": Nothing }



newtype InstanceLifecycleType = InstanceLifecycleType String
derive instance newtypeInstanceLifecycleType :: Newtype InstanceLifecycleType _
derive instance repGenericInstanceLifecycleType :: Generic InstanceLifecycleType _
instance showInstanceLifecycleType :: Show InstanceLifecycleType where show = genericShow
instance decodeInstanceLifecycleType :: Decode InstanceLifecycleType where decode = genericDecode options
instance encodeInstanceLifecycleType :: Encode InstanceLifecycleType where encode = genericEncode options



newtype InstanceList = InstanceList (Array Instance)
derive instance newtypeInstanceList :: Newtype InstanceList _
derive instance repGenericInstanceList :: Generic InstanceList _
instance showInstanceList :: Show InstanceList where show = genericShow
instance decodeInstanceList :: Decode InstanceList where decode = genericDecode options
instance encodeInstanceList :: Encode InstanceList where encode = genericEncode options



-- | <p>Describes the market (purchasing) option for the instances.</p>
newtype InstanceMarketOptionsRequest = InstanceMarketOptionsRequest 
  { "MarketType" :: Maybe (MarketType)
  , "SpotOptions" :: Maybe (SpotMarketOptions)
  }
derive instance newtypeInstanceMarketOptionsRequest :: Newtype InstanceMarketOptionsRequest _
derive instance repGenericInstanceMarketOptionsRequest :: Generic InstanceMarketOptionsRequest _
instance showInstanceMarketOptionsRequest :: Show InstanceMarketOptionsRequest where show = genericShow
instance decodeInstanceMarketOptionsRequest :: Decode InstanceMarketOptionsRequest where decode = genericDecode options
instance encodeInstanceMarketOptionsRequest :: Encode InstanceMarketOptionsRequest where encode = genericEncode options

-- | Constructs InstanceMarketOptionsRequest from required parameters
newInstanceMarketOptionsRequest :: InstanceMarketOptionsRequest
newInstanceMarketOptionsRequest  = InstanceMarketOptionsRequest { "MarketType": Nothing, "SpotOptions": Nothing }

-- | Constructs InstanceMarketOptionsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newInstanceMarketOptionsRequest' :: ( { "MarketType" :: Maybe (MarketType) , "SpotOptions" :: Maybe (SpotMarketOptions) } -> {"MarketType" :: Maybe (MarketType) , "SpotOptions" :: Maybe (SpotMarketOptions) } ) -> InstanceMarketOptionsRequest
newInstanceMarketOptionsRequest'  customize = (InstanceMarketOptionsRequest <<< customize) { "MarketType": Nothing, "SpotOptions": Nothing }



-- | <p>Describes the monitoring of an instance.</p>
newtype InstanceMonitoring = InstanceMonitoring 
  { "InstanceId" :: Maybe (String)
  , "Monitoring" :: Maybe (Monitoring)
  }
derive instance newtypeInstanceMonitoring :: Newtype InstanceMonitoring _
derive instance repGenericInstanceMonitoring :: Generic InstanceMonitoring _
instance showInstanceMonitoring :: Show InstanceMonitoring where show = genericShow
instance decodeInstanceMonitoring :: Decode InstanceMonitoring where decode = genericDecode options
instance encodeInstanceMonitoring :: Encode InstanceMonitoring where encode = genericEncode options

-- | Constructs InstanceMonitoring from required parameters
newInstanceMonitoring :: InstanceMonitoring
newInstanceMonitoring  = InstanceMonitoring { "InstanceId": Nothing, "Monitoring": Nothing }

-- | Constructs InstanceMonitoring's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newInstanceMonitoring' :: ( { "InstanceId" :: Maybe (String) , "Monitoring" :: Maybe (Monitoring) } -> {"InstanceId" :: Maybe (String) , "Monitoring" :: Maybe (Monitoring) } ) -> InstanceMonitoring
newInstanceMonitoring'  customize = (InstanceMonitoring <<< customize) { "InstanceId": Nothing, "Monitoring": Nothing }



newtype InstanceMonitoringList = InstanceMonitoringList (Array InstanceMonitoring)
derive instance newtypeInstanceMonitoringList :: Newtype InstanceMonitoringList _
derive instance repGenericInstanceMonitoringList :: Generic InstanceMonitoringList _
instance showInstanceMonitoringList :: Show InstanceMonitoringList where show = genericShow
instance decodeInstanceMonitoringList :: Decode InstanceMonitoringList where decode = genericDecode options
instance encodeInstanceMonitoringList :: Encode InstanceMonitoringList where encode = genericEncode options



-- | <p>Describes a network interface.</p>
newtype InstanceNetworkInterface = InstanceNetworkInterface 
  { "Association" :: Maybe (InstanceNetworkInterfaceAssociation)
  , "Attachment" :: Maybe (InstanceNetworkInterfaceAttachment)
  , "Description" :: Maybe (String)
  , "Groups" :: Maybe (GroupIdentifierList)
  , "Ipv6Addresses" :: Maybe (InstanceIpv6AddressList)
  , "MacAddress" :: Maybe (String)
  , "NetworkInterfaceId" :: Maybe (String)
  , "OwnerId" :: Maybe (String)
  , "PrivateDnsName" :: Maybe (String)
  , "PrivateIpAddress" :: Maybe (String)
  , "PrivateIpAddresses" :: Maybe (InstancePrivateIpAddressList)
  , "SourceDestCheck" :: Maybe (Boolean)
  , "Status" :: Maybe (NetworkInterfaceStatus)
  , "SubnetId" :: Maybe (String)
  , "VpcId" :: Maybe (String)
  }
derive instance newtypeInstanceNetworkInterface :: Newtype InstanceNetworkInterface _
derive instance repGenericInstanceNetworkInterface :: Generic InstanceNetworkInterface _
instance showInstanceNetworkInterface :: Show InstanceNetworkInterface where show = genericShow
instance decodeInstanceNetworkInterface :: Decode InstanceNetworkInterface where decode = genericDecode options
instance encodeInstanceNetworkInterface :: Encode InstanceNetworkInterface where encode = genericEncode options

-- | Constructs InstanceNetworkInterface from required parameters
newInstanceNetworkInterface :: InstanceNetworkInterface
newInstanceNetworkInterface  = InstanceNetworkInterface { "Association": Nothing, "Attachment": Nothing, "Description": Nothing, "Groups": Nothing, "Ipv6Addresses": Nothing, "MacAddress": Nothing, "NetworkInterfaceId": Nothing, "OwnerId": Nothing, "PrivateDnsName": Nothing, "PrivateIpAddress": Nothing, "PrivateIpAddresses": Nothing, "SourceDestCheck": Nothing, "Status": Nothing, "SubnetId": Nothing, "VpcId": Nothing }

-- | Constructs InstanceNetworkInterface's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newInstanceNetworkInterface' :: ( { "Association" :: Maybe (InstanceNetworkInterfaceAssociation) , "Attachment" :: Maybe (InstanceNetworkInterfaceAttachment) , "Description" :: Maybe (String) , "Groups" :: Maybe (GroupIdentifierList) , "Ipv6Addresses" :: Maybe (InstanceIpv6AddressList) , "MacAddress" :: Maybe (String) , "NetworkInterfaceId" :: Maybe (String) , "OwnerId" :: Maybe (String) , "PrivateDnsName" :: Maybe (String) , "PrivateIpAddress" :: Maybe (String) , "PrivateIpAddresses" :: Maybe (InstancePrivateIpAddressList) , "SourceDestCheck" :: Maybe (Boolean) , "Status" :: Maybe (NetworkInterfaceStatus) , "SubnetId" :: Maybe (String) , "VpcId" :: Maybe (String) } -> {"Association" :: Maybe (InstanceNetworkInterfaceAssociation) , "Attachment" :: Maybe (InstanceNetworkInterfaceAttachment) , "Description" :: Maybe (String) , "Groups" :: Maybe (GroupIdentifierList) , "Ipv6Addresses" :: Maybe (InstanceIpv6AddressList) , "MacAddress" :: Maybe (String) , "NetworkInterfaceId" :: Maybe (String) , "OwnerId" :: Maybe (String) , "PrivateDnsName" :: Maybe (String) , "PrivateIpAddress" :: Maybe (String) , "PrivateIpAddresses" :: Maybe (InstancePrivateIpAddressList) , "SourceDestCheck" :: Maybe (Boolean) , "Status" :: Maybe (NetworkInterfaceStatus) , "SubnetId" :: Maybe (String) , "VpcId" :: Maybe (String) } ) -> InstanceNetworkInterface
newInstanceNetworkInterface'  customize = (InstanceNetworkInterface <<< customize) { "Association": Nothing, "Attachment": Nothing, "Description": Nothing, "Groups": Nothing, "Ipv6Addresses": Nothing, "MacAddress": Nothing, "NetworkInterfaceId": Nothing, "OwnerId": Nothing, "PrivateDnsName": Nothing, "PrivateIpAddress": Nothing, "PrivateIpAddresses": Nothing, "SourceDestCheck": Nothing, "Status": Nothing, "SubnetId": Nothing, "VpcId": Nothing }



-- | <p>Describes association information for an Elastic IP address (IPv4).</p>
newtype InstanceNetworkInterfaceAssociation = InstanceNetworkInterfaceAssociation 
  { "IpOwnerId" :: Maybe (String)
  , "PublicDnsName" :: Maybe (String)
  , "PublicIp" :: Maybe (String)
  }
derive instance newtypeInstanceNetworkInterfaceAssociation :: Newtype InstanceNetworkInterfaceAssociation _
derive instance repGenericInstanceNetworkInterfaceAssociation :: Generic InstanceNetworkInterfaceAssociation _
instance showInstanceNetworkInterfaceAssociation :: Show InstanceNetworkInterfaceAssociation where show = genericShow
instance decodeInstanceNetworkInterfaceAssociation :: Decode InstanceNetworkInterfaceAssociation where decode = genericDecode options
instance encodeInstanceNetworkInterfaceAssociation :: Encode InstanceNetworkInterfaceAssociation where encode = genericEncode options

-- | Constructs InstanceNetworkInterfaceAssociation from required parameters
newInstanceNetworkInterfaceAssociation :: InstanceNetworkInterfaceAssociation
newInstanceNetworkInterfaceAssociation  = InstanceNetworkInterfaceAssociation { "IpOwnerId": Nothing, "PublicDnsName": Nothing, "PublicIp": Nothing }

-- | Constructs InstanceNetworkInterfaceAssociation's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newInstanceNetworkInterfaceAssociation' :: ( { "IpOwnerId" :: Maybe (String) , "PublicDnsName" :: Maybe (String) , "PublicIp" :: Maybe (String) } -> {"IpOwnerId" :: Maybe (String) , "PublicDnsName" :: Maybe (String) , "PublicIp" :: Maybe (String) } ) -> InstanceNetworkInterfaceAssociation
newInstanceNetworkInterfaceAssociation'  customize = (InstanceNetworkInterfaceAssociation <<< customize) { "IpOwnerId": Nothing, "PublicDnsName": Nothing, "PublicIp": Nothing }



-- | <p>Describes a network interface attachment.</p>
newtype InstanceNetworkInterfaceAttachment = InstanceNetworkInterfaceAttachment 
  { "AttachTime" :: Maybe (DateTime)
  , "AttachmentId" :: Maybe (String)
  , "DeleteOnTermination" :: Maybe (Boolean)
  , "DeviceIndex" :: Maybe (Int)
  , "Status" :: Maybe (AttachmentStatus)
  }
derive instance newtypeInstanceNetworkInterfaceAttachment :: Newtype InstanceNetworkInterfaceAttachment _
derive instance repGenericInstanceNetworkInterfaceAttachment :: Generic InstanceNetworkInterfaceAttachment _
instance showInstanceNetworkInterfaceAttachment :: Show InstanceNetworkInterfaceAttachment where show = genericShow
instance decodeInstanceNetworkInterfaceAttachment :: Decode InstanceNetworkInterfaceAttachment where decode = genericDecode options
instance encodeInstanceNetworkInterfaceAttachment :: Encode InstanceNetworkInterfaceAttachment where encode = genericEncode options

-- | Constructs InstanceNetworkInterfaceAttachment from required parameters
newInstanceNetworkInterfaceAttachment :: InstanceNetworkInterfaceAttachment
newInstanceNetworkInterfaceAttachment  = InstanceNetworkInterfaceAttachment { "AttachTime": Nothing, "AttachmentId": Nothing, "DeleteOnTermination": Nothing, "DeviceIndex": Nothing, "Status": Nothing }

-- | Constructs InstanceNetworkInterfaceAttachment's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newInstanceNetworkInterfaceAttachment' :: ( { "AttachTime" :: Maybe (DateTime) , "AttachmentId" :: Maybe (String) , "DeleteOnTermination" :: Maybe (Boolean) , "DeviceIndex" :: Maybe (Int) , "Status" :: Maybe (AttachmentStatus) } -> {"AttachTime" :: Maybe (DateTime) , "AttachmentId" :: Maybe (String) , "DeleteOnTermination" :: Maybe (Boolean) , "DeviceIndex" :: Maybe (Int) , "Status" :: Maybe (AttachmentStatus) } ) -> InstanceNetworkInterfaceAttachment
newInstanceNetworkInterfaceAttachment'  customize = (InstanceNetworkInterfaceAttachment <<< customize) { "AttachTime": Nothing, "AttachmentId": Nothing, "DeleteOnTermination": Nothing, "DeviceIndex": Nothing, "Status": Nothing }



newtype InstanceNetworkInterfaceList = InstanceNetworkInterfaceList (Array InstanceNetworkInterface)
derive instance newtypeInstanceNetworkInterfaceList :: Newtype InstanceNetworkInterfaceList _
derive instance repGenericInstanceNetworkInterfaceList :: Generic InstanceNetworkInterfaceList _
instance showInstanceNetworkInterfaceList :: Show InstanceNetworkInterfaceList where show = genericShow
instance decodeInstanceNetworkInterfaceList :: Decode InstanceNetworkInterfaceList where decode = genericDecode options
instance encodeInstanceNetworkInterfaceList :: Encode InstanceNetworkInterfaceList where encode = genericEncode options



-- | <p>Describes a network interface.</p>
newtype InstanceNetworkInterfaceSpecification = InstanceNetworkInterfaceSpecification 
  { "AssociatePublicIpAddress" :: Maybe (Boolean)
  , "DeleteOnTermination" :: Maybe (Boolean)
  , "Description" :: Maybe (String)
  , "DeviceIndex" :: Maybe (Int)
  , "Groups" :: Maybe (SecurityGroupIdStringList)
  , "Ipv6AddressCount" :: Maybe (Int)
  , "Ipv6Addresses" :: Maybe (InstanceIpv6AddressList)
  , "NetworkInterfaceId" :: Maybe (String)
  , "PrivateIpAddress" :: Maybe (String)
  , "PrivateIpAddresses" :: Maybe (PrivateIpAddressSpecificationList)
  , "SecondaryPrivateIpAddressCount" :: Maybe (Int)
  , "SubnetId" :: Maybe (String)
  }
derive instance newtypeInstanceNetworkInterfaceSpecification :: Newtype InstanceNetworkInterfaceSpecification _
derive instance repGenericInstanceNetworkInterfaceSpecification :: Generic InstanceNetworkInterfaceSpecification _
instance showInstanceNetworkInterfaceSpecification :: Show InstanceNetworkInterfaceSpecification where show = genericShow
instance decodeInstanceNetworkInterfaceSpecification :: Decode InstanceNetworkInterfaceSpecification where decode = genericDecode options
instance encodeInstanceNetworkInterfaceSpecification :: Encode InstanceNetworkInterfaceSpecification where encode = genericEncode options

-- | Constructs InstanceNetworkInterfaceSpecification from required parameters
newInstanceNetworkInterfaceSpecification :: InstanceNetworkInterfaceSpecification
newInstanceNetworkInterfaceSpecification  = InstanceNetworkInterfaceSpecification { "AssociatePublicIpAddress": Nothing, "DeleteOnTermination": Nothing, "Description": Nothing, "DeviceIndex": Nothing, "Groups": Nothing, "Ipv6AddressCount": Nothing, "Ipv6Addresses": Nothing, "NetworkInterfaceId": Nothing, "PrivateIpAddress": Nothing, "PrivateIpAddresses": Nothing, "SecondaryPrivateIpAddressCount": Nothing, "SubnetId": Nothing }

-- | Constructs InstanceNetworkInterfaceSpecification's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newInstanceNetworkInterfaceSpecification' :: ( { "AssociatePublicIpAddress" :: Maybe (Boolean) , "DeleteOnTermination" :: Maybe (Boolean) , "Description" :: Maybe (String) , "DeviceIndex" :: Maybe (Int) , "Groups" :: Maybe (SecurityGroupIdStringList) , "Ipv6AddressCount" :: Maybe (Int) , "Ipv6Addresses" :: Maybe (InstanceIpv6AddressList) , "NetworkInterfaceId" :: Maybe (String) , "PrivateIpAddress" :: Maybe (String) , "PrivateIpAddresses" :: Maybe (PrivateIpAddressSpecificationList) , "SecondaryPrivateIpAddressCount" :: Maybe (Int) , "SubnetId" :: Maybe (String) } -> {"AssociatePublicIpAddress" :: Maybe (Boolean) , "DeleteOnTermination" :: Maybe (Boolean) , "Description" :: Maybe (String) , "DeviceIndex" :: Maybe (Int) , "Groups" :: Maybe (SecurityGroupIdStringList) , "Ipv6AddressCount" :: Maybe (Int) , "Ipv6Addresses" :: Maybe (InstanceIpv6AddressList) , "NetworkInterfaceId" :: Maybe (String) , "PrivateIpAddress" :: Maybe (String) , "PrivateIpAddresses" :: Maybe (PrivateIpAddressSpecificationList) , "SecondaryPrivateIpAddressCount" :: Maybe (Int) , "SubnetId" :: Maybe (String) } ) -> InstanceNetworkInterfaceSpecification
newInstanceNetworkInterfaceSpecification'  customize = (InstanceNetworkInterfaceSpecification <<< customize) { "AssociatePublicIpAddress": Nothing, "DeleteOnTermination": Nothing, "Description": Nothing, "DeviceIndex": Nothing, "Groups": Nothing, "Ipv6AddressCount": Nothing, "Ipv6Addresses": Nothing, "NetworkInterfaceId": Nothing, "PrivateIpAddress": Nothing, "PrivateIpAddresses": Nothing, "SecondaryPrivateIpAddressCount": Nothing, "SubnetId": Nothing }



newtype InstanceNetworkInterfaceSpecificationList = InstanceNetworkInterfaceSpecificationList (Array InstanceNetworkInterfaceSpecification)
derive instance newtypeInstanceNetworkInterfaceSpecificationList :: Newtype InstanceNetworkInterfaceSpecificationList _
derive instance repGenericInstanceNetworkInterfaceSpecificationList :: Generic InstanceNetworkInterfaceSpecificationList _
instance showInstanceNetworkInterfaceSpecificationList :: Show InstanceNetworkInterfaceSpecificationList where show = genericShow
instance decodeInstanceNetworkInterfaceSpecificationList :: Decode InstanceNetworkInterfaceSpecificationList where decode = genericDecode options
instance encodeInstanceNetworkInterfaceSpecificationList :: Encode InstanceNetworkInterfaceSpecificationList where encode = genericEncode options



-- | <p>Describes a private IPv4 address.</p>
newtype InstancePrivateIpAddress = InstancePrivateIpAddress 
  { "Association" :: Maybe (InstanceNetworkInterfaceAssociation)
  , "Primary" :: Maybe (Boolean)
  , "PrivateDnsName" :: Maybe (String)
  , "PrivateIpAddress" :: Maybe (String)
  }
derive instance newtypeInstancePrivateIpAddress :: Newtype InstancePrivateIpAddress _
derive instance repGenericInstancePrivateIpAddress :: Generic InstancePrivateIpAddress _
instance showInstancePrivateIpAddress :: Show InstancePrivateIpAddress where show = genericShow
instance decodeInstancePrivateIpAddress :: Decode InstancePrivateIpAddress where decode = genericDecode options
instance encodeInstancePrivateIpAddress :: Encode InstancePrivateIpAddress where encode = genericEncode options

-- | Constructs InstancePrivateIpAddress from required parameters
newInstancePrivateIpAddress :: InstancePrivateIpAddress
newInstancePrivateIpAddress  = InstancePrivateIpAddress { "Association": Nothing, "Primary": Nothing, "PrivateDnsName": Nothing, "PrivateIpAddress": Nothing }

-- | Constructs InstancePrivateIpAddress's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newInstancePrivateIpAddress' :: ( { "Association" :: Maybe (InstanceNetworkInterfaceAssociation) , "Primary" :: Maybe (Boolean) , "PrivateDnsName" :: Maybe (String) , "PrivateIpAddress" :: Maybe (String) } -> {"Association" :: Maybe (InstanceNetworkInterfaceAssociation) , "Primary" :: Maybe (Boolean) , "PrivateDnsName" :: Maybe (String) , "PrivateIpAddress" :: Maybe (String) } ) -> InstancePrivateIpAddress
newInstancePrivateIpAddress'  customize = (InstancePrivateIpAddress <<< customize) { "Association": Nothing, "Primary": Nothing, "PrivateDnsName": Nothing, "PrivateIpAddress": Nothing }



newtype InstancePrivateIpAddressList = InstancePrivateIpAddressList (Array InstancePrivateIpAddress)
derive instance newtypeInstancePrivateIpAddressList :: Newtype InstancePrivateIpAddressList _
derive instance repGenericInstancePrivateIpAddressList :: Generic InstancePrivateIpAddressList _
instance showInstancePrivateIpAddressList :: Show InstancePrivateIpAddressList where show = genericShow
instance decodeInstancePrivateIpAddressList :: Decode InstancePrivateIpAddressList where decode = genericDecode options
instance encodeInstancePrivateIpAddressList :: Encode InstancePrivateIpAddressList where encode = genericEncode options



-- | <p>Describes the current state of an instance.</p>
newtype InstanceState = InstanceState 
  { "Code" :: Maybe (Int)
  , "Name" :: Maybe (InstanceStateName)
  }
derive instance newtypeInstanceState :: Newtype InstanceState _
derive instance repGenericInstanceState :: Generic InstanceState _
instance showInstanceState :: Show InstanceState where show = genericShow
instance decodeInstanceState :: Decode InstanceState where decode = genericDecode options
instance encodeInstanceState :: Encode InstanceState where encode = genericEncode options

-- | Constructs InstanceState from required parameters
newInstanceState :: InstanceState
newInstanceState  = InstanceState { "Code": Nothing, "Name": Nothing }

-- | Constructs InstanceState's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newInstanceState' :: ( { "Code" :: Maybe (Int) , "Name" :: Maybe (InstanceStateName) } -> {"Code" :: Maybe (Int) , "Name" :: Maybe (InstanceStateName) } ) -> InstanceState
newInstanceState'  customize = (InstanceState <<< customize) { "Code": Nothing, "Name": Nothing }



-- | <p>Describes an instance state change.</p>
newtype InstanceStateChange = InstanceStateChange 
  { "CurrentState" :: Maybe (InstanceState)
  , "InstanceId" :: Maybe (String)
  , "PreviousState" :: Maybe (InstanceState)
  }
derive instance newtypeInstanceStateChange :: Newtype InstanceStateChange _
derive instance repGenericInstanceStateChange :: Generic InstanceStateChange _
instance showInstanceStateChange :: Show InstanceStateChange where show = genericShow
instance decodeInstanceStateChange :: Decode InstanceStateChange where decode = genericDecode options
instance encodeInstanceStateChange :: Encode InstanceStateChange where encode = genericEncode options

-- | Constructs InstanceStateChange from required parameters
newInstanceStateChange :: InstanceStateChange
newInstanceStateChange  = InstanceStateChange { "CurrentState": Nothing, "InstanceId": Nothing, "PreviousState": Nothing }

-- | Constructs InstanceStateChange's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newInstanceStateChange' :: ( { "CurrentState" :: Maybe (InstanceState) , "InstanceId" :: Maybe (String) , "PreviousState" :: Maybe (InstanceState) } -> {"CurrentState" :: Maybe (InstanceState) , "InstanceId" :: Maybe (String) , "PreviousState" :: Maybe (InstanceState) } ) -> InstanceStateChange
newInstanceStateChange'  customize = (InstanceStateChange <<< customize) { "CurrentState": Nothing, "InstanceId": Nothing, "PreviousState": Nothing }



newtype InstanceStateChangeList = InstanceStateChangeList (Array InstanceStateChange)
derive instance newtypeInstanceStateChangeList :: Newtype InstanceStateChangeList _
derive instance repGenericInstanceStateChangeList :: Generic InstanceStateChangeList _
instance showInstanceStateChangeList :: Show InstanceStateChangeList where show = genericShow
instance decodeInstanceStateChangeList :: Decode InstanceStateChangeList where decode = genericDecode options
instance encodeInstanceStateChangeList :: Encode InstanceStateChangeList where encode = genericEncode options



newtype InstanceStateName = InstanceStateName String
derive instance newtypeInstanceStateName :: Newtype InstanceStateName _
derive instance repGenericInstanceStateName :: Generic InstanceStateName _
instance showInstanceStateName :: Show InstanceStateName where show = genericShow
instance decodeInstanceStateName :: Decode InstanceStateName where decode = genericDecode options
instance encodeInstanceStateName :: Encode InstanceStateName where encode = genericEncode options



-- | <p>Describes the status of an instance.</p>
newtype InstanceStatus = InstanceStatus 
  { "AvailabilityZone" :: Maybe (String)
  , "Events" :: Maybe (InstanceStatusEventList)
  , "InstanceId" :: Maybe (String)
  , "InstanceState" :: Maybe (InstanceState)
  , "InstanceStatus" :: Maybe (InstanceStatusSummary)
  , "SystemStatus" :: Maybe (InstanceStatusSummary)
  }
derive instance newtypeInstanceStatus :: Newtype InstanceStatus _
derive instance repGenericInstanceStatus :: Generic InstanceStatus _
instance showInstanceStatus :: Show InstanceStatus where show = genericShow
instance decodeInstanceStatus :: Decode InstanceStatus where decode = genericDecode options
instance encodeInstanceStatus :: Encode InstanceStatus where encode = genericEncode options

-- | Constructs InstanceStatus from required parameters
newInstanceStatus :: InstanceStatus
newInstanceStatus  = InstanceStatus { "AvailabilityZone": Nothing, "Events": Nothing, "InstanceId": Nothing, "InstanceState": Nothing, "InstanceStatus": Nothing, "SystemStatus": Nothing }

-- | Constructs InstanceStatus's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newInstanceStatus' :: ( { "AvailabilityZone" :: Maybe (String) , "Events" :: Maybe (InstanceStatusEventList) , "InstanceId" :: Maybe (String) , "InstanceState" :: Maybe (InstanceState) , "InstanceStatus" :: Maybe (InstanceStatusSummary) , "SystemStatus" :: Maybe (InstanceStatusSummary) } -> {"AvailabilityZone" :: Maybe (String) , "Events" :: Maybe (InstanceStatusEventList) , "InstanceId" :: Maybe (String) , "InstanceState" :: Maybe (InstanceState) , "InstanceStatus" :: Maybe (InstanceStatusSummary) , "SystemStatus" :: Maybe (InstanceStatusSummary) } ) -> InstanceStatus
newInstanceStatus'  customize = (InstanceStatus <<< customize) { "AvailabilityZone": Nothing, "Events": Nothing, "InstanceId": Nothing, "InstanceState": Nothing, "InstanceStatus": Nothing, "SystemStatus": Nothing }



-- | <p>Describes the instance status.</p>
newtype InstanceStatusDetails = InstanceStatusDetails 
  { "ImpairedSince" :: Maybe (DateTime)
  , "Name" :: Maybe (StatusName)
  , "Status" :: Maybe (StatusType)
  }
derive instance newtypeInstanceStatusDetails :: Newtype InstanceStatusDetails _
derive instance repGenericInstanceStatusDetails :: Generic InstanceStatusDetails _
instance showInstanceStatusDetails :: Show InstanceStatusDetails where show = genericShow
instance decodeInstanceStatusDetails :: Decode InstanceStatusDetails where decode = genericDecode options
instance encodeInstanceStatusDetails :: Encode InstanceStatusDetails where encode = genericEncode options

-- | Constructs InstanceStatusDetails from required parameters
newInstanceStatusDetails :: InstanceStatusDetails
newInstanceStatusDetails  = InstanceStatusDetails { "ImpairedSince": Nothing, "Name": Nothing, "Status": Nothing }

-- | Constructs InstanceStatusDetails's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newInstanceStatusDetails' :: ( { "ImpairedSince" :: Maybe (DateTime) , "Name" :: Maybe (StatusName) , "Status" :: Maybe (StatusType) } -> {"ImpairedSince" :: Maybe (DateTime) , "Name" :: Maybe (StatusName) , "Status" :: Maybe (StatusType) } ) -> InstanceStatusDetails
newInstanceStatusDetails'  customize = (InstanceStatusDetails <<< customize) { "ImpairedSince": Nothing, "Name": Nothing, "Status": Nothing }



newtype InstanceStatusDetailsList = InstanceStatusDetailsList (Array InstanceStatusDetails)
derive instance newtypeInstanceStatusDetailsList :: Newtype InstanceStatusDetailsList _
derive instance repGenericInstanceStatusDetailsList :: Generic InstanceStatusDetailsList _
instance showInstanceStatusDetailsList :: Show InstanceStatusDetailsList where show = genericShow
instance decodeInstanceStatusDetailsList :: Decode InstanceStatusDetailsList where decode = genericDecode options
instance encodeInstanceStatusDetailsList :: Encode InstanceStatusDetailsList where encode = genericEncode options



-- | <p>Describes a scheduled event for an instance.</p>
newtype InstanceStatusEvent = InstanceStatusEvent 
  { "Code" :: Maybe (EventCode)
  , "Description" :: Maybe (String)
  , "NotAfter" :: Maybe (DateTime)
  , "NotBefore" :: Maybe (DateTime)
  }
derive instance newtypeInstanceStatusEvent :: Newtype InstanceStatusEvent _
derive instance repGenericInstanceStatusEvent :: Generic InstanceStatusEvent _
instance showInstanceStatusEvent :: Show InstanceStatusEvent where show = genericShow
instance decodeInstanceStatusEvent :: Decode InstanceStatusEvent where decode = genericDecode options
instance encodeInstanceStatusEvent :: Encode InstanceStatusEvent where encode = genericEncode options

-- | Constructs InstanceStatusEvent from required parameters
newInstanceStatusEvent :: InstanceStatusEvent
newInstanceStatusEvent  = InstanceStatusEvent { "Code": Nothing, "Description": Nothing, "NotAfter": Nothing, "NotBefore": Nothing }

-- | Constructs InstanceStatusEvent's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newInstanceStatusEvent' :: ( { "Code" :: Maybe (EventCode) , "Description" :: Maybe (String) , "NotAfter" :: Maybe (DateTime) , "NotBefore" :: Maybe (DateTime) } -> {"Code" :: Maybe (EventCode) , "Description" :: Maybe (String) , "NotAfter" :: Maybe (DateTime) , "NotBefore" :: Maybe (DateTime) } ) -> InstanceStatusEvent
newInstanceStatusEvent'  customize = (InstanceStatusEvent <<< customize) { "Code": Nothing, "Description": Nothing, "NotAfter": Nothing, "NotBefore": Nothing }



newtype InstanceStatusEventList = InstanceStatusEventList (Array InstanceStatusEvent)
derive instance newtypeInstanceStatusEventList :: Newtype InstanceStatusEventList _
derive instance repGenericInstanceStatusEventList :: Generic InstanceStatusEventList _
instance showInstanceStatusEventList :: Show InstanceStatusEventList where show = genericShow
instance decodeInstanceStatusEventList :: Decode InstanceStatusEventList where decode = genericDecode options
instance encodeInstanceStatusEventList :: Encode InstanceStatusEventList where encode = genericEncode options



newtype InstanceStatusList = InstanceStatusList (Array InstanceStatus)
derive instance newtypeInstanceStatusList :: Newtype InstanceStatusList _
derive instance repGenericInstanceStatusList :: Generic InstanceStatusList _
instance showInstanceStatusList :: Show InstanceStatusList where show = genericShow
instance decodeInstanceStatusList :: Decode InstanceStatusList where decode = genericDecode options
instance encodeInstanceStatusList :: Encode InstanceStatusList where encode = genericEncode options



-- | <p>Describes the status of an instance.</p>
newtype InstanceStatusSummary = InstanceStatusSummary 
  { "Details" :: Maybe (InstanceStatusDetailsList)
  , "Status" :: Maybe (SummaryStatus)
  }
derive instance newtypeInstanceStatusSummary :: Newtype InstanceStatusSummary _
derive instance repGenericInstanceStatusSummary :: Generic InstanceStatusSummary _
instance showInstanceStatusSummary :: Show InstanceStatusSummary where show = genericShow
instance decodeInstanceStatusSummary :: Decode InstanceStatusSummary where decode = genericDecode options
instance encodeInstanceStatusSummary :: Encode InstanceStatusSummary where encode = genericEncode options

-- | Constructs InstanceStatusSummary from required parameters
newInstanceStatusSummary :: InstanceStatusSummary
newInstanceStatusSummary  = InstanceStatusSummary { "Details": Nothing, "Status": Nothing }

-- | Constructs InstanceStatusSummary's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newInstanceStatusSummary' :: ( { "Details" :: Maybe (InstanceStatusDetailsList) , "Status" :: Maybe (SummaryStatus) } -> {"Details" :: Maybe (InstanceStatusDetailsList) , "Status" :: Maybe (SummaryStatus) } ) -> InstanceStatusSummary
newInstanceStatusSummary'  customize = (InstanceStatusSummary <<< customize) { "Details": Nothing, "Status": Nothing }



newtype InstanceType = InstanceType String
derive instance newtypeInstanceType :: Newtype InstanceType _
derive instance repGenericInstanceType :: Generic InstanceType _
instance showInstanceType :: Show InstanceType where show = genericShow
instance decodeInstanceType :: Decode InstanceType where decode = genericDecode options
instance encodeInstanceType :: Encode InstanceType where encode = genericEncode options



newtype InstanceTypeList = InstanceTypeList (Array InstanceType)
derive instance newtypeInstanceTypeList :: Newtype InstanceTypeList _
derive instance repGenericInstanceTypeList :: Generic InstanceTypeList _
instance showInstanceTypeList :: Show InstanceTypeList where show = genericShow
instance decodeInstanceTypeList :: Decode InstanceTypeList where decode = genericDecode options
instance encodeInstanceTypeList :: Encode InstanceTypeList where encode = genericEncode options



newtype InterfacePermissionType = InterfacePermissionType String
derive instance newtypeInterfacePermissionType :: Newtype InterfacePermissionType _
derive instance repGenericInterfacePermissionType :: Generic InterfacePermissionType _
instance showInterfacePermissionType :: Show InterfacePermissionType where show = genericShow
instance decodeInterfacePermissionType :: Decode InterfacePermissionType where decode = genericDecode options
instance encodeInterfacePermissionType :: Encode InterfacePermissionType where encode = genericEncode options



-- | <p>Describes an Internet gateway.</p>
newtype InternetGateway = InternetGateway 
  { "Attachments" :: Maybe (InternetGatewayAttachmentList)
  , "InternetGatewayId" :: Maybe (String)
  , "Tags" :: Maybe (TagList)
  }
derive instance newtypeInternetGateway :: Newtype InternetGateway _
derive instance repGenericInternetGateway :: Generic InternetGateway _
instance showInternetGateway :: Show InternetGateway where show = genericShow
instance decodeInternetGateway :: Decode InternetGateway where decode = genericDecode options
instance encodeInternetGateway :: Encode InternetGateway where encode = genericEncode options

-- | Constructs InternetGateway from required parameters
newInternetGateway :: InternetGateway
newInternetGateway  = InternetGateway { "Attachments": Nothing, "InternetGatewayId": Nothing, "Tags": Nothing }

-- | Constructs InternetGateway's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newInternetGateway' :: ( { "Attachments" :: Maybe (InternetGatewayAttachmentList) , "InternetGatewayId" :: Maybe (String) , "Tags" :: Maybe (TagList) } -> {"Attachments" :: Maybe (InternetGatewayAttachmentList) , "InternetGatewayId" :: Maybe (String) , "Tags" :: Maybe (TagList) } ) -> InternetGateway
newInternetGateway'  customize = (InternetGateway <<< customize) { "Attachments": Nothing, "InternetGatewayId": Nothing, "Tags": Nothing }



-- | <p>Describes the attachment of a VPC to an Internet gateway or an egress-only Internet gateway.</p>
newtype InternetGatewayAttachment = InternetGatewayAttachment 
  { "State" :: Maybe (AttachmentStatus)
  , "VpcId" :: Maybe (String)
  }
derive instance newtypeInternetGatewayAttachment :: Newtype InternetGatewayAttachment _
derive instance repGenericInternetGatewayAttachment :: Generic InternetGatewayAttachment _
instance showInternetGatewayAttachment :: Show InternetGatewayAttachment where show = genericShow
instance decodeInternetGatewayAttachment :: Decode InternetGatewayAttachment where decode = genericDecode options
instance encodeInternetGatewayAttachment :: Encode InternetGatewayAttachment where encode = genericEncode options

-- | Constructs InternetGatewayAttachment from required parameters
newInternetGatewayAttachment :: InternetGatewayAttachment
newInternetGatewayAttachment  = InternetGatewayAttachment { "State": Nothing, "VpcId": Nothing }

-- | Constructs InternetGatewayAttachment's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newInternetGatewayAttachment' :: ( { "State" :: Maybe (AttachmentStatus) , "VpcId" :: Maybe (String) } -> {"State" :: Maybe (AttachmentStatus) , "VpcId" :: Maybe (String) } ) -> InternetGatewayAttachment
newInternetGatewayAttachment'  customize = (InternetGatewayAttachment <<< customize) { "State": Nothing, "VpcId": Nothing }



newtype InternetGatewayAttachmentList = InternetGatewayAttachmentList (Array InternetGatewayAttachment)
derive instance newtypeInternetGatewayAttachmentList :: Newtype InternetGatewayAttachmentList _
derive instance repGenericInternetGatewayAttachmentList :: Generic InternetGatewayAttachmentList _
instance showInternetGatewayAttachmentList :: Show InternetGatewayAttachmentList where show = genericShow
instance decodeInternetGatewayAttachmentList :: Decode InternetGatewayAttachmentList where decode = genericDecode options
instance encodeInternetGatewayAttachmentList :: Encode InternetGatewayAttachmentList where encode = genericEncode options



newtype InternetGatewayList = InternetGatewayList (Array InternetGateway)
derive instance newtypeInternetGatewayList :: Newtype InternetGatewayList _
derive instance repGenericInternetGatewayList :: Generic InternetGatewayList _
instance showInternetGatewayList :: Show InternetGatewayList where show = genericShow
instance decodeInternetGatewayList :: Decode InternetGatewayList where decode = genericDecode options
instance encodeInternetGatewayList :: Encode InternetGatewayList where encode = genericEncode options



-- | <p>Describes a set of permissions for a security group rule.</p>
newtype IpPermission = IpPermission 
  { "FromPort" :: Maybe (Int)
  , "IpProtocol" :: Maybe (String)
  , "IpRanges" :: Maybe (IpRangeList)
  , "Ipv6Ranges" :: Maybe (Ipv6RangeList)
  , "PrefixListIds" :: Maybe (PrefixListIdList)
  , "ToPort" :: Maybe (Int)
  , "UserIdGroupPairs" :: Maybe (UserIdGroupPairList)
  }
derive instance newtypeIpPermission :: Newtype IpPermission _
derive instance repGenericIpPermission :: Generic IpPermission _
instance showIpPermission :: Show IpPermission where show = genericShow
instance decodeIpPermission :: Decode IpPermission where decode = genericDecode options
instance encodeIpPermission :: Encode IpPermission where encode = genericEncode options

-- | Constructs IpPermission from required parameters
newIpPermission :: IpPermission
newIpPermission  = IpPermission { "FromPort": Nothing, "IpProtocol": Nothing, "IpRanges": Nothing, "Ipv6Ranges": Nothing, "PrefixListIds": Nothing, "ToPort": Nothing, "UserIdGroupPairs": Nothing }

-- | Constructs IpPermission's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newIpPermission' :: ( { "FromPort" :: Maybe (Int) , "IpProtocol" :: Maybe (String) , "IpRanges" :: Maybe (IpRangeList) , "Ipv6Ranges" :: Maybe (Ipv6RangeList) , "PrefixListIds" :: Maybe (PrefixListIdList) , "ToPort" :: Maybe (Int) , "UserIdGroupPairs" :: Maybe (UserIdGroupPairList) } -> {"FromPort" :: Maybe (Int) , "IpProtocol" :: Maybe (String) , "IpRanges" :: Maybe (IpRangeList) , "Ipv6Ranges" :: Maybe (Ipv6RangeList) , "PrefixListIds" :: Maybe (PrefixListIdList) , "ToPort" :: Maybe (Int) , "UserIdGroupPairs" :: Maybe (UserIdGroupPairList) } ) -> IpPermission
newIpPermission'  customize = (IpPermission <<< customize) { "FromPort": Nothing, "IpProtocol": Nothing, "IpRanges": Nothing, "Ipv6Ranges": Nothing, "PrefixListIds": Nothing, "ToPort": Nothing, "UserIdGroupPairs": Nothing }



newtype IpPermissionList = IpPermissionList (Array IpPermission)
derive instance newtypeIpPermissionList :: Newtype IpPermissionList _
derive instance repGenericIpPermissionList :: Generic IpPermissionList _
instance showIpPermissionList :: Show IpPermissionList where show = genericShow
instance decodeIpPermissionList :: Decode IpPermissionList where decode = genericDecode options
instance encodeIpPermissionList :: Encode IpPermissionList where encode = genericEncode options



-- | <p>Describes an IPv4 range.</p>
newtype IpRange = IpRange 
  { "CidrIp" :: Maybe (String)
  , "Description" :: Maybe (String)
  }
derive instance newtypeIpRange :: Newtype IpRange _
derive instance repGenericIpRange :: Generic IpRange _
instance showIpRange :: Show IpRange where show = genericShow
instance decodeIpRange :: Decode IpRange where decode = genericDecode options
instance encodeIpRange :: Encode IpRange where encode = genericEncode options

-- | Constructs IpRange from required parameters
newIpRange :: IpRange
newIpRange  = IpRange { "CidrIp": Nothing, "Description": Nothing }

-- | Constructs IpRange's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newIpRange' :: ( { "CidrIp" :: Maybe (String) , "Description" :: Maybe (String) } -> {"CidrIp" :: Maybe (String) , "Description" :: Maybe (String) } ) -> IpRange
newIpRange'  customize = (IpRange <<< customize) { "CidrIp": Nothing, "Description": Nothing }



newtype IpRangeList = IpRangeList (Array IpRange)
derive instance newtypeIpRangeList :: Newtype IpRangeList _
derive instance repGenericIpRangeList :: Generic IpRangeList _
instance showIpRangeList :: Show IpRangeList where show = genericShow
instance decodeIpRangeList :: Decode IpRangeList where decode = genericDecode options
instance encodeIpRangeList :: Encode IpRangeList where encode = genericEncode options



newtype IpRanges = IpRanges (Array String)
derive instance newtypeIpRanges :: Newtype IpRanges _
derive instance repGenericIpRanges :: Generic IpRanges _
instance showIpRanges :: Show IpRanges where show = genericShow
instance decodeIpRanges :: Decode IpRanges where decode = genericDecode options
instance encodeIpRanges :: Encode IpRanges where encode = genericEncode options



newtype Ipv6Address = Ipv6Address String
derive instance newtypeIpv6Address :: Newtype Ipv6Address _
derive instance repGenericIpv6Address :: Generic Ipv6Address _
instance showIpv6Address :: Show Ipv6Address where show = genericShow
instance decodeIpv6Address :: Decode Ipv6Address where decode = genericDecode options
instance encodeIpv6Address :: Encode Ipv6Address where encode = genericEncode options



newtype Ipv6AddressList = Ipv6AddressList (Array String)
derive instance newtypeIpv6AddressList :: Newtype Ipv6AddressList _
derive instance repGenericIpv6AddressList :: Generic Ipv6AddressList _
instance showIpv6AddressList :: Show Ipv6AddressList where show = genericShow
instance decodeIpv6AddressList :: Decode Ipv6AddressList where decode = genericDecode options
instance encodeIpv6AddressList :: Encode Ipv6AddressList where encode = genericEncode options



-- | <p>Describes an IPv6 CIDR block.</p>
newtype Ipv6CidrBlock = Ipv6CidrBlock 
  { "Ipv6CidrBlock" :: Maybe (String)
  }
derive instance newtypeIpv6CidrBlock :: Newtype Ipv6CidrBlock _
derive instance repGenericIpv6CidrBlock :: Generic Ipv6CidrBlock _
instance showIpv6CidrBlock :: Show Ipv6CidrBlock where show = genericShow
instance decodeIpv6CidrBlock :: Decode Ipv6CidrBlock where decode = genericDecode options
instance encodeIpv6CidrBlock :: Encode Ipv6CidrBlock where encode = genericEncode options

-- | Constructs Ipv6CidrBlock from required parameters
newIpv6CidrBlock :: Ipv6CidrBlock
newIpv6CidrBlock  = Ipv6CidrBlock { "Ipv6CidrBlock": Nothing }

-- | Constructs Ipv6CidrBlock's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newIpv6CidrBlock' :: ( { "Ipv6CidrBlock" :: Maybe (String) } -> {"Ipv6CidrBlock" :: Maybe (String) } ) -> Ipv6CidrBlock
newIpv6CidrBlock'  customize = (Ipv6CidrBlock <<< customize) { "Ipv6CidrBlock": Nothing }



newtype Ipv6CidrBlockSet = Ipv6CidrBlockSet (Array Ipv6CidrBlock)
derive instance newtypeIpv6CidrBlockSet :: Newtype Ipv6CidrBlockSet _
derive instance repGenericIpv6CidrBlockSet :: Generic Ipv6CidrBlockSet _
instance showIpv6CidrBlockSet :: Show Ipv6CidrBlockSet where show = genericShow
instance decodeIpv6CidrBlockSet :: Decode Ipv6CidrBlockSet where decode = genericDecode options
instance encodeIpv6CidrBlockSet :: Encode Ipv6CidrBlockSet where encode = genericEncode options



-- | <p>[EC2-VPC only] Describes an IPv6 range.</p>
newtype Ipv6Range = Ipv6Range 
  { "CidrIpv6" :: Maybe (String)
  , "Description" :: Maybe (String)
  }
derive instance newtypeIpv6Range :: Newtype Ipv6Range _
derive instance repGenericIpv6Range :: Generic Ipv6Range _
instance showIpv6Range :: Show Ipv6Range where show = genericShow
instance decodeIpv6Range :: Decode Ipv6Range where decode = genericDecode options
instance encodeIpv6Range :: Encode Ipv6Range where encode = genericEncode options

-- | Constructs Ipv6Range from required parameters
newIpv6Range :: Ipv6Range
newIpv6Range  = Ipv6Range { "CidrIpv6": Nothing, "Description": Nothing }

-- | Constructs Ipv6Range's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newIpv6Range' :: ( { "CidrIpv6" :: Maybe (String) , "Description" :: Maybe (String) } -> {"CidrIpv6" :: Maybe (String) , "Description" :: Maybe (String) } ) -> Ipv6Range
newIpv6Range'  customize = (Ipv6Range <<< customize) { "CidrIpv6": Nothing, "Description": Nothing }



newtype Ipv6RangeList = Ipv6RangeList (Array Ipv6Range)
derive instance newtypeIpv6RangeList :: Newtype Ipv6RangeList _
derive instance repGenericIpv6RangeList :: Generic Ipv6RangeList _
instance showIpv6RangeList :: Show Ipv6RangeList where show = genericShow
instance decodeIpv6RangeList :: Decode Ipv6RangeList where decode = genericDecode options
instance encodeIpv6RangeList :: Encode Ipv6RangeList where encode = genericEncode options



newtype KeyNameStringList = KeyNameStringList (Array String)
derive instance newtypeKeyNameStringList :: Newtype KeyNameStringList _
derive instance repGenericKeyNameStringList :: Generic KeyNameStringList _
instance showKeyNameStringList :: Show KeyNameStringList where show = genericShow
instance decodeKeyNameStringList :: Decode KeyNameStringList where decode = genericDecode options
instance encodeKeyNameStringList :: Encode KeyNameStringList where encode = genericEncode options



-- | <p>Describes a key pair.</p>
newtype KeyPair = KeyPair 
  { "KeyFingerprint" :: Maybe (String)
  , "KeyMaterial" :: Maybe (String)
  , "KeyName" :: Maybe (String)
  }
derive instance newtypeKeyPair :: Newtype KeyPair _
derive instance repGenericKeyPair :: Generic KeyPair _
instance showKeyPair :: Show KeyPair where show = genericShow
instance decodeKeyPair :: Decode KeyPair where decode = genericDecode options
instance encodeKeyPair :: Encode KeyPair where encode = genericEncode options

-- | Constructs KeyPair from required parameters
newKeyPair :: KeyPair
newKeyPair  = KeyPair { "KeyFingerprint": Nothing, "KeyMaterial": Nothing, "KeyName": Nothing }

-- | Constructs KeyPair's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newKeyPair' :: ( { "KeyFingerprint" :: Maybe (String) , "KeyMaterial" :: Maybe (String) , "KeyName" :: Maybe (String) } -> {"KeyFingerprint" :: Maybe (String) , "KeyMaterial" :: Maybe (String) , "KeyName" :: Maybe (String) } ) -> KeyPair
newKeyPair'  customize = (KeyPair <<< customize) { "KeyFingerprint": Nothing, "KeyMaterial": Nothing, "KeyName": Nothing }



-- | <p>Describes a key pair.</p>
newtype KeyPairInfo = KeyPairInfo 
  { "KeyFingerprint" :: Maybe (String)
  , "KeyName" :: Maybe (String)
  }
derive instance newtypeKeyPairInfo :: Newtype KeyPairInfo _
derive instance repGenericKeyPairInfo :: Generic KeyPairInfo _
instance showKeyPairInfo :: Show KeyPairInfo where show = genericShow
instance decodeKeyPairInfo :: Decode KeyPairInfo where decode = genericDecode options
instance encodeKeyPairInfo :: Encode KeyPairInfo where encode = genericEncode options

-- | Constructs KeyPairInfo from required parameters
newKeyPairInfo :: KeyPairInfo
newKeyPairInfo  = KeyPairInfo { "KeyFingerprint": Nothing, "KeyName": Nothing }

-- | Constructs KeyPairInfo's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newKeyPairInfo' :: ( { "KeyFingerprint" :: Maybe (String) , "KeyName" :: Maybe (String) } -> {"KeyFingerprint" :: Maybe (String) , "KeyName" :: Maybe (String) } ) -> KeyPairInfo
newKeyPairInfo'  customize = (KeyPairInfo <<< customize) { "KeyFingerprint": Nothing, "KeyName": Nothing }



newtype KeyPairList = KeyPairList (Array KeyPairInfo)
derive instance newtypeKeyPairList :: Newtype KeyPairList _
derive instance repGenericKeyPairList :: Generic KeyPairList _
instance showKeyPairList :: Show KeyPairList where show = genericShow
instance decodeKeyPairList :: Decode KeyPairList where decode = genericDecode options
instance encodeKeyPairList :: Encode KeyPairList where encode = genericEncode options



-- | <p>Describes a launch permission.</p>
newtype LaunchPermission = LaunchPermission 
  { "Group" :: Maybe (PermissionGroup)
  , "UserId" :: Maybe (String)
  }
derive instance newtypeLaunchPermission :: Newtype LaunchPermission _
derive instance repGenericLaunchPermission :: Generic LaunchPermission _
instance showLaunchPermission :: Show LaunchPermission where show = genericShow
instance decodeLaunchPermission :: Decode LaunchPermission where decode = genericDecode options
instance encodeLaunchPermission :: Encode LaunchPermission where encode = genericEncode options

-- | Constructs LaunchPermission from required parameters
newLaunchPermission :: LaunchPermission
newLaunchPermission  = LaunchPermission { "Group": Nothing, "UserId": Nothing }

-- | Constructs LaunchPermission's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLaunchPermission' :: ( { "Group" :: Maybe (PermissionGroup) , "UserId" :: Maybe (String) } -> {"Group" :: Maybe (PermissionGroup) , "UserId" :: Maybe (String) } ) -> LaunchPermission
newLaunchPermission'  customize = (LaunchPermission <<< customize) { "Group": Nothing, "UserId": Nothing }



newtype LaunchPermissionList = LaunchPermissionList (Array LaunchPermission)
derive instance newtypeLaunchPermissionList :: Newtype LaunchPermissionList _
derive instance repGenericLaunchPermissionList :: Generic LaunchPermissionList _
instance showLaunchPermissionList :: Show LaunchPermissionList where show = genericShow
instance decodeLaunchPermissionList :: Decode LaunchPermissionList where decode = genericDecode options
instance encodeLaunchPermissionList :: Encode LaunchPermissionList where encode = genericEncode options



-- | <p>Describes a launch permission modification.</p>
newtype LaunchPermissionModifications = LaunchPermissionModifications 
  { "Add" :: Maybe (LaunchPermissionList)
  , "Remove" :: Maybe (LaunchPermissionList)
  }
derive instance newtypeLaunchPermissionModifications :: Newtype LaunchPermissionModifications _
derive instance repGenericLaunchPermissionModifications :: Generic LaunchPermissionModifications _
instance showLaunchPermissionModifications :: Show LaunchPermissionModifications where show = genericShow
instance decodeLaunchPermissionModifications :: Decode LaunchPermissionModifications where decode = genericDecode options
instance encodeLaunchPermissionModifications :: Encode LaunchPermissionModifications where encode = genericEncode options

-- | Constructs LaunchPermissionModifications from required parameters
newLaunchPermissionModifications :: LaunchPermissionModifications
newLaunchPermissionModifications  = LaunchPermissionModifications { "Add": Nothing, "Remove": Nothing }

-- | Constructs LaunchPermissionModifications's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLaunchPermissionModifications' :: ( { "Add" :: Maybe (LaunchPermissionList) , "Remove" :: Maybe (LaunchPermissionList) } -> {"Add" :: Maybe (LaunchPermissionList) , "Remove" :: Maybe (LaunchPermissionList) } ) -> LaunchPermissionModifications
newLaunchPermissionModifications'  customize = (LaunchPermissionModifications <<< customize) { "Add": Nothing, "Remove": Nothing }



-- | <p>Describes the launch specification for an instance.</p>
newtype LaunchSpecification = LaunchSpecification 
  { "UserData" :: Maybe (String)
  , "SecurityGroups" :: Maybe (GroupIdentifierList)
  , "AddressingType" :: Maybe (String)
  , "BlockDeviceMappings" :: Maybe (BlockDeviceMappingList)
  , "EbsOptimized" :: Maybe (Boolean)
  , "IamInstanceProfile" :: Maybe (IamInstanceProfileSpecification)
  , "ImageId" :: Maybe (String)
  , "InstanceType" :: Maybe (InstanceType)
  , "KernelId" :: Maybe (String)
  , "KeyName" :: Maybe (String)
  , "NetworkInterfaces" :: Maybe (InstanceNetworkInterfaceSpecificationList)
  , "Placement" :: Maybe (SpotPlacement)
  , "RamdiskId" :: Maybe (String)
  , "SubnetId" :: Maybe (String)
  , "Monitoring" :: Maybe (RunInstancesMonitoringEnabled)
  }
derive instance newtypeLaunchSpecification :: Newtype LaunchSpecification _
derive instance repGenericLaunchSpecification :: Generic LaunchSpecification _
instance showLaunchSpecification :: Show LaunchSpecification where show = genericShow
instance decodeLaunchSpecification :: Decode LaunchSpecification where decode = genericDecode options
instance encodeLaunchSpecification :: Encode LaunchSpecification where encode = genericEncode options

-- | Constructs LaunchSpecification from required parameters
newLaunchSpecification :: LaunchSpecification
newLaunchSpecification  = LaunchSpecification { "AddressingType": Nothing, "BlockDeviceMappings": Nothing, "EbsOptimized": Nothing, "IamInstanceProfile": Nothing, "ImageId": Nothing, "InstanceType": Nothing, "KernelId": Nothing, "KeyName": Nothing, "Monitoring": Nothing, "NetworkInterfaces": Nothing, "Placement": Nothing, "RamdiskId": Nothing, "SecurityGroups": Nothing, "SubnetId": Nothing, "UserData": Nothing }

-- | Constructs LaunchSpecification's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLaunchSpecification' :: ( { "UserData" :: Maybe (String) , "SecurityGroups" :: Maybe (GroupIdentifierList) , "AddressingType" :: Maybe (String) , "BlockDeviceMappings" :: Maybe (BlockDeviceMappingList) , "EbsOptimized" :: Maybe (Boolean) , "IamInstanceProfile" :: Maybe (IamInstanceProfileSpecification) , "ImageId" :: Maybe (String) , "InstanceType" :: Maybe (InstanceType) , "KernelId" :: Maybe (String) , "KeyName" :: Maybe (String) , "NetworkInterfaces" :: Maybe (InstanceNetworkInterfaceSpecificationList) , "Placement" :: Maybe (SpotPlacement) , "RamdiskId" :: Maybe (String) , "SubnetId" :: Maybe (String) , "Monitoring" :: Maybe (RunInstancesMonitoringEnabled) } -> {"UserData" :: Maybe (String) , "SecurityGroups" :: Maybe (GroupIdentifierList) , "AddressingType" :: Maybe (String) , "BlockDeviceMappings" :: Maybe (BlockDeviceMappingList) , "EbsOptimized" :: Maybe (Boolean) , "IamInstanceProfile" :: Maybe (IamInstanceProfileSpecification) , "ImageId" :: Maybe (String) , "InstanceType" :: Maybe (InstanceType) , "KernelId" :: Maybe (String) , "KeyName" :: Maybe (String) , "NetworkInterfaces" :: Maybe (InstanceNetworkInterfaceSpecificationList) , "Placement" :: Maybe (SpotPlacement) , "RamdiskId" :: Maybe (String) , "SubnetId" :: Maybe (String) , "Monitoring" :: Maybe (RunInstancesMonitoringEnabled) } ) -> LaunchSpecification
newLaunchSpecification'  customize = (LaunchSpecification <<< customize) { "AddressingType": Nothing, "BlockDeviceMappings": Nothing, "EbsOptimized": Nothing, "IamInstanceProfile": Nothing, "ImageId": Nothing, "InstanceType": Nothing, "KernelId": Nothing, "KeyName": Nothing, "Monitoring": Nothing, "NetworkInterfaces": Nothing, "Placement": Nothing, "RamdiskId": Nothing, "SecurityGroups": Nothing, "SubnetId": Nothing, "UserData": Nothing }



newtype LaunchSpecsList = LaunchSpecsList (Array SpotFleetLaunchSpecification)
derive instance newtypeLaunchSpecsList :: Newtype LaunchSpecsList _
derive instance repGenericLaunchSpecsList :: Generic LaunchSpecsList _
instance showLaunchSpecsList :: Show LaunchSpecsList where show = genericShow
instance decodeLaunchSpecsList :: Decode LaunchSpecsList where decode = genericDecode options
instance encodeLaunchSpecsList :: Encode LaunchSpecsList where encode = genericEncode options



-- | <p>Describes a launch template.</p>
newtype LaunchTemplate = LaunchTemplate 
  { "LaunchTemplateId" :: Maybe (String)
  , "LaunchTemplateName" :: Maybe (LaunchTemplateName)
  , "CreateTime" :: Maybe (DateTime)
  , "CreatedBy" :: Maybe (String)
  , "DefaultVersionNumber" :: Maybe (Number)
  , "LatestVersionNumber" :: Maybe (Number)
  , "Tags" :: Maybe (TagList)
  }
derive instance newtypeLaunchTemplate :: Newtype LaunchTemplate _
derive instance repGenericLaunchTemplate :: Generic LaunchTemplate _
instance showLaunchTemplate :: Show LaunchTemplate where show = genericShow
instance decodeLaunchTemplate :: Decode LaunchTemplate where decode = genericDecode options
instance encodeLaunchTemplate :: Encode LaunchTemplate where encode = genericEncode options

-- | Constructs LaunchTemplate from required parameters
newLaunchTemplate :: LaunchTemplate
newLaunchTemplate  = LaunchTemplate { "CreateTime": Nothing, "CreatedBy": Nothing, "DefaultVersionNumber": Nothing, "LatestVersionNumber": Nothing, "LaunchTemplateId": Nothing, "LaunchTemplateName": Nothing, "Tags": Nothing }

-- | Constructs LaunchTemplate's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLaunchTemplate' :: ( { "LaunchTemplateId" :: Maybe (String) , "LaunchTemplateName" :: Maybe (LaunchTemplateName) , "CreateTime" :: Maybe (DateTime) , "CreatedBy" :: Maybe (String) , "DefaultVersionNumber" :: Maybe (Number) , "LatestVersionNumber" :: Maybe (Number) , "Tags" :: Maybe (TagList) } -> {"LaunchTemplateId" :: Maybe (String) , "LaunchTemplateName" :: Maybe (LaunchTemplateName) , "CreateTime" :: Maybe (DateTime) , "CreatedBy" :: Maybe (String) , "DefaultVersionNumber" :: Maybe (Number) , "LatestVersionNumber" :: Maybe (Number) , "Tags" :: Maybe (TagList) } ) -> LaunchTemplate
newLaunchTemplate'  customize = (LaunchTemplate <<< customize) { "CreateTime": Nothing, "CreatedBy": Nothing, "DefaultVersionNumber": Nothing, "LatestVersionNumber": Nothing, "LaunchTemplateId": Nothing, "LaunchTemplateName": Nothing, "Tags": Nothing }



-- | <p>Describes a block device mapping.</p>
newtype LaunchTemplateBlockDeviceMapping = LaunchTemplateBlockDeviceMapping 
  { "DeviceName" :: Maybe (String)
  , "VirtualName" :: Maybe (String)
  , "Ebs" :: Maybe (LaunchTemplateEbsBlockDevice)
  , "NoDevice" :: Maybe (String)
  }
derive instance newtypeLaunchTemplateBlockDeviceMapping :: Newtype LaunchTemplateBlockDeviceMapping _
derive instance repGenericLaunchTemplateBlockDeviceMapping :: Generic LaunchTemplateBlockDeviceMapping _
instance showLaunchTemplateBlockDeviceMapping :: Show LaunchTemplateBlockDeviceMapping where show = genericShow
instance decodeLaunchTemplateBlockDeviceMapping :: Decode LaunchTemplateBlockDeviceMapping where decode = genericDecode options
instance encodeLaunchTemplateBlockDeviceMapping :: Encode LaunchTemplateBlockDeviceMapping where encode = genericEncode options

-- | Constructs LaunchTemplateBlockDeviceMapping from required parameters
newLaunchTemplateBlockDeviceMapping :: LaunchTemplateBlockDeviceMapping
newLaunchTemplateBlockDeviceMapping  = LaunchTemplateBlockDeviceMapping { "DeviceName": Nothing, "Ebs": Nothing, "NoDevice": Nothing, "VirtualName": Nothing }

-- | Constructs LaunchTemplateBlockDeviceMapping's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLaunchTemplateBlockDeviceMapping' :: ( { "DeviceName" :: Maybe (String) , "VirtualName" :: Maybe (String) , "Ebs" :: Maybe (LaunchTemplateEbsBlockDevice) , "NoDevice" :: Maybe (String) } -> {"DeviceName" :: Maybe (String) , "VirtualName" :: Maybe (String) , "Ebs" :: Maybe (LaunchTemplateEbsBlockDevice) , "NoDevice" :: Maybe (String) } ) -> LaunchTemplateBlockDeviceMapping
newLaunchTemplateBlockDeviceMapping'  customize = (LaunchTemplateBlockDeviceMapping <<< customize) { "DeviceName": Nothing, "Ebs": Nothing, "NoDevice": Nothing, "VirtualName": Nothing }



newtype LaunchTemplateBlockDeviceMappingList = LaunchTemplateBlockDeviceMappingList (Array LaunchTemplateBlockDeviceMapping)
derive instance newtypeLaunchTemplateBlockDeviceMappingList :: Newtype LaunchTemplateBlockDeviceMappingList _
derive instance repGenericLaunchTemplateBlockDeviceMappingList :: Generic LaunchTemplateBlockDeviceMappingList _
instance showLaunchTemplateBlockDeviceMappingList :: Show LaunchTemplateBlockDeviceMappingList where show = genericShow
instance decodeLaunchTemplateBlockDeviceMappingList :: Decode LaunchTemplateBlockDeviceMappingList where decode = genericDecode options
instance encodeLaunchTemplateBlockDeviceMappingList :: Encode LaunchTemplateBlockDeviceMappingList where encode = genericEncode options



-- | <p>Describes a block device mapping.</p>
newtype LaunchTemplateBlockDeviceMappingRequest = LaunchTemplateBlockDeviceMappingRequest 
  { "DeviceName" :: Maybe (String)
  , "VirtualName" :: Maybe (String)
  , "Ebs" :: Maybe (LaunchTemplateEbsBlockDeviceRequest)
  , "NoDevice" :: Maybe (String)
  }
derive instance newtypeLaunchTemplateBlockDeviceMappingRequest :: Newtype LaunchTemplateBlockDeviceMappingRequest _
derive instance repGenericLaunchTemplateBlockDeviceMappingRequest :: Generic LaunchTemplateBlockDeviceMappingRequest _
instance showLaunchTemplateBlockDeviceMappingRequest :: Show LaunchTemplateBlockDeviceMappingRequest where show = genericShow
instance decodeLaunchTemplateBlockDeviceMappingRequest :: Decode LaunchTemplateBlockDeviceMappingRequest where decode = genericDecode options
instance encodeLaunchTemplateBlockDeviceMappingRequest :: Encode LaunchTemplateBlockDeviceMappingRequest where encode = genericEncode options

-- | Constructs LaunchTemplateBlockDeviceMappingRequest from required parameters
newLaunchTemplateBlockDeviceMappingRequest :: LaunchTemplateBlockDeviceMappingRequest
newLaunchTemplateBlockDeviceMappingRequest  = LaunchTemplateBlockDeviceMappingRequest { "DeviceName": Nothing, "Ebs": Nothing, "NoDevice": Nothing, "VirtualName": Nothing }

-- | Constructs LaunchTemplateBlockDeviceMappingRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLaunchTemplateBlockDeviceMappingRequest' :: ( { "DeviceName" :: Maybe (String) , "VirtualName" :: Maybe (String) , "Ebs" :: Maybe (LaunchTemplateEbsBlockDeviceRequest) , "NoDevice" :: Maybe (String) } -> {"DeviceName" :: Maybe (String) , "VirtualName" :: Maybe (String) , "Ebs" :: Maybe (LaunchTemplateEbsBlockDeviceRequest) , "NoDevice" :: Maybe (String) } ) -> LaunchTemplateBlockDeviceMappingRequest
newLaunchTemplateBlockDeviceMappingRequest'  customize = (LaunchTemplateBlockDeviceMappingRequest <<< customize) { "DeviceName": Nothing, "Ebs": Nothing, "NoDevice": Nothing, "VirtualName": Nothing }



newtype LaunchTemplateBlockDeviceMappingRequestList = LaunchTemplateBlockDeviceMappingRequestList (Array LaunchTemplateBlockDeviceMappingRequest)
derive instance newtypeLaunchTemplateBlockDeviceMappingRequestList :: Newtype LaunchTemplateBlockDeviceMappingRequestList _
derive instance repGenericLaunchTemplateBlockDeviceMappingRequestList :: Generic LaunchTemplateBlockDeviceMappingRequestList _
instance showLaunchTemplateBlockDeviceMappingRequestList :: Show LaunchTemplateBlockDeviceMappingRequestList where show = genericShow
instance decodeLaunchTemplateBlockDeviceMappingRequestList :: Decode LaunchTemplateBlockDeviceMappingRequestList where decode = genericDecode options
instance encodeLaunchTemplateBlockDeviceMappingRequestList :: Encode LaunchTemplateBlockDeviceMappingRequestList where encode = genericEncode options



-- | <p>Describes a launch template and overrides.</p>
newtype LaunchTemplateConfig = LaunchTemplateConfig 
  { "LaunchTemplateSpecification" :: Maybe (FleetLaunchTemplateSpecification)
  , "Overrides" :: Maybe (LaunchTemplateOverridesList)
  }
derive instance newtypeLaunchTemplateConfig :: Newtype LaunchTemplateConfig _
derive instance repGenericLaunchTemplateConfig :: Generic LaunchTemplateConfig _
instance showLaunchTemplateConfig :: Show LaunchTemplateConfig where show = genericShow
instance decodeLaunchTemplateConfig :: Decode LaunchTemplateConfig where decode = genericDecode options
instance encodeLaunchTemplateConfig :: Encode LaunchTemplateConfig where encode = genericEncode options

-- | Constructs LaunchTemplateConfig from required parameters
newLaunchTemplateConfig :: LaunchTemplateConfig
newLaunchTemplateConfig  = LaunchTemplateConfig { "LaunchTemplateSpecification": Nothing, "Overrides": Nothing }

-- | Constructs LaunchTemplateConfig's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLaunchTemplateConfig' :: ( { "LaunchTemplateSpecification" :: Maybe (FleetLaunchTemplateSpecification) , "Overrides" :: Maybe (LaunchTemplateOverridesList) } -> {"LaunchTemplateSpecification" :: Maybe (FleetLaunchTemplateSpecification) , "Overrides" :: Maybe (LaunchTemplateOverridesList) } ) -> LaunchTemplateConfig
newLaunchTemplateConfig'  customize = (LaunchTemplateConfig <<< customize) { "LaunchTemplateSpecification": Nothing, "Overrides": Nothing }



newtype LaunchTemplateConfigList = LaunchTemplateConfigList (Array LaunchTemplateConfig)
derive instance newtypeLaunchTemplateConfigList :: Newtype LaunchTemplateConfigList _
derive instance repGenericLaunchTemplateConfigList :: Generic LaunchTemplateConfigList _
instance showLaunchTemplateConfigList :: Show LaunchTemplateConfigList where show = genericShow
instance decodeLaunchTemplateConfigList :: Decode LaunchTemplateConfigList where decode = genericDecode options
instance encodeLaunchTemplateConfigList :: Encode LaunchTemplateConfigList where encode = genericEncode options



-- | <p>Describes a block device for an EBS volume.</p>
newtype LaunchTemplateEbsBlockDevice = LaunchTemplateEbsBlockDevice 
  { "Encrypted" :: Maybe (Boolean)
  , "DeleteOnTermination" :: Maybe (Boolean)
  , "Iops" :: Maybe (Int)
  , "KmsKeyId" :: Maybe (String)
  , "SnapshotId" :: Maybe (String)
  , "VolumeSize" :: Maybe (Int)
  , "VolumeType" :: Maybe (VolumeType)
  }
derive instance newtypeLaunchTemplateEbsBlockDevice :: Newtype LaunchTemplateEbsBlockDevice _
derive instance repGenericLaunchTemplateEbsBlockDevice :: Generic LaunchTemplateEbsBlockDevice _
instance showLaunchTemplateEbsBlockDevice :: Show LaunchTemplateEbsBlockDevice where show = genericShow
instance decodeLaunchTemplateEbsBlockDevice :: Decode LaunchTemplateEbsBlockDevice where decode = genericDecode options
instance encodeLaunchTemplateEbsBlockDevice :: Encode LaunchTemplateEbsBlockDevice where encode = genericEncode options

-- | Constructs LaunchTemplateEbsBlockDevice from required parameters
newLaunchTemplateEbsBlockDevice :: LaunchTemplateEbsBlockDevice
newLaunchTemplateEbsBlockDevice  = LaunchTemplateEbsBlockDevice { "DeleteOnTermination": Nothing, "Encrypted": Nothing, "Iops": Nothing, "KmsKeyId": Nothing, "SnapshotId": Nothing, "VolumeSize": Nothing, "VolumeType": Nothing }

-- | Constructs LaunchTemplateEbsBlockDevice's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLaunchTemplateEbsBlockDevice' :: ( { "Encrypted" :: Maybe (Boolean) , "DeleteOnTermination" :: Maybe (Boolean) , "Iops" :: Maybe (Int) , "KmsKeyId" :: Maybe (String) , "SnapshotId" :: Maybe (String) , "VolumeSize" :: Maybe (Int) , "VolumeType" :: Maybe (VolumeType) } -> {"Encrypted" :: Maybe (Boolean) , "DeleteOnTermination" :: Maybe (Boolean) , "Iops" :: Maybe (Int) , "KmsKeyId" :: Maybe (String) , "SnapshotId" :: Maybe (String) , "VolumeSize" :: Maybe (Int) , "VolumeType" :: Maybe (VolumeType) } ) -> LaunchTemplateEbsBlockDevice
newLaunchTemplateEbsBlockDevice'  customize = (LaunchTemplateEbsBlockDevice <<< customize) { "DeleteOnTermination": Nothing, "Encrypted": Nothing, "Iops": Nothing, "KmsKeyId": Nothing, "SnapshotId": Nothing, "VolumeSize": Nothing, "VolumeType": Nothing }



-- | <p>The parameters for a block device for an EBS volume.</p>
newtype LaunchTemplateEbsBlockDeviceRequest = LaunchTemplateEbsBlockDeviceRequest 
  { "Encrypted" :: Maybe (Boolean)
  , "DeleteOnTermination" :: Maybe (Boolean)
  , "Iops" :: Maybe (Int)
  , "KmsKeyId" :: Maybe (String)
  , "SnapshotId" :: Maybe (String)
  , "VolumeSize" :: Maybe (Int)
  , "VolumeType" :: Maybe (VolumeType)
  }
derive instance newtypeLaunchTemplateEbsBlockDeviceRequest :: Newtype LaunchTemplateEbsBlockDeviceRequest _
derive instance repGenericLaunchTemplateEbsBlockDeviceRequest :: Generic LaunchTemplateEbsBlockDeviceRequest _
instance showLaunchTemplateEbsBlockDeviceRequest :: Show LaunchTemplateEbsBlockDeviceRequest where show = genericShow
instance decodeLaunchTemplateEbsBlockDeviceRequest :: Decode LaunchTemplateEbsBlockDeviceRequest where decode = genericDecode options
instance encodeLaunchTemplateEbsBlockDeviceRequest :: Encode LaunchTemplateEbsBlockDeviceRequest where encode = genericEncode options

-- | Constructs LaunchTemplateEbsBlockDeviceRequest from required parameters
newLaunchTemplateEbsBlockDeviceRequest :: LaunchTemplateEbsBlockDeviceRequest
newLaunchTemplateEbsBlockDeviceRequest  = LaunchTemplateEbsBlockDeviceRequest { "DeleteOnTermination": Nothing, "Encrypted": Nothing, "Iops": Nothing, "KmsKeyId": Nothing, "SnapshotId": Nothing, "VolumeSize": Nothing, "VolumeType": Nothing }

-- | Constructs LaunchTemplateEbsBlockDeviceRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLaunchTemplateEbsBlockDeviceRequest' :: ( { "Encrypted" :: Maybe (Boolean) , "DeleteOnTermination" :: Maybe (Boolean) , "Iops" :: Maybe (Int) , "KmsKeyId" :: Maybe (String) , "SnapshotId" :: Maybe (String) , "VolumeSize" :: Maybe (Int) , "VolumeType" :: Maybe (VolumeType) } -> {"Encrypted" :: Maybe (Boolean) , "DeleteOnTermination" :: Maybe (Boolean) , "Iops" :: Maybe (Int) , "KmsKeyId" :: Maybe (String) , "SnapshotId" :: Maybe (String) , "VolumeSize" :: Maybe (Int) , "VolumeType" :: Maybe (VolumeType) } ) -> LaunchTemplateEbsBlockDeviceRequest
newLaunchTemplateEbsBlockDeviceRequest'  customize = (LaunchTemplateEbsBlockDeviceRequest <<< customize) { "DeleteOnTermination": Nothing, "Encrypted": Nothing, "Iops": Nothing, "KmsKeyId": Nothing, "SnapshotId": Nothing, "VolumeSize": Nothing, "VolumeType": Nothing }



newtype LaunchTemplateErrorCode = LaunchTemplateErrorCode String
derive instance newtypeLaunchTemplateErrorCode :: Newtype LaunchTemplateErrorCode _
derive instance repGenericLaunchTemplateErrorCode :: Generic LaunchTemplateErrorCode _
instance showLaunchTemplateErrorCode :: Show LaunchTemplateErrorCode where show = genericShow
instance decodeLaunchTemplateErrorCode :: Decode LaunchTemplateErrorCode where decode = genericDecode options
instance encodeLaunchTemplateErrorCode :: Encode LaunchTemplateErrorCode where encode = genericEncode options



-- | <p>Describes an IAM instance profile.</p>
newtype LaunchTemplateIamInstanceProfileSpecification = LaunchTemplateIamInstanceProfileSpecification 
  { "Arn" :: Maybe (String)
  , "Name" :: Maybe (String)
  }
derive instance newtypeLaunchTemplateIamInstanceProfileSpecification :: Newtype LaunchTemplateIamInstanceProfileSpecification _
derive instance repGenericLaunchTemplateIamInstanceProfileSpecification :: Generic LaunchTemplateIamInstanceProfileSpecification _
instance showLaunchTemplateIamInstanceProfileSpecification :: Show LaunchTemplateIamInstanceProfileSpecification where show = genericShow
instance decodeLaunchTemplateIamInstanceProfileSpecification :: Decode LaunchTemplateIamInstanceProfileSpecification where decode = genericDecode options
instance encodeLaunchTemplateIamInstanceProfileSpecification :: Encode LaunchTemplateIamInstanceProfileSpecification where encode = genericEncode options

-- | Constructs LaunchTemplateIamInstanceProfileSpecification from required parameters
newLaunchTemplateIamInstanceProfileSpecification :: LaunchTemplateIamInstanceProfileSpecification
newLaunchTemplateIamInstanceProfileSpecification  = LaunchTemplateIamInstanceProfileSpecification { "Arn": Nothing, "Name": Nothing }

-- | Constructs LaunchTemplateIamInstanceProfileSpecification's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLaunchTemplateIamInstanceProfileSpecification' :: ( { "Arn" :: Maybe (String) , "Name" :: Maybe (String) } -> {"Arn" :: Maybe (String) , "Name" :: Maybe (String) } ) -> LaunchTemplateIamInstanceProfileSpecification
newLaunchTemplateIamInstanceProfileSpecification'  customize = (LaunchTemplateIamInstanceProfileSpecification <<< customize) { "Arn": Nothing, "Name": Nothing }



-- | <p>An IAM instance profile.</p>
newtype LaunchTemplateIamInstanceProfileSpecificationRequest = LaunchTemplateIamInstanceProfileSpecificationRequest 
  { "Arn" :: Maybe (String)
  , "Name" :: Maybe (String)
  }
derive instance newtypeLaunchTemplateIamInstanceProfileSpecificationRequest :: Newtype LaunchTemplateIamInstanceProfileSpecificationRequest _
derive instance repGenericLaunchTemplateIamInstanceProfileSpecificationRequest :: Generic LaunchTemplateIamInstanceProfileSpecificationRequest _
instance showLaunchTemplateIamInstanceProfileSpecificationRequest :: Show LaunchTemplateIamInstanceProfileSpecificationRequest where show = genericShow
instance decodeLaunchTemplateIamInstanceProfileSpecificationRequest :: Decode LaunchTemplateIamInstanceProfileSpecificationRequest where decode = genericDecode options
instance encodeLaunchTemplateIamInstanceProfileSpecificationRequest :: Encode LaunchTemplateIamInstanceProfileSpecificationRequest where encode = genericEncode options

-- | Constructs LaunchTemplateIamInstanceProfileSpecificationRequest from required parameters
newLaunchTemplateIamInstanceProfileSpecificationRequest :: LaunchTemplateIamInstanceProfileSpecificationRequest
newLaunchTemplateIamInstanceProfileSpecificationRequest  = LaunchTemplateIamInstanceProfileSpecificationRequest { "Arn": Nothing, "Name": Nothing }

-- | Constructs LaunchTemplateIamInstanceProfileSpecificationRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLaunchTemplateIamInstanceProfileSpecificationRequest' :: ( { "Arn" :: Maybe (String) , "Name" :: Maybe (String) } -> {"Arn" :: Maybe (String) , "Name" :: Maybe (String) } ) -> LaunchTemplateIamInstanceProfileSpecificationRequest
newLaunchTemplateIamInstanceProfileSpecificationRequest'  customize = (LaunchTemplateIamInstanceProfileSpecificationRequest <<< customize) { "Arn": Nothing, "Name": Nothing }



-- | <p>The market (purchasing) option for the instances.</p>
newtype LaunchTemplateInstanceMarketOptions = LaunchTemplateInstanceMarketOptions 
  { "MarketType" :: Maybe (MarketType)
  , "SpotOptions" :: Maybe (LaunchTemplateSpotMarketOptions)
  }
derive instance newtypeLaunchTemplateInstanceMarketOptions :: Newtype LaunchTemplateInstanceMarketOptions _
derive instance repGenericLaunchTemplateInstanceMarketOptions :: Generic LaunchTemplateInstanceMarketOptions _
instance showLaunchTemplateInstanceMarketOptions :: Show LaunchTemplateInstanceMarketOptions where show = genericShow
instance decodeLaunchTemplateInstanceMarketOptions :: Decode LaunchTemplateInstanceMarketOptions where decode = genericDecode options
instance encodeLaunchTemplateInstanceMarketOptions :: Encode LaunchTemplateInstanceMarketOptions where encode = genericEncode options

-- | Constructs LaunchTemplateInstanceMarketOptions from required parameters
newLaunchTemplateInstanceMarketOptions :: LaunchTemplateInstanceMarketOptions
newLaunchTemplateInstanceMarketOptions  = LaunchTemplateInstanceMarketOptions { "MarketType": Nothing, "SpotOptions": Nothing }

-- | Constructs LaunchTemplateInstanceMarketOptions's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLaunchTemplateInstanceMarketOptions' :: ( { "MarketType" :: Maybe (MarketType) , "SpotOptions" :: Maybe (LaunchTemplateSpotMarketOptions) } -> {"MarketType" :: Maybe (MarketType) , "SpotOptions" :: Maybe (LaunchTemplateSpotMarketOptions) } ) -> LaunchTemplateInstanceMarketOptions
newLaunchTemplateInstanceMarketOptions'  customize = (LaunchTemplateInstanceMarketOptions <<< customize) { "MarketType": Nothing, "SpotOptions": Nothing }



-- | <p>The market (purchasing) option for the instances.</p>
newtype LaunchTemplateInstanceMarketOptionsRequest = LaunchTemplateInstanceMarketOptionsRequest 
  { "MarketType" :: Maybe (MarketType)
  , "SpotOptions" :: Maybe (LaunchTemplateSpotMarketOptionsRequest)
  }
derive instance newtypeLaunchTemplateInstanceMarketOptionsRequest :: Newtype LaunchTemplateInstanceMarketOptionsRequest _
derive instance repGenericLaunchTemplateInstanceMarketOptionsRequest :: Generic LaunchTemplateInstanceMarketOptionsRequest _
instance showLaunchTemplateInstanceMarketOptionsRequest :: Show LaunchTemplateInstanceMarketOptionsRequest where show = genericShow
instance decodeLaunchTemplateInstanceMarketOptionsRequest :: Decode LaunchTemplateInstanceMarketOptionsRequest where decode = genericDecode options
instance encodeLaunchTemplateInstanceMarketOptionsRequest :: Encode LaunchTemplateInstanceMarketOptionsRequest where encode = genericEncode options

-- | Constructs LaunchTemplateInstanceMarketOptionsRequest from required parameters
newLaunchTemplateInstanceMarketOptionsRequest :: LaunchTemplateInstanceMarketOptionsRequest
newLaunchTemplateInstanceMarketOptionsRequest  = LaunchTemplateInstanceMarketOptionsRequest { "MarketType": Nothing, "SpotOptions": Nothing }

-- | Constructs LaunchTemplateInstanceMarketOptionsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLaunchTemplateInstanceMarketOptionsRequest' :: ( { "MarketType" :: Maybe (MarketType) , "SpotOptions" :: Maybe (LaunchTemplateSpotMarketOptionsRequest) } -> {"MarketType" :: Maybe (MarketType) , "SpotOptions" :: Maybe (LaunchTemplateSpotMarketOptionsRequest) } ) -> LaunchTemplateInstanceMarketOptionsRequest
newLaunchTemplateInstanceMarketOptionsRequest'  customize = (LaunchTemplateInstanceMarketOptionsRequest <<< customize) { "MarketType": Nothing, "SpotOptions": Nothing }



-- | <p>Describes a network interface.</p>
newtype LaunchTemplateInstanceNetworkInterfaceSpecification = LaunchTemplateInstanceNetworkInterfaceSpecification 
  { "AssociatePublicIpAddress" :: Maybe (Boolean)
  , "DeleteOnTermination" :: Maybe (Boolean)
  , "Description" :: Maybe (String)
  , "DeviceIndex" :: Maybe (Int)
  , "Groups" :: Maybe (GroupIdStringList)
  , "Ipv6AddressCount" :: Maybe (Int)
  , "Ipv6Addresses" :: Maybe (InstanceIpv6AddressList)
  , "NetworkInterfaceId" :: Maybe (String)
  , "PrivateIpAddress" :: Maybe (String)
  , "PrivateIpAddresses" :: Maybe (PrivateIpAddressSpecificationList)
  , "SecondaryPrivateIpAddressCount" :: Maybe (Int)
  , "SubnetId" :: Maybe (String)
  }
derive instance newtypeLaunchTemplateInstanceNetworkInterfaceSpecification :: Newtype LaunchTemplateInstanceNetworkInterfaceSpecification _
derive instance repGenericLaunchTemplateInstanceNetworkInterfaceSpecification :: Generic LaunchTemplateInstanceNetworkInterfaceSpecification _
instance showLaunchTemplateInstanceNetworkInterfaceSpecification :: Show LaunchTemplateInstanceNetworkInterfaceSpecification where show = genericShow
instance decodeLaunchTemplateInstanceNetworkInterfaceSpecification :: Decode LaunchTemplateInstanceNetworkInterfaceSpecification where decode = genericDecode options
instance encodeLaunchTemplateInstanceNetworkInterfaceSpecification :: Encode LaunchTemplateInstanceNetworkInterfaceSpecification where encode = genericEncode options

-- | Constructs LaunchTemplateInstanceNetworkInterfaceSpecification from required parameters
newLaunchTemplateInstanceNetworkInterfaceSpecification :: LaunchTemplateInstanceNetworkInterfaceSpecification
newLaunchTemplateInstanceNetworkInterfaceSpecification  = LaunchTemplateInstanceNetworkInterfaceSpecification { "AssociatePublicIpAddress": Nothing, "DeleteOnTermination": Nothing, "Description": Nothing, "DeviceIndex": Nothing, "Groups": Nothing, "Ipv6AddressCount": Nothing, "Ipv6Addresses": Nothing, "NetworkInterfaceId": Nothing, "PrivateIpAddress": Nothing, "PrivateIpAddresses": Nothing, "SecondaryPrivateIpAddressCount": Nothing, "SubnetId": Nothing }

-- | Constructs LaunchTemplateInstanceNetworkInterfaceSpecification's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLaunchTemplateInstanceNetworkInterfaceSpecification' :: ( { "AssociatePublicIpAddress" :: Maybe (Boolean) , "DeleteOnTermination" :: Maybe (Boolean) , "Description" :: Maybe (String) , "DeviceIndex" :: Maybe (Int) , "Groups" :: Maybe (GroupIdStringList) , "Ipv6AddressCount" :: Maybe (Int) , "Ipv6Addresses" :: Maybe (InstanceIpv6AddressList) , "NetworkInterfaceId" :: Maybe (String) , "PrivateIpAddress" :: Maybe (String) , "PrivateIpAddresses" :: Maybe (PrivateIpAddressSpecificationList) , "SecondaryPrivateIpAddressCount" :: Maybe (Int) , "SubnetId" :: Maybe (String) } -> {"AssociatePublicIpAddress" :: Maybe (Boolean) , "DeleteOnTermination" :: Maybe (Boolean) , "Description" :: Maybe (String) , "DeviceIndex" :: Maybe (Int) , "Groups" :: Maybe (GroupIdStringList) , "Ipv6AddressCount" :: Maybe (Int) , "Ipv6Addresses" :: Maybe (InstanceIpv6AddressList) , "NetworkInterfaceId" :: Maybe (String) , "PrivateIpAddress" :: Maybe (String) , "PrivateIpAddresses" :: Maybe (PrivateIpAddressSpecificationList) , "SecondaryPrivateIpAddressCount" :: Maybe (Int) , "SubnetId" :: Maybe (String) } ) -> LaunchTemplateInstanceNetworkInterfaceSpecification
newLaunchTemplateInstanceNetworkInterfaceSpecification'  customize = (LaunchTemplateInstanceNetworkInterfaceSpecification <<< customize) { "AssociatePublicIpAddress": Nothing, "DeleteOnTermination": Nothing, "Description": Nothing, "DeviceIndex": Nothing, "Groups": Nothing, "Ipv6AddressCount": Nothing, "Ipv6Addresses": Nothing, "NetworkInterfaceId": Nothing, "PrivateIpAddress": Nothing, "PrivateIpAddresses": Nothing, "SecondaryPrivateIpAddressCount": Nothing, "SubnetId": Nothing }



newtype LaunchTemplateInstanceNetworkInterfaceSpecificationList = LaunchTemplateInstanceNetworkInterfaceSpecificationList (Array LaunchTemplateInstanceNetworkInterfaceSpecification)
derive instance newtypeLaunchTemplateInstanceNetworkInterfaceSpecificationList :: Newtype LaunchTemplateInstanceNetworkInterfaceSpecificationList _
derive instance repGenericLaunchTemplateInstanceNetworkInterfaceSpecificationList :: Generic LaunchTemplateInstanceNetworkInterfaceSpecificationList _
instance showLaunchTemplateInstanceNetworkInterfaceSpecificationList :: Show LaunchTemplateInstanceNetworkInterfaceSpecificationList where show = genericShow
instance decodeLaunchTemplateInstanceNetworkInterfaceSpecificationList :: Decode LaunchTemplateInstanceNetworkInterfaceSpecificationList where decode = genericDecode options
instance encodeLaunchTemplateInstanceNetworkInterfaceSpecificationList :: Encode LaunchTemplateInstanceNetworkInterfaceSpecificationList where encode = genericEncode options



-- | <p>The parameters for a network interface.</p>
newtype LaunchTemplateInstanceNetworkInterfaceSpecificationRequest = LaunchTemplateInstanceNetworkInterfaceSpecificationRequest 
  { "AssociatePublicIpAddress" :: Maybe (Boolean)
  , "DeleteOnTermination" :: Maybe (Boolean)
  , "Description" :: Maybe (String)
  , "DeviceIndex" :: Maybe (Int)
  , "Groups" :: Maybe (SecurityGroupIdStringList)
  , "Ipv6AddressCount" :: Maybe (Int)
  , "Ipv6Addresses" :: Maybe (InstanceIpv6AddressListRequest)
  , "NetworkInterfaceId" :: Maybe (String)
  , "PrivateIpAddress" :: Maybe (String)
  , "PrivateIpAddresses" :: Maybe (PrivateIpAddressSpecificationList)
  , "SecondaryPrivateIpAddressCount" :: Maybe (Int)
  , "SubnetId" :: Maybe (String)
  }
derive instance newtypeLaunchTemplateInstanceNetworkInterfaceSpecificationRequest :: Newtype LaunchTemplateInstanceNetworkInterfaceSpecificationRequest _
derive instance repGenericLaunchTemplateInstanceNetworkInterfaceSpecificationRequest :: Generic LaunchTemplateInstanceNetworkInterfaceSpecificationRequest _
instance showLaunchTemplateInstanceNetworkInterfaceSpecificationRequest :: Show LaunchTemplateInstanceNetworkInterfaceSpecificationRequest where show = genericShow
instance decodeLaunchTemplateInstanceNetworkInterfaceSpecificationRequest :: Decode LaunchTemplateInstanceNetworkInterfaceSpecificationRequest where decode = genericDecode options
instance encodeLaunchTemplateInstanceNetworkInterfaceSpecificationRequest :: Encode LaunchTemplateInstanceNetworkInterfaceSpecificationRequest where encode = genericEncode options

-- | Constructs LaunchTemplateInstanceNetworkInterfaceSpecificationRequest from required parameters
newLaunchTemplateInstanceNetworkInterfaceSpecificationRequest :: LaunchTemplateInstanceNetworkInterfaceSpecificationRequest
newLaunchTemplateInstanceNetworkInterfaceSpecificationRequest  = LaunchTemplateInstanceNetworkInterfaceSpecificationRequest { "AssociatePublicIpAddress": Nothing, "DeleteOnTermination": Nothing, "Description": Nothing, "DeviceIndex": Nothing, "Groups": Nothing, "Ipv6AddressCount": Nothing, "Ipv6Addresses": Nothing, "NetworkInterfaceId": Nothing, "PrivateIpAddress": Nothing, "PrivateIpAddresses": Nothing, "SecondaryPrivateIpAddressCount": Nothing, "SubnetId": Nothing }

-- | Constructs LaunchTemplateInstanceNetworkInterfaceSpecificationRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLaunchTemplateInstanceNetworkInterfaceSpecificationRequest' :: ( { "AssociatePublicIpAddress" :: Maybe (Boolean) , "DeleteOnTermination" :: Maybe (Boolean) , "Description" :: Maybe (String) , "DeviceIndex" :: Maybe (Int) , "Groups" :: Maybe (SecurityGroupIdStringList) , "Ipv6AddressCount" :: Maybe (Int) , "Ipv6Addresses" :: Maybe (InstanceIpv6AddressListRequest) , "NetworkInterfaceId" :: Maybe (String) , "PrivateIpAddress" :: Maybe (String) , "PrivateIpAddresses" :: Maybe (PrivateIpAddressSpecificationList) , "SecondaryPrivateIpAddressCount" :: Maybe (Int) , "SubnetId" :: Maybe (String) } -> {"AssociatePublicIpAddress" :: Maybe (Boolean) , "DeleteOnTermination" :: Maybe (Boolean) , "Description" :: Maybe (String) , "DeviceIndex" :: Maybe (Int) , "Groups" :: Maybe (SecurityGroupIdStringList) , "Ipv6AddressCount" :: Maybe (Int) , "Ipv6Addresses" :: Maybe (InstanceIpv6AddressListRequest) , "NetworkInterfaceId" :: Maybe (String) , "PrivateIpAddress" :: Maybe (String) , "PrivateIpAddresses" :: Maybe (PrivateIpAddressSpecificationList) , "SecondaryPrivateIpAddressCount" :: Maybe (Int) , "SubnetId" :: Maybe (String) } ) -> LaunchTemplateInstanceNetworkInterfaceSpecificationRequest
newLaunchTemplateInstanceNetworkInterfaceSpecificationRequest'  customize = (LaunchTemplateInstanceNetworkInterfaceSpecificationRequest <<< customize) { "AssociatePublicIpAddress": Nothing, "DeleteOnTermination": Nothing, "Description": Nothing, "DeviceIndex": Nothing, "Groups": Nothing, "Ipv6AddressCount": Nothing, "Ipv6Addresses": Nothing, "NetworkInterfaceId": Nothing, "PrivateIpAddress": Nothing, "PrivateIpAddresses": Nothing, "SecondaryPrivateIpAddressCount": Nothing, "SubnetId": Nothing }



newtype LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList = LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList (Array LaunchTemplateInstanceNetworkInterfaceSpecificationRequest)
derive instance newtypeLaunchTemplateInstanceNetworkInterfaceSpecificationRequestList :: Newtype LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList _
derive instance repGenericLaunchTemplateInstanceNetworkInterfaceSpecificationRequestList :: Generic LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList _
instance showLaunchTemplateInstanceNetworkInterfaceSpecificationRequestList :: Show LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList where show = genericShow
instance decodeLaunchTemplateInstanceNetworkInterfaceSpecificationRequestList :: Decode LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList where decode = genericDecode options
instance encodeLaunchTemplateInstanceNetworkInterfaceSpecificationRequestList :: Encode LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList where encode = genericEncode options



newtype LaunchTemplateName = LaunchTemplateName String
derive instance newtypeLaunchTemplateName :: Newtype LaunchTemplateName _
derive instance repGenericLaunchTemplateName :: Generic LaunchTemplateName _
instance showLaunchTemplateName :: Show LaunchTemplateName where show = genericShow
instance decodeLaunchTemplateName :: Decode LaunchTemplateName where decode = genericDecode options
instance encodeLaunchTemplateName :: Encode LaunchTemplateName where encode = genericEncode options



newtype LaunchTemplateNameStringList = LaunchTemplateNameStringList (Array LaunchTemplateName)
derive instance newtypeLaunchTemplateNameStringList :: Newtype LaunchTemplateNameStringList _
derive instance repGenericLaunchTemplateNameStringList :: Generic LaunchTemplateNameStringList _
instance showLaunchTemplateNameStringList :: Show LaunchTemplateNameStringList where show = genericShow
instance decodeLaunchTemplateNameStringList :: Decode LaunchTemplateNameStringList where decode = genericDecode options
instance encodeLaunchTemplateNameStringList :: Encode LaunchTemplateNameStringList where encode = genericEncode options



-- | <p>Describes overrides for a launch template.</p>
newtype LaunchTemplateOverrides = LaunchTemplateOverrides 
  { "InstanceType" :: Maybe (InstanceType)
  , "SpotPrice" :: Maybe (String)
  , "SubnetId" :: Maybe (String)
  , "AvailabilityZone" :: Maybe (String)
  , "WeightedCapacity" :: Maybe (Number)
  }
derive instance newtypeLaunchTemplateOverrides :: Newtype LaunchTemplateOverrides _
derive instance repGenericLaunchTemplateOverrides :: Generic LaunchTemplateOverrides _
instance showLaunchTemplateOverrides :: Show LaunchTemplateOverrides where show = genericShow
instance decodeLaunchTemplateOverrides :: Decode LaunchTemplateOverrides where decode = genericDecode options
instance encodeLaunchTemplateOverrides :: Encode LaunchTemplateOverrides where encode = genericEncode options

-- | Constructs LaunchTemplateOverrides from required parameters
newLaunchTemplateOverrides :: LaunchTemplateOverrides
newLaunchTemplateOverrides  = LaunchTemplateOverrides { "AvailabilityZone": Nothing, "InstanceType": Nothing, "SpotPrice": Nothing, "SubnetId": Nothing, "WeightedCapacity": Nothing }

-- | Constructs LaunchTemplateOverrides's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLaunchTemplateOverrides' :: ( { "InstanceType" :: Maybe (InstanceType) , "SpotPrice" :: Maybe (String) , "SubnetId" :: Maybe (String) , "AvailabilityZone" :: Maybe (String) , "WeightedCapacity" :: Maybe (Number) } -> {"InstanceType" :: Maybe (InstanceType) , "SpotPrice" :: Maybe (String) , "SubnetId" :: Maybe (String) , "AvailabilityZone" :: Maybe (String) , "WeightedCapacity" :: Maybe (Number) } ) -> LaunchTemplateOverrides
newLaunchTemplateOverrides'  customize = (LaunchTemplateOverrides <<< customize) { "AvailabilityZone": Nothing, "InstanceType": Nothing, "SpotPrice": Nothing, "SubnetId": Nothing, "WeightedCapacity": Nothing }



newtype LaunchTemplateOverridesList = LaunchTemplateOverridesList (Array LaunchTemplateOverrides)
derive instance newtypeLaunchTemplateOverridesList :: Newtype LaunchTemplateOverridesList _
derive instance repGenericLaunchTemplateOverridesList :: Generic LaunchTemplateOverridesList _
instance showLaunchTemplateOverridesList :: Show LaunchTemplateOverridesList where show = genericShow
instance decodeLaunchTemplateOverridesList :: Decode LaunchTemplateOverridesList where decode = genericDecode options
instance encodeLaunchTemplateOverridesList :: Encode LaunchTemplateOverridesList where encode = genericEncode options



-- | <p>Describes the placement of an instance.</p>
newtype LaunchTemplatePlacement = LaunchTemplatePlacement 
  { "AvailabilityZone" :: Maybe (String)
  , "Affinity" :: Maybe (String)
  , "GroupName" :: Maybe (String)
  , "HostId" :: Maybe (String)
  , "Tenancy" :: Maybe (Tenancy)
  , "SpreadDomain" :: Maybe (String)
  }
derive instance newtypeLaunchTemplatePlacement :: Newtype LaunchTemplatePlacement _
derive instance repGenericLaunchTemplatePlacement :: Generic LaunchTemplatePlacement _
instance showLaunchTemplatePlacement :: Show LaunchTemplatePlacement where show = genericShow
instance decodeLaunchTemplatePlacement :: Decode LaunchTemplatePlacement where decode = genericDecode options
instance encodeLaunchTemplatePlacement :: Encode LaunchTemplatePlacement where encode = genericEncode options

-- | Constructs LaunchTemplatePlacement from required parameters
newLaunchTemplatePlacement :: LaunchTemplatePlacement
newLaunchTemplatePlacement  = LaunchTemplatePlacement { "Affinity": Nothing, "AvailabilityZone": Nothing, "GroupName": Nothing, "HostId": Nothing, "SpreadDomain": Nothing, "Tenancy": Nothing }

-- | Constructs LaunchTemplatePlacement's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLaunchTemplatePlacement' :: ( { "AvailabilityZone" :: Maybe (String) , "Affinity" :: Maybe (String) , "GroupName" :: Maybe (String) , "HostId" :: Maybe (String) , "Tenancy" :: Maybe (Tenancy) , "SpreadDomain" :: Maybe (String) } -> {"AvailabilityZone" :: Maybe (String) , "Affinity" :: Maybe (String) , "GroupName" :: Maybe (String) , "HostId" :: Maybe (String) , "Tenancy" :: Maybe (Tenancy) , "SpreadDomain" :: Maybe (String) } ) -> LaunchTemplatePlacement
newLaunchTemplatePlacement'  customize = (LaunchTemplatePlacement <<< customize) { "Affinity": Nothing, "AvailabilityZone": Nothing, "GroupName": Nothing, "HostId": Nothing, "SpreadDomain": Nothing, "Tenancy": Nothing }



-- | <p>The placement for the instance.</p>
newtype LaunchTemplatePlacementRequest = LaunchTemplatePlacementRequest 
  { "AvailabilityZone" :: Maybe (String)
  , "Affinity" :: Maybe (String)
  , "GroupName" :: Maybe (String)
  , "HostId" :: Maybe (String)
  , "Tenancy" :: Maybe (Tenancy)
  , "SpreadDomain" :: Maybe (String)
  }
derive instance newtypeLaunchTemplatePlacementRequest :: Newtype LaunchTemplatePlacementRequest _
derive instance repGenericLaunchTemplatePlacementRequest :: Generic LaunchTemplatePlacementRequest _
instance showLaunchTemplatePlacementRequest :: Show LaunchTemplatePlacementRequest where show = genericShow
instance decodeLaunchTemplatePlacementRequest :: Decode LaunchTemplatePlacementRequest where decode = genericDecode options
instance encodeLaunchTemplatePlacementRequest :: Encode LaunchTemplatePlacementRequest where encode = genericEncode options

-- | Constructs LaunchTemplatePlacementRequest from required parameters
newLaunchTemplatePlacementRequest :: LaunchTemplatePlacementRequest
newLaunchTemplatePlacementRequest  = LaunchTemplatePlacementRequest { "Affinity": Nothing, "AvailabilityZone": Nothing, "GroupName": Nothing, "HostId": Nothing, "SpreadDomain": Nothing, "Tenancy": Nothing }

-- | Constructs LaunchTemplatePlacementRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLaunchTemplatePlacementRequest' :: ( { "AvailabilityZone" :: Maybe (String) , "Affinity" :: Maybe (String) , "GroupName" :: Maybe (String) , "HostId" :: Maybe (String) , "Tenancy" :: Maybe (Tenancy) , "SpreadDomain" :: Maybe (String) } -> {"AvailabilityZone" :: Maybe (String) , "Affinity" :: Maybe (String) , "GroupName" :: Maybe (String) , "HostId" :: Maybe (String) , "Tenancy" :: Maybe (Tenancy) , "SpreadDomain" :: Maybe (String) } ) -> LaunchTemplatePlacementRequest
newLaunchTemplatePlacementRequest'  customize = (LaunchTemplatePlacementRequest <<< customize) { "Affinity": Nothing, "AvailabilityZone": Nothing, "GroupName": Nothing, "HostId": Nothing, "SpreadDomain": Nothing, "Tenancy": Nothing }



newtype LaunchTemplateSet = LaunchTemplateSet (Array LaunchTemplate)
derive instance newtypeLaunchTemplateSet :: Newtype LaunchTemplateSet _
derive instance repGenericLaunchTemplateSet :: Generic LaunchTemplateSet _
instance showLaunchTemplateSet :: Show LaunchTemplateSet where show = genericShow
instance decodeLaunchTemplateSet :: Decode LaunchTemplateSet where decode = genericDecode options
instance encodeLaunchTemplateSet :: Encode LaunchTemplateSet where encode = genericEncode options



-- | <p>The launch template to use. You must specify either the launch template ID or launch template name in the request.</p>
newtype LaunchTemplateSpecification = LaunchTemplateSpecification 
  { "LaunchTemplateId" :: Maybe (String)
  , "LaunchTemplateName" :: Maybe (String)
  , "Version" :: Maybe (String)
  }
derive instance newtypeLaunchTemplateSpecification :: Newtype LaunchTemplateSpecification _
derive instance repGenericLaunchTemplateSpecification :: Generic LaunchTemplateSpecification _
instance showLaunchTemplateSpecification :: Show LaunchTemplateSpecification where show = genericShow
instance decodeLaunchTemplateSpecification :: Decode LaunchTemplateSpecification where decode = genericDecode options
instance encodeLaunchTemplateSpecification :: Encode LaunchTemplateSpecification where encode = genericEncode options

-- | Constructs LaunchTemplateSpecification from required parameters
newLaunchTemplateSpecification :: LaunchTemplateSpecification
newLaunchTemplateSpecification  = LaunchTemplateSpecification { "LaunchTemplateId": Nothing, "LaunchTemplateName": Nothing, "Version": Nothing }

-- | Constructs LaunchTemplateSpecification's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLaunchTemplateSpecification' :: ( { "LaunchTemplateId" :: Maybe (String) , "LaunchTemplateName" :: Maybe (String) , "Version" :: Maybe (String) } -> {"LaunchTemplateId" :: Maybe (String) , "LaunchTemplateName" :: Maybe (String) , "Version" :: Maybe (String) } ) -> LaunchTemplateSpecification
newLaunchTemplateSpecification'  customize = (LaunchTemplateSpecification <<< customize) { "LaunchTemplateId": Nothing, "LaunchTemplateName": Nothing, "Version": Nothing }



-- | <p>The options for Spot Instances.</p>
newtype LaunchTemplateSpotMarketOptions = LaunchTemplateSpotMarketOptions 
  { "MaxPrice" :: Maybe (String)
  , "SpotInstanceType" :: Maybe (SpotInstanceType)
  , "BlockDurationMinutes" :: Maybe (Int)
  , "ValidUntil" :: Maybe (DateTime)
  , "InstanceInterruptionBehavior" :: Maybe (InstanceInterruptionBehavior)
  }
derive instance newtypeLaunchTemplateSpotMarketOptions :: Newtype LaunchTemplateSpotMarketOptions _
derive instance repGenericLaunchTemplateSpotMarketOptions :: Generic LaunchTemplateSpotMarketOptions _
instance showLaunchTemplateSpotMarketOptions :: Show LaunchTemplateSpotMarketOptions where show = genericShow
instance decodeLaunchTemplateSpotMarketOptions :: Decode LaunchTemplateSpotMarketOptions where decode = genericDecode options
instance encodeLaunchTemplateSpotMarketOptions :: Encode LaunchTemplateSpotMarketOptions where encode = genericEncode options

-- | Constructs LaunchTemplateSpotMarketOptions from required parameters
newLaunchTemplateSpotMarketOptions :: LaunchTemplateSpotMarketOptions
newLaunchTemplateSpotMarketOptions  = LaunchTemplateSpotMarketOptions { "BlockDurationMinutes": Nothing, "InstanceInterruptionBehavior": Nothing, "MaxPrice": Nothing, "SpotInstanceType": Nothing, "ValidUntil": Nothing }

-- | Constructs LaunchTemplateSpotMarketOptions's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLaunchTemplateSpotMarketOptions' :: ( { "MaxPrice" :: Maybe (String) , "SpotInstanceType" :: Maybe (SpotInstanceType) , "BlockDurationMinutes" :: Maybe (Int) , "ValidUntil" :: Maybe (DateTime) , "InstanceInterruptionBehavior" :: Maybe (InstanceInterruptionBehavior) } -> {"MaxPrice" :: Maybe (String) , "SpotInstanceType" :: Maybe (SpotInstanceType) , "BlockDurationMinutes" :: Maybe (Int) , "ValidUntil" :: Maybe (DateTime) , "InstanceInterruptionBehavior" :: Maybe (InstanceInterruptionBehavior) } ) -> LaunchTemplateSpotMarketOptions
newLaunchTemplateSpotMarketOptions'  customize = (LaunchTemplateSpotMarketOptions <<< customize) { "BlockDurationMinutes": Nothing, "InstanceInterruptionBehavior": Nothing, "MaxPrice": Nothing, "SpotInstanceType": Nothing, "ValidUntil": Nothing }



-- | <p>The options for Spot Instances.</p>
newtype LaunchTemplateSpotMarketOptionsRequest = LaunchTemplateSpotMarketOptionsRequest 
  { "MaxPrice" :: Maybe (String)
  , "SpotInstanceType" :: Maybe (SpotInstanceType)
  , "BlockDurationMinutes" :: Maybe (Int)
  , "ValidUntil" :: Maybe (DateTime)
  , "InstanceInterruptionBehavior" :: Maybe (InstanceInterruptionBehavior)
  }
derive instance newtypeLaunchTemplateSpotMarketOptionsRequest :: Newtype LaunchTemplateSpotMarketOptionsRequest _
derive instance repGenericLaunchTemplateSpotMarketOptionsRequest :: Generic LaunchTemplateSpotMarketOptionsRequest _
instance showLaunchTemplateSpotMarketOptionsRequest :: Show LaunchTemplateSpotMarketOptionsRequest where show = genericShow
instance decodeLaunchTemplateSpotMarketOptionsRequest :: Decode LaunchTemplateSpotMarketOptionsRequest where decode = genericDecode options
instance encodeLaunchTemplateSpotMarketOptionsRequest :: Encode LaunchTemplateSpotMarketOptionsRequest where encode = genericEncode options

-- | Constructs LaunchTemplateSpotMarketOptionsRequest from required parameters
newLaunchTemplateSpotMarketOptionsRequest :: LaunchTemplateSpotMarketOptionsRequest
newLaunchTemplateSpotMarketOptionsRequest  = LaunchTemplateSpotMarketOptionsRequest { "BlockDurationMinutes": Nothing, "InstanceInterruptionBehavior": Nothing, "MaxPrice": Nothing, "SpotInstanceType": Nothing, "ValidUntil": Nothing }

-- | Constructs LaunchTemplateSpotMarketOptionsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLaunchTemplateSpotMarketOptionsRequest' :: ( { "MaxPrice" :: Maybe (String) , "SpotInstanceType" :: Maybe (SpotInstanceType) , "BlockDurationMinutes" :: Maybe (Int) , "ValidUntil" :: Maybe (DateTime) , "InstanceInterruptionBehavior" :: Maybe (InstanceInterruptionBehavior) } -> {"MaxPrice" :: Maybe (String) , "SpotInstanceType" :: Maybe (SpotInstanceType) , "BlockDurationMinutes" :: Maybe (Int) , "ValidUntil" :: Maybe (DateTime) , "InstanceInterruptionBehavior" :: Maybe (InstanceInterruptionBehavior) } ) -> LaunchTemplateSpotMarketOptionsRequest
newLaunchTemplateSpotMarketOptionsRequest'  customize = (LaunchTemplateSpotMarketOptionsRequest <<< customize) { "BlockDurationMinutes": Nothing, "InstanceInterruptionBehavior": Nothing, "MaxPrice": Nothing, "SpotInstanceType": Nothing, "ValidUntil": Nothing }



-- | <p>The tag specification for the launch template.</p>
newtype LaunchTemplateTagSpecification = LaunchTemplateTagSpecification 
  { "ResourceType" :: Maybe (ResourceType)
  , "Tags" :: Maybe (TagList)
  }
derive instance newtypeLaunchTemplateTagSpecification :: Newtype LaunchTemplateTagSpecification _
derive instance repGenericLaunchTemplateTagSpecification :: Generic LaunchTemplateTagSpecification _
instance showLaunchTemplateTagSpecification :: Show LaunchTemplateTagSpecification where show = genericShow
instance decodeLaunchTemplateTagSpecification :: Decode LaunchTemplateTagSpecification where decode = genericDecode options
instance encodeLaunchTemplateTagSpecification :: Encode LaunchTemplateTagSpecification where encode = genericEncode options

-- | Constructs LaunchTemplateTagSpecification from required parameters
newLaunchTemplateTagSpecification :: LaunchTemplateTagSpecification
newLaunchTemplateTagSpecification  = LaunchTemplateTagSpecification { "ResourceType": Nothing, "Tags": Nothing }

-- | Constructs LaunchTemplateTagSpecification's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLaunchTemplateTagSpecification' :: ( { "ResourceType" :: Maybe (ResourceType) , "Tags" :: Maybe (TagList) } -> {"ResourceType" :: Maybe (ResourceType) , "Tags" :: Maybe (TagList) } ) -> LaunchTemplateTagSpecification
newLaunchTemplateTagSpecification'  customize = (LaunchTemplateTagSpecification <<< customize) { "ResourceType": Nothing, "Tags": Nothing }



newtype LaunchTemplateTagSpecificationList = LaunchTemplateTagSpecificationList (Array LaunchTemplateTagSpecification)
derive instance newtypeLaunchTemplateTagSpecificationList :: Newtype LaunchTemplateTagSpecificationList _
derive instance repGenericLaunchTemplateTagSpecificationList :: Generic LaunchTemplateTagSpecificationList _
instance showLaunchTemplateTagSpecificationList :: Show LaunchTemplateTagSpecificationList where show = genericShow
instance decodeLaunchTemplateTagSpecificationList :: Decode LaunchTemplateTagSpecificationList where decode = genericDecode options
instance encodeLaunchTemplateTagSpecificationList :: Encode LaunchTemplateTagSpecificationList where encode = genericEncode options



-- | <p>The tags specification for the launch template.</p>
newtype LaunchTemplateTagSpecificationRequest = LaunchTemplateTagSpecificationRequest 
  { "ResourceType" :: Maybe (ResourceType)
  , "Tags" :: Maybe (TagList)
  }
derive instance newtypeLaunchTemplateTagSpecificationRequest :: Newtype LaunchTemplateTagSpecificationRequest _
derive instance repGenericLaunchTemplateTagSpecificationRequest :: Generic LaunchTemplateTagSpecificationRequest _
instance showLaunchTemplateTagSpecificationRequest :: Show LaunchTemplateTagSpecificationRequest where show = genericShow
instance decodeLaunchTemplateTagSpecificationRequest :: Decode LaunchTemplateTagSpecificationRequest where decode = genericDecode options
instance encodeLaunchTemplateTagSpecificationRequest :: Encode LaunchTemplateTagSpecificationRequest where encode = genericEncode options

-- | Constructs LaunchTemplateTagSpecificationRequest from required parameters
newLaunchTemplateTagSpecificationRequest :: LaunchTemplateTagSpecificationRequest
newLaunchTemplateTagSpecificationRequest  = LaunchTemplateTagSpecificationRequest { "ResourceType": Nothing, "Tags": Nothing }

-- | Constructs LaunchTemplateTagSpecificationRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLaunchTemplateTagSpecificationRequest' :: ( { "ResourceType" :: Maybe (ResourceType) , "Tags" :: Maybe (TagList) } -> {"ResourceType" :: Maybe (ResourceType) , "Tags" :: Maybe (TagList) } ) -> LaunchTemplateTagSpecificationRequest
newLaunchTemplateTagSpecificationRequest'  customize = (LaunchTemplateTagSpecificationRequest <<< customize) { "ResourceType": Nothing, "Tags": Nothing }



newtype LaunchTemplateTagSpecificationRequestList = LaunchTemplateTagSpecificationRequestList (Array LaunchTemplateTagSpecificationRequest)
derive instance newtypeLaunchTemplateTagSpecificationRequestList :: Newtype LaunchTemplateTagSpecificationRequestList _
derive instance repGenericLaunchTemplateTagSpecificationRequestList :: Generic LaunchTemplateTagSpecificationRequestList _
instance showLaunchTemplateTagSpecificationRequestList :: Show LaunchTemplateTagSpecificationRequestList where show = genericShow
instance decodeLaunchTemplateTagSpecificationRequestList :: Decode LaunchTemplateTagSpecificationRequestList where decode = genericDecode options
instance encodeLaunchTemplateTagSpecificationRequestList :: Encode LaunchTemplateTagSpecificationRequestList where encode = genericEncode options



-- | <p>Describes a launch template version.</p>
newtype LaunchTemplateVersion = LaunchTemplateVersion 
  { "LaunchTemplateId" :: Maybe (String)
  , "LaunchTemplateName" :: Maybe (LaunchTemplateName)
  , "VersionNumber" :: Maybe (Number)
  , "VersionDescription" :: Maybe (VersionDescription)
  , "CreateTime" :: Maybe (DateTime)
  , "CreatedBy" :: Maybe (String)
  , "DefaultVersion" :: Maybe (Boolean)
  , "LaunchTemplateData" :: Maybe (ResponseLaunchTemplateData)
  }
derive instance newtypeLaunchTemplateVersion :: Newtype LaunchTemplateVersion _
derive instance repGenericLaunchTemplateVersion :: Generic LaunchTemplateVersion _
instance showLaunchTemplateVersion :: Show LaunchTemplateVersion where show = genericShow
instance decodeLaunchTemplateVersion :: Decode LaunchTemplateVersion where decode = genericDecode options
instance encodeLaunchTemplateVersion :: Encode LaunchTemplateVersion where encode = genericEncode options

-- | Constructs LaunchTemplateVersion from required parameters
newLaunchTemplateVersion :: LaunchTemplateVersion
newLaunchTemplateVersion  = LaunchTemplateVersion { "CreateTime": Nothing, "CreatedBy": Nothing, "DefaultVersion": Nothing, "LaunchTemplateData": Nothing, "LaunchTemplateId": Nothing, "LaunchTemplateName": Nothing, "VersionDescription": Nothing, "VersionNumber": Nothing }

-- | Constructs LaunchTemplateVersion's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLaunchTemplateVersion' :: ( { "LaunchTemplateId" :: Maybe (String) , "LaunchTemplateName" :: Maybe (LaunchTemplateName) , "VersionNumber" :: Maybe (Number) , "VersionDescription" :: Maybe (VersionDescription) , "CreateTime" :: Maybe (DateTime) , "CreatedBy" :: Maybe (String) , "DefaultVersion" :: Maybe (Boolean) , "LaunchTemplateData" :: Maybe (ResponseLaunchTemplateData) } -> {"LaunchTemplateId" :: Maybe (String) , "LaunchTemplateName" :: Maybe (LaunchTemplateName) , "VersionNumber" :: Maybe (Number) , "VersionDescription" :: Maybe (VersionDescription) , "CreateTime" :: Maybe (DateTime) , "CreatedBy" :: Maybe (String) , "DefaultVersion" :: Maybe (Boolean) , "LaunchTemplateData" :: Maybe (ResponseLaunchTemplateData) } ) -> LaunchTemplateVersion
newLaunchTemplateVersion'  customize = (LaunchTemplateVersion <<< customize) { "CreateTime": Nothing, "CreatedBy": Nothing, "DefaultVersion": Nothing, "LaunchTemplateData": Nothing, "LaunchTemplateId": Nothing, "LaunchTemplateName": Nothing, "VersionDescription": Nothing, "VersionNumber": Nothing }



newtype LaunchTemplateVersionSet = LaunchTemplateVersionSet (Array LaunchTemplateVersion)
derive instance newtypeLaunchTemplateVersionSet :: Newtype LaunchTemplateVersionSet _
derive instance repGenericLaunchTemplateVersionSet :: Generic LaunchTemplateVersionSet _
instance showLaunchTemplateVersionSet :: Show LaunchTemplateVersionSet where show = genericShow
instance decodeLaunchTemplateVersionSet :: Decode LaunchTemplateVersionSet where decode = genericDecode options
instance encodeLaunchTemplateVersionSet :: Encode LaunchTemplateVersionSet where encode = genericEncode options



-- | <p>Describes the monitoring for the instance.</p>
newtype LaunchTemplatesMonitoring = LaunchTemplatesMonitoring 
  { "Enabled" :: Maybe (Boolean)
  }
derive instance newtypeLaunchTemplatesMonitoring :: Newtype LaunchTemplatesMonitoring _
derive instance repGenericLaunchTemplatesMonitoring :: Generic LaunchTemplatesMonitoring _
instance showLaunchTemplatesMonitoring :: Show LaunchTemplatesMonitoring where show = genericShow
instance decodeLaunchTemplatesMonitoring :: Decode LaunchTemplatesMonitoring where decode = genericDecode options
instance encodeLaunchTemplatesMonitoring :: Encode LaunchTemplatesMonitoring where encode = genericEncode options

-- | Constructs LaunchTemplatesMonitoring from required parameters
newLaunchTemplatesMonitoring :: LaunchTemplatesMonitoring
newLaunchTemplatesMonitoring  = LaunchTemplatesMonitoring { "Enabled": Nothing }

-- | Constructs LaunchTemplatesMonitoring's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLaunchTemplatesMonitoring' :: ( { "Enabled" :: Maybe (Boolean) } -> {"Enabled" :: Maybe (Boolean) } ) -> LaunchTemplatesMonitoring
newLaunchTemplatesMonitoring'  customize = (LaunchTemplatesMonitoring <<< customize) { "Enabled": Nothing }



-- | <p>Describes the monitoring for the instance.</p>
newtype LaunchTemplatesMonitoringRequest = LaunchTemplatesMonitoringRequest 
  { "Enabled" :: Maybe (Boolean)
  }
derive instance newtypeLaunchTemplatesMonitoringRequest :: Newtype LaunchTemplatesMonitoringRequest _
derive instance repGenericLaunchTemplatesMonitoringRequest :: Generic LaunchTemplatesMonitoringRequest _
instance showLaunchTemplatesMonitoringRequest :: Show LaunchTemplatesMonitoringRequest where show = genericShow
instance decodeLaunchTemplatesMonitoringRequest :: Decode LaunchTemplatesMonitoringRequest where decode = genericDecode options
instance encodeLaunchTemplatesMonitoringRequest :: Encode LaunchTemplatesMonitoringRequest where encode = genericEncode options

-- | Constructs LaunchTemplatesMonitoringRequest from required parameters
newLaunchTemplatesMonitoringRequest :: LaunchTemplatesMonitoringRequest
newLaunchTemplatesMonitoringRequest  = LaunchTemplatesMonitoringRequest { "Enabled": Nothing }

-- | Constructs LaunchTemplatesMonitoringRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLaunchTemplatesMonitoringRequest' :: ( { "Enabled" :: Maybe (Boolean) } -> {"Enabled" :: Maybe (Boolean) } ) -> LaunchTemplatesMonitoringRequest
newLaunchTemplatesMonitoringRequest'  customize = (LaunchTemplatesMonitoringRequest <<< customize) { "Enabled": Nothing }



newtype ListingState = ListingState String
derive instance newtypeListingState :: Newtype ListingState _
derive instance repGenericListingState :: Generic ListingState _
instance showListingState :: Show ListingState where show = genericShow
instance decodeListingState :: Decode ListingState where decode = genericDecode options
instance encodeListingState :: Encode ListingState where encode = genericEncode options



newtype ListingStatus = ListingStatus String
derive instance newtypeListingStatus :: Newtype ListingStatus _
derive instance repGenericListingStatus :: Generic ListingStatus _
instance showListingStatus :: Show ListingStatus where show = genericShow
instance decodeListingStatus :: Decode ListingStatus where decode = genericDecode options
instance encodeListingStatus :: Encode ListingStatus where encode = genericEncode options



-- | <p>Describes the Classic Load Balancers and target groups to attach to a Spot Fleet request.</p>
newtype LoadBalancersConfig = LoadBalancersConfig 
  { "ClassicLoadBalancersConfig" :: Maybe (ClassicLoadBalancersConfig)
  , "TargetGroupsConfig" :: Maybe (TargetGroupsConfig)
  }
derive instance newtypeLoadBalancersConfig :: Newtype LoadBalancersConfig _
derive instance repGenericLoadBalancersConfig :: Generic LoadBalancersConfig _
instance showLoadBalancersConfig :: Show LoadBalancersConfig where show = genericShow
instance decodeLoadBalancersConfig :: Decode LoadBalancersConfig where decode = genericDecode options
instance encodeLoadBalancersConfig :: Encode LoadBalancersConfig where encode = genericEncode options

-- | Constructs LoadBalancersConfig from required parameters
newLoadBalancersConfig :: LoadBalancersConfig
newLoadBalancersConfig  = LoadBalancersConfig { "ClassicLoadBalancersConfig": Nothing, "TargetGroupsConfig": Nothing }

-- | Constructs LoadBalancersConfig's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLoadBalancersConfig' :: ( { "ClassicLoadBalancersConfig" :: Maybe (ClassicLoadBalancersConfig) , "TargetGroupsConfig" :: Maybe (TargetGroupsConfig) } -> {"ClassicLoadBalancersConfig" :: Maybe (ClassicLoadBalancersConfig) , "TargetGroupsConfig" :: Maybe (TargetGroupsConfig) } ) -> LoadBalancersConfig
newLoadBalancersConfig'  customize = (LoadBalancersConfig <<< customize) { "ClassicLoadBalancersConfig": Nothing, "TargetGroupsConfig": Nothing }



-- | <p>Describes a load permission.</p>
newtype LoadPermission = LoadPermission 
  { "UserId" :: Maybe (String)
  , "Group" :: Maybe (PermissionGroup)
  }
derive instance newtypeLoadPermission :: Newtype LoadPermission _
derive instance repGenericLoadPermission :: Generic LoadPermission _
instance showLoadPermission :: Show LoadPermission where show = genericShow
instance decodeLoadPermission :: Decode LoadPermission where decode = genericDecode options
instance encodeLoadPermission :: Encode LoadPermission where encode = genericEncode options

-- | Constructs LoadPermission from required parameters
newLoadPermission :: LoadPermission
newLoadPermission  = LoadPermission { "Group": Nothing, "UserId": Nothing }

-- | Constructs LoadPermission's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLoadPermission' :: ( { "UserId" :: Maybe (String) , "Group" :: Maybe (PermissionGroup) } -> {"UserId" :: Maybe (String) , "Group" :: Maybe (PermissionGroup) } ) -> LoadPermission
newLoadPermission'  customize = (LoadPermission <<< customize) { "Group": Nothing, "UserId": Nothing }



newtype LoadPermissionList = LoadPermissionList (Array LoadPermission)
derive instance newtypeLoadPermissionList :: Newtype LoadPermissionList _
derive instance repGenericLoadPermissionList :: Generic LoadPermissionList _
instance showLoadPermissionList :: Show LoadPermissionList where show = genericShow
instance decodeLoadPermissionList :: Decode LoadPermissionList where decode = genericDecode options
instance encodeLoadPermissionList :: Encode LoadPermissionList where encode = genericEncode options



newtype LoadPermissionListRequest = LoadPermissionListRequest (Array LoadPermissionRequest)
derive instance newtypeLoadPermissionListRequest :: Newtype LoadPermissionListRequest _
derive instance repGenericLoadPermissionListRequest :: Generic LoadPermissionListRequest _
instance showLoadPermissionListRequest :: Show LoadPermissionListRequest where show = genericShow
instance decodeLoadPermissionListRequest :: Decode LoadPermissionListRequest where decode = genericDecode options
instance encodeLoadPermissionListRequest :: Encode LoadPermissionListRequest where encode = genericEncode options



-- | <p>Describes modifications to the load permissions of an Amazon FPGA image (AFI).</p>
newtype LoadPermissionModifications = LoadPermissionModifications 
  { "Add" :: Maybe (LoadPermissionListRequest)
  , "Remove" :: Maybe (LoadPermissionListRequest)
  }
derive instance newtypeLoadPermissionModifications :: Newtype LoadPermissionModifications _
derive instance repGenericLoadPermissionModifications :: Generic LoadPermissionModifications _
instance showLoadPermissionModifications :: Show LoadPermissionModifications where show = genericShow
instance decodeLoadPermissionModifications :: Decode LoadPermissionModifications where decode = genericDecode options
instance encodeLoadPermissionModifications :: Encode LoadPermissionModifications where encode = genericEncode options

-- | Constructs LoadPermissionModifications from required parameters
newLoadPermissionModifications :: LoadPermissionModifications
newLoadPermissionModifications  = LoadPermissionModifications { "Add": Nothing, "Remove": Nothing }

-- | Constructs LoadPermissionModifications's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLoadPermissionModifications' :: ( { "Add" :: Maybe (LoadPermissionListRequest) , "Remove" :: Maybe (LoadPermissionListRequest) } -> {"Add" :: Maybe (LoadPermissionListRequest) , "Remove" :: Maybe (LoadPermissionListRequest) } ) -> LoadPermissionModifications
newLoadPermissionModifications'  customize = (LoadPermissionModifications <<< customize) { "Add": Nothing, "Remove": Nothing }



-- | <p>Describes a load permission.</p>
newtype LoadPermissionRequest = LoadPermissionRequest 
  { "Group" :: Maybe (PermissionGroup)
  , "UserId" :: Maybe (String)
  }
derive instance newtypeLoadPermissionRequest :: Newtype LoadPermissionRequest _
derive instance repGenericLoadPermissionRequest :: Generic LoadPermissionRequest _
instance showLoadPermissionRequest :: Show LoadPermissionRequest where show = genericShow
instance decodeLoadPermissionRequest :: Decode LoadPermissionRequest where decode = genericDecode options
instance encodeLoadPermissionRequest :: Encode LoadPermissionRequest where encode = genericEncode options

-- | Constructs LoadPermissionRequest from required parameters
newLoadPermissionRequest :: LoadPermissionRequest
newLoadPermissionRequest  = LoadPermissionRequest { "Group": Nothing, "UserId": Nothing }

-- | Constructs LoadPermissionRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newLoadPermissionRequest' :: ( { "Group" :: Maybe (PermissionGroup) , "UserId" :: Maybe (String) } -> {"Group" :: Maybe (PermissionGroup) , "UserId" :: Maybe (String) } ) -> LoadPermissionRequest
newLoadPermissionRequest'  customize = (LoadPermissionRequest <<< customize) { "Group": Nothing, "UserId": Nothing }



newtype MarketType = MarketType String
derive instance newtypeMarketType :: Newtype MarketType _
derive instance repGenericMarketType :: Generic MarketType _
instance showMarketType :: Show MarketType where show = genericShow
instance decodeMarketType :: Decode MarketType where decode = genericDecode options
instance encodeMarketType :: Encode MarketType where encode = genericEncode options



newtype MaxResults = MaxResults Int
derive instance newtypeMaxResults :: Newtype MaxResults _
derive instance repGenericMaxResults :: Generic MaxResults _
instance showMaxResults :: Show MaxResults where show = genericShow
instance decodeMaxResults :: Decode MaxResults where decode = genericDecode options
instance encodeMaxResults :: Encode MaxResults where encode = genericEncode options



newtype ModifyFpgaImageAttributeRequest = ModifyFpgaImageAttributeRequest 
  { "DryRun" :: Maybe (Boolean)
  , "FpgaImageId" :: (String)
  , "Attribute" :: Maybe (FpgaImageAttributeName)
  , "OperationType" :: Maybe (OperationType)
  , "UserIds" :: Maybe (UserIdStringList)
  , "UserGroups" :: Maybe (UserGroupStringList)
  , "ProductCodes" :: Maybe (ProductCodeStringList)
  , "LoadPermission" :: Maybe (LoadPermissionModifications)
  , "Description" :: Maybe (String)
  , "Name" :: Maybe (String)
  }
derive instance newtypeModifyFpgaImageAttributeRequest :: Newtype ModifyFpgaImageAttributeRequest _
derive instance repGenericModifyFpgaImageAttributeRequest :: Generic ModifyFpgaImageAttributeRequest _
instance showModifyFpgaImageAttributeRequest :: Show ModifyFpgaImageAttributeRequest where show = genericShow
instance decodeModifyFpgaImageAttributeRequest :: Decode ModifyFpgaImageAttributeRequest where decode = genericDecode options
instance encodeModifyFpgaImageAttributeRequest :: Encode ModifyFpgaImageAttributeRequest where encode = genericEncode options

-- | Constructs ModifyFpgaImageAttributeRequest from required parameters
newModifyFpgaImageAttributeRequest :: String -> ModifyFpgaImageAttributeRequest
newModifyFpgaImageAttributeRequest _FpgaImageId = ModifyFpgaImageAttributeRequest { "FpgaImageId": _FpgaImageId, "Attribute": Nothing, "Description": Nothing, "DryRun": Nothing, "LoadPermission": Nothing, "Name": Nothing, "OperationType": Nothing, "ProductCodes": Nothing, "UserGroups": Nothing, "UserIds": Nothing }

-- | Constructs ModifyFpgaImageAttributeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyFpgaImageAttributeRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "FpgaImageId" :: (String) , "Attribute" :: Maybe (FpgaImageAttributeName) , "OperationType" :: Maybe (OperationType) , "UserIds" :: Maybe (UserIdStringList) , "UserGroups" :: Maybe (UserGroupStringList) , "ProductCodes" :: Maybe (ProductCodeStringList) , "LoadPermission" :: Maybe (LoadPermissionModifications) , "Description" :: Maybe (String) , "Name" :: Maybe (String) } -> {"DryRun" :: Maybe (Boolean) , "FpgaImageId" :: (String) , "Attribute" :: Maybe (FpgaImageAttributeName) , "OperationType" :: Maybe (OperationType) , "UserIds" :: Maybe (UserIdStringList) , "UserGroups" :: Maybe (UserGroupStringList) , "ProductCodes" :: Maybe (ProductCodeStringList) , "LoadPermission" :: Maybe (LoadPermissionModifications) , "Description" :: Maybe (String) , "Name" :: Maybe (String) } ) -> ModifyFpgaImageAttributeRequest
newModifyFpgaImageAttributeRequest' _FpgaImageId customize = (ModifyFpgaImageAttributeRequest <<< customize) { "FpgaImageId": _FpgaImageId, "Attribute": Nothing, "Description": Nothing, "DryRun": Nothing, "LoadPermission": Nothing, "Name": Nothing, "OperationType": Nothing, "ProductCodes": Nothing, "UserGroups": Nothing, "UserIds": Nothing }



newtype ModifyFpgaImageAttributeResult = ModifyFpgaImageAttributeResult 
  { "FpgaImageAttribute" :: Maybe (FpgaImageAttribute)
  }
derive instance newtypeModifyFpgaImageAttributeResult :: Newtype ModifyFpgaImageAttributeResult _
derive instance repGenericModifyFpgaImageAttributeResult :: Generic ModifyFpgaImageAttributeResult _
instance showModifyFpgaImageAttributeResult :: Show ModifyFpgaImageAttributeResult where show = genericShow
instance decodeModifyFpgaImageAttributeResult :: Decode ModifyFpgaImageAttributeResult where decode = genericDecode options
instance encodeModifyFpgaImageAttributeResult :: Encode ModifyFpgaImageAttributeResult where encode = genericEncode options

-- | Constructs ModifyFpgaImageAttributeResult from required parameters
newModifyFpgaImageAttributeResult :: ModifyFpgaImageAttributeResult
newModifyFpgaImageAttributeResult  = ModifyFpgaImageAttributeResult { "FpgaImageAttribute": Nothing }

-- | Constructs ModifyFpgaImageAttributeResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyFpgaImageAttributeResult' :: ( { "FpgaImageAttribute" :: Maybe (FpgaImageAttribute) } -> {"FpgaImageAttribute" :: Maybe (FpgaImageAttribute) } ) -> ModifyFpgaImageAttributeResult
newModifyFpgaImageAttributeResult'  customize = (ModifyFpgaImageAttributeResult <<< customize) { "FpgaImageAttribute": Nothing }



-- | <p>Contains the parameters for ModifyHosts.</p>
newtype ModifyHostsRequest = ModifyHostsRequest 
  { "AutoPlacement" :: (AutoPlacement)
  , "HostIds" :: (RequestHostIdList)
  }
derive instance newtypeModifyHostsRequest :: Newtype ModifyHostsRequest _
derive instance repGenericModifyHostsRequest :: Generic ModifyHostsRequest _
instance showModifyHostsRequest :: Show ModifyHostsRequest where show = genericShow
instance decodeModifyHostsRequest :: Decode ModifyHostsRequest where decode = genericDecode options
instance encodeModifyHostsRequest :: Encode ModifyHostsRequest where encode = genericEncode options

-- | Constructs ModifyHostsRequest from required parameters
newModifyHostsRequest :: AutoPlacement -> RequestHostIdList -> ModifyHostsRequest
newModifyHostsRequest _AutoPlacement _HostIds = ModifyHostsRequest { "AutoPlacement": _AutoPlacement, "HostIds": _HostIds }

-- | Constructs ModifyHostsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyHostsRequest' :: AutoPlacement -> RequestHostIdList -> ( { "AutoPlacement" :: (AutoPlacement) , "HostIds" :: (RequestHostIdList) } -> {"AutoPlacement" :: (AutoPlacement) , "HostIds" :: (RequestHostIdList) } ) -> ModifyHostsRequest
newModifyHostsRequest' _AutoPlacement _HostIds customize = (ModifyHostsRequest <<< customize) { "AutoPlacement": _AutoPlacement, "HostIds": _HostIds }



-- | <p>Contains the output of ModifyHosts.</p>
newtype ModifyHostsResult = ModifyHostsResult 
  { "Successful" :: Maybe (ResponseHostIdList)
  , "Unsuccessful" :: Maybe (UnsuccessfulItemList)
  }
derive instance newtypeModifyHostsResult :: Newtype ModifyHostsResult _
derive instance repGenericModifyHostsResult :: Generic ModifyHostsResult _
instance showModifyHostsResult :: Show ModifyHostsResult where show = genericShow
instance decodeModifyHostsResult :: Decode ModifyHostsResult where decode = genericDecode options
instance encodeModifyHostsResult :: Encode ModifyHostsResult where encode = genericEncode options

-- | Constructs ModifyHostsResult from required parameters
newModifyHostsResult :: ModifyHostsResult
newModifyHostsResult  = ModifyHostsResult { "Successful": Nothing, "Unsuccessful": Nothing }

-- | Constructs ModifyHostsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyHostsResult' :: ( { "Successful" :: Maybe (ResponseHostIdList) , "Unsuccessful" :: Maybe (UnsuccessfulItemList) } -> {"Successful" :: Maybe (ResponseHostIdList) , "Unsuccessful" :: Maybe (UnsuccessfulItemList) } ) -> ModifyHostsResult
newModifyHostsResult'  customize = (ModifyHostsResult <<< customize) { "Successful": Nothing, "Unsuccessful": Nothing }



-- | <p>Contains the parameters of ModifyIdFormat.</p>
newtype ModifyIdFormatRequest = ModifyIdFormatRequest 
  { "Resource" :: (String)
  , "UseLongIds" :: (Boolean)
  }
derive instance newtypeModifyIdFormatRequest :: Newtype ModifyIdFormatRequest _
derive instance repGenericModifyIdFormatRequest :: Generic ModifyIdFormatRequest _
instance showModifyIdFormatRequest :: Show ModifyIdFormatRequest where show = genericShow
instance decodeModifyIdFormatRequest :: Decode ModifyIdFormatRequest where decode = genericDecode options
instance encodeModifyIdFormatRequest :: Encode ModifyIdFormatRequest where encode = genericEncode options

-- | Constructs ModifyIdFormatRequest from required parameters
newModifyIdFormatRequest :: String -> Boolean -> ModifyIdFormatRequest
newModifyIdFormatRequest _Resource _UseLongIds = ModifyIdFormatRequest { "Resource": _Resource, "UseLongIds": _UseLongIds }

-- | Constructs ModifyIdFormatRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyIdFormatRequest' :: String -> Boolean -> ( { "Resource" :: (String) , "UseLongIds" :: (Boolean) } -> {"Resource" :: (String) , "UseLongIds" :: (Boolean) } ) -> ModifyIdFormatRequest
newModifyIdFormatRequest' _Resource _UseLongIds customize = (ModifyIdFormatRequest <<< customize) { "Resource": _Resource, "UseLongIds": _UseLongIds }



-- | <p>Contains the parameters of ModifyIdentityIdFormat.</p>
newtype ModifyIdentityIdFormatRequest = ModifyIdentityIdFormatRequest 
  { "PrincipalArn" :: (String)
  , "Resource" :: (String)
  , "UseLongIds" :: (Boolean)
  }
derive instance newtypeModifyIdentityIdFormatRequest :: Newtype ModifyIdentityIdFormatRequest _
derive instance repGenericModifyIdentityIdFormatRequest :: Generic ModifyIdentityIdFormatRequest _
instance showModifyIdentityIdFormatRequest :: Show ModifyIdentityIdFormatRequest where show = genericShow
instance decodeModifyIdentityIdFormatRequest :: Decode ModifyIdentityIdFormatRequest where decode = genericDecode options
instance encodeModifyIdentityIdFormatRequest :: Encode ModifyIdentityIdFormatRequest where encode = genericEncode options

-- | Constructs ModifyIdentityIdFormatRequest from required parameters
newModifyIdentityIdFormatRequest :: String -> String -> Boolean -> ModifyIdentityIdFormatRequest
newModifyIdentityIdFormatRequest _PrincipalArn _Resource _UseLongIds = ModifyIdentityIdFormatRequest { "PrincipalArn": _PrincipalArn, "Resource": _Resource, "UseLongIds": _UseLongIds }

-- | Constructs ModifyIdentityIdFormatRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyIdentityIdFormatRequest' :: String -> String -> Boolean -> ( { "PrincipalArn" :: (String) , "Resource" :: (String) , "UseLongIds" :: (Boolean) } -> {"PrincipalArn" :: (String) , "Resource" :: (String) , "UseLongIds" :: (Boolean) } ) -> ModifyIdentityIdFormatRequest
newModifyIdentityIdFormatRequest' _PrincipalArn _Resource _UseLongIds customize = (ModifyIdentityIdFormatRequest <<< customize) { "PrincipalArn": _PrincipalArn, "Resource": _Resource, "UseLongIds": _UseLongIds }



-- | <p>Contains the parameters for ModifyImageAttribute.</p>
newtype ModifyImageAttributeRequest = ModifyImageAttributeRequest 
  { "Attribute" :: Maybe (String)
  , "Description" :: Maybe (AttributeValue)
  , "ImageId" :: (String)
  , "LaunchPermission" :: Maybe (LaunchPermissionModifications)
  , "OperationType" :: Maybe (OperationType)
  , "ProductCodes" :: Maybe (ProductCodeStringList)
  , "UserGroups" :: Maybe (UserGroupStringList)
  , "UserIds" :: Maybe (UserIdStringList)
  , "Value" :: Maybe (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeModifyImageAttributeRequest :: Newtype ModifyImageAttributeRequest _
derive instance repGenericModifyImageAttributeRequest :: Generic ModifyImageAttributeRequest _
instance showModifyImageAttributeRequest :: Show ModifyImageAttributeRequest where show = genericShow
instance decodeModifyImageAttributeRequest :: Decode ModifyImageAttributeRequest where decode = genericDecode options
instance encodeModifyImageAttributeRequest :: Encode ModifyImageAttributeRequest where encode = genericEncode options

-- | Constructs ModifyImageAttributeRequest from required parameters
newModifyImageAttributeRequest :: String -> ModifyImageAttributeRequest
newModifyImageAttributeRequest _ImageId = ModifyImageAttributeRequest { "ImageId": _ImageId, "Attribute": Nothing, "Description": Nothing, "DryRun": Nothing, "LaunchPermission": Nothing, "OperationType": Nothing, "ProductCodes": Nothing, "UserGroups": Nothing, "UserIds": Nothing, "Value": Nothing }

-- | Constructs ModifyImageAttributeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyImageAttributeRequest' :: String -> ( { "Attribute" :: Maybe (String) , "Description" :: Maybe (AttributeValue) , "ImageId" :: (String) , "LaunchPermission" :: Maybe (LaunchPermissionModifications) , "OperationType" :: Maybe (OperationType) , "ProductCodes" :: Maybe (ProductCodeStringList) , "UserGroups" :: Maybe (UserGroupStringList) , "UserIds" :: Maybe (UserIdStringList) , "Value" :: Maybe (String) , "DryRun" :: Maybe (Boolean) } -> {"Attribute" :: Maybe (String) , "Description" :: Maybe (AttributeValue) , "ImageId" :: (String) , "LaunchPermission" :: Maybe (LaunchPermissionModifications) , "OperationType" :: Maybe (OperationType) , "ProductCodes" :: Maybe (ProductCodeStringList) , "UserGroups" :: Maybe (UserGroupStringList) , "UserIds" :: Maybe (UserIdStringList) , "Value" :: Maybe (String) , "DryRun" :: Maybe (Boolean) } ) -> ModifyImageAttributeRequest
newModifyImageAttributeRequest' _ImageId customize = (ModifyImageAttributeRequest <<< customize) { "ImageId": _ImageId, "Attribute": Nothing, "Description": Nothing, "DryRun": Nothing, "LaunchPermission": Nothing, "OperationType": Nothing, "ProductCodes": Nothing, "UserGroups": Nothing, "UserIds": Nothing, "Value": Nothing }



-- | <p>Contains the parameters for ModifyInstanceAttribute.</p>
newtype ModifyInstanceAttributeRequest = ModifyInstanceAttributeRequest 
  { "SourceDestCheck" :: Maybe (AttributeBooleanValue)
  , "Attribute" :: Maybe (InstanceAttributeName)
  , "BlockDeviceMappings" :: Maybe (InstanceBlockDeviceMappingSpecificationList)
  , "DisableApiTermination" :: Maybe (AttributeBooleanValue)
  , "DryRun" :: Maybe (Boolean)
  , "EbsOptimized" :: Maybe (AttributeBooleanValue)
  , "EnaSupport" :: Maybe (AttributeBooleanValue)
  , "Groups" :: Maybe (GroupIdStringList)
  , "InstanceId" :: (String)
  , "InstanceInitiatedShutdownBehavior" :: Maybe (AttributeValue)
  , "InstanceType" :: Maybe (AttributeValue)
  , "Kernel" :: Maybe (AttributeValue)
  , "Ramdisk" :: Maybe (AttributeValue)
  , "SriovNetSupport" :: Maybe (AttributeValue)
  , "UserData" :: Maybe (BlobAttributeValue)
  , "Value" :: Maybe (String)
  }
derive instance newtypeModifyInstanceAttributeRequest :: Newtype ModifyInstanceAttributeRequest _
derive instance repGenericModifyInstanceAttributeRequest :: Generic ModifyInstanceAttributeRequest _
instance showModifyInstanceAttributeRequest :: Show ModifyInstanceAttributeRequest where show = genericShow
instance decodeModifyInstanceAttributeRequest :: Decode ModifyInstanceAttributeRequest where decode = genericDecode options
instance encodeModifyInstanceAttributeRequest :: Encode ModifyInstanceAttributeRequest where encode = genericEncode options

-- | Constructs ModifyInstanceAttributeRequest from required parameters
newModifyInstanceAttributeRequest :: String -> ModifyInstanceAttributeRequest
newModifyInstanceAttributeRequest _InstanceId = ModifyInstanceAttributeRequest { "InstanceId": _InstanceId, "Attribute": Nothing, "BlockDeviceMappings": Nothing, "DisableApiTermination": Nothing, "DryRun": Nothing, "EbsOptimized": Nothing, "EnaSupport": Nothing, "Groups": Nothing, "InstanceInitiatedShutdownBehavior": Nothing, "InstanceType": Nothing, "Kernel": Nothing, "Ramdisk": Nothing, "SourceDestCheck": Nothing, "SriovNetSupport": Nothing, "UserData": Nothing, "Value": Nothing }

-- | Constructs ModifyInstanceAttributeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyInstanceAttributeRequest' :: String -> ( { "SourceDestCheck" :: Maybe (AttributeBooleanValue) , "Attribute" :: Maybe (InstanceAttributeName) , "BlockDeviceMappings" :: Maybe (InstanceBlockDeviceMappingSpecificationList) , "DisableApiTermination" :: Maybe (AttributeBooleanValue) , "DryRun" :: Maybe (Boolean) , "EbsOptimized" :: Maybe (AttributeBooleanValue) , "EnaSupport" :: Maybe (AttributeBooleanValue) , "Groups" :: Maybe (GroupIdStringList) , "InstanceId" :: (String) , "InstanceInitiatedShutdownBehavior" :: Maybe (AttributeValue) , "InstanceType" :: Maybe (AttributeValue) , "Kernel" :: Maybe (AttributeValue) , "Ramdisk" :: Maybe (AttributeValue) , "SriovNetSupport" :: Maybe (AttributeValue) , "UserData" :: Maybe (BlobAttributeValue) , "Value" :: Maybe (String) } -> {"SourceDestCheck" :: Maybe (AttributeBooleanValue) , "Attribute" :: Maybe (InstanceAttributeName) , "BlockDeviceMappings" :: Maybe (InstanceBlockDeviceMappingSpecificationList) , "DisableApiTermination" :: Maybe (AttributeBooleanValue) , "DryRun" :: Maybe (Boolean) , "EbsOptimized" :: Maybe (AttributeBooleanValue) , "EnaSupport" :: Maybe (AttributeBooleanValue) , "Groups" :: Maybe (GroupIdStringList) , "InstanceId" :: (String) , "InstanceInitiatedShutdownBehavior" :: Maybe (AttributeValue) , "InstanceType" :: Maybe (AttributeValue) , "Kernel" :: Maybe (AttributeValue) , "Ramdisk" :: Maybe (AttributeValue) , "SriovNetSupport" :: Maybe (AttributeValue) , "UserData" :: Maybe (BlobAttributeValue) , "Value" :: Maybe (String) } ) -> ModifyInstanceAttributeRequest
newModifyInstanceAttributeRequest' _InstanceId customize = (ModifyInstanceAttributeRequest <<< customize) { "InstanceId": _InstanceId, "Attribute": Nothing, "BlockDeviceMappings": Nothing, "DisableApiTermination": Nothing, "DryRun": Nothing, "EbsOptimized": Nothing, "EnaSupport": Nothing, "Groups": Nothing, "InstanceInitiatedShutdownBehavior": Nothing, "InstanceType": Nothing, "Kernel": Nothing, "Ramdisk": Nothing, "SourceDestCheck": Nothing, "SriovNetSupport": Nothing, "UserData": Nothing, "Value": Nothing }



newtype ModifyInstanceCreditSpecificationRequest = ModifyInstanceCreditSpecificationRequest 
  { "DryRun" :: Maybe (Boolean)
  , "ClientToken" :: Maybe (String)
  , "InstanceCreditSpecifications" :: (InstanceCreditSpecificationListRequest)
  }
derive instance newtypeModifyInstanceCreditSpecificationRequest :: Newtype ModifyInstanceCreditSpecificationRequest _
derive instance repGenericModifyInstanceCreditSpecificationRequest :: Generic ModifyInstanceCreditSpecificationRequest _
instance showModifyInstanceCreditSpecificationRequest :: Show ModifyInstanceCreditSpecificationRequest where show = genericShow
instance decodeModifyInstanceCreditSpecificationRequest :: Decode ModifyInstanceCreditSpecificationRequest where decode = genericDecode options
instance encodeModifyInstanceCreditSpecificationRequest :: Encode ModifyInstanceCreditSpecificationRequest where encode = genericEncode options

-- | Constructs ModifyInstanceCreditSpecificationRequest from required parameters
newModifyInstanceCreditSpecificationRequest :: InstanceCreditSpecificationListRequest -> ModifyInstanceCreditSpecificationRequest
newModifyInstanceCreditSpecificationRequest _InstanceCreditSpecifications = ModifyInstanceCreditSpecificationRequest { "InstanceCreditSpecifications": _InstanceCreditSpecifications, "ClientToken": Nothing, "DryRun": Nothing }

-- | Constructs ModifyInstanceCreditSpecificationRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyInstanceCreditSpecificationRequest' :: InstanceCreditSpecificationListRequest -> ( { "DryRun" :: Maybe (Boolean) , "ClientToken" :: Maybe (String) , "InstanceCreditSpecifications" :: (InstanceCreditSpecificationListRequest) } -> {"DryRun" :: Maybe (Boolean) , "ClientToken" :: Maybe (String) , "InstanceCreditSpecifications" :: (InstanceCreditSpecificationListRequest) } ) -> ModifyInstanceCreditSpecificationRequest
newModifyInstanceCreditSpecificationRequest' _InstanceCreditSpecifications customize = (ModifyInstanceCreditSpecificationRequest <<< customize) { "InstanceCreditSpecifications": _InstanceCreditSpecifications, "ClientToken": Nothing, "DryRun": Nothing }



newtype ModifyInstanceCreditSpecificationResult = ModifyInstanceCreditSpecificationResult 
  { "SuccessfulInstanceCreditSpecifications" :: Maybe (SuccessfulInstanceCreditSpecificationSet)
  , "UnsuccessfulInstanceCreditSpecifications" :: Maybe (UnsuccessfulInstanceCreditSpecificationSet)
  }
derive instance newtypeModifyInstanceCreditSpecificationResult :: Newtype ModifyInstanceCreditSpecificationResult _
derive instance repGenericModifyInstanceCreditSpecificationResult :: Generic ModifyInstanceCreditSpecificationResult _
instance showModifyInstanceCreditSpecificationResult :: Show ModifyInstanceCreditSpecificationResult where show = genericShow
instance decodeModifyInstanceCreditSpecificationResult :: Decode ModifyInstanceCreditSpecificationResult where decode = genericDecode options
instance encodeModifyInstanceCreditSpecificationResult :: Encode ModifyInstanceCreditSpecificationResult where encode = genericEncode options

-- | Constructs ModifyInstanceCreditSpecificationResult from required parameters
newModifyInstanceCreditSpecificationResult :: ModifyInstanceCreditSpecificationResult
newModifyInstanceCreditSpecificationResult  = ModifyInstanceCreditSpecificationResult { "SuccessfulInstanceCreditSpecifications": Nothing, "UnsuccessfulInstanceCreditSpecifications": Nothing }

-- | Constructs ModifyInstanceCreditSpecificationResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyInstanceCreditSpecificationResult' :: ( { "SuccessfulInstanceCreditSpecifications" :: Maybe (SuccessfulInstanceCreditSpecificationSet) , "UnsuccessfulInstanceCreditSpecifications" :: Maybe (UnsuccessfulInstanceCreditSpecificationSet) } -> {"SuccessfulInstanceCreditSpecifications" :: Maybe (SuccessfulInstanceCreditSpecificationSet) , "UnsuccessfulInstanceCreditSpecifications" :: Maybe (UnsuccessfulInstanceCreditSpecificationSet) } ) -> ModifyInstanceCreditSpecificationResult
newModifyInstanceCreditSpecificationResult'  customize = (ModifyInstanceCreditSpecificationResult <<< customize) { "SuccessfulInstanceCreditSpecifications": Nothing, "UnsuccessfulInstanceCreditSpecifications": Nothing }



-- | <p>Contains the parameters for ModifyInstancePlacement.</p>
newtype ModifyInstancePlacementRequest = ModifyInstancePlacementRequest 
  { "Affinity" :: Maybe (Affinity)
  , "GroupName" :: Maybe (String)
  , "HostId" :: Maybe (String)
  , "InstanceId" :: (String)
  , "Tenancy" :: Maybe (HostTenancy)
  }
derive instance newtypeModifyInstancePlacementRequest :: Newtype ModifyInstancePlacementRequest _
derive instance repGenericModifyInstancePlacementRequest :: Generic ModifyInstancePlacementRequest _
instance showModifyInstancePlacementRequest :: Show ModifyInstancePlacementRequest where show = genericShow
instance decodeModifyInstancePlacementRequest :: Decode ModifyInstancePlacementRequest where decode = genericDecode options
instance encodeModifyInstancePlacementRequest :: Encode ModifyInstancePlacementRequest where encode = genericEncode options

-- | Constructs ModifyInstancePlacementRequest from required parameters
newModifyInstancePlacementRequest :: String -> ModifyInstancePlacementRequest
newModifyInstancePlacementRequest _InstanceId = ModifyInstancePlacementRequest { "InstanceId": _InstanceId, "Affinity": Nothing, "GroupName": Nothing, "HostId": Nothing, "Tenancy": Nothing }

-- | Constructs ModifyInstancePlacementRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyInstancePlacementRequest' :: String -> ( { "Affinity" :: Maybe (Affinity) , "GroupName" :: Maybe (String) , "HostId" :: Maybe (String) , "InstanceId" :: (String) , "Tenancy" :: Maybe (HostTenancy) } -> {"Affinity" :: Maybe (Affinity) , "GroupName" :: Maybe (String) , "HostId" :: Maybe (String) , "InstanceId" :: (String) , "Tenancy" :: Maybe (HostTenancy) } ) -> ModifyInstancePlacementRequest
newModifyInstancePlacementRequest' _InstanceId customize = (ModifyInstancePlacementRequest <<< customize) { "InstanceId": _InstanceId, "Affinity": Nothing, "GroupName": Nothing, "HostId": Nothing, "Tenancy": Nothing }



-- | <p>Contains the output of ModifyInstancePlacement.</p>
newtype ModifyInstancePlacementResult = ModifyInstancePlacementResult 
  { "Return" :: Maybe (Boolean)
  }
derive instance newtypeModifyInstancePlacementResult :: Newtype ModifyInstancePlacementResult _
derive instance repGenericModifyInstancePlacementResult :: Generic ModifyInstancePlacementResult _
instance showModifyInstancePlacementResult :: Show ModifyInstancePlacementResult where show = genericShow
instance decodeModifyInstancePlacementResult :: Decode ModifyInstancePlacementResult where decode = genericDecode options
instance encodeModifyInstancePlacementResult :: Encode ModifyInstancePlacementResult where encode = genericEncode options

-- | Constructs ModifyInstancePlacementResult from required parameters
newModifyInstancePlacementResult :: ModifyInstancePlacementResult
newModifyInstancePlacementResult  = ModifyInstancePlacementResult { "Return": Nothing }

-- | Constructs ModifyInstancePlacementResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyInstancePlacementResult' :: ( { "Return" :: Maybe (Boolean) } -> {"Return" :: Maybe (Boolean) } ) -> ModifyInstancePlacementResult
newModifyInstancePlacementResult'  customize = (ModifyInstancePlacementResult <<< customize) { "Return": Nothing }



newtype ModifyLaunchTemplateRequest = ModifyLaunchTemplateRequest 
  { "DryRun" :: Maybe (Boolean)
  , "ClientToken" :: Maybe (String)
  , "LaunchTemplateId" :: Maybe (String)
  , "LaunchTemplateName" :: Maybe (LaunchTemplateName)
  , "DefaultVersion" :: Maybe (String)
  }
derive instance newtypeModifyLaunchTemplateRequest :: Newtype ModifyLaunchTemplateRequest _
derive instance repGenericModifyLaunchTemplateRequest :: Generic ModifyLaunchTemplateRequest _
instance showModifyLaunchTemplateRequest :: Show ModifyLaunchTemplateRequest where show = genericShow
instance decodeModifyLaunchTemplateRequest :: Decode ModifyLaunchTemplateRequest where decode = genericDecode options
instance encodeModifyLaunchTemplateRequest :: Encode ModifyLaunchTemplateRequest where encode = genericEncode options

-- | Constructs ModifyLaunchTemplateRequest from required parameters
newModifyLaunchTemplateRequest :: ModifyLaunchTemplateRequest
newModifyLaunchTemplateRequest  = ModifyLaunchTemplateRequest { "ClientToken": Nothing, "DefaultVersion": Nothing, "DryRun": Nothing, "LaunchTemplateId": Nothing, "LaunchTemplateName": Nothing }

-- | Constructs ModifyLaunchTemplateRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyLaunchTemplateRequest' :: ( { "DryRun" :: Maybe (Boolean) , "ClientToken" :: Maybe (String) , "LaunchTemplateId" :: Maybe (String) , "LaunchTemplateName" :: Maybe (LaunchTemplateName) , "DefaultVersion" :: Maybe (String) } -> {"DryRun" :: Maybe (Boolean) , "ClientToken" :: Maybe (String) , "LaunchTemplateId" :: Maybe (String) , "LaunchTemplateName" :: Maybe (LaunchTemplateName) , "DefaultVersion" :: Maybe (String) } ) -> ModifyLaunchTemplateRequest
newModifyLaunchTemplateRequest'  customize = (ModifyLaunchTemplateRequest <<< customize) { "ClientToken": Nothing, "DefaultVersion": Nothing, "DryRun": Nothing, "LaunchTemplateId": Nothing, "LaunchTemplateName": Nothing }



newtype ModifyLaunchTemplateResult = ModifyLaunchTemplateResult 
  { "LaunchTemplate" :: Maybe (LaunchTemplate)
  }
derive instance newtypeModifyLaunchTemplateResult :: Newtype ModifyLaunchTemplateResult _
derive instance repGenericModifyLaunchTemplateResult :: Generic ModifyLaunchTemplateResult _
instance showModifyLaunchTemplateResult :: Show ModifyLaunchTemplateResult where show = genericShow
instance decodeModifyLaunchTemplateResult :: Decode ModifyLaunchTemplateResult where decode = genericDecode options
instance encodeModifyLaunchTemplateResult :: Encode ModifyLaunchTemplateResult where encode = genericEncode options

-- | Constructs ModifyLaunchTemplateResult from required parameters
newModifyLaunchTemplateResult :: ModifyLaunchTemplateResult
newModifyLaunchTemplateResult  = ModifyLaunchTemplateResult { "LaunchTemplate": Nothing }

-- | Constructs ModifyLaunchTemplateResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyLaunchTemplateResult' :: ( { "LaunchTemplate" :: Maybe (LaunchTemplate) } -> {"LaunchTemplate" :: Maybe (LaunchTemplate) } ) -> ModifyLaunchTemplateResult
newModifyLaunchTemplateResult'  customize = (ModifyLaunchTemplateResult <<< customize) { "LaunchTemplate": Nothing }



-- | <p>Contains the parameters for ModifyNetworkInterfaceAttribute.</p>
newtype ModifyNetworkInterfaceAttributeRequest = ModifyNetworkInterfaceAttributeRequest 
  { "Attachment" :: Maybe (NetworkInterfaceAttachmentChanges)
  , "Description" :: Maybe (AttributeValue)
  , "DryRun" :: Maybe (Boolean)
  , "Groups" :: Maybe (SecurityGroupIdStringList)
  , "NetworkInterfaceId" :: (String)
  , "SourceDestCheck" :: Maybe (AttributeBooleanValue)
  }
derive instance newtypeModifyNetworkInterfaceAttributeRequest :: Newtype ModifyNetworkInterfaceAttributeRequest _
derive instance repGenericModifyNetworkInterfaceAttributeRequest :: Generic ModifyNetworkInterfaceAttributeRequest _
instance showModifyNetworkInterfaceAttributeRequest :: Show ModifyNetworkInterfaceAttributeRequest where show = genericShow
instance decodeModifyNetworkInterfaceAttributeRequest :: Decode ModifyNetworkInterfaceAttributeRequest where decode = genericDecode options
instance encodeModifyNetworkInterfaceAttributeRequest :: Encode ModifyNetworkInterfaceAttributeRequest where encode = genericEncode options

-- | Constructs ModifyNetworkInterfaceAttributeRequest from required parameters
newModifyNetworkInterfaceAttributeRequest :: String -> ModifyNetworkInterfaceAttributeRequest
newModifyNetworkInterfaceAttributeRequest _NetworkInterfaceId = ModifyNetworkInterfaceAttributeRequest { "NetworkInterfaceId": _NetworkInterfaceId, "Attachment": Nothing, "Description": Nothing, "DryRun": Nothing, "Groups": Nothing, "SourceDestCheck": Nothing }

-- | Constructs ModifyNetworkInterfaceAttributeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyNetworkInterfaceAttributeRequest' :: String -> ( { "Attachment" :: Maybe (NetworkInterfaceAttachmentChanges) , "Description" :: Maybe (AttributeValue) , "DryRun" :: Maybe (Boolean) , "Groups" :: Maybe (SecurityGroupIdStringList) , "NetworkInterfaceId" :: (String) , "SourceDestCheck" :: Maybe (AttributeBooleanValue) } -> {"Attachment" :: Maybe (NetworkInterfaceAttachmentChanges) , "Description" :: Maybe (AttributeValue) , "DryRun" :: Maybe (Boolean) , "Groups" :: Maybe (SecurityGroupIdStringList) , "NetworkInterfaceId" :: (String) , "SourceDestCheck" :: Maybe (AttributeBooleanValue) } ) -> ModifyNetworkInterfaceAttributeRequest
newModifyNetworkInterfaceAttributeRequest' _NetworkInterfaceId customize = (ModifyNetworkInterfaceAttributeRequest <<< customize) { "NetworkInterfaceId": _NetworkInterfaceId, "Attachment": Nothing, "Description": Nothing, "DryRun": Nothing, "Groups": Nothing, "SourceDestCheck": Nothing }



-- | <p>Contains the parameters for ModifyReservedInstances.</p>
newtype ModifyReservedInstancesRequest = ModifyReservedInstancesRequest 
  { "ReservedInstancesIds" :: (ReservedInstancesIdStringList)
  , "ClientToken" :: Maybe (String)
  , "TargetConfigurations" :: (ReservedInstancesConfigurationList)
  }
derive instance newtypeModifyReservedInstancesRequest :: Newtype ModifyReservedInstancesRequest _
derive instance repGenericModifyReservedInstancesRequest :: Generic ModifyReservedInstancesRequest _
instance showModifyReservedInstancesRequest :: Show ModifyReservedInstancesRequest where show = genericShow
instance decodeModifyReservedInstancesRequest :: Decode ModifyReservedInstancesRequest where decode = genericDecode options
instance encodeModifyReservedInstancesRequest :: Encode ModifyReservedInstancesRequest where encode = genericEncode options

-- | Constructs ModifyReservedInstancesRequest from required parameters
newModifyReservedInstancesRequest :: ReservedInstancesIdStringList -> ReservedInstancesConfigurationList -> ModifyReservedInstancesRequest
newModifyReservedInstancesRequest _ReservedInstancesIds _TargetConfigurations = ModifyReservedInstancesRequest { "ReservedInstancesIds": _ReservedInstancesIds, "TargetConfigurations": _TargetConfigurations, "ClientToken": Nothing }

-- | Constructs ModifyReservedInstancesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyReservedInstancesRequest' :: ReservedInstancesIdStringList -> ReservedInstancesConfigurationList -> ( { "ReservedInstancesIds" :: (ReservedInstancesIdStringList) , "ClientToken" :: Maybe (String) , "TargetConfigurations" :: (ReservedInstancesConfigurationList) } -> {"ReservedInstancesIds" :: (ReservedInstancesIdStringList) , "ClientToken" :: Maybe (String) , "TargetConfigurations" :: (ReservedInstancesConfigurationList) } ) -> ModifyReservedInstancesRequest
newModifyReservedInstancesRequest' _ReservedInstancesIds _TargetConfigurations customize = (ModifyReservedInstancesRequest <<< customize) { "ReservedInstancesIds": _ReservedInstancesIds, "TargetConfigurations": _TargetConfigurations, "ClientToken": Nothing }



-- | <p>Contains the output of ModifyReservedInstances.</p>
newtype ModifyReservedInstancesResult = ModifyReservedInstancesResult 
  { "ReservedInstancesModificationId" :: Maybe (String)
  }
derive instance newtypeModifyReservedInstancesResult :: Newtype ModifyReservedInstancesResult _
derive instance repGenericModifyReservedInstancesResult :: Generic ModifyReservedInstancesResult _
instance showModifyReservedInstancesResult :: Show ModifyReservedInstancesResult where show = genericShow
instance decodeModifyReservedInstancesResult :: Decode ModifyReservedInstancesResult where decode = genericDecode options
instance encodeModifyReservedInstancesResult :: Encode ModifyReservedInstancesResult where encode = genericEncode options

-- | Constructs ModifyReservedInstancesResult from required parameters
newModifyReservedInstancesResult :: ModifyReservedInstancesResult
newModifyReservedInstancesResult  = ModifyReservedInstancesResult { "ReservedInstancesModificationId": Nothing }

-- | Constructs ModifyReservedInstancesResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyReservedInstancesResult' :: ( { "ReservedInstancesModificationId" :: Maybe (String) } -> {"ReservedInstancesModificationId" :: Maybe (String) } ) -> ModifyReservedInstancesResult
newModifyReservedInstancesResult'  customize = (ModifyReservedInstancesResult <<< customize) { "ReservedInstancesModificationId": Nothing }



-- | <p>Contains the parameters for ModifySnapshotAttribute.</p>
newtype ModifySnapshotAttributeRequest = ModifySnapshotAttributeRequest 
  { "Attribute" :: Maybe (SnapshotAttributeName)
  , "CreateVolumePermission" :: Maybe (CreateVolumePermissionModifications)
  , "GroupNames" :: Maybe (GroupNameStringList)
  , "OperationType" :: Maybe (OperationType)
  , "SnapshotId" :: (String)
  , "UserIds" :: Maybe (UserIdStringList)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeModifySnapshotAttributeRequest :: Newtype ModifySnapshotAttributeRequest _
derive instance repGenericModifySnapshotAttributeRequest :: Generic ModifySnapshotAttributeRequest _
instance showModifySnapshotAttributeRequest :: Show ModifySnapshotAttributeRequest where show = genericShow
instance decodeModifySnapshotAttributeRequest :: Decode ModifySnapshotAttributeRequest where decode = genericDecode options
instance encodeModifySnapshotAttributeRequest :: Encode ModifySnapshotAttributeRequest where encode = genericEncode options

-- | Constructs ModifySnapshotAttributeRequest from required parameters
newModifySnapshotAttributeRequest :: String -> ModifySnapshotAttributeRequest
newModifySnapshotAttributeRequest _SnapshotId = ModifySnapshotAttributeRequest { "SnapshotId": _SnapshotId, "Attribute": Nothing, "CreateVolumePermission": Nothing, "DryRun": Nothing, "GroupNames": Nothing, "OperationType": Nothing, "UserIds": Nothing }

-- | Constructs ModifySnapshotAttributeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifySnapshotAttributeRequest' :: String -> ( { "Attribute" :: Maybe (SnapshotAttributeName) , "CreateVolumePermission" :: Maybe (CreateVolumePermissionModifications) , "GroupNames" :: Maybe (GroupNameStringList) , "OperationType" :: Maybe (OperationType) , "SnapshotId" :: (String) , "UserIds" :: Maybe (UserIdStringList) , "DryRun" :: Maybe (Boolean) } -> {"Attribute" :: Maybe (SnapshotAttributeName) , "CreateVolumePermission" :: Maybe (CreateVolumePermissionModifications) , "GroupNames" :: Maybe (GroupNameStringList) , "OperationType" :: Maybe (OperationType) , "SnapshotId" :: (String) , "UserIds" :: Maybe (UserIdStringList) , "DryRun" :: Maybe (Boolean) } ) -> ModifySnapshotAttributeRequest
newModifySnapshotAttributeRequest' _SnapshotId customize = (ModifySnapshotAttributeRequest <<< customize) { "SnapshotId": _SnapshotId, "Attribute": Nothing, "CreateVolumePermission": Nothing, "DryRun": Nothing, "GroupNames": Nothing, "OperationType": Nothing, "UserIds": Nothing }



-- | <p>Contains the parameters for ModifySpotFleetRequest.</p>
newtype ModifySpotFleetRequestRequest = ModifySpotFleetRequestRequest 
  { "ExcessCapacityTerminationPolicy" :: Maybe (ExcessCapacityTerminationPolicy)
  , "SpotFleetRequestId" :: (String)
  , "TargetCapacity" :: Maybe (Int)
  }
derive instance newtypeModifySpotFleetRequestRequest :: Newtype ModifySpotFleetRequestRequest _
derive instance repGenericModifySpotFleetRequestRequest :: Generic ModifySpotFleetRequestRequest _
instance showModifySpotFleetRequestRequest :: Show ModifySpotFleetRequestRequest where show = genericShow
instance decodeModifySpotFleetRequestRequest :: Decode ModifySpotFleetRequestRequest where decode = genericDecode options
instance encodeModifySpotFleetRequestRequest :: Encode ModifySpotFleetRequestRequest where encode = genericEncode options

-- | Constructs ModifySpotFleetRequestRequest from required parameters
newModifySpotFleetRequestRequest :: String -> ModifySpotFleetRequestRequest
newModifySpotFleetRequestRequest _SpotFleetRequestId = ModifySpotFleetRequestRequest { "SpotFleetRequestId": _SpotFleetRequestId, "ExcessCapacityTerminationPolicy": Nothing, "TargetCapacity": Nothing }

-- | Constructs ModifySpotFleetRequestRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifySpotFleetRequestRequest' :: String -> ( { "ExcessCapacityTerminationPolicy" :: Maybe (ExcessCapacityTerminationPolicy) , "SpotFleetRequestId" :: (String) , "TargetCapacity" :: Maybe (Int) } -> {"ExcessCapacityTerminationPolicy" :: Maybe (ExcessCapacityTerminationPolicy) , "SpotFleetRequestId" :: (String) , "TargetCapacity" :: Maybe (Int) } ) -> ModifySpotFleetRequestRequest
newModifySpotFleetRequestRequest' _SpotFleetRequestId customize = (ModifySpotFleetRequestRequest <<< customize) { "SpotFleetRequestId": _SpotFleetRequestId, "ExcessCapacityTerminationPolicy": Nothing, "TargetCapacity": Nothing }



-- | <p>Contains the output of ModifySpotFleetRequest.</p>
newtype ModifySpotFleetRequestResponse = ModifySpotFleetRequestResponse 
  { "Return" :: Maybe (Boolean)
  }
derive instance newtypeModifySpotFleetRequestResponse :: Newtype ModifySpotFleetRequestResponse _
derive instance repGenericModifySpotFleetRequestResponse :: Generic ModifySpotFleetRequestResponse _
instance showModifySpotFleetRequestResponse :: Show ModifySpotFleetRequestResponse where show = genericShow
instance decodeModifySpotFleetRequestResponse :: Decode ModifySpotFleetRequestResponse where decode = genericDecode options
instance encodeModifySpotFleetRequestResponse :: Encode ModifySpotFleetRequestResponse where encode = genericEncode options

-- | Constructs ModifySpotFleetRequestResponse from required parameters
newModifySpotFleetRequestResponse :: ModifySpotFleetRequestResponse
newModifySpotFleetRequestResponse  = ModifySpotFleetRequestResponse { "Return": Nothing }

-- | Constructs ModifySpotFleetRequestResponse's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifySpotFleetRequestResponse' :: ( { "Return" :: Maybe (Boolean) } -> {"Return" :: Maybe (Boolean) } ) -> ModifySpotFleetRequestResponse
newModifySpotFleetRequestResponse'  customize = (ModifySpotFleetRequestResponse <<< customize) { "Return": Nothing }



-- | <p>Contains the parameters for ModifySubnetAttribute.</p>
newtype ModifySubnetAttributeRequest = ModifySubnetAttributeRequest 
  { "AssignIpv6AddressOnCreation" :: Maybe (AttributeBooleanValue)
  , "MapPublicIpOnLaunch" :: Maybe (AttributeBooleanValue)
  , "SubnetId" :: (String)
  }
derive instance newtypeModifySubnetAttributeRequest :: Newtype ModifySubnetAttributeRequest _
derive instance repGenericModifySubnetAttributeRequest :: Generic ModifySubnetAttributeRequest _
instance showModifySubnetAttributeRequest :: Show ModifySubnetAttributeRequest where show = genericShow
instance decodeModifySubnetAttributeRequest :: Decode ModifySubnetAttributeRequest where decode = genericDecode options
instance encodeModifySubnetAttributeRequest :: Encode ModifySubnetAttributeRequest where encode = genericEncode options

-- | Constructs ModifySubnetAttributeRequest from required parameters
newModifySubnetAttributeRequest :: String -> ModifySubnetAttributeRequest
newModifySubnetAttributeRequest _SubnetId = ModifySubnetAttributeRequest { "SubnetId": _SubnetId, "AssignIpv6AddressOnCreation": Nothing, "MapPublicIpOnLaunch": Nothing }

-- | Constructs ModifySubnetAttributeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifySubnetAttributeRequest' :: String -> ( { "AssignIpv6AddressOnCreation" :: Maybe (AttributeBooleanValue) , "MapPublicIpOnLaunch" :: Maybe (AttributeBooleanValue) , "SubnetId" :: (String) } -> {"AssignIpv6AddressOnCreation" :: Maybe (AttributeBooleanValue) , "MapPublicIpOnLaunch" :: Maybe (AttributeBooleanValue) , "SubnetId" :: (String) } ) -> ModifySubnetAttributeRequest
newModifySubnetAttributeRequest' _SubnetId customize = (ModifySubnetAttributeRequest <<< customize) { "SubnetId": _SubnetId, "AssignIpv6AddressOnCreation": Nothing, "MapPublicIpOnLaunch": Nothing }



-- | <p>Contains the parameters for ModifyVolumeAttribute.</p>
newtype ModifyVolumeAttributeRequest = ModifyVolumeAttributeRequest 
  { "AutoEnableIO" :: Maybe (AttributeBooleanValue)
  , "VolumeId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeModifyVolumeAttributeRequest :: Newtype ModifyVolumeAttributeRequest _
derive instance repGenericModifyVolumeAttributeRequest :: Generic ModifyVolumeAttributeRequest _
instance showModifyVolumeAttributeRequest :: Show ModifyVolumeAttributeRequest where show = genericShow
instance decodeModifyVolumeAttributeRequest :: Decode ModifyVolumeAttributeRequest where decode = genericDecode options
instance encodeModifyVolumeAttributeRequest :: Encode ModifyVolumeAttributeRequest where encode = genericEncode options

-- | Constructs ModifyVolumeAttributeRequest from required parameters
newModifyVolumeAttributeRequest :: String -> ModifyVolumeAttributeRequest
newModifyVolumeAttributeRequest _VolumeId = ModifyVolumeAttributeRequest { "VolumeId": _VolumeId, "AutoEnableIO": Nothing, "DryRun": Nothing }

-- | Constructs ModifyVolumeAttributeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyVolumeAttributeRequest' :: String -> ( { "AutoEnableIO" :: Maybe (AttributeBooleanValue) , "VolumeId" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"AutoEnableIO" :: Maybe (AttributeBooleanValue) , "VolumeId" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> ModifyVolumeAttributeRequest
newModifyVolumeAttributeRequest' _VolumeId customize = (ModifyVolumeAttributeRequest <<< customize) { "VolumeId": _VolumeId, "AutoEnableIO": Nothing, "DryRun": Nothing }



newtype ModifyVolumeRequest = ModifyVolumeRequest 
  { "DryRun" :: Maybe (Boolean)
  , "VolumeId" :: (String)
  , "Size" :: Maybe (Int)
  , "VolumeType" :: Maybe (VolumeType)
  , "Iops" :: Maybe (Int)
  }
derive instance newtypeModifyVolumeRequest :: Newtype ModifyVolumeRequest _
derive instance repGenericModifyVolumeRequest :: Generic ModifyVolumeRequest _
instance showModifyVolumeRequest :: Show ModifyVolumeRequest where show = genericShow
instance decodeModifyVolumeRequest :: Decode ModifyVolumeRequest where decode = genericDecode options
instance encodeModifyVolumeRequest :: Encode ModifyVolumeRequest where encode = genericEncode options

-- | Constructs ModifyVolumeRequest from required parameters
newModifyVolumeRequest :: String -> ModifyVolumeRequest
newModifyVolumeRequest _VolumeId = ModifyVolumeRequest { "VolumeId": _VolumeId, "DryRun": Nothing, "Iops": Nothing, "Size": Nothing, "VolumeType": Nothing }

-- | Constructs ModifyVolumeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyVolumeRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "VolumeId" :: (String) , "Size" :: Maybe (Int) , "VolumeType" :: Maybe (VolumeType) , "Iops" :: Maybe (Int) } -> {"DryRun" :: Maybe (Boolean) , "VolumeId" :: (String) , "Size" :: Maybe (Int) , "VolumeType" :: Maybe (VolumeType) , "Iops" :: Maybe (Int) } ) -> ModifyVolumeRequest
newModifyVolumeRequest' _VolumeId customize = (ModifyVolumeRequest <<< customize) { "VolumeId": _VolumeId, "DryRun": Nothing, "Iops": Nothing, "Size": Nothing, "VolumeType": Nothing }



newtype ModifyVolumeResult = ModifyVolumeResult 
  { "VolumeModification" :: Maybe (VolumeModification)
  }
derive instance newtypeModifyVolumeResult :: Newtype ModifyVolumeResult _
derive instance repGenericModifyVolumeResult :: Generic ModifyVolumeResult _
instance showModifyVolumeResult :: Show ModifyVolumeResult where show = genericShow
instance decodeModifyVolumeResult :: Decode ModifyVolumeResult where decode = genericDecode options
instance encodeModifyVolumeResult :: Encode ModifyVolumeResult where encode = genericEncode options

-- | Constructs ModifyVolumeResult from required parameters
newModifyVolumeResult :: ModifyVolumeResult
newModifyVolumeResult  = ModifyVolumeResult { "VolumeModification": Nothing }

-- | Constructs ModifyVolumeResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyVolumeResult' :: ( { "VolumeModification" :: Maybe (VolumeModification) } -> {"VolumeModification" :: Maybe (VolumeModification) } ) -> ModifyVolumeResult
newModifyVolumeResult'  customize = (ModifyVolumeResult <<< customize) { "VolumeModification": Nothing }



-- | <p>Contains the parameters for ModifyVpcAttribute.</p>
newtype ModifyVpcAttributeRequest = ModifyVpcAttributeRequest 
  { "EnableDnsHostnames" :: Maybe (AttributeBooleanValue)
  , "EnableDnsSupport" :: Maybe (AttributeBooleanValue)
  , "VpcId" :: (String)
  }
derive instance newtypeModifyVpcAttributeRequest :: Newtype ModifyVpcAttributeRequest _
derive instance repGenericModifyVpcAttributeRequest :: Generic ModifyVpcAttributeRequest _
instance showModifyVpcAttributeRequest :: Show ModifyVpcAttributeRequest where show = genericShow
instance decodeModifyVpcAttributeRequest :: Decode ModifyVpcAttributeRequest where decode = genericDecode options
instance encodeModifyVpcAttributeRequest :: Encode ModifyVpcAttributeRequest where encode = genericEncode options

-- | Constructs ModifyVpcAttributeRequest from required parameters
newModifyVpcAttributeRequest :: String -> ModifyVpcAttributeRequest
newModifyVpcAttributeRequest _VpcId = ModifyVpcAttributeRequest { "VpcId": _VpcId, "EnableDnsHostnames": Nothing, "EnableDnsSupport": Nothing }

-- | Constructs ModifyVpcAttributeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyVpcAttributeRequest' :: String -> ( { "EnableDnsHostnames" :: Maybe (AttributeBooleanValue) , "EnableDnsSupport" :: Maybe (AttributeBooleanValue) , "VpcId" :: (String) } -> {"EnableDnsHostnames" :: Maybe (AttributeBooleanValue) , "EnableDnsSupport" :: Maybe (AttributeBooleanValue) , "VpcId" :: (String) } ) -> ModifyVpcAttributeRequest
newModifyVpcAttributeRequest' _VpcId customize = (ModifyVpcAttributeRequest <<< customize) { "VpcId": _VpcId, "EnableDnsHostnames": Nothing, "EnableDnsSupport": Nothing }



newtype ModifyVpcEndpointConnectionNotificationRequest = ModifyVpcEndpointConnectionNotificationRequest 
  { "DryRun" :: Maybe (Boolean)
  , "ConnectionNotificationId" :: (String)
  , "ConnectionNotificationArn" :: Maybe (String)
  , "ConnectionEvents" :: Maybe (ValueStringList)
  }
derive instance newtypeModifyVpcEndpointConnectionNotificationRequest :: Newtype ModifyVpcEndpointConnectionNotificationRequest _
derive instance repGenericModifyVpcEndpointConnectionNotificationRequest :: Generic ModifyVpcEndpointConnectionNotificationRequest _
instance showModifyVpcEndpointConnectionNotificationRequest :: Show ModifyVpcEndpointConnectionNotificationRequest where show = genericShow
instance decodeModifyVpcEndpointConnectionNotificationRequest :: Decode ModifyVpcEndpointConnectionNotificationRequest where decode = genericDecode options
instance encodeModifyVpcEndpointConnectionNotificationRequest :: Encode ModifyVpcEndpointConnectionNotificationRequest where encode = genericEncode options

-- | Constructs ModifyVpcEndpointConnectionNotificationRequest from required parameters
newModifyVpcEndpointConnectionNotificationRequest :: String -> ModifyVpcEndpointConnectionNotificationRequest
newModifyVpcEndpointConnectionNotificationRequest _ConnectionNotificationId = ModifyVpcEndpointConnectionNotificationRequest { "ConnectionNotificationId": _ConnectionNotificationId, "ConnectionEvents": Nothing, "ConnectionNotificationArn": Nothing, "DryRun": Nothing }

-- | Constructs ModifyVpcEndpointConnectionNotificationRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyVpcEndpointConnectionNotificationRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "ConnectionNotificationId" :: (String) , "ConnectionNotificationArn" :: Maybe (String) , "ConnectionEvents" :: Maybe (ValueStringList) } -> {"DryRun" :: Maybe (Boolean) , "ConnectionNotificationId" :: (String) , "ConnectionNotificationArn" :: Maybe (String) , "ConnectionEvents" :: Maybe (ValueStringList) } ) -> ModifyVpcEndpointConnectionNotificationRequest
newModifyVpcEndpointConnectionNotificationRequest' _ConnectionNotificationId customize = (ModifyVpcEndpointConnectionNotificationRequest <<< customize) { "ConnectionNotificationId": _ConnectionNotificationId, "ConnectionEvents": Nothing, "ConnectionNotificationArn": Nothing, "DryRun": Nothing }



newtype ModifyVpcEndpointConnectionNotificationResult = ModifyVpcEndpointConnectionNotificationResult 
  { "ReturnValue" :: Maybe (Boolean)
  }
derive instance newtypeModifyVpcEndpointConnectionNotificationResult :: Newtype ModifyVpcEndpointConnectionNotificationResult _
derive instance repGenericModifyVpcEndpointConnectionNotificationResult :: Generic ModifyVpcEndpointConnectionNotificationResult _
instance showModifyVpcEndpointConnectionNotificationResult :: Show ModifyVpcEndpointConnectionNotificationResult where show = genericShow
instance decodeModifyVpcEndpointConnectionNotificationResult :: Decode ModifyVpcEndpointConnectionNotificationResult where decode = genericDecode options
instance encodeModifyVpcEndpointConnectionNotificationResult :: Encode ModifyVpcEndpointConnectionNotificationResult where encode = genericEncode options

-- | Constructs ModifyVpcEndpointConnectionNotificationResult from required parameters
newModifyVpcEndpointConnectionNotificationResult :: ModifyVpcEndpointConnectionNotificationResult
newModifyVpcEndpointConnectionNotificationResult  = ModifyVpcEndpointConnectionNotificationResult { "ReturnValue": Nothing }

-- | Constructs ModifyVpcEndpointConnectionNotificationResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyVpcEndpointConnectionNotificationResult' :: ( { "ReturnValue" :: Maybe (Boolean) } -> {"ReturnValue" :: Maybe (Boolean) } ) -> ModifyVpcEndpointConnectionNotificationResult
newModifyVpcEndpointConnectionNotificationResult'  customize = (ModifyVpcEndpointConnectionNotificationResult <<< customize) { "ReturnValue": Nothing }



-- | <p>Contains the parameters for ModifyVpcEndpoint.</p>
newtype ModifyVpcEndpointRequest = ModifyVpcEndpointRequest 
  { "DryRun" :: Maybe (Boolean)
  , "VpcEndpointId" :: (String)
  , "ResetPolicy" :: Maybe (Boolean)
  , "PolicyDocument" :: Maybe (String)
  , "AddRouteTableIds" :: Maybe (ValueStringList)
  , "RemoveRouteTableIds" :: Maybe (ValueStringList)
  , "AddSubnetIds" :: Maybe (ValueStringList)
  , "RemoveSubnetIds" :: Maybe (ValueStringList)
  , "AddSecurityGroupIds" :: Maybe (ValueStringList)
  , "RemoveSecurityGroupIds" :: Maybe (ValueStringList)
  , "PrivateDnsEnabled" :: Maybe (Boolean)
  }
derive instance newtypeModifyVpcEndpointRequest :: Newtype ModifyVpcEndpointRequest _
derive instance repGenericModifyVpcEndpointRequest :: Generic ModifyVpcEndpointRequest _
instance showModifyVpcEndpointRequest :: Show ModifyVpcEndpointRequest where show = genericShow
instance decodeModifyVpcEndpointRequest :: Decode ModifyVpcEndpointRequest where decode = genericDecode options
instance encodeModifyVpcEndpointRequest :: Encode ModifyVpcEndpointRequest where encode = genericEncode options

-- | Constructs ModifyVpcEndpointRequest from required parameters
newModifyVpcEndpointRequest :: String -> ModifyVpcEndpointRequest
newModifyVpcEndpointRequest _VpcEndpointId = ModifyVpcEndpointRequest { "VpcEndpointId": _VpcEndpointId, "AddRouteTableIds": Nothing, "AddSecurityGroupIds": Nothing, "AddSubnetIds": Nothing, "DryRun": Nothing, "PolicyDocument": Nothing, "PrivateDnsEnabled": Nothing, "RemoveRouteTableIds": Nothing, "RemoveSecurityGroupIds": Nothing, "RemoveSubnetIds": Nothing, "ResetPolicy": Nothing }

-- | Constructs ModifyVpcEndpointRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyVpcEndpointRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "VpcEndpointId" :: (String) , "ResetPolicy" :: Maybe (Boolean) , "PolicyDocument" :: Maybe (String) , "AddRouteTableIds" :: Maybe (ValueStringList) , "RemoveRouteTableIds" :: Maybe (ValueStringList) , "AddSubnetIds" :: Maybe (ValueStringList) , "RemoveSubnetIds" :: Maybe (ValueStringList) , "AddSecurityGroupIds" :: Maybe (ValueStringList) , "RemoveSecurityGroupIds" :: Maybe (ValueStringList) , "PrivateDnsEnabled" :: Maybe (Boolean) } -> {"DryRun" :: Maybe (Boolean) , "VpcEndpointId" :: (String) , "ResetPolicy" :: Maybe (Boolean) , "PolicyDocument" :: Maybe (String) , "AddRouteTableIds" :: Maybe (ValueStringList) , "RemoveRouteTableIds" :: Maybe (ValueStringList) , "AddSubnetIds" :: Maybe (ValueStringList) , "RemoveSubnetIds" :: Maybe (ValueStringList) , "AddSecurityGroupIds" :: Maybe (ValueStringList) , "RemoveSecurityGroupIds" :: Maybe (ValueStringList) , "PrivateDnsEnabled" :: Maybe (Boolean) } ) -> ModifyVpcEndpointRequest
newModifyVpcEndpointRequest' _VpcEndpointId customize = (ModifyVpcEndpointRequest <<< customize) { "VpcEndpointId": _VpcEndpointId, "AddRouteTableIds": Nothing, "AddSecurityGroupIds": Nothing, "AddSubnetIds": Nothing, "DryRun": Nothing, "PolicyDocument": Nothing, "PrivateDnsEnabled": Nothing, "RemoveRouteTableIds": Nothing, "RemoveSecurityGroupIds": Nothing, "RemoveSubnetIds": Nothing, "ResetPolicy": Nothing }



newtype ModifyVpcEndpointResult = ModifyVpcEndpointResult 
  { "Return" :: Maybe (Boolean)
  }
derive instance newtypeModifyVpcEndpointResult :: Newtype ModifyVpcEndpointResult _
derive instance repGenericModifyVpcEndpointResult :: Generic ModifyVpcEndpointResult _
instance showModifyVpcEndpointResult :: Show ModifyVpcEndpointResult where show = genericShow
instance decodeModifyVpcEndpointResult :: Decode ModifyVpcEndpointResult where decode = genericDecode options
instance encodeModifyVpcEndpointResult :: Encode ModifyVpcEndpointResult where encode = genericEncode options

-- | Constructs ModifyVpcEndpointResult from required parameters
newModifyVpcEndpointResult :: ModifyVpcEndpointResult
newModifyVpcEndpointResult  = ModifyVpcEndpointResult { "Return": Nothing }

-- | Constructs ModifyVpcEndpointResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyVpcEndpointResult' :: ( { "Return" :: Maybe (Boolean) } -> {"Return" :: Maybe (Boolean) } ) -> ModifyVpcEndpointResult
newModifyVpcEndpointResult'  customize = (ModifyVpcEndpointResult <<< customize) { "Return": Nothing }



newtype ModifyVpcEndpointServiceConfigurationRequest = ModifyVpcEndpointServiceConfigurationRequest 
  { "DryRun" :: Maybe (Boolean)
  , "ServiceId" :: (String)
  , "AcceptanceRequired" :: Maybe (Boolean)
  , "AddNetworkLoadBalancerArns" :: Maybe (ValueStringList)
  , "RemoveNetworkLoadBalancerArns" :: Maybe (ValueStringList)
  }
derive instance newtypeModifyVpcEndpointServiceConfigurationRequest :: Newtype ModifyVpcEndpointServiceConfigurationRequest _
derive instance repGenericModifyVpcEndpointServiceConfigurationRequest :: Generic ModifyVpcEndpointServiceConfigurationRequest _
instance showModifyVpcEndpointServiceConfigurationRequest :: Show ModifyVpcEndpointServiceConfigurationRequest where show = genericShow
instance decodeModifyVpcEndpointServiceConfigurationRequest :: Decode ModifyVpcEndpointServiceConfigurationRequest where decode = genericDecode options
instance encodeModifyVpcEndpointServiceConfigurationRequest :: Encode ModifyVpcEndpointServiceConfigurationRequest where encode = genericEncode options

-- | Constructs ModifyVpcEndpointServiceConfigurationRequest from required parameters
newModifyVpcEndpointServiceConfigurationRequest :: String -> ModifyVpcEndpointServiceConfigurationRequest
newModifyVpcEndpointServiceConfigurationRequest _ServiceId = ModifyVpcEndpointServiceConfigurationRequest { "ServiceId": _ServiceId, "AcceptanceRequired": Nothing, "AddNetworkLoadBalancerArns": Nothing, "DryRun": Nothing, "RemoveNetworkLoadBalancerArns": Nothing }

-- | Constructs ModifyVpcEndpointServiceConfigurationRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyVpcEndpointServiceConfigurationRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "ServiceId" :: (String) , "AcceptanceRequired" :: Maybe (Boolean) , "AddNetworkLoadBalancerArns" :: Maybe (ValueStringList) , "RemoveNetworkLoadBalancerArns" :: Maybe (ValueStringList) } -> {"DryRun" :: Maybe (Boolean) , "ServiceId" :: (String) , "AcceptanceRequired" :: Maybe (Boolean) , "AddNetworkLoadBalancerArns" :: Maybe (ValueStringList) , "RemoveNetworkLoadBalancerArns" :: Maybe (ValueStringList) } ) -> ModifyVpcEndpointServiceConfigurationRequest
newModifyVpcEndpointServiceConfigurationRequest' _ServiceId customize = (ModifyVpcEndpointServiceConfigurationRequest <<< customize) { "ServiceId": _ServiceId, "AcceptanceRequired": Nothing, "AddNetworkLoadBalancerArns": Nothing, "DryRun": Nothing, "RemoveNetworkLoadBalancerArns": Nothing }



newtype ModifyVpcEndpointServiceConfigurationResult = ModifyVpcEndpointServiceConfigurationResult 
  { "Return" :: Maybe (Boolean)
  }
derive instance newtypeModifyVpcEndpointServiceConfigurationResult :: Newtype ModifyVpcEndpointServiceConfigurationResult _
derive instance repGenericModifyVpcEndpointServiceConfigurationResult :: Generic ModifyVpcEndpointServiceConfigurationResult _
instance showModifyVpcEndpointServiceConfigurationResult :: Show ModifyVpcEndpointServiceConfigurationResult where show = genericShow
instance decodeModifyVpcEndpointServiceConfigurationResult :: Decode ModifyVpcEndpointServiceConfigurationResult where decode = genericDecode options
instance encodeModifyVpcEndpointServiceConfigurationResult :: Encode ModifyVpcEndpointServiceConfigurationResult where encode = genericEncode options

-- | Constructs ModifyVpcEndpointServiceConfigurationResult from required parameters
newModifyVpcEndpointServiceConfigurationResult :: ModifyVpcEndpointServiceConfigurationResult
newModifyVpcEndpointServiceConfigurationResult  = ModifyVpcEndpointServiceConfigurationResult { "Return": Nothing }

-- | Constructs ModifyVpcEndpointServiceConfigurationResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyVpcEndpointServiceConfigurationResult' :: ( { "Return" :: Maybe (Boolean) } -> {"Return" :: Maybe (Boolean) } ) -> ModifyVpcEndpointServiceConfigurationResult
newModifyVpcEndpointServiceConfigurationResult'  customize = (ModifyVpcEndpointServiceConfigurationResult <<< customize) { "Return": Nothing }



newtype ModifyVpcEndpointServicePermissionsRequest = ModifyVpcEndpointServicePermissionsRequest 
  { "DryRun" :: Maybe (Boolean)
  , "ServiceId" :: (String)
  , "AddAllowedPrincipals" :: Maybe (ValueStringList)
  , "RemoveAllowedPrincipals" :: Maybe (ValueStringList)
  }
derive instance newtypeModifyVpcEndpointServicePermissionsRequest :: Newtype ModifyVpcEndpointServicePermissionsRequest _
derive instance repGenericModifyVpcEndpointServicePermissionsRequest :: Generic ModifyVpcEndpointServicePermissionsRequest _
instance showModifyVpcEndpointServicePermissionsRequest :: Show ModifyVpcEndpointServicePermissionsRequest where show = genericShow
instance decodeModifyVpcEndpointServicePermissionsRequest :: Decode ModifyVpcEndpointServicePermissionsRequest where decode = genericDecode options
instance encodeModifyVpcEndpointServicePermissionsRequest :: Encode ModifyVpcEndpointServicePermissionsRequest where encode = genericEncode options

-- | Constructs ModifyVpcEndpointServicePermissionsRequest from required parameters
newModifyVpcEndpointServicePermissionsRequest :: String -> ModifyVpcEndpointServicePermissionsRequest
newModifyVpcEndpointServicePermissionsRequest _ServiceId = ModifyVpcEndpointServicePermissionsRequest { "ServiceId": _ServiceId, "AddAllowedPrincipals": Nothing, "DryRun": Nothing, "RemoveAllowedPrincipals": Nothing }

-- | Constructs ModifyVpcEndpointServicePermissionsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyVpcEndpointServicePermissionsRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "ServiceId" :: (String) , "AddAllowedPrincipals" :: Maybe (ValueStringList) , "RemoveAllowedPrincipals" :: Maybe (ValueStringList) } -> {"DryRun" :: Maybe (Boolean) , "ServiceId" :: (String) , "AddAllowedPrincipals" :: Maybe (ValueStringList) , "RemoveAllowedPrincipals" :: Maybe (ValueStringList) } ) -> ModifyVpcEndpointServicePermissionsRequest
newModifyVpcEndpointServicePermissionsRequest' _ServiceId customize = (ModifyVpcEndpointServicePermissionsRequest <<< customize) { "ServiceId": _ServiceId, "AddAllowedPrincipals": Nothing, "DryRun": Nothing, "RemoveAllowedPrincipals": Nothing }



newtype ModifyVpcEndpointServicePermissionsResult = ModifyVpcEndpointServicePermissionsResult 
  { "ReturnValue" :: Maybe (Boolean)
  }
derive instance newtypeModifyVpcEndpointServicePermissionsResult :: Newtype ModifyVpcEndpointServicePermissionsResult _
derive instance repGenericModifyVpcEndpointServicePermissionsResult :: Generic ModifyVpcEndpointServicePermissionsResult _
instance showModifyVpcEndpointServicePermissionsResult :: Show ModifyVpcEndpointServicePermissionsResult where show = genericShow
instance decodeModifyVpcEndpointServicePermissionsResult :: Decode ModifyVpcEndpointServicePermissionsResult where decode = genericDecode options
instance encodeModifyVpcEndpointServicePermissionsResult :: Encode ModifyVpcEndpointServicePermissionsResult where encode = genericEncode options

-- | Constructs ModifyVpcEndpointServicePermissionsResult from required parameters
newModifyVpcEndpointServicePermissionsResult :: ModifyVpcEndpointServicePermissionsResult
newModifyVpcEndpointServicePermissionsResult  = ModifyVpcEndpointServicePermissionsResult { "ReturnValue": Nothing }

-- | Constructs ModifyVpcEndpointServicePermissionsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyVpcEndpointServicePermissionsResult' :: ( { "ReturnValue" :: Maybe (Boolean) } -> {"ReturnValue" :: Maybe (Boolean) } ) -> ModifyVpcEndpointServicePermissionsResult
newModifyVpcEndpointServicePermissionsResult'  customize = (ModifyVpcEndpointServicePermissionsResult <<< customize) { "ReturnValue": Nothing }



newtype ModifyVpcPeeringConnectionOptionsRequest = ModifyVpcPeeringConnectionOptionsRequest 
  { "AccepterPeeringConnectionOptions" :: Maybe (PeeringConnectionOptionsRequest)
  , "DryRun" :: Maybe (Boolean)
  , "RequesterPeeringConnectionOptions" :: Maybe (PeeringConnectionOptionsRequest)
  , "VpcPeeringConnectionId" :: (String)
  }
derive instance newtypeModifyVpcPeeringConnectionOptionsRequest :: Newtype ModifyVpcPeeringConnectionOptionsRequest _
derive instance repGenericModifyVpcPeeringConnectionOptionsRequest :: Generic ModifyVpcPeeringConnectionOptionsRequest _
instance showModifyVpcPeeringConnectionOptionsRequest :: Show ModifyVpcPeeringConnectionOptionsRequest where show = genericShow
instance decodeModifyVpcPeeringConnectionOptionsRequest :: Decode ModifyVpcPeeringConnectionOptionsRequest where decode = genericDecode options
instance encodeModifyVpcPeeringConnectionOptionsRequest :: Encode ModifyVpcPeeringConnectionOptionsRequest where encode = genericEncode options

-- | Constructs ModifyVpcPeeringConnectionOptionsRequest from required parameters
newModifyVpcPeeringConnectionOptionsRequest :: String -> ModifyVpcPeeringConnectionOptionsRequest
newModifyVpcPeeringConnectionOptionsRequest _VpcPeeringConnectionId = ModifyVpcPeeringConnectionOptionsRequest { "VpcPeeringConnectionId": _VpcPeeringConnectionId, "AccepterPeeringConnectionOptions": Nothing, "DryRun": Nothing, "RequesterPeeringConnectionOptions": Nothing }

-- | Constructs ModifyVpcPeeringConnectionOptionsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyVpcPeeringConnectionOptionsRequest' :: String -> ( { "AccepterPeeringConnectionOptions" :: Maybe (PeeringConnectionOptionsRequest) , "DryRun" :: Maybe (Boolean) , "RequesterPeeringConnectionOptions" :: Maybe (PeeringConnectionOptionsRequest) , "VpcPeeringConnectionId" :: (String) } -> {"AccepterPeeringConnectionOptions" :: Maybe (PeeringConnectionOptionsRequest) , "DryRun" :: Maybe (Boolean) , "RequesterPeeringConnectionOptions" :: Maybe (PeeringConnectionOptionsRequest) , "VpcPeeringConnectionId" :: (String) } ) -> ModifyVpcPeeringConnectionOptionsRequest
newModifyVpcPeeringConnectionOptionsRequest' _VpcPeeringConnectionId customize = (ModifyVpcPeeringConnectionOptionsRequest <<< customize) { "VpcPeeringConnectionId": _VpcPeeringConnectionId, "AccepterPeeringConnectionOptions": Nothing, "DryRun": Nothing, "RequesterPeeringConnectionOptions": Nothing }



newtype ModifyVpcPeeringConnectionOptionsResult = ModifyVpcPeeringConnectionOptionsResult 
  { "AccepterPeeringConnectionOptions" :: Maybe (PeeringConnectionOptions)
  , "RequesterPeeringConnectionOptions" :: Maybe (PeeringConnectionOptions)
  }
derive instance newtypeModifyVpcPeeringConnectionOptionsResult :: Newtype ModifyVpcPeeringConnectionOptionsResult _
derive instance repGenericModifyVpcPeeringConnectionOptionsResult :: Generic ModifyVpcPeeringConnectionOptionsResult _
instance showModifyVpcPeeringConnectionOptionsResult :: Show ModifyVpcPeeringConnectionOptionsResult where show = genericShow
instance decodeModifyVpcPeeringConnectionOptionsResult :: Decode ModifyVpcPeeringConnectionOptionsResult where decode = genericDecode options
instance encodeModifyVpcPeeringConnectionOptionsResult :: Encode ModifyVpcPeeringConnectionOptionsResult where encode = genericEncode options

-- | Constructs ModifyVpcPeeringConnectionOptionsResult from required parameters
newModifyVpcPeeringConnectionOptionsResult :: ModifyVpcPeeringConnectionOptionsResult
newModifyVpcPeeringConnectionOptionsResult  = ModifyVpcPeeringConnectionOptionsResult { "AccepterPeeringConnectionOptions": Nothing, "RequesterPeeringConnectionOptions": Nothing }

-- | Constructs ModifyVpcPeeringConnectionOptionsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyVpcPeeringConnectionOptionsResult' :: ( { "AccepterPeeringConnectionOptions" :: Maybe (PeeringConnectionOptions) , "RequesterPeeringConnectionOptions" :: Maybe (PeeringConnectionOptions) } -> {"AccepterPeeringConnectionOptions" :: Maybe (PeeringConnectionOptions) , "RequesterPeeringConnectionOptions" :: Maybe (PeeringConnectionOptions) } ) -> ModifyVpcPeeringConnectionOptionsResult
newModifyVpcPeeringConnectionOptionsResult'  customize = (ModifyVpcPeeringConnectionOptionsResult <<< customize) { "AccepterPeeringConnectionOptions": Nothing, "RequesterPeeringConnectionOptions": Nothing }



-- | <p>Contains the parameters for ModifyVpcTenancy.</p>
newtype ModifyVpcTenancyRequest = ModifyVpcTenancyRequest 
  { "VpcId" :: (String)
  , "InstanceTenancy" :: (VpcTenancy)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeModifyVpcTenancyRequest :: Newtype ModifyVpcTenancyRequest _
derive instance repGenericModifyVpcTenancyRequest :: Generic ModifyVpcTenancyRequest _
instance showModifyVpcTenancyRequest :: Show ModifyVpcTenancyRequest where show = genericShow
instance decodeModifyVpcTenancyRequest :: Decode ModifyVpcTenancyRequest where decode = genericDecode options
instance encodeModifyVpcTenancyRequest :: Encode ModifyVpcTenancyRequest where encode = genericEncode options

-- | Constructs ModifyVpcTenancyRequest from required parameters
newModifyVpcTenancyRequest :: VpcTenancy -> String -> ModifyVpcTenancyRequest
newModifyVpcTenancyRequest _InstanceTenancy _VpcId = ModifyVpcTenancyRequest { "InstanceTenancy": _InstanceTenancy, "VpcId": _VpcId, "DryRun": Nothing }

-- | Constructs ModifyVpcTenancyRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyVpcTenancyRequest' :: VpcTenancy -> String -> ( { "VpcId" :: (String) , "InstanceTenancy" :: (VpcTenancy) , "DryRun" :: Maybe (Boolean) } -> {"VpcId" :: (String) , "InstanceTenancy" :: (VpcTenancy) , "DryRun" :: Maybe (Boolean) } ) -> ModifyVpcTenancyRequest
newModifyVpcTenancyRequest' _InstanceTenancy _VpcId customize = (ModifyVpcTenancyRequest <<< customize) { "InstanceTenancy": _InstanceTenancy, "VpcId": _VpcId, "DryRun": Nothing }



-- | <p>Contains the output of ModifyVpcTenancy.</p>
newtype ModifyVpcTenancyResult = ModifyVpcTenancyResult 
  { "ReturnValue" :: Maybe (Boolean)
  }
derive instance newtypeModifyVpcTenancyResult :: Newtype ModifyVpcTenancyResult _
derive instance repGenericModifyVpcTenancyResult :: Generic ModifyVpcTenancyResult _
instance showModifyVpcTenancyResult :: Show ModifyVpcTenancyResult where show = genericShow
instance decodeModifyVpcTenancyResult :: Decode ModifyVpcTenancyResult where decode = genericDecode options
instance encodeModifyVpcTenancyResult :: Encode ModifyVpcTenancyResult where encode = genericEncode options

-- | Constructs ModifyVpcTenancyResult from required parameters
newModifyVpcTenancyResult :: ModifyVpcTenancyResult
newModifyVpcTenancyResult  = ModifyVpcTenancyResult { "ReturnValue": Nothing }

-- | Constructs ModifyVpcTenancyResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newModifyVpcTenancyResult' :: ( { "ReturnValue" :: Maybe (Boolean) } -> {"ReturnValue" :: Maybe (Boolean) } ) -> ModifyVpcTenancyResult
newModifyVpcTenancyResult'  customize = (ModifyVpcTenancyResult <<< customize) { "ReturnValue": Nothing }



-- | <p>Contains the parameters for MonitorInstances.</p>
newtype MonitorInstancesRequest = MonitorInstancesRequest 
  { "InstanceIds" :: (InstanceIdStringList)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeMonitorInstancesRequest :: Newtype MonitorInstancesRequest _
derive instance repGenericMonitorInstancesRequest :: Generic MonitorInstancesRequest _
instance showMonitorInstancesRequest :: Show MonitorInstancesRequest where show = genericShow
instance decodeMonitorInstancesRequest :: Decode MonitorInstancesRequest where decode = genericDecode options
instance encodeMonitorInstancesRequest :: Encode MonitorInstancesRequest where encode = genericEncode options

-- | Constructs MonitorInstancesRequest from required parameters
newMonitorInstancesRequest :: InstanceIdStringList -> MonitorInstancesRequest
newMonitorInstancesRequest _InstanceIds = MonitorInstancesRequest { "InstanceIds": _InstanceIds, "DryRun": Nothing }

-- | Constructs MonitorInstancesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newMonitorInstancesRequest' :: InstanceIdStringList -> ( { "InstanceIds" :: (InstanceIdStringList) , "DryRun" :: Maybe (Boolean) } -> {"InstanceIds" :: (InstanceIdStringList) , "DryRun" :: Maybe (Boolean) } ) -> MonitorInstancesRequest
newMonitorInstancesRequest' _InstanceIds customize = (MonitorInstancesRequest <<< customize) { "InstanceIds": _InstanceIds, "DryRun": Nothing }



-- | <p>Contains the output of MonitorInstances.</p>
newtype MonitorInstancesResult = MonitorInstancesResult 
  { "InstanceMonitorings" :: Maybe (InstanceMonitoringList)
  }
derive instance newtypeMonitorInstancesResult :: Newtype MonitorInstancesResult _
derive instance repGenericMonitorInstancesResult :: Generic MonitorInstancesResult _
instance showMonitorInstancesResult :: Show MonitorInstancesResult where show = genericShow
instance decodeMonitorInstancesResult :: Decode MonitorInstancesResult where decode = genericDecode options
instance encodeMonitorInstancesResult :: Encode MonitorInstancesResult where encode = genericEncode options

-- | Constructs MonitorInstancesResult from required parameters
newMonitorInstancesResult :: MonitorInstancesResult
newMonitorInstancesResult  = MonitorInstancesResult { "InstanceMonitorings": Nothing }

-- | Constructs MonitorInstancesResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newMonitorInstancesResult' :: ( { "InstanceMonitorings" :: Maybe (InstanceMonitoringList) } -> {"InstanceMonitorings" :: Maybe (InstanceMonitoringList) } ) -> MonitorInstancesResult
newMonitorInstancesResult'  customize = (MonitorInstancesResult <<< customize) { "InstanceMonitorings": Nothing }



-- | <p>Describes the monitoring of an instance.</p>
newtype Monitoring = Monitoring 
  { "State" :: Maybe (MonitoringState)
  }
derive instance newtypeMonitoring :: Newtype Monitoring _
derive instance repGenericMonitoring :: Generic Monitoring _
instance showMonitoring :: Show Monitoring where show = genericShow
instance decodeMonitoring :: Decode Monitoring where decode = genericDecode options
instance encodeMonitoring :: Encode Monitoring where encode = genericEncode options

-- | Constructs Monitoring from required parameters
newMonitoring :: Monitoring
newMonitoring  = Monitoring { "State": Nothing }

-- | Constructs Monitoring's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newMonitoring' :: ( { "State" :: Maybe (MonitoringState) } -> {"State" :: Maybe (MonitoringState) } ) -> Monitoring
newMonitoring'  customize = (Monitoring <<< customize) { "State": Nothing }



newtype MonitoringState = MonitoringState String
derive instance newtypeMonitoringState :: Newtype MonitoringState _
derive instance repGenericMonitoringState :: Generic MonitoringState _
instance showMonitoringState :: Show MonitoringState where show = genericShow
instance decodeMonitoringState :: Decode MonitoringState where decode = genericDecode options
instance encodeMonitoringState :: Encode MonitoringState where encode = genericEncode options



-- | <p>Contains the parameters for MoveAddressToVpc.</p>
newtype MoveAddressToVpcRequest = MoveAddressToVpcRequest 
  { "DryRun" :: Maybe (Boolean)
  , "PublicIp" :: (String)
  }
derive instance newtypeMoveAddressToVpcRequest :: Newtype MoveAddressToVpcRequest _
derive instance repGenericMoveAddressToVpcRequest :: Generic MoveAddressToVpcRequest _
instance showMoveAddressToVpcRequest :: Show MoveAddressToVpcRequest where show = genericShow
instance decodeMoveAddressToVpcRequest :: Decode MoveAddressToVpcRequest where decode = genericDecode options
instance encodeMoveAddressToVpcRequest :: Encode MoveAddressToVpcRequest where encode = genericEncode options

-- | Constructs MoveAddressToVpcRequest from required parameters
newMoveAddressToVpcRequest :: String -> MoveAddressToVpcRequest
newMoveAddressToVpcRequest _PublicIp = MoveAddressToVpcRequest { "PublicIp": _PublicIp, "DryRun": Nothing }

-- | Constructs MoveAddressToVpcRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newMoveAddressToVpcRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "PublicIp" :: (String) } -> {"DryRun" :: Maybe (Boolean) , "PublicIp" :: (String) } ) -> MoveAddressToVpcRequest
newMoveAddressToVpcRequest' _PublicIp customize = (MoveAddressToVpcRequest <<< customize) { "PublicIp": _PublicIp, "DryRun": Nothing }



-- | <p>Contains the output of MoveAddressToVpc.</p>
newtype MoveAddressToVpcResult = MoveAddressToVpcResult 
  { "AllocationId" :: Maybe (String)
  , "Status" :: Maybe (Status)
  }
derive instance newtypeMoveAddressToVpcResult :: Newtype MoveAddressToVpcResult _
derive instance repGenericMoveAddressToVpcResult :: Generic MoveAddressToVpcResult _
instance showMoveAddressToVpcResult :: Show MoveAddressToVpcResult where show = genericShow
instance decodeMoveAddressToVpcResult :: Decode MoveAddressToVpcResult where decode = genericDecode options
instance encodeMoveAddressToVpcResult :: Encode MoveAddressToVpcResult where encode = genericEncode options

-- | Constructs MoveAddressToVpcResult from required parameters
newMoveAddressToVpcResult :: MoveAddressToVpcResult
newMoveAddressToVpcResult  = MoveAddressToVpcResult { "AllocationId": Nothing, "Status": Nothing }

-- | Constructs MoveAddressToVpcResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newMoveAddressToVpcResult' :: ( { "AllocationId" :: Maybe (String) , "Status" :: Maybe (Status) } -> {"AllocationId" :: Maybe (String) , "Status" :: Maybe (Status) } ) -> MoveAddressToVpcResult
newMoveAddressToVpcResult'  customize = (MoveAddressToVpcResult <<< customize) { "AllocationId": Nothing, "Status": Nothing }



newtype MoveStatus = MoveStatus String
derive instance newtypeMoveStatus :: Newtype MoveStatus _
derive instance repGenericMoveStatus :: Generic MoveStatus _
instance showMoveStatus :: Show MoveStatus where show = genericShow
instance decodeMoveStatus :: Decode MoveStatus where decode = genericDecode options
instance encodeMoveStatus :: Encode MoveStatus where encode = genericEncode options



-- | <p>Describes the status of a moving Elastic IP address.</p>
newtype MovingAddressStatus = MovingAddressStatus 
  { "MoveStatus" :: Maybe (MoveStatus)
  , "PublicIp" :: Maybe (String)
  }
derive instance newtypeMovingAddressStatus :: Newtype MovingAddressStatus _
derive instance repGenericMovingAddressStatus :: Generic MovingAddressStatus _
instance showMovingAddressStatus :: Show MovingAddressStatus where show = genericShow
instance decodeMovingAddressStatus :: Decode MovingAddressStatus where decode = genericDecode options
instance encodeMovingAddressStatus :: Encode MovingAddressStatus where encode = genericEncode options

-- | Constructs MovingAddressStatus from required parameters
newMovingAddressStatus :: MovingAddressStatus
newMovingAddressStatus  = MovingAddressStatus { "MoveStatus": Nothing, "PublicIp": Nothing }

-- | Constructs MovingAddressStatus's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newMovingAddressStatus' :: ( { "MoveStatus" :: Maybe (MoveStatus) , "PublicIp" :: Maybe (String) } -> {"MoveStatus" :: Maybe (MoveStatus) , "PublicIp" :: Maybe (String) } ) -> MovingAddressStatus
newMovingAddressStatus'  customize = (MovingAddressStatus <<< customize) { "MoveStatus": Nothing, "PublicIp": Nothing }



newtype MovingAddressStatusSet = MovingAddressStatusSet (Array MovingAddressStatus)
derive instance newtypeMovingAddressStatusSet :: Newtype MovingAddressStatusSet _
derive instance repGenericMovingAddressStatusSet :: Generic MovingAddressStatusSet _
instance showMovingAddressStatusSet :: Show MovingAddressStatusSet where show = genericShow
instance decodeMovingAddressStatusSet :: Decode MovingAddressStatusSet where decode = genericDecode options
instance encodeMovingAddressStatusSet :: Encode MovingAddressStatusSet where encode = genericEncode options



-- | <p>Describes a NAT gateway.</p>
newtype NatGateway = NatGateway 
  { "CreateTime" :: Maybe (DateTime)
  , "DeleteTime" :: Maybe (DateTime)
  , "FailureCode" :: Maybe (String)
  , "FailureMessage" :: Maybe (String)
  , "NatGatewayAddresses" :: Maybe (NatGatewayAddressList)
  , "NatGatewayId" :: Maybe (String)
  , "ProvisionedBandwidth" :: Maybe (ProvisionedBandwidth)
  , "State" :: Maybe (NatGatewayState)
  , "SubnetId" :: Maybe (String)
  , "VpcId" :: Maybe (String)
  , "Tags" :: Maybe (TagList)
  }
derive instance newtypeNatGateway :: Newtype NatGateway _
derive instance repGenericNatGateway :: Generic NatGateway _
instance showNatGateway :: Show NatGateway where show = genericShow
instance decodeNatGateway :: Decode NatGateway where decode = genericDecode options
instance encodeNatGateway :: Encode NatGateway where encode = genericEncode options

-- | Constructs NatGateway from required parameters
newNatGateway :: NatGateway
newNatGateway  = NatGateway { "CreateTime": Nothing, "DeleteTime": Nothing, "FailureCode": Nothing, "FailureMessage": Nothing, "NatGatewayAddresses": Nothing, "NatGatewayId": Nothing, "ProvisionedBandwidth": Nothing, "State": Nothing, "SubnetId": Nothing, "Tags": Nothing, "VpcId": Nothing }

-- | Constructs NatGateway's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newNatGateway' :: ( { "CreateTime" :: Maybe (DateTime) , "DeleteTime" :: Maybe (DateTime) , "FailureCode" :: Maybe (String) , "FailureMessage" :: Maybe (String) , "NatGatewayAddresses" :: Maybe (NatGatewayAddressList) , "NatGatewayId" :: Maybe (String) , "ProvisionedBandwidth" :: Maybe (ProvisionedBandwidth) , "State" :: Maybe (NatGatewayState) , "SubnetId" :: Maybe (String) , "VpcId" :: Maybe (String) , "Tags" :: Maybe (TagList) } -> {"CreateTime" :: Maybe (DateTime) , "DeleteTime" :: Maybe (DateTime) , "FailureCode" :: Maybe (String) , "FailureMessage" :: Maybe (String) , "NatGatewayAddresses" :: Maybe (NatGatewayAddressList) , "NatGatewayId" :: Maybe (String) , "ProvisionedBandwidth" :: Maybe (ProvisionedBandwidth) , "State" :: Maybe (NatGatewayState) , "SubnetId" :: Maybe (String) , "VpcId" :: Maybe (String) , "Tags" :: Maybe (TagList) } ) -> NatGateway
newNatGateway'  customize = (NatGateway <<< customize) { "CreateTime": Nothing, "DeleteTime": Nothing, "FailureCode": Nothing, "FailureMessage": Nothing, "NatGatewayAddresses": Nothing, "NatGatewayId": Nothing, "ProvisionedBandwidth": Nothing, "State": Nothing, "SubnetId": Nothing, "Tags": Nothing, "VpcId": Nothing }



-- | <p>Describes the IP addresses and network interface associated with a NAT gateway.</p>
newtype NatGatewayAddress = NatGatewayAddress 
  { "AllocationId" :: Maybe (String)
  , "NetworkInterfaceId" :: Maybe (String)
  , "PrivateIp" :: Maybe (String)
  , "PublicIp" :: Maybe (String)
  }
derive instance newtypeNatGatewayAddress :: Newtype NatGatewayAddress _
derive instance repGenericNatGatewayAddress :: Generic NatGatewayAddress _
instance showNatGatewayAddress :: Show NatGatewayAddress where show = genericShow
instance decodeNatGatewayAddress :: Decode NatGatewayAddress where decode = genericDecode options
instance encodeNatGatewayAddress :: Encode NatGatewayAddress where encode = genericEncode options

-- | Constructs NatGatewayAddress from required parameters
newNatGatewayAddress :: NatGatewayAddress
newNatGatewayAddress  = NatGatewayAddress { "AllocationId": Nothing, "NetworkInterfaceId": Nothing, "PrivateIp": Nothing, "PublicIp": Nothing }

-- | Constructs NatGatewayAddress's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newNatGatewayAddress' :: ( { "AllocationId" :: Maybe (String) , "NetworkInterfaceId" :: Maybe (String) , "PrivateIp" :: Maybe (String) , "PublicIp" :: Maybe (String) } -> {"AllocationId" :: Maybe (String) , "NetworkInterfaceId" :: Maybe (String) , "PrivateIp" :: Maybe (String) , "PublicIp" :: Maybe (String) } ) -> NatGatewayAddress
newNatGatewayAddress'  customize = (NatGatewayAddress <<< customize) { "AllocationId": Nothing, "NetworkInterfaceId": Nothing, "PrivateIp": Nothing, "PublicIp": Nothing }



newtype NatGatewayAddressList = NatGatewayAddressList (Array NatGatewayAddress)
derive instance newtypeNatGatewayAddressList :: Newtype NatGatewayAddressList _
derive instance repGenericNatGatewayAddressList :: Generic NatGatewayAddressList _
instance showNatGatewayAddressList :: Show NatGatewayAddressList where show = genericShow
instance decodeNatGatewayAddressList :: Decode NatGatewayAddressList where decode = genericDecode options
instance encodeNatGatewayAddressList :: Encode NatGatewayAddressList where encode = genericEncode options



newtype NatGatewayList = NatGatewayList (Array NatGateway)
derive instance newtypeNatGatewayList :: Newtype NatGatewayList _
derive instance repGenericNatGatewayList :: Generic NatGatewayList _
instance showNatGatewayList :: Show NatGatewayList where show = genericShow
instance decodeNatGatewayList :: Decode NatGatewayList where decode = genericDecode options
instance encodeNatGatewayList :: Encode NatGatewayList where encode = genericEncode options



newtype NatGatewayState = NatGatewayState String
derive instance newtypeNatGatewayState :: Newtype NatGatewayState _
derive instance repGenericNatGatewayState :: Generic NatGatewayState _
instance showNatGatewayState :: Show NatGatewayState where show = genericShow
instance decodeNatGatewayState :: Decode NatGatewayState where decode = genericDecode options
instance encodeNatGatewayState :: Encode NatGatewayState where encode = genericEncode options



-- | <p>Describes a network ACL.</p>
newtype NetworkAcl = NetworkAcl 
  { "Associations" :: Maybe (NetworkAclAssociationList)
  , "Entries" :: Maybe (NetworkAclEntryList)
  , "IsDefault" :: Maybe (Boolean)
  , "NetworkAclId" :: Maybe (String)
  , "Tags" :: Maybe (TagList)
  , "VpcId" :: Maybe (String)
  }
derive instance newtypeNetworkAcl :: Newtype NetworkAcl _
derive instance repGenericNetworkAcl :: Generic NetworkAcl _
instance showNetworkAcl :: Show NetworkAcl where show = genericShow
instance decodeNetworkAcl :: Decode NetworkAcl where decode = genericDecode options
instance encodeNetworkAcl :: Encode NetworkAcl where encode = genericEncode options

-- | Constructs NetworkAcl from required parameters
newNetworkAcl :: NetworkAcl
newNetworkAcl  = NetworkAcl { "Associations": Nothing, "Entries": Nothing, "IsDefault": Nothing, "NetworkAclId": Nothing, "Tags": Nothing, "VpcId": Nothing }

-- | Constructs NetworkAcl's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newNetworkAcl' :: ( { "Associations" :: Maybe (NetworkAclAssociationList) , "Entries" :: Maybe (NetworkAclEntryList) , "IsDefault" :: Maybe (Boolean) , "NetworkAclId" :: Maybe (String) , "Tags" :: Maybe (TagList) , "VpcId" :: Maybe (String) } -> {"Associations" :: Maybe (NetworkAclAssociationList) , "Entries" :: Maybe (NetworkAclEntryList) , "IsDefault" :: Maybe (Boolean) , "NetworkAclId" :: Maybe (String) , "Tags" :: Maybe (TagList) , "VpcId" :: Maybe (String) } ) -> NetworkAcl
newNetworkAcl'  customize = (NetworkAcl <<< customize) { "Associations": Nothing, "Entries": Nothing, "IsDefault": Nothing, "NetworkAclId": Nothing, "Tags": Nothing, "VpcId": Nothing }



-- | <p>Describes an association between a network ACL and a subnet.</p>
newtype NetworkAclAssociation = NetworkAclAssociation 
  { "NetworkAclAssociationId" :: Maybe (String)
  , "NetworkAclId" :: Maybe (String)
  , "SubnetId" :: Maybe (String)
  }
derive instance newtypeNetworkAclAssociation :: Newtype NetworkAclAssociation _
derive instance repGenericNetworkAclAssociation :: Generic NetworkAclAssociation _
instance showNetworkAclAssociation :: Show NetworkAclAssociation where show = genericShow
instance decodeNetworkAclAssociation :: Decode NetworkAclAssociation where decode = genericDecode options
instance encodeNetworkAclAssociation :: Encode NetworkAclAssociation where encode = genericEncode options

-- | Constructs NetworkAclAssociation from required parameters
newNetworkAclAssociation :: NetworkAclAssociation
newNetworkAclAssociation  = NetworkAclAssociation { "NetworkAclAssociationId": Nothing, "NetworkAclId": Nothing, "SubnetId": Nothing }

-- | Constructs NetworkAclAssociation's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newNetworkAclAssociation' :: ( { "NetworkAclAssociationId" :: Maybe (String) , "NetworkAclId" :: Maybe (String) , "SubnetId" :: Maybe (String) } -> {"NetworkAclAssociationId" :: Maybe (String) , "NetworkAclId" :: Maybe (String) , "SubnetId" :: Maybe (String) } ) -> NetworkAclAssociation
newNetworkAclAssociation'  customize = (NetworkAclAssociation <<< customize) { "NetworkAclAssociationId": Nothing, "NetworkAclId": Nothing, "SubnetId": Nothing }



newtype NetworkAclAssociationList = NetworkAclAssociationList (Array NetworkAclAssociation)
derive instance newtypeNetworkAclAssociationList :: Newtype NetworkAclAssociationList _
derive instance repGenericNetworkAclAssociationList :: Generic NetworkAclAssociationList _
instance showNetworkAclAssociationList :: Show NetworkAclAssociationList where show = genericShow
instance decodeNetworkAclAssociationList :: Decode NetworkAclAssociationList where decode = genericDecode options
instance encodeNetworkAclAssociationList :: Encode NetworkAclAssociationList where encode = genericEncode options



-- | <p>Describes an entry in a network ACL.</p>
newtype NetworkAclEntry = NetworkAclEntry 
  { "CidrBlock" :: Maybe (String)
  , "Egress" :: Maybe (Boolean)
  , "IcmpTypeCode" :: Maybe (IcmpTypeCode)
  , "Ipv6CidrBlock" :: Maybe (String)
  , "PortRange" :: Maybe (PortRange)
  , "Protocol" :: Maybe (String)
  , "RuleAction" :: Maybe (RuleAction)
  , "RuleNumber" :: Maybe (Int)
  }
derive instance newtypeNetworkAclEntry :: Newtype NetworkAclEntry _
derive instance repGenericNetworkAclEntry :: Generic NetworkAclEntry _
instance showNetworkAclEntry :: Show NetworkAclEntry where show = genericShow
instance decodeNetworkAclEntry :: Decode NetworkAclEntry where decode = genericDecode options
instance encodeNetworkAclEntry :: Encode NetworkAclEntry where encode = genericEncode options

-- | Constructs NetworkAclEntry from required parameters
newNetworkAclEntry :: NetworkAclEntry
newNetworkAclEntry  = NetworkAclEntry { "CidrBlock": Nothing, "Egress": Nothing, "IcmpTypeCode": Nothing, "Ipv6CidrBlock": Nothing, "PortRange": Nothing, "Protocol": Nothing, "RuleAction": Nothing, "RuleNumber": Nothing }

-- | Constructs NetworkAclEntry's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newNetworkAclEntry' :: ( { "CidrBlock" :: Maybe (String) , "Egress" :: Maybe (Boolean) , "IcmpTypeCode" :: Maybe (IcmpTypeCode) , "Ipv6CidrBlock" :: Maybe (String) , "PortRange" :: Maybe (PortRange) , "Protocol" :: Maybe (String) , "RuleAction" :: Maybe (RuleAction) , "RuleNumber" :: Maybe (Int) } -> {"CidrBlock" :: Maybe (String) , "Egress" :: Maybe (Boolean) , "IcmpTypeCode" :: Maybe (IcmpTypeCode) , "Ipv6CidrBlock" :: Maybe (String) , "PortRange" :: Maybe (PortRange) , "Protocol" :: Maybe (String) , "RuleAction" :: Maybe (RuleAction) , "RuleNumber" :: Maybe (Int) } ) -> NetworkAclEntry
newNetworkAclEntry'  customize = (NetworkAclEntry <<< customize) { "CidrBlock": Nothing, "Egress": Nothing, "IcmpTypeCode": Nothing, "Ipv6CidrBlock": Nothing, "PortRange": Nothing, "Protocol": Nothing, "RuleAction": Nothing, "RuleNumber": Nothing }



newtype NetworkAclEntryList = NetworkAclEntryList (Array NetworkAclEntry)
derive instance newtypeNetworkAclEntryList :: Newtype NetworkAclEntryList _
derive instance repGenericNetworkAclEntryList :: Generic NetworkAclEntryList _
instance showNetworkAclEntryList :: Show NetworkAclEntryList where show = genericShow
instance decodeNetworkAclEntryList :: Decode NetworkAclEntryList where decode = genericDecode options
instance encodeNetworkAclEntryList :: Encode NetworkAclEntryList where encode = genericEncode options



newtype NetworkAclList = NetworkAclList (Array NetworkAcl)
derive instance newtypeNetworkAclList :: Newtype NetworkAclList _
derive instance repGenericNetworkAclList :: Generic NetworkAclList _
instance showNetworkAclList :: Show NetworkAclList where show = genericShow
instance decodeNetworkAclList :: Decode NetworkAclList where decode = genericDecode options
instance encodeNetworkAclList :: Encode NetworkAclList where encode = genericEncode options



-- | <p>Describes a network interface.</p>
newtype NetworkInterface = NetworkInterface 
  { "Association" :: Maybe (NetworkInterfaceAssociation)
  , "Attachment" :: Maybe (NetworkInterfaceAttachment)
  , "AvailabilityZone" :: Maybe (String)
  , "Description" :: Maybe (String)
  , "Groups" :: Maybe (GroupIdentifierList)
  , "InterfaceType" :: Maybe (NetworkInterfaceType)
  , "Ipv6Addresses" :: Maybe (NetworkInterfaceIpv6AddressesList)
  , "MacAddress" :: Maybe (String)
  , "NetworkInterfaceId" :: Maybe (String)
  , "OwnerId" :: Maybe (String)
  , "PrivateDnsName" :: Maybe (String)
  , "PrivateIpAddress" :: Maybe (String)
  , "PrivateIpAddresses" :: Maybe (NetworkInterfacePrivateIpAddressList)
  , "RequesterId" :: Maybe (String)
  , "RequesterManaged" :: Maybe (Boolean)
  , "SourceDestCheck" :: Maybe (Boolean)
  , "Status" :: Maybe (NetworkInterfaceStatus)
  , "SubnetId" :: Maybe (String)
  , "TagSet" :: Maybe (TagList)
  , "VpcId" :: Maybe (String)
  }
derive instance newtypeNetworkInterface :: Newtype NetworkInterface _
derive instance repGenericNetworkInterface :: Generic NetworkInterface _
instance showNetworkInterface :: Show NetworkInterface where show = genericShow
instance decodeNetworkInterface :: Decode NetworkInterface where decode = genericDecode options
instance encodeNetworkInterface :: Encode NetworkInterface where encode = genericEncode options

-- | Constructs NetworkInterface from required parameters
newNetworkInterface :: NetworkInterface
newNetworkInterface  = NetworkInterface { "Association": Nothing, "Attachment": Nothing, "AvailabilityZone": Nothing, "Description": Nothing, "Groups": Nothing, "InterfaceType": Nothing, "Ipv6Addresses": Nothing, "MacAddress": Nothing, "NetworkInterfaceId": Nothing, "OwnerId": Nothing, "PrivateDnsName": Nothing, "PrivateIpAddress": Nothing, "PrivateIpAddresses": Nothing, "RequesterId": Nothing, "RequesterManaged": Nothing, "SourceDestCheck": Nothing, "Status": Nothing, "SubnetId": Nothing, "TagSet": Nothing, "VpcId": Nothing }

-- | Constructs NetworkInterface's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newNetworkInterface' :: ( { "Association" :: Maybe (NetworkInterfaceAssociation) , "Attachment" :: Maybe (NetworkInterfaceAttachment) , "AvailabilityZone" :: Maybe (String) , "Description" :: Maybe (String) , "Groups" :: Maybe (GroupIdentifierList) , "InterfaceType" :: Maybe (NetworkInterfaceType) , "Ipv6Addresses" :: Maybe (NetworkInterfaceIpv6AddressesList) , "MacAddress" :: Maybe (String) , "NetworkInterfaceId" :: Maybe (String) , "OwnerId" :: Maybe (String) , "PrivateDnsName" :: Maybe (String) , "PrivateIpAddress" :: Maybe (String) , "PrivateIpAddresses" :: Maybe (NetworkInterfacePrivateIpAddressList) , "RequesterId" :: Maybe (String) , "RequesterManaged" :: Maybe (Boolean) , "SourceDestCheck" :: Maybe (Boolean) , "Status" :: Maybe (NetworkInterfaceStatus) , "SubnetId" :: Maybe (String) , "TagSet" :: Maybe (TagList) , "VpcId" :: Maybe (String) } -> {"Association" :: Maybe (NetworkInterfaceAssociation) , "Attachment" :: Maybe (NetworkInterfaceAttachment) , "AvailabilityZone" :: Maybe (String) , "Description" :: Maybe (String) , "Groups" :: Maybe (GroupIdentifierList) , "InterfaceType" :: Maybe (NetworkInterfaceType) , "Ipv6Addresses" :: Maybe (NetworkInterfaceIpv6AddressesList) , "MacAddress" :: Maybe (String) , "NetworkInterfaceId" :: Maybe (String) , "OwnerId" :: Maybe (String) , "PrivateDnsName" :: Maybe (String) , "PrivateIpAddress" :: Maybe (String) , "PrivateIpAddresses" :: Maybe (NetworkInterfacePrivateIpAddressList) , "RequesterId" :: Maybe (String) , "RequesterManaged" :: Maybe (Boolean) , "SourceDestCheck" :: Maybe (Boolean) , "Status" :: Maybe (NetworkInterfaceStatus) , "SubnetId" :: Maybe (String) , "TagSet" :: Maybe (TagList) , "VpcId" :: Maybe (String) } ) -> NetworkInterface
newNetworkInterface'  customize = (NetworkInterface <<< customize) { "Association": Nothing, "Attachment": Nothing, "AvailabilityZone": Nothing, "Description": Nothing, "Groups": Nothing, "InterfaceType": Nothing, "Ipv6Addresses": Nothing, "MacAddress": Nothing, "NetworkInterfaceId": Nothing, "OwnerId": Nothing, "PrivateDnsName": Nothing, "PrivateIpAddress": Nothing, "PrivateIpAddresses": Nothing, "RequesterId": Nothing, "RequesterManaged": Nothing, "SourceDestCheck": Nothing, "Status": Nothing, "SubnetId": Nothing, "TagSet": Nothing, "VpcId": Nothing }



-- | <p>Describes association information for an Elastic IP address (IPv4 only).</p>
newtype NetworkInterfaceAssociation = NetworkInterfaceAssociation 
  { "AllocationId" :: Maybe (String)
  , "AssociationId" :: Maybe (String)
  , "IpOwnerId" :: Maybe (String)
  , "PublicDnsName" :: Maybe (String)
  , "PublicIp" :: Maybe (String)
  }
derive instance newtypeNetworkInterfaceAssociation :: Newtype NetworkInterfaceAssociation _
derive instance repGenericNetworkInterfaceAssociation :: Generic NetworkInterfaceAssociation _
instance showNetworkInterfaceAssociation :: Show NetworkInterfaceAssociation where show = genericShow
instance decodeNetworkInterfaceAssociation :: Decode NetworkInterfaceAssociation where decode = genericDecode options
instance encodeNetworkInterfaceAssociation :: Encode NetworkInterfaceAssociation where encode = genericEncode options

-- | Constructs NetworkInterfaceAssociation from required parameters
newNetworkInterfaceAssociation :: NetworkInterfaceAssociation
newNetworkInterfaceAssociation  = NetworkInterfaceAssociation { "AllocationId": Nothing, "AssociationId": Nothing, "IpOwnerId": Nothing, "PublicDnsName": Nothing, "PublicIp": Nothing }

-- | Constructs NetworkInterfaceAssociation's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newNetworkInterfaceAssociation' :: ( { "AllocationId" :: Maybe (String) , "AssociationId" :: Maybe (String) , "IpOwnerId" :: Maybe (String) , "PublicDnsName" :: Maybe (String) , "PublicIp" :: Maybe (String) } -> {"AllocationId" :: Maybe (String) , "AssociationId" :: Maybe (String) , "IpOwnerId" :: Maybe (String) , "PublicDnsName" :: Maybe (String) , "PublicIp" :: Maybe (String) } ) -> NetworkInterfaceAssociation
newNetworkInterfaceAssociation'  customize = (NetworkInterfaceAssociation <<< customize) { "AllocationId": Nothing, "AssociationId": Nothing, "IpOwnerId": Nothing, "PublicDnsName": Nothing, "PublicIp": Nothing }



-- | <p>Describes a network interface attachment.</p>
newtype NetworkInterfaceAttachment = NetworkInterfaceAttachment 
  { "AttachTime" :: Maybe (DateTime)
  , "AttachmentId" :: Maybe (String)
  , "DeleteOnTermination" :: Maybe (Boolean)
  , "DeviceIndex" :: Maybe (Int)
  , "InstanceId" :: Maybe (String)
  , "InstanceOwnerId" :: Maybe (String)
  , "Status" :: Maybe (AttachmentStatus)
  }
derive instance newtypeNetworkInterfaceAttachment :: Newtype NetworkInterfaceAttachment _
derive instance repGenericNetworkInterfaceAttachment :: Generic NetworkInterfaceAttachment _
instance showNetworkInterfaceAttachment :: Show NetworkInterfaceAttachment where show = genericShow
instance decodeNetworkInterfaceAttachment :: Decode NetworkInterfaceAttachment where decode = genericDecode options
instance encodeNetworkInterfaceAttachment :: Encode NetworkInterfaceAttachment where encode = genericEncode options

-- | Constructs NetworkInterfaceAttachment from required parameters
newNetworkInterfaceAttachment :: NetworkInterfaceAttachment
newNetworkInterfaceAttachment  = NetworkInterfaceAttachment { "AttachTime": Nothing, "AttachmentId": Nothing, "DeleteOnTermination": Nothing, "DeviceIndex": Nothing, "InstanceId": Nothing, "InstanceOwnerId": Nothing, "Status": Nothing }

-- | Constructs NetworkInterfaceAttachment's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newNetworkInterfaceAttachment' :: ( { "AttachTime" :: Maybe (DateTime) , "AttachmentId" :: Maybe (String) , "DeleteOnTermination" :: Maybe (Boolean) , "DeviceIndex" :: Maybe (Int) , "InstanceId" :: Maybe (String) , "InstanceOwnerId" :: Maybe (String) , "Status" :: Maybe (AttachmentStatus) } -> {"AttachTime" :: Maybe (DateTime) , "AttachmentId" :: Maybe (String) , "DeleteOnTermination" :: Maybe (Boolean) , "DeviceIndex" :: Maybe (Int) , "InstanceId" :: Maybe (String) , "InstanceOwnerId" :: Maybe (String) , "Status" :: Maybe (AttachmentStatus) } ) -> NetworkInterfaceAttachment
newNetworkInterfaceAttachment'  customize = (NetworkInterfaceAttachment <<< customize) { "AttachTime": Nothing, "AttachmentId": Nothing, "DeleteOnTermination": Nothing, "DeviceIndex": Nothing, "InstanceId": Nothing, "InstanceOwnerId": Nothing, "Status": Nothing }



-- | <p>Describes an attachment change.</p>
newtype NetworkInterfaceAttachmentChanges = NetworkInterfaceAttachmentChanges 
  { "AttachmentId" :: Maybe (String)
  , "DeleteOnTermination" :: Maybe (Boolean)
  }
derive instance newtypeNetworkInterfaceAttachmentChanges :: Newtype NetworkInterfaceAttachmentChanges _
derive instance repGenericNetworkInterfaceAttachmentChanges :: Generic NetworkInterfaceAttachmentChanges _
instance showNetworkInterfaceAttachmentChanges :: Show NetworkInterfaceAttachmentChanges where show = genericShow
instance decodeNetworkInterfaceAttachmentChanges :: Decode NetworkInterfaceAttachmentChanges where decode = genericDecode options
instance encodeNetworkInterfaceAttachmentChanges :: Encode NetworkInterfaceAttachmentChanges where encode = genericEncode options

-- | Constructs NetworkInterfaceAttachmentChanges from required parameters
newNetworkInterfaceAttachmentChanges :: NetworkInterfaceAttachmentChanges
newNetworkInterfaceAttachmentChanges  = NetworkInterfaceAttachmentChanges { "AttachmentId": Nothing, "DeleteOnTermination": Nothing }

-- | Constructs NetworkInterfaceAttachmentChanges's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newNetworkInterfaceAttachmentChanges' :: ( { "AttachmentId" :: Maybe (String) , "DeleteOnTermination" :: Maybe (Boolean) } -> {"AttachmentId" :: Maybe (String) , "DeleteOnTermination" :: Maybe (Boolean) } ) -> NetworkInterfaceAttachmentChanges
newNetworkInterfaceAttachmentChanges'  customize = (NetworkInterfaceAttachmentChanges <<< customize) { "AttachmentId": Nothing, "DeleteOnTermination": Nothing }



newtype NetworkInterfaceAttribute = NetworkInterfaceAttribute String
derive instance newtypeNetworkInterfaceAttribute :: Newtype NetworkInterfaceAttribute _
derive instance repGenericNetworkInterfaceAttribute :: Generic NetworkInterfaceAttribute _
instance showNetworkInterfaceAttribute :: Show NetworkInterfaceAttribute where show = genericShow
instance decodeNetworkInterfaceAttribute :: Decode NetworkInterfaceAttribute where decode = genericDecode options
instance encodeNetworkInterfaceAttribute :: Encode NetworkInterfaceAttribute where encode = genericEncode options



newtype NetworkInterfaceIdList = NetworkInterfaceIdList (Array String)
derive instance newtypeNetworkInterfaceIdList :: Newtype NetworkInterfaceIdList _
derive instance repGenericNetworkInterfaceIdList :: Generic NetworkInterfaceIdList _
instance showNetworkInterfaceIdList :: Show NetworkInterfaceIdList where show = genericShow
instance decodeNetworkInterfaceIdList :: Decode NetworkInterfaceIdList where decode = genericDecode options
instance encodeNetworkInterfaceIdList :: Encode NetworkInterfaceIdList where encode = genericEncode options



-- | <p>Describes an IPv6 address associated with a network interface.</p>
newtype NetworkInterfaceIpv6Address = NetworkInterfaceIpv6Address 
  { "Ipv6Address" :: Maybe (String)
  }
derive instance newtypeNetworkInterfaceIpv6Address :: Newtype NetworkInterfaceIpv6Address _
derive instance repGenericNetworkInterfaceIpv6Address :: Generic NetworkInterfaceIpv6Address _
instance showNetworkInterfaceIpv6Address :: Show NetworkInterfaceIpv6Address where show = genericShow
instance decodeNetworkInterfaceIpv6Address :: Decode NetworkInterfaceIpv6Address where decode = genericDecode options
instance encodeNetworkInterfaceIpv6Address :: Encode NetworkInterfaceIpv6Address where encode = genericEncode options

-- | Constructs NetworkInterfaceIpv6Address from required parameters
newNetworkInterfaceIpv6Address :: NetworkInterfaceIpv6Address
newNetworkInterfaceIpv6Address  = NetworkInterfaceIpv6Address { "Ipv6Address": Nothing }

-- | Constructs NetworkInterfaceIpv6Address's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newNetworkInterfaceIpv6Address' :: ( { "Ipv6Address" :: Maybe (String) } -> {"Ipv6Address" :: Maybe (String) } ) -> NetworkInterfaceIpv6Address
newNetworkInterfaceIpv6Address'  customize = (NetworkInterfaceIpv6Address <<< customize) { "Ipv6Address": Nothing }



newtype NetworkInterfaceIpv6AddressesList = NetworkInterfaceIpv6AddressesList (Array NetworkInterfaceIpv6Address)
derive instance newtypeNetworkInterfaceIpv6AddressesList :: Newtype NetworkInterfaceIpv6AddressesList _
derive instance repGenericNetworkInterfaceIpv6AddressesList :: Generic NetworkInterfaceIpv6AddressesList _
instance showNetworkInterfaceIpv6AddressesList :: Show NetworkInterfaceIpv6AddressesList where show = genericShow
instance decodeNetworkInterfaceIpv6AddressesList :: Decode NetworkInterfaceIpv6AddressesList where decode = genericDecode options
instance encodeNetworkInterfaceIpv6AddressesList :: Encode NetworkInterfaceIpv6AddressesList where encode = genericEncode options



newtype NetworkInterfaceList = NetworkInterfaceList (Array NetworkInterface)
derive instance newtypeNetworkInterfaceList :: Newtype NetworkInterfaceList _
derive instance repGenericNetworkInterfaceList :: Generic NetworkInterfaceList _
instance showNetworkInterfaceList :: Show NetworkInterfaceList where show = genericShow
instance decodeNetworkInterfaceList :: Decode NetworkInterfaceList where decode = genericDecode options
instance encodeNetworkInterfaceList :: Encode NetworkInterfaceList where encode = genericEncode options



-- | <p>Describes a permission for a network interface.</p>
newtype NetworkInterfacePermission = NetworkInterfacePermission 
  { "NetworkInterfacePermissionId" :: Maybe (String)
  , "NetworkInterfaceId" :: Maybe (String)
  , "AwsAccountId" :: Maybe (String)
  , "AwsService" :: Maybe (String)
  , "Permission" :: Maybe (InterfacePermissionType)
  , "PermissionState" :: Maybe (NetworkInterfacePermissionState)
  }
derive instance newtypeNetworkInterfacePermission :: Newtype NetworkInterfacePermission _
derive instance repGenericNetworkInterfacePermission :: Generic NetworkInterfacePermission _
instance showNetworkInterfacePermission :: Show NetworkInterfacePermission where show = genericShow
instance decodeNetworkInterfacePermission :: Decode NetworkInterfacePermission where decode = genericDecode options
instance encodeNetworkInterfacePermission :: Encode NetworkInterfacePermission where encode = genericEncode options

-- | Constructs NetworkInterfacePermission from required parameters
newNetworkInterfacePermission :: NetworkInterfacePermission
newNetworkInterfacePermission  = NetworkInterfacePermission { "AwsAccountId": Nothing, "AwsService": Nothing, "NetworkInterfaceId": Nothing, "NetworkInterfacePermissionId": Nothing, "Permission": Nothing, "PermissionState": Nothing }

-- | Constructs NetworkInterfacePermission's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newNetworkInterfacePermission' :: ( { "NetworkInterfacePermissionId" :: Maybe (String) , "NetworkInterfaceId" :: Maybe (String) , "AwsAccountId" :: Maybe (String) , "AwsService" :: Maybe (String) , "Permission" :: Maybe (InterfacePermissionType) , "PermissionState" :: Maybe (NetworkInterfacePermissionState) } -> {"NetworkInterfacePermissionId" :: Maybe (String) , "NetworkInterfaceId" :: Maybe (String) , "AwsAccountId" :: Maybe (String) , "AwsService" :: Maybe (String) , "Permission" :: Maybe (InterfacePermissionType) , "PermissionState" :: Maybe (NetworkInterfacePermissionState) } ) -> NetworkInterfacePermission
newNetworkInterfacePermission'  customize = (NetworkInterfacePermission <<< customize) { "AwsAccountId": Nothing, "AwsService": Nothing, "NetworkInterfaceId": Nothing, "NetworkInterfacePermissionId": Nothing, "Permission": Nothing, "PermissionState": Nothing }



newtype NetworkInterfacePermissionIdList = NetworkInterfacePermissionIdList (Array String)
derive instance newtypeNetworkInterfacePermissionIdList :: Newtype NetworkInterfacePermissionIdList _
derive instance repGenericNetworkInterfacePermissionIdList :: Generic NetworkInterfacePermissionIdList _
instance showNetworkInterfacePermissionIdList :: Show NetworkInterfacePermissionIdList where show = genericShow
instance decodeNetworkInterfacePermissionIdList :: Decode NetworkInterfacePermissionIdList where decode = genericDecode options
instance encodeNetworkInterfacePermissionIdList :: Encode NetworkInterfacePermissionIdList where encode = genericEncode options



newtype NetworkInterfacePermissionList = NetworkInterfacePermissionList (Array NetworkInterfacePermission)
derive instance newtypeNetworkInterfacePermissionList :: Newtype NetworkInterfacePermissionList _
derive instance repGenericNetworkInterfacePermissionList :: Generic NetworkInterfacePermissionList _
instance showNetworkInterfacePermissionList :: Show NetworkInterfacePermissionList where show = genericShow
instance decodeNetworkInterfacePermissionList :: Decode NetworkInterfacePermissionList where decode = genericDecode options
instance encodeNetworkInterfacePermissionList :: Encode NetworkInterfacePermissionList where encode = genericEncode options



-- | <p>Describes the state of a network interface permission.</p>
newtype NetworkInterfacePermissionState = NetworkInterfacePermissionState 
  { "State" :: Maybe (NetworkInterfacePermissionStateCode)
  , "StatusMessage" :: Maybe (String)
  }
derive instance newtypeNetworkInterfacePermissionState :: Newtype NetworkInterfacePermissionState _
derive instance repGenericNetworkInterfacePermissionState :: Generic NetworkInterfacePermissionState _
instance showNetworkInterfacePermissionState :: Show NetworkInterfacePermissionState where show = genericShow
instance decodeNetworkInterfacePermissionState :: Decode NetworkInterfacePermissionState where decode = genericDecode options
instance encodeNetworkInterfacePermissionState :: Encode NetworkInterfacePermissionState where encode = genericEncode options

-- | Constructs NetworkInterfacePermissionState from required parameters
newNetworkInterfacePermissionState :: NetworkInterfacePermissionState
newNetworkInterfacePermissionState  = NetworkInterfacePermissionState { "State": Nothing, "StatusMessage": Nothing }

-- | Constructs NetworkInterfacePermissionState's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newNetworkInterfacePermissionState' :: ( { "State" :: Maybe (NetworkInterfacePermissionStateCode) , "StatusMessage" :: Maybe (String) } -> {"State" :: Maybe (NetworkInterfacePermissionStateCode) , "StatusMessage" :: Maybe (String) } ) -> NetworkInterfacePermissionState
newNetworkInterfacePermissionState'  customize = (NetworkInterfacePermissionState <<< customize) { "State": Nothing, "StatusMessage": Nothing }



newtype NetworkInterfacePermissionStateCode = NetworkInterfacePermissionStateCode String
derive instance newtypeNetworkInterfacePermissionStateCode :: Newtype NetworkInterfacePermissionStateCode _
derive instance repGenericNetworkInterfacePermissionStateCode :: Generic NetworkInterfacePermissionStateCode _
instance showNetworkInterfacePermissionStateCode :: Show NetworkInterfacePermissionStateCode where show = genericShow
instance decodeNetworkInterfacePermissionStateCode :: Decode NetworkInterfacePermissionStateCode where decode = genericDecode options
instance encodeNetworkInterfacePermissionStateCode :: Encode NetworkInterfacePermissionStateCode where encode = genericEncode options



-- | <p>Describes the private IPv4 address of a network interface.</p>
newtype NetworkInterfacePrivateIpAddress = NetworkInterfacePrivateIpAddress 
  { "Association" :: Maybe (NetworkInterfaceAssociation)
  , "Primary" :: Maybe (Boolean)
  , "PrivateDnsName" :: Maybe (String)
  , "PrivateIpAddress" :: Maybe (String)
  }
derive instance newtypeNetworkInterfacePrivateIpAddress :: Newtype NetworkInterfacePrivateIpAddress _
derive instance repGenericNetworkInterfacePrivateIpAddress :: Generic NetworkInterfacePrivateIpAddress _
instance showNetworkInterfacePrivateIpAddress :: Show NetworkInterfacePrivateIpAddress where show = genericShow
instance decodeNetworkInterfacePrivateIpAddress :: Decode NetworkInterfacePrivateIpAddress where decode = genericDecode options
instance encodeNetworkInterfacePrivateIpAddress :: Encode NetworkInterfacePrivateIpAddress where encode = genericEncode options

-- | Constructs NetworkInterfacePrivateIpAddress from required parameters
newNetworkInterfacePrivateIpAddress :: NetworkInterfacePrivateIpAddress
newNetworkInterfacePrivateIpAddress  = NetworkInterfacePrivateIpAddress { "Association": Nothing, "Primary": Nothing, "PrivateDnsName": Nothing, "PrivateIpAddress": Nothing }

-- | Constructs NetworkInterfacePrivateIpAddress's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newNetworkInterfacePrivateIpAddress' :: ( { "Association" :: Maybe (NetworkInterfaceAssociation) , "Primary" :: Maybe (Boolean) , "PrivateDnsName" :: Maybe (String) , "PrivateIpAddress" :: Maybe (String) } -> {"Association" :: Maybe (NetworkInterfaceAssociation) , "Primary" :: Maybe (Boolean) , "PrivateDnsName" :: Maybe (String) , "PrivateIpAddress" :: Maybe (String) } ) -> NetworkInterfacePrivateIpAddress
newNetworkInterfacePrivateIpAddress'  customize = (NetworkInterfacePrivateIpAddress <<< customize) { "Association": Nothing, "Primary": Nothing, "PrivateDnsName": Nothing, "PrivateIpAddress": Nothing }



newtype NetworkInterfacePrivateIpAddressList = NetworkInterfacePrivateIpAddressList (Array NetworkInterfacePrivateIpAddress)
derive instance newtypeNetworkInterfacePrivateIpAddressList :: Newtype NetworkInterfacePrivateIpAddressList _
derive instance repGenericNetworkInterfacePrivateIpAddressList :: Generic NetworkInterfacePrivateIpAddressList _
instance showNetworkInterfacePrivateIpAddressList :: Show NetworkInterfacePrivateIpAddressList where show = genericShow
instance decodeNetworkInterfacePrivateIpAddressList :: Decode NetworkInterfacePrivateIpAddressList where decode = genericDecode options
instance encodeNetworkInterfacePrivateIpAddressList :: Encode NetworkInterfacePrivateIpAddressList where encode = genericEncode options



newtype NetworkInterfaceStatus = NetworkInterfaceStatus String
derive instance newtypeNetworkInterfaceStatus :: Newtype NetworkInterfaceStatus _
derive instance repGenericNetworkInterfaceStatus :: Generic NetworkInterfaceStatus _
instance showNetworkInterfaceStatus :: Show NetworkInterfaceStatus where show = genericShow
instance decodeNetworkInterfaceStatus :: Decode NetworkInterfaceStatus where decode = genericDecode options
instance encodeNetworkInterfaceStatus :: Encode NetworkInterfaceStatus where encode = genericEncode options



newtype NetworkInterfaceType = NetworkInterfaceType String
derive instance newtypeNetworkInterfaceType :: Newtype NetworkInterfaceType _
derive instance repGenericNetworkInterfaceType :: Generic NetworkInterfaceType _
instance showNetworkInterfaceType :: Show NetworkInterfaceType where show = genericShow
instance decodeNetworkInterfaceType :: Decode NetworkInterfaceType where decode = genericDecode options
instance encodeNetworkInterfaceType :: Encode NetworkInterfaceType where encode = genericEncode options



newtype NewDhcpConfiguration = NewDhcpConfiguration 
  { "Key" :: Maybe (String)
  , "Values" :: Maybe (ValueStringList)
  }
derive instance newtypeNewDhcpConfiguration :: Newtype NewDhcpConfiguration _
derive instance repGenericNewDhcpConfiguration :: Generic NewDhcpConfiguration _
instance showNewDhcpConfiguration :: Show NewDhcpConfiguration where show = genericShow
instance decodeNewDhcpConfiguration :: Decode NewDhcpConfiguration where decode = genericDecode options
instance encodeNewDhcpConfiguration :: Encode NewDhcpConfiguration where encode = genericEncode options

-- | Constructs NewDhcpConfiguration from required parameters
newNewDhcpConfiguration :: NewDhcpConfiguration
newNewDhcpConfiguration  = NewDhcpConfiguration { "Key": Nothing, "Values": Nothing }

-- | Constructs NewDhcpConfiguration's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newNewDhcpConfiguration' :: ( { "Key" :: Maybe (String) , "Values" :: Maybe (ValueStringList) } -> {"Key" :: Maybe (String) , "Values" :: Maybe (ValueStringList) } ) -> NewDhcpConfiguration
newNewDhcpConfiguration'  customize = (NewDhcpConfiguration <<< customize) { "Key": Nothing, "Values": Nothing }



newtype NewDhcpConfigurationList = NewDhcpConfigurationList (Array NewDhcpConfiguration)
derive instance newtypeNewDhcpConfigurationList :: Newtype NewDhcpConfigurationList _
derive instance repGenericNewDhcpConfigurationList :: Generic NewDhcpConfigurationList _
instance showNewDhcpConfigurationList :: Show NewDhcpConfigurationList where show = genericShow
instance decodeNewDhcpConfigurationList :: Decode NewDhcpConfigurationList where decode = genericDecode options
instance encodeNewDhcpConfigurationList :: Encode NewDhcpConfigurationList where encode = genericEncode options



newtype NextToken = NextToken String
derive instance newtypeNextToken :: Newtype NextToken _
derive instance repGenericNextToken :: Generic NextToken _
instance showNextToken :: Show NextToken where show = genericShow
instance decodeNextToken :: Decode NextToken where decode = genericDecode options
instance encodeNextToken :: Encode NextToken where encode = genericEncode options



newtype OccurrenceDayRequestSet = OccurrenceDayRequestSet (Array Int)
derive instance newtypeOccurrenceDayRequestSet :: Newtype OccurrenceDayRequestSet _
derive instance repGenericOccurrenceDayRequestSet :: Generic OccurrenceDayRequestSet _
instance showOccurrenceDayRequestSet :: Show OccurrenceDayRequestSet where show = genericShow
instance decodeOccurrenceDayRequestSet :: Decode OccurrenceDayRequestSet where decode = genericDecode options
instance encodeOccurrenceDayRequestSet :: Encode OccurrenceDayRequestSet where encode = genericEncode options



newtype OccurrenceDaySet = OccurrenceDaySet (Array Int)
derive instance newtypeOccurrenceDaySet :: Newtype OccurrenceDaySet _
derive instance repGenericOccurrenceDaySet :: Generic OccurrenceDaySet _
instance showOccurrenceDaySet :: Show OccurrenceDaySet where show = genericShow
instance decodeOccurrenceDaySet :: Decode OccurrenceDaySet where decode = genericDecode options
instance encodeOccurrenceDaySet :: Encode OccurrenceDaySet where encode = genericEncode options



newtype OfferingClassType = OfferingClassType String
derive instance newtypeOfferingClassType :: Newtype OfferingClassType _
derive instance repGenericOfferingClassType :: Generic OfferingClassType _
instance showOfferingClassType :: Show OfferingClassType where show = genericShow
instance decodeOfferingClassType :: Decode OfferingClassType where decode = genericDecode options
instance encodeOfferingClassType :: Encode OfferingClassType where encode = genericEncode options



newtype OfferingTypeValues = OfferingTypeValues String
derive instance newtypeOfferingTypeValues :: Newtype OfferingTypeValues _
derive instance repGenericOfferingTypeValues :: Generic OfferingTypeValues _
instance showOfferingTypeValues :: Show OfferingTypeValues where show = genericShow
instance decodeOfferingTypeValues :: Decode OfferingTypeValues where decode = genericDecode options
instance encodeOfferingTypeValues :: Encode OfferingTypeValues where encode = genericEncode options



newtype OperationType = OperationType String
derive instance newtypeOperationType :: Newtype OperationType _
derive instance repGenericOperationType :: Generic OperationType _
instance showOperationType :: Show OperationType where show = genericShow
instance decodeOperationType :: Decode OperationType where decode = genericDecode options
instance encodeOperationType :: Encode OperationType where encode = genericEncode options



newtype OwnerStringList = OwnerStringList (Array String)
derive instance newtypeOwnerStringList :: Newtype OwnerStringList _
derive instance repGenericOwnerStringList :: Generic OwnerStringList _
instance showOwnerStringList :: Show OwnerStringList where show = genericShow
instance decodeOwnerStringList :: Decode OwnerStringList where decode = genericDecode options
instance encodeOwnerStringList :: Encode OwnerStringList where encode = genericEncode options



newtype PaymentOption = PaymentOption String
derive instance newtypePaymentOption :: Newtype PaymentOption _
derive instance repGenericPaymentOption :: Generic PaymentOption _
instance showPaymentOption :: Show PaymentOption where show = genericShow
instance decodePaymentOption :: Decode PaymentOption where decode = genericDecode options
instance encodePaymentOption :: Encode PaymentOption where encode = genericEncode options



-- | <p>Describes the data that identifies an Amazon FPGA image (AFI) on the PCI bus.</p>
newtype PciId = PciId 
  { "DeviceId" :: Maybe (String)
  , "VendorId" :: Maybe (String)
  , "SubsystemId" :: Maybe (String)
  , "SubsystemVendorId" :: Maybe (String)
  }
derive instance newtypePciId :: Newtype PciId _
derive instance repGenericPciId :: Generic PciId _
instance showPciId :: Show PciId where show = genericShow
instance decodePciId :: Decode PciId where decode = genericDecode options
instance encodePciId :: Encode PciId where encode = genericEncode options

-- | Constructs PciId from required parameters
newPciId :: PciId
newPciId  = PciId { "DeviceId": Nothing, "SubsystemId": Nothing, "SubsystemVendorId": Nothing, "VendorId": Nothing }

-- | Constructs PciId's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newPciId' :: ( { "DeviceId" :: Maybe (String) , "VendorId" :: Maybe (String) , "SubsystemId" :: Maybe (String) , "SubsystemVendorId" :: Maybe (String) } -> {"DeviceId" :: Maybe (String) , "VendorId" :: Maybe (String) , "SubsystemId" :: Maybe (String) , "SubsystemVendorId" :: Maybe (String) } ) -> PciId
newPciId'  customize = (PciId <<< customize) { "DeviceId": Nothing, "SubsystemId": Nothing, "SubsystemVendorId": Nothing, "VendorId": Nothing }



-- | <p>Describes the VPC peering connection options.</p>
newtype PeeringConnectionOptions = PeeringConnectionOptions 
  { "AllowDnsResolutionFromRemoteVpc" :: Maybe (Boolean)
  , "AllowEgressFromLocalClassicLinkToRemoteVpc" :: Maybe (Boolean)
  , "AllowEgressFromLocalVpcToRemoteClassicLink" :: Maybe (Boolean)
  }
derive instance newtypePeeringConnectionOptions :: Newtype PeeringConnectionOptions _
derive instance repGenericPeeringConnectionOptions :: Generic PeeringConnectionOptions _
instance showPeeringConnectionOptions :: Show PeeringConnectionOptions where show = genericShow
instance decodePeeringConnectionOptions :: Decode PeeringConnectionOptions where decode = genericDecode options
instance encodePeeringConnectionOptions :: Encode PeeringConnectionOptions where encode = genericEncode options

-- | Constructs PeeringConnectionOptions from required parameters
newPeeringConnectionOptions :: PeeringConnectionOptions
newPeeringConnectionOptions  = PeeringConnectionOptions { "AllowDnsResolutionFromRemoteVpc": Nothing, "AllowEgressFromLocalClassicLinkToRemoteVpc": Nothing, "AllowEgressFromLocalVpcToRemoteClassicLink": Nothing }

-- | Constructs PeeringConnectionOptions's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newPeeringConnectionOptions' :: ( { "AllowDnsResolutionFromRemoteVpc" :: Maybe (Boolean) , "AllowEgressFromLocalClassicLinkToRemoteVpc" :: Maybe (Boolean) , "AllowEgressFromLocalVpcToRemoteClassicLink" :: Maybe (Boolean) } -> {"AllowDnsResolutionFromRemoteVpc" :: Maybe (Boolean) , "AllowEgressFromLocalClassicLinkToRemoteVpc" :: Maybe (Boolean) , "AllowEgressFromLocalVpcToRemoteClassicLink" :: Maybe (Boolean) } ) -> PeeringConnectionOptions
newPeeringConnectionOptions'  customize = (PeeringConnectionOptions <<< customize) { "AllowDnsResolutionFromRemoteVpc": Nothing, "AllowEgressFromLocalClassicLinkToRemoteVpc": Nothing, "AllowEgressFromLocalVpcToRemoteClassicLink": Nothing }



-- | <p>The VPC peering connection options.</p>
newtype PeeringConnectionOptionsRequest = PeeringConnectionOptionsRequest 
  { "AllowDnsResolutionFromRemoteVpc" :: Maybe (Boolean)
  , "AllowEgressFromLocalClassicLinkToRemoteVpc" :: Maybe (Boolean)
  , "AllowEgressFromLocalVpcToRemoteClassicLink" :: Maybe (Boolean)
  }
derive instance newtypePeeringConnectionOptionsRequest :: Newtype PeeringConnectionOptionsRequest _
derive instance repGenericPeeringConnectionOptionsRequest :: Generic PeeringConnectionOptionsRequest _
instance showPeeringConnectionOptionsRequest :: Show PeeringConnectionOptionsRequest where show = genericShow
instance decodePeeringConnectionOptionsRequest :: Decode PeeringConnectionOptionsRequest where decode = genericDecode options
instance encodePeeringConnectionOptionsRequest :: Encode PeeringConnectionOptionsRequest where encode = genericEncode options

-- | Constructs PeeringConnectionOptionsRequest from required parameters
newPeeringConnectionOptionsRequest :: PeeringConnectionOptionsRequest
newPeeringConnectionOptionsRequest  = PeeringConnectionOptionsRequest { "AllowDnsResolutionFromRemoteVpc": Nothing, "AllowEgressFromLocalClassicLinkToRemoteVpc": Nothing, "AllowEgressFromLocalVpcToRemoteClassicLink": Nothing }

-- | Constructs PeeringConnectionOptionsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newPeeringConnectionOptionsRequest' :: ( { "AllowDnsResolutionFromRemoteVpc" :: Maybe (Boolean) , "AllowEgressFromLocalClassicLinkToRemoteVpc" :: Maybe (Boolean) , "AllowEgressFromLocalVpcToRemoteClassicLink" :: Maybe (Boolean) } -> {"AllowDnsResolutionFromRemoteVpc" :: Maybe (Boolean) , "AllowEgressFromLocalClassicLinkToRemoteVpc" :: Maybe (Boolean) , "AllowEgressFromLocalVpcToRemoteClassicLink" :: Maybe (Boolean) } ) -> PeeringConnectionOptionsRequest
newPeeringConnectionOptionsRequest'  customize = (PeeringConnectionOptionsRequest <<< customize) { "AllowDnsResolutionFromRemoteVpc": Nothing, "AllowEgressFromLocalClassicLinkToRemoteVpc": Nothing, "AllowEgressFromLocalVpcToRemoteClassicLink": Nothing }



newtype PermissionGroup = PermissionGroup String
derive instance newtypePermissionGroup :: Newtype PermissionGroup _
derive instance repGenericPermissionGroup :: Generic PermissionGroup _
instance showPermissionGroup :: Show PermissionGroup where show = genericShow
instance decodePermissionGroup :: Decode PermissionGroup where decode = genericDecode options
instance encodePermissionGroup :: Encode PermissionGroup where encode = genericEncode options



-- | <p>Describes the placement of an instance.</p>
newtype Placement = Placement 
  { "AvailabilityZone" :: Maybe (String)
  , "Affinity" :: Maybe (String)
  , "GroupName" :: Maybe (String)
  , "HostId" :: Maybe (String)
  , "Tenancy" :: Maybe (Tenancy)
  , "SpreadDomain" :: Maybe (String)
  }
derive instance newtypePlacement :: Newtype Placement _
derive instance repGenericPlacement :: Generic Placement _
instance showPlacement :: Show Placement where show = genericShow
instance decodePlacement :: Decode Placement where decode = genericDecode options
instance encodePlacement :: Encode Placement where encode = genericEncode options

-- | Constructs Placement from required parameters
newPlacement :: Placement
newPlacement  = Placement { "Affinity": Nothing, "AvailabilityZone": Nothing, "GroupName": Nothing, "HostId": Nothing, "SpreadDomain": Nothing, "Tenancy": Nothing }

-- | Constructs Placement's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newPlacement' :: ( { "AvailabilityZone" :: Maybe (String) , "Affinity" :: Maybe (String) , "GroupName" :: Maybe (String) , "HostId" :: Maybe (String) , "Tenancy" :: Maybe (Tenancy) , "SpreadDomain" :: Maybe (String) } -> {"AvailabilityZone" :: Maybe (String) , "Affinity" :: Maybe (String) , "GroupName" :: Maybe (String) , "HostId" :: Maybe (String) , "Tenancy" :: Maybe (Tenancy) , "SpreadDomain" :: Maybe (String) } ) -> Placement
newPlacement'  customize = (Placement <<< customize) { "Affinity": Nothing, "AvailabilityZone": Nothing, "GroupName": Nothing, "HostId": Nothing, "SpreadDomain": Nothing, "Tenancy": Nothing }



-- | <p>Describes a placement group.</p>
newtype PlacementGroup = PlacementGroup 
  { "GroupName" :: Maybe (String)
  , "State" :: Maybe (PlacementGroupState)
  , "Strategy" :: Maybe (PlacementStrategy)
  }
derive instance newtypePlacementGroup :: Newtype PlacementGroup _
derive instance repGenericPlacementGroup :: Generic PlacementGroup _
instance showPlacementGroup :: Show PlacementGroup where show = genericShow
instance decodePlacementGroup :: Decode PlacementGroup where decode = genericDecode options
instance encodePlacementGroup :: Encode PlacementGroup where encode = genericEncode options

-- | Constructs PlacementGroup from required parameters
newPlacementGroup :: PlacementGroup
newPlacementGroup  = PlacementGroup { "GroupName": Nothing, "State": Nothing, "Strategy": Nothing }

-- | Constructs PlacementGroup's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newPlacementGroup' :: ( { "GroupName" :: Maybe (String) , "State" :: Maybe (PlacementGroupState) , "Strategy" :: Maybe (PlacementStrategy) } -> {"GroupName" :: Maybe (String) , "State" :: Maybe (PlacementGroupState) , "Strategy" :: Maybe (PlacementStrategy) } ) -> PlacementGroup
newPlacementGroup'  customize = (PlacementGroup <<< customize) { "GroupName": Nothing, "State": Nothing, "Strategy": Nothing }



newtype PlacementGroupList = PlacementGroupList (Array PlacementGroup)
derive instance newtypePlacementGroupList :: Newtype PlacementGroupList _
derive instance repGenericPlacementGroupList :: Generic PlacementGroupList _
instance showPlacementGroupList :: Show PlacementGroupList where show = genericShow
instance decodePlacementGroupList :: Decode PlacementGroupList where decode = genericDecode options
instance encodePlacementGroupList :: Encode PlacementGroupList where encode = genericEncode options



newtype PlacementGroupState = PlacementGroupState String
derive instance newtypePlacementGroupState :: Newtype PlacementGroupState _
derive instance repGenericPlacementGroupState :: Generic PlacementGroupState _
instance showPlacementGroupState :: Show PlacementGroupState where show = genericShow
instance decodePlacementGroupState :: Decode PlacementGroupState where decode = genericDecode options
instance encodePlacementGroupState :: Encode PlacementGroupState where encode = genericEncode options



newtype PlacementGroupStringList = PlacementGroupStringList (Array String)
derive instance newtypePlacementGroupStringList :: Newtype PlacementGroupStringList _
derive instance repGenericPlacementGroupStringList :: Generic PlacementGroupStringList _
instance showPlacementGroupStringList :: Show PlacementGroupStringList where show = genericShow
instance decodePlacementGroupStringList :: Decode PlacementGroupStringList where decode = genericDecode options
instance encodePlacementGroupStringList :: Encode PlacementGroupStringList where encode = genericEncode options



newtype PlacementStrategy = PlacementStrategy String
derive instance newtypePlacementStrategy :: Newtype PlacementStrategy _
derive instance repGenericPlacementStrategy :: Generic PlacementStrategy _
instance showPlacementStrategy :: Show PlacementStrategy where show = genericShow
instance decodePlacementStrategy :: Decode PlacementStrategy where decode = genericDecode options
instance encodePlacementStrategy :: Encode PlacementStrategy where encode = genericEncode options



newtype PlatformValues = PlatformValues String
derive instance newtypePlatformValues :: Newtype PlatformValues _
derive instance repGenericPlatformValues :: Generic PlatformValues _
instance showPlatformValues :: Show PlatformValues where show = genericShow
instance decodePlatformValues :: Decode PlatformValues where decode = genericDecode options
instance encodePlatformValues :: Encode PlatformValues where encode = genericEncode options



-- | <p>Describes a range of ports.</p>
newtype PortRange = PortRange 
  { "From" :: Maybe (Int)
  , "To" :: Maybe (Int)
  }
derive instance newtypePortRange :: Newtype PortRange _
derive instance repGenericPortRange :: Generic PortRange _
instance showPortRange :: Show PortRange where show = genericShow
instance decodePortRange :: Decode PortRange where decode = genericDecode options
instance encodePortRange :: Encode PortRange where encode = genericEncode options

-- | Constructs PortRange from required parameters
newPortRange :: PortRange
newPortRange  = PortRange { "From": Nothing, "To": Nothing }

-- | Constructs PortRange's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newPortRange' :: ( { "From" :: Maybe (Int) , "To" :: Maybe (Int) } -> {"From" :: Maybe (Int) , "To" :: Maybe (Int) } ) -> PortRange
newPortRange'  customize = (PortRange <<< customize) { "From": Nothing, "To": Nothing }



-- | <p>Describes prefixes for AWS services.</p>
newtype PrefixList = PrefixList 
  { "Cidrs" :: Maybe (ValueStringList)
  , "PrefixListId" :: Maybe (String)
  , "PrefixListName" :: Maybe (String)
  }
derive instance newtypePrefixList :: Newtype PrefixList _
derive instance repGenericPrefixList :: Generic PrefixList _
instance showPrefixList :: Show PrefixList where show = genericShow
instance decodePrefixList :: Decode PrefixList where decode = genericDecode options
instance encodePrefixList :: Encode PrefixList where encode = genericEncode options

-- | Constructs PrefixList from required parameters
newPrefixList :: PrefixList
newPrefixList  = PrefixList { "Cidrs": Nothing, "PrefixListId": Nothing, "PrefixListName": Nothing }

-- | Constructs PrefixList's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newPrefixList' :: ( { "Cidrs" :: Maybe (ValueStringList) , "PrefixListId" :: Maybe (String) , "PrefixListName" :: Maybe (String) } -> {"Cidrs" :: Maybe (ValueStringList) , "PrefixListId" :: Maybe (String) , "PrefixListName" :: Maybe (String) } ) -> PrefixList
newPrefixList'  customize = (PrefixList <<< customize) { "Cidrs": Nothing, "PrefixListId": Nothing, "PrefixListName": Nothing }



-- | <p>[EC2-VPC only] The ID of the prefix.</p>
newtype PrefixListId = PrefixListId 
  { "Description" :: Maybe (String)
  , "PrefixListId" :: Maybe (String)
  }
derive instance newtypePrefixListId :: Newtype PrefixListId _
derive instance repGenericPrefixListId :: Generic PrefixListId _
instance showPrefixListId :: Show PrefixListId where show = genericShow
instance decodePrefixListId :: Decode PrefixListId where decode = genericDecode options
instance encodePrefixListId :: Encode PrefixListId where encode = genericEncode options

-- | Constructs PrefixListId from required parameters
newPrefixListId :: PrefixListId
newPrefixListId  = PrefixListId { "Description": Nothing, "PrefixListId": Nothing }

-- | Constructs PrefixListId's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newPrefixListId' :: ( { "Description" :: Maybe (String) , "PrefixListId" :: Maybe (String) } -> {"Description" :: Maybe (String) , "PrefixListId" :: Maybe (String) } ) -> PrefixListId
newPrefixListId'  customize = (PrefixListId <<< customize) { "Description": Nothing, "PrefixListId": Nothing }



newtype PrefixListIdList = PrefixListIdList (Array PrefixListId)
derive instance newtypePrefixListIdList :: Newtype PrefixListIdList _
derive instance repGenericPrefixListIdList :: Generic PrefixListIdList _
instance showPrefixListIdList :: Show PrefixListIdList where show = genericShow
instance decodePrefixListIdList :: Decode PrefixListIdList where decode = genericDecode options
instance encodePrefixListIdList :: Encode PrefixListIdList where encode = genericEncode options



newtype PrefixListIdSet = PrefixListIdSet (Array String)
derive instance newtypePrefixListIdSet :: Newtype PrefixListIdSet _
derive instance repGenericPrefixListIdSet :: Generic PrefixListIdSet _
instance showPrefixListIdSet :: Show PrefixListIdSet where show = genericShow
instance decodePrefixListIdSet :: Decode PrefixListIdSet where decode = genericDecode options
instance encodePrefixListIdSet :: Encode PrefixListIdSet where encode = genericEncode options



newtype PrefixListSet = PrefixListSet (Array PrefixList)
derive instance newtypePrefixListSet :: Newtype PrefixListSet _
derive instance repGenericPrefixListSet :: Generic PrefixListSet _
instance showPrefixListSet :: Show PrefixListSet where show = genericShow
instance decodePrefixListSet :: Decode PrefixListSet where decode = genericDecode options
instance encodePrefixListSet :: Encode PrefixListSet where encode = genericEncode options



-- | <p>Describes the price for a Reserved Instance.</p>
newtype PriceSchedule = PriceSchedule 
  { "Active" :: Maybe (Boolean)
  , "CurrencyCode" :: Maybe (CurrencyCodeValues)
  , "Price" :: Maybe (Number)
  , "Term" :: Maybe (Number)
  }
derive instance newtypePriceSchedule :: Newtype PriceSchedule _
derive instance repGenericPriceSchedule :: Generic PriceSchedule _
instance showPriceSchedule :: Show PriceSchedule where show = genericShow
instance decodePriceSchedule :: Decode PriceSchedule where decode = genericDecode options
instance encodePriceSchedule :: Encode PriceSchedule where encode = genericEncode options

-- | Constructs PriceSchedule from required parameters
newPriceSchedule :: PriceSchedule
newPriceSchedule  = PriceSchedule { "Active": Nothing, "CurrencyCode": Nothing, "Price": Nothing, "Term": Nothing }

-- | Constructs PriceSchedule's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newPriceSchedule' :: ( { "Active" :: Maybe (Boolean) , "CurrencyCode" :: Maybe (CurrencyCodeValues) , "Price" :: Maybe (Number) , "Term" :: Maybe (Number) } -> {"Active" :: Maybe (Boolean) , "CurrencyCode" :: Maybe (CurrencyCodeValues) , "Price" :: Maybe (Number) , "Term" :: Maybe (Number) } ) -> PriceSchedule
newPriceSchedule'  customize = (PriceSchedule <<< customize) { "Active": Nothing, "CurrencyCode": Nothing, "Price": Nothing, "Term": Nothing }



newtype PriceScheduleList = PriceScheduleList (Array PriceSchedule)
derive instance newtypePriceScheduleList :: Newtype PriceScheduleList _
derive instance repGenericPriceScheduleList :: Generic PriceScheduleList _
instance showPriceScheduleList :: Show PriceScheduleList where show = genericShow
instance decodePriceScheduleList :: Decode PriceScheduleList where decode = genericDecode options
instance encodePriceScheduleList :: Encode PriceScheduleList where encode = genericEncode options



-- | <p>Describes the price for a Reserved Instance.</p>
newtype PriceScheduleSpecification = PriceScheduleSpecification 
  { "CurrencyCode" :: Maybe (CurrencyCodeValues)
  , "Price" :: Maybe (Number)
  , "Term" :: Maybe (Number)
  }
derive instance newtypePriceScheduleSpecification :: Newtype PriceScheduleSpecification _
derive instance repGenericPriceScheduleSpecification :: Generic PriceScheduleSpecification _
instance showPriceScheduleSpecification :: Show PriceScheduleSpecification where show = genericShow
instance decodePriceScheduleSpecification :: Decode PriceScheduleSpecification where decode = genericDecode options
instance encodePriceScheduleSpecification :: Encode PriceScheduleSpecification where encode = genericEncode options

-- | Constructs PriceScheduleSpecification from required parameters
newPriceScheduleSpecification :: PriceScheduleSpecification
newPriceScheduleSpecification  = PriceScheduleSpecification { "CurrencyCode": Nothing, "Price": Nothing, "Term": Nothing }

-- | Constructs PriceScheduleSpecification's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newPriceScheduleSpecification' :: ( { "CurrencyCode" :: Maybe (CurrencyCodeValues) , "Price" :: Maybe (Number) , "Term" :: Maybe (Number) } -> {"CurrencyCode" :: Maybe (CurrencyCodeValues) , "Price" :: Maybe (Number) , "Term" :: Maybe (Number) } ) -> PriceScheduleSpecification
newPriceScheduleSpecification'  customize = (PriceScheduleSpecification <<< customize) { "CurrencyCode": Nothing, "Price": Nothing, "Term": Nothing }



newtype PriceScheduleSpecificationList = PriceScheduleSpecificationList (Array PriceScheduleSpecification)
derive instance newtypePriceScheduleSpecificationList :: Newtype PriceScheduleSpecificationList _
derive instance repGenericPriceScheduleSpecificationList :: Generic PriceScheduleSpecificationList _
instance showPriceScheduleSpecificationList :: Show PriceScheduleSpecificationList where show = genericShow
instance decodePriceScheduleSpecificationList :: Decode PriceScheduleSpecificationList where decode = genericDecode options
instance encodePriceScheduleSpecificationList :: Encode PriceScheduleSpecificationList where encode = genericEncode options



-- | <p>Describes a Reserved Instance offering.</p>
newtype PricingDetail = PricingDetail 
  { "Count" :: Maybe (Int)
  , "Price" :: Maybe (Number)
  }
derive instance newtypePricingDetail :: Newtype PricingDetail _
derive instance repGenericPricingDetail :: Generic PricingDetail _
instance showPricingDetail :: Show PricingDetail where show = genericShow
instance decodePricingDetail :: Decode PricingDetail where decode = genericDecode options
instance encodePricingDetail :: Encode PricingDetail where encode = genericEncode options

-- | Constructs PricingDetail from required parameters
newPricingDetail :: PricingDetail
newPricingDetail  = PricingDetail { "Count": Nothing, "Price": Nothing }

-- | Constructs PricingDetail's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newPricingDetail' :: ( { "Count" :: Maybe (Int) , "Price" :: Maybe (Number) } -> {"Count" :: Maybe (Int) , "Price" :: Maybe (Number) } ) -> PricingDetail
newPricingDetail'  customize = (PricingDetail <<< customize) { "Count": Nothing, "Price": Nothing }



newtype PricingDetailsList = PricingDetailsList (Array PricingDetail)
derive instance newtypePricingDetailsList :: Newtype PricingDetailsList _
derive instance repGenericPricingDetailsList :: Generic PricingDetailsList _
instance showPricingDetailsList :: Show PricingDetailsList where show = genericShow
instance decodePricingDetailsList :: Decode PricingDetailsList where decode = genericDecode options
instance encodePricingDetailsList :: Encode PricingDetailsList where encode = genericEncode options



-- | <p>PrincipalIdFormat description</p>
newtype PrincipalIdFormat = PrincipalIdFormat 
  { "Arn" :: Maybe (String)
  , "Statuses" :: Maybe (IdFormatList)
  }
derive instance newtypePrincipalIdFormat :: Newtype PrincipalIdFormat _
derive instance repGenericPrincipalIdFormat :: Generic PrincipalIdFormat _
instance showPrincipalIdFormat :: Show PrincipalIdFormat where show = genericShow
instance decodePrincipalIdFormat :: Decode PrincipalIdFormat where decode = genericDecode options
instance encodePrincipalIdFormat :: Encode PrincipalIdFormat where encode = genericEncode options

-- | Constructs PrincipalIdFormat from required parameters
newPrincipalIdFormat :: PrincipalIdFormat
newPrincipalIdFormat  = PrincipalIdFormat { "Arn": Nothing, "Statuses": Nothing }

-- | Constructs PrincipalIdFormat's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newPrincipalIdFormat' :: ( { "Arn" :: Maybe (String) , "Statuses" :: Maybe (IdFormatList) } -> {"Arn" :: Maybe (String) , "Statuses" :: Maybe (IdFormatList) } ) -> PrincipalIdFormat
newPrincipalIdFormat'  customize = (PrincipalIdFormat <<< customize) { "Arn": Nothing, "Statuses": Nothing }



newtype PrincipalIdFormatList = PrincipalIdFormatList (Array PrincipalIdFormat)
derive instance newtypePrincipalIdFormatList :: Newtype PrincipalIdFormatList _
derive instance repGenericPrincipalIdFormatList :: Generic PrincipalIdFormatList _
instance showPrincipalIdFormatList :: Show PrincipalIdFormatList where show = genericShow
instance decodePrincipalIdFormatList :: Decode PrincipalIdFormatList where decode = genericDecode options
instance encodePrincipalIdFormatList :: Encode PrincipalIdFormatList where encode = genericEncode options



newtype PrincipalType = PrincipalType String
derive instance newtypePrincipalType :: Newtype PrincipalType _
derive instance repGenericPrincipalType :: Generic PrincipalType _
instance showPrincipalType :: Show PrincipalType where show = genericShow
instance decodePrincipalType :: Decode PrincipalType where decode = genericDecode options
instance encodePrincipalType :: Encode PrincipalType where encode = genericEncode options



newtype PrivateIpAddressConfigSet = PrivateIpAddressConfigSet (Array ScheduledInstancesPrivateIpAddressConfig)
derive instance newtypePrivateIpAddressConfigSet :: Newtype PrivateIpAddressConfigSet _
derive instance repGenericPrivateIpAddressConfigSet :: Generic PrivateIpAddressConfigSet _
instance showPrivateIpAddressConfigSet :: Show PrivateIpAddressConfigSet where show = genericShow
instance decodePrivateIpAddressConfigSet :: Decode PrivateIpAddressConfigSet where decode = genericDecode options
instance encodePrivateIpAddressConfigSet :: Encode PrivateIpAddressConfigSet where encode = genericEncode options



-- | <p>Describes a secondary private IPv4 address for a network interface.</p>
newtype PrivateIpAddressSpecification = PrivateIpAddressSpecification 
  { "Primary" :: Maybe (Boolean)
  , "PrivateIpAddress" :: (String)
  }
derive instance newtypePrivateIpAddressSpecification :: Newtype PrivateIpAddressSpecification _
derive instance repGenericPrivateIpAddressSpecification :: Generic PrivateIpAddressSpecification _
instance showPrivateIpAddressSpecification :: Show PrivateIpAddressSpecification where show = genericShow
instance decodePrivateIpAddressSpecification :: Decode PrivateIpAddressSpecification where decode = genericDecode options
instance encodePrivateIpAddressSpecification :: Encode PrivateIpAddressSpecification where encode = genericEncode options

-- | Constructs PrivateIpAddressSpecification from required parameters
newPrivateIpAddressSpecification :: String -> PrivateIpAddressSpecification
newPrivateIpAddressSpecification _PrivateIpAddress = PrivateIpAddressSpecification { "PrivateIpAddress": _PrivateIpAddress, "Primary": Nothing }

-- | Constructs PrivateIpAddressSpecification's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newPrivateIpAddressSpecification' :: String -> ( { "Primary" :: Maybe (Boolean) , "PrivateIpAddress" :: (String) } -> {"Primary" :: Maybe (Boolean) , "PrivateIpAddress" :: (String) } ) -> PrivateIpAddressSpecification
newPrivateIpAddressSpecification' _PrivateIpAddress customize = (PrivateIpAddressSpecification <<< customize) { "PrivateIpAddress": _PrivateIpAddress, "Primary": Nothing }



newtype PrivateIpAddressSpecificationList = PrivateIpAddressSpecificationList (Array PrivateIpAddressSpecification)
derive instance newtypePrivateIpAddressSpecificationList :: Newtype PrivateIpAddressSpecificationList _
derive instance repGenericPrivateIpAddressSpecificationList :: Generic PrivateIpAddressSpecificationList _
instance showPrivateIpAddressSpecificationList :: Show PrivateIpAddressSpecificationList where show = genericShow
instance decodePrivateIpAddressSpecificationList :: Decode PrivateIpAddressSpecificationList where decode = genericDecode options
instance encodePrivateIpAddressSpecificationList :: Encode PrivateIpAddressSpecificationList where encode = genericEncode options



newtype PrivateIpAddressStringList = PrivateIpAddressStringList (Array String)
derive instance newtypePrivateIpAddressStringList :: Newtype PrivateIpAddressStringList _
derive instance repGenericPrivateIpAddressStringList :: Generic PrivateIpAddressStringList _
instance showPrivateIpAddressStringList :: Show PrivateIpAddressStringList where show = genericShow
instance decodePrivateIpAddressStringList :: Decode PrivateIpAddressStringList where decode = genericDecode options
instance encodePrivateIpAddressStringList :: Encode PrivateIpAddressStringList where encode = genericEncode options



-- | <p>Describes a product code.</p>
newtype ProductCode = ProductCode 
  { "ProductCodeId" :: Maybe (String)
  , "ProductCodeType" :: Maybe (ProductCodeValues)
  }
derive instance newtypeProductCode :: Newtype ProductCode _
derive instance repGenericProductCode :: Generic ProductCode _
instance showProductCode :: Show ProductCode where show = genericShow
instance decodeProductCode :: Decode ProductCode where decode = genericDecode options
instance encodeProductCode :: Encode ProductCode where encode = genericEncode options

-- | Constructs ProductCode from required parameters
newProductCode :: ProductCode
newProductCode  = ProductCode { "ProductCodeId": Nothing, "ProductCodeType": Nothing }

-- | Constructs ProductCode's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newProductCode' :: ( { "ProductCodeId" :: Maybe (String) , "ProductCodeType" :: Maybe (ProductCodeValues) } -> {"ProductCodeId" :: Maybe (String) , "ProductCodeType" :: Maybe (ProductCodeValues) } ) -> ProductCode
newProductCode'  customize = (ProductCode <<< customize) { "ProductCodeId": Nothing, "ProductCodeType": Nothing }



newtype ProductCodeList = ProductCodeList (Array ProductCode)
derive instance newtypeProductCodeList :: Newtype ProductCodeList _
derive instance repGenericProductCodeList :: Generic ProductCodeList _
instance showProductCodeList :: Show ProductCodeList where show = genericShow
instance decodeProductCodeList :: Decode ProductCodeList where decode = genericDecode options
instance encodeProductCodeList :: Encode ProductCodeList where encode = genericEncode options



newtype ProductCodeStringList = ProductCodeStringList (Array String)
derive instance newtypeProductCodeStringList :: Newtype ProductCodeStringList _
derive instance repGenericProductCodeStringList :: Generic ProductCodeStringList _
instance showProductCodeStringList :: Show ProductCodeStringList where show = genericShow
instance decodeProductCodeStringList :: Decode ProductCodeStringList where decode = genericDecode options
instance encodeProductCodeStringList :: Encode ProductCodeStringList where encode = genericEncode options



newtype ProductCodeValues = ProductCodeValues String
derive instance newtypeProductCodeValues :: Newtype ProductCodeValues _
derive instance repGenericProductCodeValues :: Generic ProductCodeValues _
instance showProductCodeValues :: Show ProductCodeValues where show = genericShow
instance decodeProductCodeValues :: Decode ProductCodeValues where decode = genericDecode options
instance encodeProductCodeValues :: Encode ProductCodeValues where encode = genericEncode options



newtype ProductDescriptionList = ProductDescriptionList (Array String)
derive instance newtypeProductDescriptionList :: Newtype ProductDescriptionList _
derive instance repGenericProductDescriptionList :: Generic ProductDescriptionList _
instance showProductDescriptionList :: Show ProductDescriptionList where show = genericShow
instance decodeProductDescriptionList :: Decode ProductDescriptionList where decode = genericDecode options
instance encodeProductDescriptionList :: Encode ProductDescriptionList where encode = genericEncode options



-- | <p>Describes a virtual private gateway propagating route.</p>
newtype PropagatingVgw = PropagatingVgw 
  { "GatewayId" :: Maybe (String)
  }
derive instance newtypePropagatingVgw :: Newtype PropagatingVgw _
derive instance repGenericPropagatingVgw :: Generic PropagatingVgw _
instance showPropagatingVgw :: Show PropagatingVgw where show = genericShow
instance decodePropagatingVgw :: Decode PropagatingVgw where decode = genericDecode options
instance encodePropagatingVgw :: Encode PropagatingVgw where encode = genericEncode options

-- | Constructs PropagatingVgw from required parameters
newPropagatingVgw :: PropagatingVgw
newPropagatingVgw  = PropagatingVgw { "GatewayId": Nothing }

-- | Constructs PropagatingVgw's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newPropagatingVgw' :: ( { "GatewayId" :: Maybe (String) } -> {"GatewayId" :: Maybe (String) } ) -> PropagatingVgw
newPropagatingVgw'  customize = (PropagatingVgw <<< customize) { "GatewayId": Nothing }



newtype PropagatingVgwList = PropagatingVgwList (Array PropagatingVgw)
derive instance newtypePropagatingVgwList :: Newtype PropagatingVgwList _
derive instance repGenericPropagatingVgwList :: Generic PropagatingVgwList _
instance showPropagatingVgwList :: Show PropagatingVgwList where show = genericShow
instance decodePropagatingVgwList :: Decode PropagatingVgwList where decode = genericDecode options
instance encodePropagatingVgwList :: Encode PropagatingVgwList where encode = genericEncode options



-- | <p>Reserved. If you need to sustain traffic greater than the <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html">documented limits</a>, contact us through the <a href="https://console.aws.amazon.com/support/home?">Support Center</a>.</p>
newtype ProvisionedBandwidth = ProvisionedBandwidth 
  { "ProvisionTime" :: Maybe (DateTime)
  , "Provisioned" :: Maybe (String)
  , "RequestTime" :: Maybe (DateTime)
  , "Requested" :: Maybe (String)
  , "Status" :: Maybe (String)
  }
derive instance newtypeProvisionedBandwidth :: Newtype ProvisionedBandwidth _
derive instance repGenericProvisionedBandwidth :: Generic ProvisionedBandwidth _
instance showProvisionedBandwidth :: Show ProvisionedBandwidth where show = genericShow
instance decodeProvisionedBandwidth :: Decode ProvisionedBandwidth where decode = genericDecode options
instance encodeProvisionedBandwidth :: Encode ProvisionedBandwidth where encode = genericEncode options

-- | Constructs ProvisionedBandwidth from required parameters
newProvisionedBandwidth :: ProvisionedBandwidth
newProvisionedBandwidth  = ProvisionedBandwidth { "ProvisionTime": Nothing, "Provisioned": Nothing, "RequestTime": Nothing, "Requested": Nothing, "Status": Nothing }

-- | Constructs ProvisionedBandwidth's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newProvisionedBandwidth' :: ( { "ProvisionTime" :: Maybe (DateTime) , "Provisioned" :: Maybe (String) , "RequestTime" :: Maybe (DateTime) , "Requested" :: Maybe (String) , "Status" :: Maybe (String) } -> {"ProvisionTime" :: Maybe (DateTime) , "Provisioned" :: Maybe (String) , "RequestTime" :: Maybe (DateTime) , "Requested" :: Maybe (String) , "Status" :: Maybe (String) } ) -> ProvisionedBandwidth
newProvisionedBandwidth'  customize = (ProvisionedBandwidth <<< customize) { "ProvisionTime": Nothing, "Provisioned": Nothing, "RequestTime": Nothing, "Requested": Nothing, "Status": Nothing }



newtype PublicIpStringList = PublicIpStringList (Array String)
derive instance newtypePublicIpStringList :: Newtype PublicIpStringList _
derive instance repGenericPublicIpStringList :: Generic PublicIpStringList _
instance showPublicIpStringList :: Show PublicIpStringList where show = genericShow
instance decodePublicIpStringList :: Decode PublicIpStringList where decode = genericDecode options
instance encodePublicIpStringList :: Encode PublicIpStringList where encode = genericEncode options



-- | <p>Describes the result of the purchase.</p>
newtype Purchase = Purchase 
  { "CurrencyCode" :: Maybe (CurrencyCodeValues)
  , "Duration" :: Maybe (Int)
  , "HostIdSet" :: Maybe (ResponseHostIdSet)
  , "HostReservationId" :: Maybe (String)
  , "HourlyPrice" :: Maybe (String)
  , "InstanceFamily" :: Maybe (String)
  , "PaymentOption" :: Maybe (PaymentOption)
  , "UpfrontPrice" :: Maybe (String)
  }
derive instance newtypePurchase :: Newtype Purchase _
derive instance repGenericPurchase :: Generic Purchase _
instance showPurchase :: Show Purchase where show = genericShow
instance decodePurchase :: Decode Purchase where decode = genericDecode options
instance encodePurchase :: Encode Purchase where encode = genericEncode options

-- | Constructs Purchase from required parameters
newPurchase :: Purchase
newPurchase  = Purchase { "CurrencyCode": Nothing, "Duration": Nothing, "HostIdSet": Nothing, "HostReservationId": Nothing, "HourlyPrice": Nothing, "InstanceFamily": Nothing, "PaymentOption": Nothing, "UpfrontPrice": Nothing }

-- | Constructs Purchase's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newPurchase' :: ( { "CurrencyCode" :: Maybe (CurrencyCodeValues) , "Duration" :: Maybe (Int) , "HostIdSet" :: Maybe (ResponseHostIdSet) , "HostReservationId" :: Maybe (String) , "HourlyPrice" :: Maybe (String) , "InstanceFamily" :: Maybe (String) , "PaymentOption" :: Maybe (PaymentOption) , "UpfrontPrice" :: Maybe (String) } -> {"CurrencyCode" :: Maybe (CurrencyCodeValues) , "Duration" :: Maybe (Int) , "HostIdSet" :: Maybe (ResponseHostIdSet) , "HostReservationId" :: Maybe (String) , "HourlyPrice" :: Maybe (String) , "InstanceFamily" :: Maybe (String) , "PaymentOption" :: Maybe (PaymentOption) , "UpfrontPrice" :: Maybe (String) } ) -> Purchase
newPurchase'  customize = (Purchase <<< customize) { "CurrencyCode": Nothing, "Duration": Nothing, "HostIdSet": Nothing, "HostReservationId": Nothing, "HourlyPrice": Nothing, "InstanceFamily": Nothing, "PaymentOption": Nothing, "UpfrontPrice": Nothing }



newtype PurchaseHostReservationRequest = PurchaseHostReservationRequest 
  { "ClientToken" :: Maybe (String)
  , "CurrencyCode" :: Maybe (CurrencyCodeValues)
  , "HostIdSet" :: (RequestHostIdSet)
  , "LimitPrice" :: Maybe (String)
  , "OfferingId" :: (String)
  }
derive instance newtypePurchaseHostReservationRequest :: Newtype PurchaseHostReservationRequest _
derive instance repGenericPurchaseHostReservationRequest :: Generic PurchaseHostReservationRequest _
instance showPurchaseHostReservationRequest :: Show PurchaseHostReservationRequest where show = genericShow
instance decodePurchaseHostReservationRequest :: Decode PurchaseHostReservationRequest where decode = genericDecode options
instance encodePurchaseHostReservationRequest :: Encode PurchaseHostReservationRequest where encode = genericEncode options

-- | Constructs PurchaseHostReservationRequest from required parameters
newPurchaseHostReservationRequest :: RequestHostIdSet -> String -> PurchaseHostReservationRequest
newPurchaseHostReservationRequest _HostIdSet _OfferingId = PurchaseHostReservationRequest { "HostIdSet": _HostIdSet, "OfferingId": _OfferingId, "ClientToken": Nothing, "CurrencyCode": Nothing, "LimitPrice": Nothing }

-- | Constructs PurchaseHostReservationRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newPurchaseHostReservationRequest' :: RequestHostIdSet -> String -> ( { "ClientToken" :: Maybe (String) , "CurrencyCode" :: Maybe (CurrencyCodeValues) , "HostIdSet" :: (RequestHostIdSet) , "LimitPrice" :: Maybe (String) , "OfferingId" :: (String) } -> {"ClientToken" :: Maybe (String) , "CurrencyCode" :: Maybe (CurrencyCodeValues) , "HostIdSet" :: (RequestHostIdSet) , "LimitPrice" :: Maybe (String) , "OfferingId" :: (String) } ) -> PurchaseHostReservationRequest
newPurchaseHostReservationRequest' _HostIdSet _OfferingId customize = (PurchaseHostReservationRequest <<< customize) { "HostIdSet": _HostIdSet, "OfferingId": _OfferingId, "ClientToken": Nothing, "CurrencyCode": Nothing, "LimitPrice": Nothing }



newtype PurchaseHostReservationResult = PurchaseHostReservationResult 
  { "ClientToken" :: Maybe (String)
  , "CurrencyCode" :: Maybe (CurrencyCodeValues)
  , "Purchase" :: Maybe (PurchaseSet)
  , "TotalHourlyPrice" :: Maybe (String)
  , "TotalUpfrontPrice" :: Maybe (String)
  }
derive instance newtypePurchaseHostReservationResult :: Newtype PurchaseHostReservationResult _
derive instance repGenericPurchaseHostReservationResult :: Generic PurchaseHostReservationResult _
instance showPurchaseHostReservationResult :: Show PurchaseHostReservationResult where show = genericShow
instance decodePurchaseHostReservationResult :: Decode PurchaseHostReservationResult where decode = genericDecode options
instance encodePurchaseHostReservationResult :: Encode PurchaseHostReservationResult where encode = genericEncode options

-- | Constructs PurchaseHostReservationResult from required parameters
newPurchaseHostReservationResult :: PurchaseHostReservationResult
newPurchaseHostReservationResult  = PurchaseHostReservationResult { "ClientToken": Nothing, "CurrencyCode": Nothing, "Purchase": Nothing, "TotalHourlyPrice": Nothing, "TotalUpfrontPrice": Nothing }

-- | Constructs PurchaseHostReservationResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newPurchaseHostReservationResult' :: ( { "ClientToken" :: Maybe (String) , "CurrencyCode" :: Maybe (CurrencyCodeValues) , "Purchase" :: Maybe (PurchaseSet) , "TotalHourlyPrice" :: Maybe (String) , "TotalUpfrontPrice" :: Maybe (String) } -> {"ClientToken" :: Maybe (String) , "CurrencyCode" :: Maybe (CurrencyCodeValues) , "Purchase" :: Maybe (PurchaseSet) , "TotalHourlyPrice" :: Maybe (String) , "TotalUpfrontPrice" :: Maybe (String) } ) -> PurchaseHostReservationResult
newPurchaseHostReservationResult'  customize = (PurchaseHostReservationResult <<< customize) { "ClientToken": Nothing, "CurrencyCode": Nothing, "Purchase": Nothing, "TotalHourlyPrice": Nothing, "TotalUpfrontPrice": Nothing }



-- | <p>Describes a request to purchase Scheduled Instances.</p>
newtype PurchaseRequest = PurchaseRequest 
  { "InstanceCount" :: (Int)
  , "PurchaseToken" :: (String)
  }
derive instance newtypePurchaseRequest :: Newtype PurchaseRequest _
derive instance repGenericPurchaseRequest :: Generic PurchaseRequest _
instance showPurchaseRequest :: Show PurchaseRequest where show = genericShow
instance decodePurchaseRequest :: Decode PurchaseRequest where decode = genericDecode options
instance encodePurchaseRequest :: Encode PurchaseRequest where encode = genericEncode options

-- | Constructs PurchaseRequest from required parameters
newPurchaseRequest :: Int -> String -> PurchaseRequest
newPurchaseRequest _InstanceCount _PurchaseToken = PurchaseRequest { "InstanceCount": _InstanceCount, "PurchaseToken": _PurchaseToken }

-- | Constructs PurchaseRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newPurchaseRequest' :: Int -> String -> ( { "InstanceCount" :: (Int) , "PurchaseToken" :: (String) } -> {"InstanceCount" :: (Int) , "PurchaseToken" :: (String) } ) -> PurchaseRequest
newPurchaseRequest' _InstanceCount _PurchaseToken customize = (PurchaseRequest <<< customize) { "InstanceCount": _InstanceCount, "PurchaseToken": _PurchaseToken }



newtype PurchaseRequestSet = PurchaseRequestSet (Array PurchaseRequest)
derive instance newtypePurchaseRequestSet :: Newtype PurchaseRequestSet _
derive instance repGenericPurchaseRequestSet :: Generic PurchaseRequestSet _
instance showPurchaseRequestSet :: Show PurchaseRequestSet where show = genericShow
instance decodePurchaseRequestSet :: Decode PurchaseRequestSet where decode = genericDecode options
instance encodePurchaseRequestSet :: Encode PurchaseRequestSet where encode = genericEncode options



-- | <p>Contains the parameters for PurchaseReservedInstancesOffering.</p>
newtype PurchaseReservedInstancesOfferingRequest = PurchaseReservedInstancesOfferingRequest 
  { "InstanceCount" :: (Int)
  , "ReservedInstancesOfferingId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  , "LimitPrice" :: Maybe (ReservedInstanceLimitPrice)
  }
derive instance newtypePurchaseReservedInstancesOfferingRequest :: Newtype PurchaseReservedInstancesOfferingRequest _
derive instance repGenericPurchaseReservedInstancesOfferingRequest :: Generic PurchaseReservedInstancesOfferingRequest _
instance showPurchaseReservedInstancesOfferingRequest :: Show PurchaseReservedInstancesOfferingRequest where show = genericShow
instance decodePurchaseReservedInstancesOfferingRequest :: Decode PurchaseReservedInstancesOfferingRequest where decode = genericDecode options
instance encodePurchaseReservedInstancesOfferingRequest :: Encode PurchaseReservedInstancesOfferingRequest where encode = genericEncode options

-- | Constructs PurchaseReservedInstancesOfferingRequest from required parameters
newPurchaseReservedInstancesOfferingRequest :: Int -> String -> PurchaseReservedInstancesOfferingRequest
newPurchaseReservedInstancesOfferingRequest _InstanceCount _ReservedInstancesOfferingId = PurchaseReservedInstancesOfferingRequest { "InstanceCount": _InstanceCount, "ReservedInstancesOfferingId": _ReservedInstancesOfferingId, "DryRun": Nothing, "LimitPrice": Nothing }

-- | Constructs PurchaseReservedInstancesOfferingRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newPurchaseReservedInstancesOfferingRequest' :: Int -> String -> ( { "InstanceCount" :: (Int) , "ReservedInstancesOfferingId" :: (String) , "DryRun" :: Maybe (Boolean) , "LimitPrice" :: Maybe (ReservedInstanceLimitPrice) } -> {"InstanceCount" :: (Int) , "ReservedInstancesOfferingId" :: (String) , "DryRun" :: Maybe (Boolean) , "LimitPrice" :: Maybe (ReservedInstanceLimitPrice) } ) -> PurchaseReservedInstancesOfferingRequest
newPurchaseReservedInstancesOfferingRequest' _InstanceCount _ReservedInstancesOfferingId customize = (PurchaseReservedInstancesOfferingRequest <<< customize) { "InstanceCount": _InstanceCount, "ReservedInstancesOfferingId": _ReservedInstancesOfferingId, "DryRun": Nothing, "LimitPrice": Nothing }



-- | <p>Contains the output of PurchaseReservedInstancesOffering.</p>
newtype PurchaseReservedInstancesOfferingResult = PurchaseReservedInstancesOfferingResult 
  { "ReservedInstancesId" :: Maybe (String)
  }
derive instance newtypePurchaseReservedInstancesOfferingResult :: Newtype PurchaseReservedInstancesOfferingResult _
derive instance repGenericPurchaseReservedInstancesOfferingResult :: Generic PurchaseReservedInstancesOfferingResult _
instance showPurchaseReservedInstancesOfferingResult :: Show PurchaseReservedInstancesOfferingResult where show = genericShow
instance decodePurchaseReservedInstancesOfferingResult :: Decode PurchaseReservedInstancesOfferingResult where decode = genericDecode options
instance encodePurchaseReservedInstancesOfferingResult :: Encode PurchaseReservedInstancesOfferingResult where encode = genericEncode options

-- | Constructs PurchaseReservedInstancesOfferingResult from required parameters
newPurchaseReservedInstancesOfferingResult :: PurchaseReservedInstancesOfferingResult
newPurchaseReservedInstancesOfferingResult  = PurchaseReservedInstancesOfferingResult { "ReservedInstancesId": Nothing }

-- | Constructs PurchaseReservedInstancesOfferingResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newPurchaseReservedInstancesOfferingResult' :: ( { "ReservedInstancesId" :: Maybe (String) } -> {"ReservedInstancesId" :: Maybe (String) } ) -> PurchaseReservedInstancesOfferingResult
newPurchaseReservedInstancesOfferingResult'  customize = (PurchaseReservedInstancesOfferingResult <<< customize) { "ReservedInstancesId": Nothing }



-- | <p>Contains the parameters for PurchaseScheduledInstances.</p>
newtype PurchaseScheduledInstancesRequest = PurchaseScheduledInstancesRequest 
  { "ClientToken" :: Maybe (String)
  , "DryRun" :: Maybe (Boolean)
  , "PurchaseRequests" :: (PurchaseRequestSet)
  }
derive instance newtypePurchaseScheduledInstancesRequest :: Newtype PurchaseScheduledInstancesRequest _
derive instance repGenericPurchaseScheduledInstancesRequest :: Generic PurchaseScheduledInstancesRequest _
instance showPurchaseScheduledInstancesRequest :: Show PurchaseScheduledInstancesRequest where show = genericShow
instance decodePurchaseScheduledInstancesRequest :: Decode PurchaseScheduledInstancesRequest where decode = genericDecode options
instance encodePurchaseScheduledInstancesRequest :: Encode PurchaseScheduledInstancesRequest where encode = genericEncode options

-- | Constructs PurchaseScheduledInstancesRequest from required parameters
newPurchaseScheduledInstancesRequest :: PurchaseRequestSet -> PurchaseScheduledInstancesRequest
newPurchaseScheduledInstancesRequest _PurchaseRequests = PurchaseScheduledInstancesRequest { "PurchaseRequests": _PurchaseRequests, "ClientToken": Nothing, "DryRun": Nothing }

-- | Constructs PurchaseScheduledInstancesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newPurchaseScheduledInstancesRequest' :: PurchaseRequestSet -> ( { "ClientToken" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "PurchaseRequests" :: (PurchaseRequestSet) } -> {"ClientToken" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "PurchaseRequests" :: (PurchaseRequestSet) } ) -> PurchaseScheduledInstancesRequest
newPurchaseScheduledInstancesRequest' _PurchaseRequests customize = (PurchaseScheduledInstancesRequest <<< customize) { "PurchaseRequests": _PurchaseRequests, "ClientToken": Nothing, "DryRun": Nothing }



-- | <p>Contains the output of PurchaseScheduledInstances.</p>
newtype PurchaseScheduledInstancesResult = PurchaseScheduledInstancesResult 
  { "ScheduledInstanceSet" :: Maybe (PurchasedScheduledInstanceSet)
  }
derive instance newtypePurchaseScheduledInstancesResult :: Newtype PurchaseScheduledInstancesResult _
derive instance repGenericPurchaseScheduledInstancesResult :: Generic PurchaseScheduledInstancesResult _
instance showPurchaseScheduledInstancesResult :: Show PurchaseScheduledInstancesResult where show = genericShow
instance decodePurchaseScheduledInstancesResult :: Decode PurchaseScheduledInstancesResult where decode = genericDecode options
instance encodePurchaseScheduledInstancesResult :: Encode PurchaseScheduledInstancesResult where encode = genericEncode options

-- | Constructs PurchaseScheduledInstancesResult from required parameters
newPurchaseScheduledInstancesResult :: PurchaseScheduledInstancesResult
newPurchaseScheduledInstancesResult  = PurchaseScheduledInstancesResult { "ScheduledInstanceSet": Nothing }

-- | Constructs PurchaseScheduledInstancesResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newPurchaseScheduledInstancesResult' :: ( { "ScheduledInstanceSet" :: Maybe (PurchasedScheduledInstanceSet) } -> {"ScheduledInstanceSet" :: Maybe (PurchasedScheduledInstanceSet) } ) -> PurchaseScheduledInstancesResult
newPurchaseScheduledInstancesResult'  customize = (PurchaseScheduledInstancesResult <<< customize) { "ScheduledInstanceSet": Nothing }



newtype PurchaseSet = PurchaseSet (Array Purchase)
derive instance newtypePurchaseSet :: Newtype PurchaseSet _
derive instance repGenericPurchaseSet :: Generic PurchaseSet _
instance showPurchaseSet :: Show PurchaseSet where show = genericShow
instance decodePurchaseSet :: Decode PurchaseSet where decode = genericDecode options
instance encodePurchaseSet :: Encode PurchaseSet where encode = genericEncode options



newtype PurchasedScheduledInstanceSet = PurchasedScheduledInstanceSet (Array ScheduledInstance)
derive instance newtypePurchasedScheduledInstanceSet :: Newtype PurchasedScheduledInstanceSet _
derive instance repGenericPurchasedScheduledInstanceSet :: Generic PurchasedScheduledInstanceSet _
instance showPurchasedScheduledInstanceSet :: Show PurchasedScheduledInstanceSet where show = genericShow
instance decodePurchasedScheduledInstanceSet :: Decode PurchasedScheduledInstanceSet where decode = genericDecode options
instance encodePurchasedScheduledInstanceSet :: Encode PurchasedScheduledInstanceSet where encode = genericEncode options



newtype RIProductDescription = RIProductDescription String
derive instance newtypeRIProductDescription :: Newtype RIProductDescription _
derive instance repGenericRIProductDescription :: Generic RIProductDescription _
instance showRIProductDescription :: Show RIProductDescription where show = genericShow
instance decodeRIProductDescription :: Decode RIProductDescription where decode = genericDecode options
instance encodeRIProductDescription :: Encode RIProductDescription where encode = genericEncode options



newtype ReasonCodesList = ReasonCodesList (Array ReportInstanceReasonCodes)
derive instance newtypeReasonCodesList :: Newtype ReasonCodesList _
derive instance repGenericReasonCodesList :: Generic ReasonCodesList _
instance showReasonCodesList :: Show ReasonCodesList where show = genericShow
instance decodeReasonCodesList :: Decode ReasonCodesList where decode = genericDecode options
instance encodeReasonCodesList :: Encode ReasonCodesList where encode = genericEncode options



-- | <p>Contains the parameters for RebootInstances.</p>
newtype RebootInstancesRequest = RebootInstancesRequest 
  { "InstanceIds" :: (InstanceIdStringList)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeRebootInstancesRequest :: Newtype RebootInstancesRequest _
derive instance repGenericRebootInstancesRequest :: Generic RebootInstancesRequest _
instance showRebootInstancesRequest :: Show RebootInstancesRequest where show = genericShow
instance decodeRebootInstancesRequest :: Decode RebootInstancesRequest where decode = genericDecode options
instance encodeRebootInstancesRequest :: Encode RebootInstancesRequest where encode = genericEncode options

-- | Constructs RebootInstancesRequest from required parameters
newRebootInstancesRequest :: InstanceIdStringList -> RebootInstancesRequest
newRebootInstancesRequest _InstanceIds = RebootInstancesRequest { "InstanceIds": _InstanceIds, "DryRun": Nothing }

-- | Constructs RebootInstancesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newRebootInstancesRequest' :: InstanceIdStringList -> ( { "InstanceIds" :: (InstanceIdStringList) , "DryRun" :: Maybe (Boolean) } -> {"InstanceIds" :: (InstanceIdStringList) , "DryRun" :: Maybe (Boolean) } ) -> RebootInstancesRequest
newRebootInstancesRequest' _InstanceIds customize = (RebootInstancesRequest <<< customize) { "InstanceIds": _InstanceIds, "DryRun": Nothing }



-- | <p>Describes a recurring charge.</p>
newtype RecurringCharge = RecurringCharge 
  { "Amount" :: Maybe (Number)
  , "Frequency" :: Maybe (RecurringChargeFrequency)
  }
derive instance newtypeRecurringCharge :: Newtype RecurringCharge _
derive instance repGenericRecurringCharge :: Generic RecurringCharge _
instance showRecurringCharge :: Show RecurringCharge where show = genericShow
instance decodeRecurringCharge :: Decode RecurringCharge where decode = genericDecode options
instance encodeRecurringCharge :: Encode RecurringCharge where encode = genericEncode options

-- | Constructs RecurringCharge from required parameters
newRecurringCharge :: RecurringCharge
newRecurringCharge  = RecurringCharge { "Amount": Nothing, "Frequency": Nothing }

-- | Constructs RecurringCharge's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newRecurringCharge' :: ( { "Amount" :: Maybe (Number) , "Frequency" :: Maybe (RecurringChargeFrequency) } -> {"Amount" :: Maybe (Number) , "Frequency" :: Maybe (RecurringChargeFrequency) } ) -> RecurringCharge
newRecurringCharge'  customize = (RecurringCharge <<< customize) { "Amount": Nothing, "Frequency": Nothing }



newtype RecurringChargeFrequency = RecurringChargeFrequency String
derive instance newtypeRecurringChargeFrequency :: Newtype RecurringChargeFrequency _
derive instance repGenericRecurringChargeFrequency :: Generic RecurringChargeFrequency _
instance showRecurringChargeFrequency :: Show RecurringChargeFrequency where show = genericShow
instance decodeRecurringChargeFrequency :: Decode RecurringChargeFrequency where decode = genericDecode options
instance encodeRecurringChargeFrequency :: Encode RecurringChargeFrequency where encode = genericEncode options



newtype RecurringChargesList = RecurringChargesList (Array RecurringCharge)
derive instance newtypeRecurringChargesList :: Newtype RecurringChargesList _
derive instance repGenericRecurringChargesList :: Generic RecurringChargesList _
instance showRecurringChargesList :: Show RecurringChargesList where show = genericShow
instance decodeRecurringChargesList :: Decode RecurringChargesList where decode = genericDecode options
instance encodeRecurringChargesList :: Encode RecurringChargesList where encode = genericEncode options



-- | <p>Describes a region.</p>
newtype Region = Region 
  { "Endpoint" :: Maybe (String)
  , "RegionName" :: Maybe (String)
  }
derive instance newtypeRegion :: Newtype Region _
derive instance repGenericRegion :: Generic Region _
instance showRegion :: Show Region where show = genericShow
instance decodeRegion :: Decode Region where decode = genericDecode options
instance encodeRegion :: Encode Region where encode = genericEncode options

-- | Constructs Region from required parameters
newRegion :: Region
newRegion  = Region { "Endpoint": Nothing, "RegionName": Nothing }

-- | Constructs Region's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newRegion' :: ( { "Endpoint" :: Maybe (String) , "RegionName" :: Maybe (String) } -> {"Endpoint" :: Maybe (String) , "RegionName" :: Maybe (String) } ) -> Region
newRegion'  customize = (Region <<< customize) { "Endpoint": Nothing, "RegionName": Nothing }



newtype RegionList = RegionList (Array Region)
derive instance newtypeRegionList :: Newtype RegionList _
derive instance repGenericRegionList :: Generic RegionList _
instance showRegionList :: Show RegionList where show = genericShow
instance decodeRegionList :: Decode RegionList where decode = genericDecode options
instance encodeRegionList :: Encode RegionList where encode = genericEncode options



newtype RegionNameStringList = RegionNameStringList (Array String)
derive instance newtypeRegionNameStringList :: Newtype RegionNameStringList _
derive instance repGenericRegionNameStringList :: Generic RegionNameStringList _
instance showRegionNameStringList :: Show RegionNameStringList where show = genericShow
instance decodeRegionNameStringList :: Decode RegionNameStringList where decode = genericDecode options
instance encodeRegionNameStringList :: Encode RegionNameStringList where encode = genericEncode options



-- | <p>Contains the parameters for RegisterImage.</p>
newtype RegisterImageRequest = RegisterImageRequest 
  { "ImageLocation" :: Maybe (String)
  , "Architecture" :: Maybe (ArchitectureValues)
  , "BlockDeviceMappings" :: Maybe (BlockDeviceMappingRequestList)
  , "Description" :: Maybe (String)
  , "DryRun" :: Maybe (Boolean)
  , "EnaSupport" :: Maybe (Boolean)
  , "KernelId" :: Maybe (String)
  , "Name" :: (String)
  , "BillingProducts" :: Maybe (BillingProductList)
  , "RamdiskId" :: Maybe (String)
  , "RootDeviceName" :: Maybe (String)
  , "SriovNetSupport" :: Maybe (String)
  , "VirtualizationType" :: Maybe (String)
  }
derive instance newtypeRegisterImageRequest :: Newtype RegisterImageRequest _
derive instance repGenericRegisterImageRequest :: Generic RegisterImageRequest _
instance showRegisterImageRequest :: Show RegisterImageRequest where show = genericShow
instance decodeRegisterImageRequest :: Decode RegisterImageRequest where decode = genericDecode options
instance encodeRegisterImageRequest :: Encode RegisterImageRequest where encode = genericEncode options

-- | Constructs RegisterImageRequest from required parameters
newRegisterImageRequest :: String -> RegisterImageRequest
newRegisterImageRequest _Name = RegisterImageRequest { "Name": _Name, "Architecture": Nothing, "BillingProducts": Nothing, "BlockDeviceMappings": Nothing, "Description": Nothing, "DryRun": Nothing, "EnaSupport": Nothing, "ImageLocation": Nothing, "KernelId": Nothing, "RamdiskId": Nothing, "RootDeviceName": Nothing, "SriovNetSupport": Nothing, "VirtualizationType": Nothing }

-- | Constructs RegisterImageRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newRegisterImageRequest' :: String -> ( { "ImageLocation" :: Maybe (String) , "Architecture" :: Maybe (ArchitectureValues) , "BlockDeviceMappings" :: Maybe (BlockDeviceMappingRequestList) , "Description" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "EnaSupport" :: Maybe (Boolean) , "KernelId" :: Maybe (String) , "Name" :: (String) , "BillingProducts" :: Maybe (BillingProductList) , "RamdiskId" :: Maybe (String) , "RootDeviceName" :: Maybe (String) , "SriovNetSupport" :: Maybe (String) , "VirtualizationType" :: Maybe (String) } -> {"ImageLocation" :: Maybe (String) , "Architecture" :: Maybe (ArchitectureValues) , "BlockDeviceMappings" :: Maybe (BlockDeviceMappingRequestList) , "Description" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "EnaSupport" :: Maybe (Boolean) , "KernelId" :: Maybe (String) , "Name" :: (String) , "BillingProducts" :: Maybe (BillingProductList) , "RamdiskId" :: Maybe (String) , "RootDeviceName" :: Maybe (String) , "SriovNetSupport" :: Maybe (String) , "VirtualizationType" :: Maybe (String) } ) -> RegisterImageRequest
newRegisterImageRequest' _Name customize = (RegisterImageRequest <<< customize) { "Name": _Name, "Architecture": Nothing, "BillingProducts": Nothing, "BlockDeviceMappings": Nothing, "Description": Nothing, "DryRun": Nothing, "EnaSupport": Nothing, "ImageLocation": Nothing, "KernelId": Nothing, "RamdiskId": Nothing, "RootDeviceName": Nothing, "SriovNetSupport": Nothing, "VirtualizationType": Nothing }



-- | <p>Contains the output of RegisterImage.</p>
newtype RegisterImageResult = RegisterImageResult 
  { "ImageId" :: Maybe (String)
  }
derive instance newtypeRegisterImageResult :: Newtype RegisterImageResult _
derive instance repGenericRegisterImageResult :: Generic RegisterImageResult _
instance showRegisterImageResult :: Show RegisterImageResult where show = genericShow
instance decodeRegisterImageResult :: Decode RegisterImageResult where decode = genericDecode options
instance encodeRegisterImageResult :: Encode RegisterImageResult where encode = genericEncode options

-- | Constructs RegisterImageResult from required parameters
newRegisterImageResult :: RegisterImageResult
newRegisterImageResult  = RegisterImageResult { "ImageId": Nothing }

-- | Constructs RegisterImageResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newRegisterImageResult' :: ( { "ImageId" :: Maybe (String) } -> {"ImageId" :: Maybe (String) } ) -> RegisterImageResult
newRegisterImageResult'  customize = (RegisterImageResult <<< customize) { "ImageId": Nothing }



newtype RejectVpcEndpointConnectionsRequest = RejectVpcEndpointConnectionsRequest 
  { "DryRun" :: Maybe (Boolean)
  , "ServiceId" :: (String)
  , "VpcEndpointIds" :: (ValueStringList)
  }
derive instance newtypeRejectVpcEndpointConnectionsRequest :: Newtype RejectVpcEndpointConnectionsRequest _
derive instance repGenericRejectVpcEndpointConnectionsRequest :: Generic RejectVpcEndpointConnectionsRequest _
instance showRejectVpcEndpointConnectionsRequest :: Show RejectVpcEndpointConnectionsRequest where show = genericShow
instance decodeRejectVpcEndpointConnectionsRequest :: Decode RejectVpcEndpointConnectionsRequest where decode = genericDecode options
instance encodeRejectVpcEndpointConnectionsRequest :: Encode RejectVpcEndpointConnectionsRequest where encode = genericEncode options

-- | Constructs RejectVpcEndpointConnectionsRequest from required parameters
newRejectVpcEndpointConnectionsRequest :: String -> ValueStringList -> RejectVpcEndpointConnectionsRequest
newRejectVpcEndpointConnectionsRequest _ServiceId _VpcEndpointIds = RejectVpcEndpointConnectionsRequest { "ServiceId": _ServiceId, "VpcEndpointIds": _VpcEndpointIds, "DryRun": Nothing }

-- | Constructs RejectVpcEndpointConnectionsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newRejectVpcEndpointConnectionsRequest' :: String -> ValueStringList -> ( { "DryRun" :: Maybe (Boolean) , "ServiceId" :: (String) , "VpcEndpointIds" :: (ValueStringList) } -> {"DryRun" :: Maybe (Boolean) , "ServiceId" :: (String) , "VpcEndpointIds" :: (ValueStringList) } ) -> RejectVpcEndpointConnectionsRequest
newRejectVpcEndpointConnectionsRequest' _ServiceId _VpcEndpointIds customize = (RejectVpcEndpointConnectionsRequest <<< customize) { "ServiceId": _ServiceId, "VpcEndpointIds": _VpcEndpointIds, "DryRun": Nothing }



newtype RejectVpcEndpointConnectionsResult = RejectVpcEndpointConnectionsResult 
  { "Unsuccessful" :: Maybe (UnsuccessfulItemSet)
  }
derive instance newtypeRejectVpcEndpointConnectionsResult :: Newtype RejectVpcEndpointConnectionsResult _
derive instance repGenericRejectVpcEndpointConnectionsResult :: Generic RejectVpcEndpointConnectionsResult _
instance showRejectVpcEndpointConnectionsResult :: Show RejectVpcEndpointConnectionsResult where show = genericShow
instance decodeRejectVpcEndpointConnectionsResult :: Decode RejectVpcEndpointConnectionsResult where decode = genericDecode options
instance encodeRejectVpcEndpointConnectionsResult :: Encode RejectVpcEndpointConnectionsResult where encode = genericEncode options

-- | Constructs RejectVpcEndpointConnectionsResult from required parameters
newRejectVpcEndpointConnectionsResult :: RejectVpcEndpointConnectionsResult
newRejectVpcEndpointConnectionsResult  = RejectVpcEndpointConnectionsResult { "Unsuccessful": Nothing }

-- | Constructs RejectVpcEndpointConnectionsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newRejectVpcEndpointConnectionsResult' :: ( { "Unsuccessful" :: Maybe (UnsuccessfulItemSet) } -> {"Unsuccessful" :: Maybe (UnsuccessfulItemSet) } ) -> RejectVpcEndpointConnectionsResult
newRejectVpcEndpointConnectionsResult'  customize = (RejectVpcEndpointConnectionsResult <<< customize) { "Unsuccessful": Nothing }



-- | <p>Contains the parameters for RejectVpcPeeringConnection.</p>
newtype RejectVpcPeeringConnectionRequest = RejectVpcPeeringConnectionRequest 
  { "DryRun" :: Maybe (Boolean)
  , "VpcPeeringConnectionId" :: (String)
  }
derive instance newtypeRejectVpcPeeringConnectionRequest :: Newtype RejectVpcPeeringConnectionRequest _
derive instance repGenericRejectVpcPeeringConnectionRequest :: Generic RejectVpcPeeringConnectionRequest _
instance showRejectVpcPeeringConnectionRequest :: Show RejectVpcPeeringConnectionRequest where show = genericShow
instance decodeRejectVpcPeeringConnectionRequest :: Decode RejectVpcPeeringConnectionRequest where decode = genericDecode options
instance encodeRejectVpcPeeringConnectionRequest :: Encode RejectVpcPeeringConnectionRequest where encode = genericEncode options

-- | Constructs RejectVpcPeeringConnectionRequest from required parameters
newRejectVpcPeeringConnectionRequest :: String -> RejectVpcPeeringConnectionRequest
newRejectVpcPeeringConnectionRequest _VpcPeeringConnectionId = RejectVpcPeeringConnectionRequest { "VpcPeeringConnectionId": _VpcPeeringConnectionId, "DryRun": Nothing }

-- | Constructs RejectVpcPeeringConnectionRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newRejectVpcPeeringConnectionRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "VpcPeeringConnectionId" :: (String) } -> {"DryRun" :: Maybe (Boolean) , "VpcPeeringConnectionId" :: (String) } ) -> RejectVpcPeeringConnectionRequest
newRejectVpcPeeringConnectionRequest' _VpcPeeringConnectionId customize = (RejectVpcPeeringConnectionRequest <<< customize) { "VpcPeeringConnectionId": _VpcPeeringConnectionId, "DryRun": Nothing }



-- | <p>Contains the output of RejectVpcPeeringConnection.</p>
newtype RejectVpcPeeringConnectionResult = RejectVpcPeeringConnectionResult 
  { "Return" :: Maybe (Boolean)
  }
derive instance newtypeRejectVpcPeeringConnectionResult :: Newtype RejectVpcPeeringConnectionResult _
derive instance repGenericRejectVpcPeeringConnectionResult :: Generic RejectVpcPeeringConnectionResult _
instance showRejectVpcPeeringConnectionResult :: Show RejectVpcPeeringConnectionResult where show = genericShow
instance decodeRejectVpcPeeringConnectionResult :: Decode RejectVpcPeeringConnectionResult where decode = genericDecode options
instance encodeRejectVpcPeeringConnectionResult :: Encode RejectVpcPeeringConnectionResult where encode = genericEncode options

-- | Constructs RejectVpcPeeringConnectionResult from required parameters
newRejectVpcPeeringConnectionResult :: RejectVpcPeeringConnectionResult
newRejectVpcPeeringConnectionResult  = RejectVpcPeeringConnectionResult { "Return": Nothing }

-- | Constructs RejectVpcPeeringConnectionResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newRejectVpcPeeringConnectionResult' :: ( { "Return" :: Maybe (Boolean) } -> {"Return" :: Maybe (Boolean) } ) -> RejectVpcPeeringConnectionResult
newRejectVpcPeeringConnectionResult'  customize = (RejectVpcPeeringConnectionResult <<< customize) { "Return": Nothing }



-- | <p>Contains the parameters for ReleaseAddress.</p>
newtype ReleaseAddressRequest = ReleaseAddressRequest 
  { "AllocationId" :: Maybe (String)
  , "PublicIp" :: Maybe (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeReleaseAddressRequest :: Newtype ReleaseAddressRequest _
derive instance repGenericReleaseAddressRequest :: Generic ReleaseAddressRequest _
instance showReleaseAddressRequest :: Show ReleaseAddressRequest where show = genericShow
instance decodeReleaseAddressRequest :: Decode ReleaseAddressRequest where decode = genericDecode options
instance encodeReleaseAddressRequest :: Encode ReleaseAddressRequest where encode = genericEncode options

-- | Constructs ReleaseAddressRequest from required parameters
newReleaseAddressRequest :: ReleaseAddressRequest
newReleaseAddressRequest  = ReleaseAddressRequest { "AllocationId": Nothing, "DryRun": Nothing, "PublicIp": Nothing }

-- | Constructs ReleaseAddressRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newReleaseAddressRequest' :: ( { "AllocationId" :: Maybe (String) , "PublicIp" :: Maybe (String) , "DryRun" :: Maybe (Boolean) } -> {"AllocationId" :: Maybe (String) , "PublicIp" :: Maybe (String) , "DryRun" :: Maybe (Boolean) } ) -> ReleaseAddressRequest
newReleaseAddressRequest'  customize = (ReleaseAddressRequest <<< customize) { "AllocationId": Nothing, "DryRun": Nothing, "PublicIp": Nothing }



-- | <p>Contains the parameters for ReleaseHosts.</p>
newtype ReleaseHostsRequest = ReleaseHostsRequest 
  { "HostIds" :: (RequestHostIdList)
  }
derive instance newtypeReleaseHostsRequest :: Newtype ReleaseHostsRequest _
derive instance repGenericReleaseHostsRequest :: Generic ReleaseHostsRequest _
instance showReleaseHostsRequest :: Show ReleaseHostsRequest where show = genericShow
instance decodeReleaseHostsRequest :: Decode ReleaseHostsRequest where decode = genericDecode options
instance encodeReleaseHostsRequest :: Encode ReleaseHostsRequest where encode = genericEncode options

-- | Constructs ReleaseHostsRequest from required parameters
newReleaseHostsRequest :: RequestHostIdList -> ReleaseHostsRequest
newReleaseHostsRequest _HostIds = ReleaseHostsRequest { "HostIds": _HostIds }

-- | Constructs ReleaseHostsRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newReleaseHostsRequest' :: RequestHostIdList -> ( { "HostIds" :: (RequestHostIdList) } -> {"HostIds" :: (RequestHostIdList) } ) -> ReleaseHostsRequest
newReleaseHostsRequest' _HostIds customize = (ReleaseHostsRequest <<< customize) { "HostIds": _HostIds }



-- | <p>Contains the output of ReleaseHosts.</p>
newtype ReleaseHostsResult = ReleaseHostsResult 
  { "Successful" :: Maybe (ResponseHostIdList)
  , "Unsuccessful" :: Maybe (UnsuccessfulItemList)
  }
derive instance newtypeReleaseHostsResult :: Newtype ReleaseHostsResult _
derive instance repGenericReleaseHostsResult :: Generic ReleaseHostsResult _
instance showReleaseHostsResult :: Show ReleaseHostsResult where show = genericShow
instance decodeReleaseHostsResult :: Decode ReleaseHostsResult where decode = genericDecode options
instance encodeReleaseHostsResult :: Encode ReleaseHostsResult where encode = genericEncode options

-- | Constructs ReleaseHostsResult from required parameters
newReleaseHostsResult :: ReleaseHostsResult
newReleaseHostsResult  = ReleaseHostsResult { "Successful": Nothing, "Unsuccessful": Nothing }

-- | Constructs ReleaseHostsResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newReleaseHostsResult' :: ( { "Successful" :: Maybe (ResponseHostIdList) , "Unsuccessful" :: Maybe (UnsuccessfulItemList) } -> {"Successful" :: Maybe (ResponseHostIdList) , "Unsuccessful" :: Maybe (UnsuccessfulItemList) } ) -> ReleaseHostsResult
newReleaseHostsResult'  customize = (ReleaseHostsResult <<< customize) { "Successful": Nothing, "Unsuccessful": Nothing }



newtype ReplaceIamInstanceProfileAssociationRequest = ReplaceIamInstanceProfileAssociationRequest 
  { "IamInstanceProfile" :: (IamInstanceProfileSpecification)
  , "AssociationId" :: (String)
  }
derive instance newtypeReplaceIamInstanceProfileAssociationRequest :: Newtype ReplaceIamInstanceProfileAssociationRequest _
derive instance repGenericReplaceIamInstanceProfileAssociationRequest :: Generic ReplaceIamInstanceProfileAssociationRequest _
instance showReplaceIamInstanceProfileAssociationRequest :: Show ReplaceIamInstanceProfileAssociationRequest where show = genericShow
instance decodeReplaceIamInstanceProfileAssociationRequest :: Decode ReplaceIamInstanceProfileAssociationRequest where decode = genericDecode options
instance encodeReplaceIamInstanceProfileAssociationRequest :: Encode ReplaceIamInstanceProfileAssociationRequest where encode = genericEncode options

-- | Constructs ReplaceIamInstanceProfileAssociationRequest from required parameters
newReplaceIamInstanceProfileAssociationRequest :: String -> IamInstanceProfileSpecification -> ReplaceIamInstanceProfileAssociationRequest
newReplaceIamInstanceProfileAssociationRequest _AssociationId _IamInstanceProfile = ReplaceIamInstanceProfileAssociationRequest { "AssociationId": _AssociationId, "IamInstanceProfile": _IamInstanceProfile }

-- | Constructs ReplaceIamInstanceProfileAssociationRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newReplaceIamInstanceProfileAssociationRequest' :: String -> IamInstanceProfileSpecification -> ( { "IamInstanceProfile" :: (IamInstanceProfileSpecification) , "AssociationId" :: (String) } -> {"IamInstanceProfile" :: (IamInstanceProfileSpecification) , "AssociationId" :: (String) } ) -> ReplaceIamInstanceProfileAssociationRequest
newReplaceIamInstanceProfileAssociationRequest' _AssociationId _IamInstanceProfile customize = (ReplaceIamInstanceProfileAssociationRequest <<< customize) { "AssociationId": _AssociationId, "IamInstanceProfile": _IamInstanceProfile }



newtype ReplaceIamInstanceProfileAssociationResult = ReplaceIamInstanceProfileAssociationResult 
  { "IamInstanceProfileAssociation" :: Maybe (IamInstanceProfileAssociation)
  }
derive instance newtypeReplaceIamInstanceProfileAssociationResult :: Newtype ReplaceIamInstanceProfileAssociationResult _
derive instance repGenericReplaceIamInstanceProfileAssociationResult :: Generic ReplaceIamInstanceProfileAssociationResult _
instance showReplaceIamInstanceProfileAssociationResult :: Show ReplaceIamInstanceProfileAssociationResult where show = genericShow
instance decodeReplaceIamInstanceProfileAssociationResult :: Decode ReplaceIamInstanceProfileAssociationResult where decode = genericDecode options
instance encodeReplaceIamInstanceProfileAssociationResult :: Encode ReplaceIamInstanceProfileAssociationResult where encode = genericEncode options

-- | Constructs ReplaceIamInstanceProfileAssociationResult from required parameters
newReplaceIamInstanceProfileAssociationResult :: ReplaceIamInstanceProfileAssociationResult
newReplaceIamInstanceProfileAssociationResult  = ReplaceIamInstanceProfileAssociationResult { "IamInstanceProfileAssociation": Nothing }

-- | Constructs ReplaceIamInstanceProfileAssociationResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newReplaceIamInstanceProfileAssociationResult' :: ( { "IamInstanceProfileAssociation" :: Maybe (IamInstanceProfileAssociation) } -> {"IamInstanceProfileAssociation" :: Maybe (IamInstanceProfileAssociation) } ) -> ReplaceIamInstanceProfileAssociationResult
newReplaceIamInstanceProfileAssociationResult'  customize = (ReplaceIamInstanceProfileAssociationResult <<< customize) { "IamInstanceProfileAssociation": Nothing }



-- | <p>Contains the parameters for ReplaceNetworkAclAssociation.</p>
newtype ReplaceNetworkAclAssociationRequest = ReplaceNetworkAclAssociationRequest 
  { "AssociationId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  , "NetworkAclId" :: (String)
  }
derive instance newtypeReplaceNetworkAclAssociationRequest :: Newtype ReplaceNetworkAclAssociationRequest _
derive instance repGenericReplaceNetworkAclAssociationRequest :: Generic ReplaceNetworkAclAssociationRequest _
instance showReplaceNetworkAclAssociationRequest :: Show ReplaceNetworkAclAssociationRequest where show = genericShow
instance decodeReplaceNetworkAclAssociationRequest :: Decode ReplaceNetworkAclAssociationRequest where decode = genericDecode options
instance encodeReplaceNetworkAclAssociationRequest :: Encode ReplaceNetworkAclAssociationRequest where encode = genericEncode options

-- | Constructs ReplaceNetworkAclAssociationRequest from required parameters
newReplaceNetworkAclAssociationRequest :: String -> String -> ReplaceNetworkAclAssociationRequest
newReplaceNetworkAclAssociationRequest _AssociationId _NetworkAclId = ReplaceNetworkAclAssociationRequest { "AssociationId": _AssociationId, "NetworkAclId": _NetworkAclId, "DryRun": Nothing }

-- | Constructs ReplaceNetworkAclAssociationRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newReplaceNetworkAclAssociationRequest' :: String -> String -> ( { "AssociationId" :: (String) , "DryRun" :: Maybe (Boolean) , "NetworkAclId" :: (String) } -> {"AssociationId" :: (String) , "DryRun" :: Maybe (Boolean) , "NetworkAclId" :: (String) } ) -> ReplaceNetworkAclAssociationRequest
newReplaceNetworkAclAssociationRequest' _AssociationId _NetworkAclId customize = (ReplaceNetworkAclAssociationRequest <<< customize) { "AssociationId": _AssociationId, "NetworkAclId": _NetworkAclId, "DryRun": Nothing }



-- | <p>Contains the output of ReplaceNetworkAclAssociation.</p>
newtype ReplaceNetworkAclAssociationResult = ReplaceNetworkAclAssociationResult 
  { "NewAssociationId" :: Maybe (String)
  }
derive instance newtypeReplaceNetworkAclAssociationResult :: Newtype ReplaceNetworkAclAssociationResult _
derive instance repGenericReplaceNetworkAclAssociationResult :: Generic ReplaceNetworkAclAssociationResult _
instance showReplaceNetworkAclAssociationResult :: Show ReplaceNetworkAclAssociationResult where show = genericShow
instance decodeReplaceNetworkAclAssociationResult :: Decode ReplaceNetworkAclAssociationResult where decode = genericDecode options
instance encodeReplaceNetworkAclAssociationResult :: Encode ReplaceNetworkAclAssociationResult where encode = genericEncode options

-- | Constructs ReplaceNetworkAclAssociationResult from required parameters
newReplaceNetworkAclAssociationResult :: ReplaceNetworkAclAssociationResult
newReplaceNetworkAclAssociationResult  = ReplaceNetworkAclAssociationResult { "NewAssociationId": Nothing }

-- | Constructs ReplaceNetworkAclAssociationResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newReplaceNetworkAclAssociationResult' :: ( { "NewAssociationId" :: Maybe (String) } -> {"NewAssociationId" :: Maybe (String) } ) -> ReplaceNetworkAclAssociationResult
newReplaceNetworkAclAssociationResult'  customize = (ReplaceNetworkAclAssociationResult <<< customize) { "NewAssociationId": Nothing }



-- | <p>Contains the parameters for ReplaceNetworkAclEntry.</p>
newtype ReplaceNetworkAclEntryRequest = ReplaceNetworkAclEntryRequest 
  { "CidrBlock" :: Maybe (String)
  , "DryRun" :: Maybe (Boolean)
  , "Egress" :: (Boolean)
  , "IcmpTypeCode" :: Maybe (IcmpTypeCode)
  , "Ipv6CidrBlock" :: Maybe (String)
  , "NetworkAclId" :: (String)
  , "PortRange" :: Maybe (PortRange)
  , "Protocol" :: (String)
  , "RuleAction" :: (RuleAction)
  , "RuleNumber" :: (Int)
  }
derive instance newtypeReplaceNetworkAclEntryRequest :: Newtype ReplaceNetworkAclEntryRequest _
derive instance repGenericReplaceNetworkAclEntryRequest :: Generic ReplaceNetworkAclEntryRequest _
instance showReplaceNetworkAclEntryRequest :: Show ReplaceNetworkAclEntryRequest where show = genericShow
instance decodeReplaceNetworkAclEntryRequest :: Decode ReplaceNetworkAclEntryRequest where decode = genericDecode options
instance encodeReplaceNetworkAclEntryRequest :: Encode ReplaceNetworkAclEntryRequest where encode = genericEncode options

-- | Constructs ReplaceNetworkAclEntryRequest from required parameters
newReplaceNetworkAclEntryRequest :: Boolean -> String -> String -> RuleAction -> Int -> ReplaceNetworkAclEntryRequest
newReplaceNetworkAclEntryRequest _Egress _NetworkAclId _Protocol _RuleAction _RuleNumber = ReplaceNetworkAclEntryRequest { "Egress": _Egress, "NetworkAclId": _NetworkAclId, "Protocol": _Protocol, "RuleAction": _RuleAction, "RuleNumber": _RuleNumber, "CidrBlock": Nothing, "DryRun": Nothing, "IcmpTypeCode": Nothing, "Ipv6CidrBlock": Nothing, "PortRange": Nothing }

-- | Constructs ReplaceNetworkAclEntryRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newReplaceNetworkAclEntryRequest' :: Boolean -> String -> String -> RuleAction -> Int -> ( { "CidrBlock" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "Egress" :: (Boolean) , "IcmpTypeCode" :: Maybe (IcmpTypeCode) , "Ipv6CidrBlock" :: Maybe (String) , "NetworkAclId" :: (String) , "PortRange" :: Maybe (PortRange) , "Protocol" :: (String) , "RuleAction" :: (RuleAction) , "RuleNumber" :: (Int) } -> {"CidrBlock" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "Egress" :: (Boolean) , "IcmpTypeCode" :: Maybe (IcmpTypeCode) , "Ipv6CidrBlock" :: Maybe (String) , "NetworkAclId" :: (String) , "PortRange" :: Maybe (PortRange) , "Protocol" :: (String) , "RuleAction" :: (RuleAction) , "RuleNumber" :: (Int) } ) -> ReplaceNetworkAclEntryRequest
newReplaceNetworkAclEntryRequest' _Egress _NetworkAclId _Protocol _RuleAction _RuleNumber customize = (ReplaceNetworkAclEntryRequest <<< customize) { "Egress": _Egress, "NetworkAclId": _NetworkAclId, "Protocol": _Protocol, "RuleAction": _RuleAction, "RuleNumber": _RuleNumber, "CidrBlock": Nothing, "DryRun": Nothing, "IcmpTypeCode": Nothing, "Ipv6CidrBlock": Nothing, "PortRange": Nothing }



-- | <p>Contains the parameters for ReplaceRoute.</p>
newtype ReplaceRouteRequest = ReplaceRouteRequest 
  { "DestinationCidrBlock" :: Maybe (String)
  , "DestinationIpv6CidrBlock" :: Maybe (String)
  , "DryRun" :: Maybe (Boolean)
  , "EgressOnlyInternetGatewayId" :: Maybe (String)
  , "GatewayId" :: Maybe (String)
  , "InstanceId" :: Maybe (String)
  , "NatGatewayId" :: Maybe (String)
  , "NetworkInterfaceId" :: Maybe (String)
  , "RouteTableId" :: (String)
  , "VpcPeeringConnectionId" :: Maybe (String)
  }
derive instance newtypeReplaceRouteRequest :: Newtype ReplaceRouteRequest _
derive instance repGenericReplaceRouteRequest :: Generic ReplaceRouteRequest _
instance showReplaceRouteRequest :: Show ReplaceRouteRequest where show = genericShow
instance decodeReplaceRouteRequest :: Decode ReplaceRouteRequest where decode = genericDecode options
instance encodeReplaceRouteRequest :: Encode ReplaceRouteRequest where encode = genericEncode options

-- | Constructs ReplaceRouteRequest from required parameters
newReplaceRouteRequest :: String -> ReplaceRouteRequest
newReplaceRouteRequest _RouteTableId = ReplaceRouteRequest { "RouteTableId": _RouteTableId, "DestinationCidrBlock": Nothing, "DestinationIpv6CidrBlock": Nothing, "DryRun": Nothing, "EgressOnlyInternetGatewayId": Nothing, "GatewayId": Nothing, "InstanceId": Nothing, "NatGatewayId": Nothing, "NetworkInterfaceId": Nothing, "VpcPeeringConnectionId": Nothing }

-- | Constructs ReplaceRouteRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newReplaceRouteRequest' :: String -> ( { "DestinationCidrBlock" :: Maybe (String) , "DestinationIpv6CidrBlock" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "EgressOnlyInternetGatewayId" :: Maybe (String) , "GatewayId" :: Maybe (String) , "InstanceId" :: Maybe (String) , "NatGatewayId" :: Maybe (String) , "NetworkInterfaceId" :: Maybe (String) , "RouteTableId" :: (String) , "VpcPeeringConnectionId" :: Maybe (String) } -> {"DestinationCidrBlock" :: Maybe (String) , "DestinationIpv6CidrBlock" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "EgressOnlyInternetGatewayId" :: Maybe (String) , "GatewayId" :: Maybe (String) , "InstanceId" :: Maybe (String) , "NatGatewayId" :: Maybe (String) , "NetworkInterfaceId" :: Maybe (String) , "RouteTableId" :: (String) , "VpcPeeringConnectionId" :: Maybe (String) } ) -> ReplaceRouteRequest
newReplaceRouteRequest' _RouteTableId customize = (ReplaceRouteRequest <<< customize) { "RouteTableId": _RouteTableId, "DestinationCidrBlock": Nothing, "DestinationIpv6CidrBlock": Nothing, "DryRun": Nothing, "EgressOnlyInternetGatewayId": Nothing, "GatewayId": Nothing, "InstanceId": Nothing, "NatGatewayId": Nothing, "NetworkInterfaceId": Nothing, "VpcPeeringConnectionId": Nothing }



-- | <p>Contains the parameters for ReplaceRouteTableAssociation.</p>
newtype ReplaceRouteTableAssociationRequest = ReplaceRouteTableAssociationRequest 
  { "AssociationId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  , "RouteTableId" :: (String)
  }
derive instance newtypeReplaceRouteTableAssociationRequest :: Newtype ReplaceRouteTableAssociationRequest _
derive instance repGenericReplaceRouteTableAssociationRequest :: Generic ReplaceRouteTableAssociationRequest _
instance showReplaceRouteTableAssociationRequest :: Show ReplaceRouteTableAssociationRequest where show = genericShow
instance decodeReplaceRouteTableAssociationRequest :: Decode ReplaceRouteTableAssociationRequest where decode = genericDecode options
instance encodeReplaceRouteTableAssociationRequest :: Encode ReplaceRouteTableAssociationRequest where encode = genericEncode options

-- | Constructs ReplaceRouteTableAssociationRequest from required parameters
newReplaceRouteTableAssociationRequest :: String -> String -> ReplaceRouteTableAssociationRequest
newReplaceRouteTableAssociationRequest _AssociationId _RouteTableId = ReplaceRouteTableAssociationRequest { "AssociationId": _AssociationId, "RouteTableId": _RouteTableId, "DryRun": Nothing }

-- | Constructs ReplaceRouteTableAssociationRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newReplaceRouteTableAssociationRequest' :: String -> String -> ( { "AssociationId" :: (String) , "DryRun" :: Maybe (Boolean) , "RouteTableId" :: (String) } -> {"AssociationId" :: (String) , "DryRun" :: Maybe (Boolean) , "RouteTableId" :: (String) } ) -> ReplaceRouteTableAssociationRequest
newReplaceRouteTableAssociationRequest' _AssociationId _RouteTableId customize = (ReplaceRouteTableAssociationRequest <<< customize) { "AssociationId": _AssociationId, "RouteTableId": _RouteTableId, "DryRun": Nothing }



-- | <p>Contains the output of ReplaceRouteTableAssociation.</p>
newtype ReplaceRouteTableAssociationResult = ReplaceRouteTableAssociationResult 
  { "NewAssociationId" :: Maybe (String)
  }
derive instance newtypeReplaceRouteTableAssociationResult :: Newtype ReplaceRouteTableAssociationResult _
derive instance repGenericReplaceRouteTableAssociationResult :: Generic ReplaceRouteTableAssociationResult _
instance showReplaceRouteTableAssociationResult :: Show ReplaceRouteTableAssociationResult where show = genericShow
instance decodeReplaceRouteTableAssociationResult :: Decode ReplaceRouteTableAssociationResult where decode = genericDecode options
instance encodeReplaceRouteTableAssociationResult :: Encode ReplaceRouteTableAssociationResult where encode = genericEncode options

-- | Constructs ReplaceRouteTableAssociationResult from required parameters
newReplaceRouteTableAssociationResult :: ReplaceRouteTableAssociationResult
newReplaceRouteTableAssociationResult  = ReplaceRouteTableAssociationResult { "NewAssociationId": Nothing }

-- | Constructs ReplaceRouteTableAssociationResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newReplaceRouteTableAssociationResult' :: ( { "NewAssociationId" :: Maybe (String) } -> {"NewAssociationId" :: Maybe (String) } ) -> ReplaceRouteTableAssociationResult
newReplaceRouteTableAssociationResult'  customize = (ReplaceRouteTableAssociationResult <<< customize) { "NewAssociationId": Nothing }



newtype ReportInstanceReasonCodes = ReportInstanceReasonCodes String
derive instance newtypeReportInstanceReasonCodes :: Newtype ReportInstanceReasonCodes _
derive instance repGenericReportInstanceReasonCodes :: Generic ReportInstanceReasonCodes _
instance showReportInstanceReasonCodes :: Show ReportInstanceReasonCodes where show = genericShow
instance decodeReportInstanceReasonCodes :: Decode ReportInstanceReasonCodes where decode = genericDecode options
instance encodeReportInstanceReasonCodes :: Encode ReportInstanceReasonCodes where encode = genericEncode options



-- | <p>Contains the parameters for ReportInstanceStatus.</p>
newtype ReportInstanceStatusRequest = ReportInstanceStatusRequest 
  { "Description" :: Maybe (String)
  , "DryRun" :: Maybe (Boolean)
  , "EndTime" :: Maybe (DateTime)
  , "Instances" :: (InstanceIdStringList)
  , "ReasonCodes" :: (ReasonCodesList)
  , "StartTime" :: Maybe (DateTime)
  , "Status" :: (ReportStatusType)
  }
derive instance newtypeReportInstanceStatusRequest :: Newtype ReportInstanceStatusRequest _
derive instance repGenericReportInstanceStatusRequest :: Generic ReportInstanceStatusRequest _
instance showReportInstanceStatusRequest :: Show ReportInstanceStatusRequest where show = genericShow
instance decodeReportInstanceStatusRequest :: Decode ReportInstanceStatusRequest where decode = genericDecode options
instance encodeReportInstanceStatusRequest :: Encode ReportInstanceStatusRequest where encode = genericEncode options

-- | Constructs ReportInstanceStatusRequest from required parameters
newReportInstanceStatusRequest :: InstanceIdStringList -> ReasonCodesList -> ReportStatusType -> ReportInstanceStatusRequest
newReportInstanceStatusRequest _Instances _ReasonCodes _Status = ReportInstanceStatusRequest { "Instances": _Instances, "ReasonCodes": _ReasonCodes, "Status": _Status, "Description": Nothing, "DryRun": Nothing, "EndTime": Nothing, "StartTime": Nothing }

-- | Constructs ReportInstanceStatusRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newReportInstanceStatusRequest' :: InstanceIdStringList -> ReasonCodesList -> ReportStatusType -> ( { "Description" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "EndTime" :: Maybe (DateTime) , "Instances" :: (InstanceIdStringList) , "ReasonCodes" :: (ReasonCodesList) , "StartTime" :: Maybe (DateTime) , "Status" :: (ReportStatusType) } -> {"Description" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "EndTime" :: Maybe (DateTime) , "Instances" :: (InstanceIdStringList) , "ReasonCodes" :: (ReasonCodesList) , "StartTime" :: Maybe (DateTime) , "Status" :: (ReportStatusType) } ) -> ReportInstanceStatusRequest
newReportInstanceStatusRequest' _Instances _ReasonCodes _Status customize = (ReportInstanceStatusRequest <<< customize) { "Instances": _Instances, "ReasonCodes": _ReasonCodes, "Status": _Status, "Description": Nothing, "DryRun": Nothing, "EndTime": Nothing, "StartTime": Nothing }



newtype ReportStatusType = ReportStatusType String
derive instance newtypeReportStatusType :: Newtype ReportStatusType _
derive instance repGenericReportStatusType :: Generic ReportStatusType _
instance showReportStatusType :: Show ReportStatusType where show = genericShow
instance decodeReportStatusType :: Decode ReportStatusType where decode = genericDecode options
instance encodeReportStatusType :: Encode ReportStatusType where encode = genericEncode options



newtype RequestHostIdList = RequestHostIdList (Array String)
derive instance newtypeRequestHostIdList :: Newtype RequestHostIdList _
derive instance repGenericRequestHostIdList :: Generic RequestHostIdList _
instance showRequestHostIdList :: Show RequestHostIdList where show = genericShow
instance decodeRequestHostIdList :: Decode RequestHostIdList where decode = genericDecode options
instance encodeRequestHostIdList :: Encode RequestHostIdList where encode = genericEncode options



newtype RequestHostIdSet = RequestHostIdSet (Array String)
derive instance newtypeRequestHostIdSet :: Newtype RequestHostIdSet _
derive instance repGenericRequestHostIdSet :: Generic RequestHostIdSet _
instance showRequestHostIdSet :: Show RequestHostIdSet where show = genericShow
instance decodeRequestHostIdSet :: Decode RequestHostIdSet where decode = genericDecode options
instance encodeRequestHostIdSet :: Encode RequestHostIdSet where encode = genericEncode options



-- | <p>The information to include in the launch template.</p>
newtype RequestLaunchTemplateData = RequestLaunchTemplateData 
  { "KernelId" :: Maybe (String)
  , "EbsOptimized" :: Maybe (Boolean)
  , "IamInstanceProfile" :: Maybe (LaunchTemplateIamInstanceProfileSpecificationRequest)
  , "BlockDeviceMappings" :: Maybe (LaunchTemplateBlockDeviceMappingRequestList)
  , "NetworkInterfaces" :: Maybe (LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList)
  , "ImageId" :: Maybe (String)
  , "InstanceType" :: Maybe (InstanceType)
  , "KeyName" :: Maybe (String)
  , "Monitoring" :: Maybe (LaunchTemplatesMonitoringRequest)
  , "Placement" :: Maybe (LaunchTemplatePlacementRequest)
  , "RamDiskId" :: Maybe (String)
  , "DisableApiTermination" :: Maybe (Boolean)
  , "InstanceInitiatedShutdownBehavior" :: Maybe (ShutdownBehavior)
  , "UserData" :: Maybe (String)
  , "TagSpecifications" :: Maybe (LaunchTemplateTagSpecificationRequestList)
  , "ElasticGpuSpecifications" :: Maybe (ElasticGpuSpecificationList)
  , "SecurityGroupIds" :: Maybe (SecurityGroupIdStringList)
  , "SecurityGroups" :: Maybe (SecurityGroupStringList)
  , "InstanceMarketOptions" :: Maybe (LaunchTemplateInstanceMarketOptionsRequest)
  , "CreditSpecification" :: Maybe (CreditSpecificationRequest)
  }
derive instance newtypeRequestLaunchTemplateData :: Newtype RequestLaunchTemplateData _
derive instance repGenericRequestLaunchTemplateData :: Generic RequestLaunchTemplateData _
instance showRequestLaunchTemplateData :: Show RequestLaunchTemplateData where show = genericShow
instance decodeRequestLaunchTemplateData :: Decode RequestLaunchTemplateData where decode = genericDecode options
instance encodeRequestLaunchTemplateData :: Encode RequestLaunchTemplateData where encode = genericEncode options

-- | Constructs RequestLaunchTemplateData from required parameters
newRequestLaunchTemplateData :: RequestLaunchTemplateData
newRequestLaunchTemplateData  = RequestLaunchTemplateData { "BlockDeviceMappings": Nothing, "CreditSpecification": Nothing, "DisableApiTermination": Nothing, "EbsOptimized": Nothing, "ElasticGpuSpecifications": Nothing, "IamInstanceProfile": Nothing, "ImageId": Nothing, "InstanceInitiatedShutdownBehavior": Nothing, "InstanceMarketOptions": Nothing, "InstanceType": Nothing, "KernelId": Nothing, "KeyName": Nothing, "Monitoring": Nothing, "NetworkInterfaces": Nothing, "Placement": Nothing, "RamDiskId": Nothing, "SecurityGroupIds": Nothing, "SecurityGroups": Nothing, "TagSpecifications": Nothing, "UserData": Nothing }

-- | Constructs RequestLaunchTemplateData's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newRequestLaunchTemplateData' :: ( { "KernelId" :: Maybe (String) , "EbsOptimized" :: Maybe (Boolean) , "IamInstanceProfile" :: Maybe (LaunchTemplateIamInstanceProfileSpecificationRequest) , "BlockDeviceMappings" :: Maybe (LaunchTemplateBlockDeviceMappingRequestList) , "NetworkInterfaces" :: Maybe (LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList) , "ImageId" :: Maybe (String) , "InstanceType" :: Maybe (InstanceType) , "KeyName" :: Maybe (String) , "Monitoring" :: Maybe (LaunchTemplatesMonitoringRequest) , "Placement" :: Maybe (LaunchTemplatePlacementRequest) , "RamDiskId" :: Maybe (String) , "DisableApiTermination" :: Maybe (Boolean) , "InstanceInitiatedShutdownBehavior" :: Maybe (ShutdownBehavior) , "UserData" :: Maybe (String) , "TagSpecifications" :: Maybe (LaunchTemplateTagSpecificationRequestList) , "ElasticGpuSpecifications" :: Maybe (ElasticGpuSpecificationList) , "SecurityGroupIds" :: Maybe (SecurityGroupIdStringList) , "SecurityGroups" :: Maybe (SecurityGroupStringList) , "InstanceMarketOptions" :: Maybe (LaunchTemplateInstanceMarketOptionsRequest) , "CreditSpecification" :: Maybe (CreditSpecificationRequest) } -> {"KernelId" :: Maybe (String) , "EbsOptimized" :: Maybe (Boolean) , "IamInstanceProfile" :: Maybe (LaunchTemplateIamInstanceProfileSpecificationRequest) , "BlockDeviceMappings" :: Maybe (LaunchTemplateBlockDeviceMappingRequestList) , "NetworkInterfaces" :: Maybe (LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList) , "ImageId" :: Maybe (String) , "InstanceType" :: Maybe (InstanceType) , "KeyName" :: Maybe (String) , "Monitoring" :: Maybe (LaunchTemplatesMonitoringRequest) , "Placement" :: Maybe (LaunchTemplatePlacementRequest) , "RamDiskId" :: Maybe (String) , "DisableApiTermination" :: Maybe (Boolean) , "InstanceInitiatedShutdownBehavior" :: Maybe (ShutdownBehavior) , "UserData" :: Maybe (String) , "TagSpecifications" :: Maybe (LaunchTemplateTagSpecificationRequestList) , "ElasticGpuSpecifications" :: Maybe (ElasticGpuSpecificationList) , "SecurityGroupIds" :: Maybe (SecurityGroupIdStringList) , "SecurityGroups" :: Maybe (SecurityGroupStringList) , "InstanceMarketOptions" :: Maybe (LaunchTemplateInstanceMarketOptionsRequest) , "CreditSpecification" :: Maybe (CreditSpecificationRequest) } ) -> RequestLaunchTemplateData
newRequestLaunchTemplateData'  customize = (RequestLaunchTemplateData <<< customize) { "BlockDeviceMappings": Nothing, "CreditSpecification": Nothing, "DisableApiTermination": Nothing, "EbsOptimized": Nothing, "ElasticGpuSpecifications": Nothing, "IamInstanceProfile": Nothing, "ImageId": Nothing, "InstanceInitiatedShutdownBehavior": Nothing, "InstanceMarketOptions": Nothing, "InstanceType": Nothing, "KernelId": Nothing, "KeyName": Nothing, "Monitoring": Nothing, "NetworkInterfaces": Nothing, "Placement": Nothing, "RamDiskId": Nothing, "SecurityGroupIds": Nothing, "SecurityGroups": Nothing, "TagSpecifications": Nothing, "UserData": Nothing }



-- | <p>Contains the parameters for RequestSpotFleet.</p>
newtype RequestSpotFleetRequest = RequestSpotFleetRequest 
  { "DryRun" :: Maybe (Boolean)
  , "SpotFleetRequestConfig" :: (SpotFleetRequestConfigData)
  }
derive instance newtypeRequestSpotFleetRequest :: Newtype RequestSpotFleetRequest _
derive instance repGenericRequestSpotFleetRequest :: Generic RequestSpotFleetRequest _
instance showRequestSpotFleetRequest :: Show RequestSpotFleetRequest where show = genericShow
instance decodeRequestSpotFleetRequest :: Decode RequestSpotFleetRequest where decode = genericDecode options
instance encodeRequestSpotFleetRequest :: Encode RequestSpotFleetRequest where encode = genericEncode options

-- | Constructs RequestSpotFleetRequest from required parameters
newRequestSpotFleetRequest :: SpotFleetRequestConfigData -> RequestSpotFleetRequest
newRequestSpotFleetRequest _SpotFleetRequestConfig = RequestSpotFleetRequest { "SpotFleetRequestConfig": _SpotFleetRequestConfig, "DryRun": Nothing }

-- | Constructs RequestSpotFleetRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newRequestSpotFleetRequest' :: SpotFleetRequestConfigData -> ( { "DryRun" :: Maybe (Boolean) , "SpotFleetRequestConfig" :: (SpotFleetRequestConfigData) } -> {"DryRun" :: Maybe (Boolean) , "SpotFleetRequestConfig" :: (SpotFleetRequestConfigData) } ) -> RequestSpotFleetRequest
newRequestSpotFleetRequest' _SpotFleetRequestConfig customize = (RequestSpotFleetRequest <<< customize) { "SpotFleetRequestConfig": _SpotFleetRequestConfig, "DryRun": Nothing }



-- | <p>Contains the output of RequestSpotFleet.</p>
newtype RequestSpotFleetResponse = RequestSpotFleetResponse 
  { "SpotFleetRequestId" :: (String)
  }
derive instance newtypeRequestSpotFleetResponse :: Newtype RequestSpotFleetResponse _
derive instance repGenericRequestSpotFleetResponse :: Generic RequestSpotFleetResponse _
instance showRequestSpotFleetResponse :: Show RequestSpotFleetResponse where show = genericShow
instance decodeRequestSpotFleetResponse :: Decode RequestSpotFleetResponse where decode = genericDecode options
instance encodeRequestSpotFleetResponse :: Encode RequestSpotFleetResponse where encode = genericEncode options

-- | Constructs RequestSpotFleetResponse from required parameters
newRequestSpotFleetResponse :: String -> RequestSpotFleetResponse
newRequestSpotFleetResponse _SpotFleetRequestId = RequestSpotFleetResponse { "SpotFleetRequestId": _SpotFleetRequestId }

-- | Constructs RequestSpotFleetResponse's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newRequestSpotFleetResponse' :: String -> ( { "SpotFleetRequestId" :: (String) } -> {"SpotFleetRequestId" :: (String) } ) -> RequestSpotFleetResponse
newRequestSpotFleetResponse' _SpotFleetRequestId customize = (RequestSpotFleetResponse <<< customize) { "SpotFleetRequestId": _SpotFleetRequestId }



-- | <p>Contains the parameters for RequestSpotInstances.</p>
newtype RequestSpotInstancesRequest = RequestSpotInstancesRequest 
  { "AvailabilityZoneGroup" :: Maybe (String)
  , "BlockDurationMinutes" :: Maybe (Int)
  , "ClientToken" :: Maybe (String)
  , "DryRun" :: Maybe (Boolean)
  , "InstanceCount" :: Maybe (Int)
  , "LaunchGroup" :: Maybe (String)
  , "LaunchSpecification" :: Maybe (RequestSpotLaunchSpecification)
  , "SpotPrice" :: Maybe (String)
  , "Type" :: Maybe (SpotInstanceType)
  , "ValidFrom" :: Maybe (DateTime)
  , "ValidUntil" :: Maybe (DateTime)
  , "InstanceInterruptionBehavior" :: Maybe (InstanceInterruptionBehavior)
  }
derive instance newtypeRequestSpotInstancesRequest :: Newtype RequestSpotInstancesRequest _
derive instance repGenericRequestSpotInstancesRequest :: Generic RequestSpotInstancesRequest _
instance showRequestSpotInstancesRequest :: Show RequestSpotInstancesRequest where show = genericShow
instance decodeRequestSpotInstancesRequest :: Decode RequestSpotInstancesRequest where decode = genericDecode options
instance encodeRequestSpotInstancesRequest :: Encode RequestSpotInstancesRequest where encode = genericEncode options

-- | Constructs RequestSpotInstancesRequest from required parameters
newRequestSpotInstancesRequest :: RequestSpotInstancesRequest
newRequestSpotInstancesRequest  = RequestSpotInstancesRequest { "AvailabilityZoneGroup": Nothing, "BlockDurationMinutes": Nothing, "ClientToken": Nothing, "DryRun": Nothing, "InstanceCount": Nothing, "InstanceInterruptionBehavior": Nothing, "LaunchGroup": Nothing, "LaunchSpecification": Nothing, "SpotPrice": Nothing, "Type": Nothing, "ValidFrom": Nothing, "ValidUntil": Nothing }

-- | Constructs RequestSpotInstancesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newRequestSpotInstancesRequest' :: ( { "AvailabilityZoneGroup" :: Maybe (String) , "BlockDurationMinutes" :: Maybe (Int) , "ClientToken" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "InstanceCount" :: Maybe (Int) , "LaunchGroup" :: Maybe (String) , "LaunchSpecification" :: Maybe (RequestSpotLaunchSpecification) , "SpotPrice" :: Maybe (String) , "Type" :: Maybe (SpotInstanceType) , "ValidFrom" :: Maybe (DateTime) , "ValidUntil" :: Maybe (DateTime) , "InstanceInterruptionBehavior" :: Maybe (InstanceInterruptionBehavior) } -> {"AvailabilityZoneGroup" :: Maybe (String) , "BlockDurationMinutes" :: Maybe (Int) , "ClientToken" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "InstanceCount" :: Maybe (Int) , "LaunchGroup" :: Maybe (String) , "LaunchSpecification" :: Maybe (RequestSpotLaunchSpecification) , "SpotPrice" :: Maybe (String) , "Type" :: Maybe (SpotInstanceType) , "ValidFrom" :: Maybe (DateTime) , "ValidUntil" :: Maybe (DateTime) , "InstanceInterruptionBehavior" :: Maybe (InstanceInterruptionBehavior) } ) -> RequestSpotInstancesRequest
newRequestSpotInstancesRequest'  customize = (RequestSpotInstancesRequest <<< customize) { "AvailabilityZoneGroup": Nothing, "BlockDurationMinutes": Nothing, "ClientToken": Nothing, "DryRun": Nothing, "InstanceCount": Nothing, "InstanceInterruptionBehavior": Nothing, "LaunchGroup": Nothing, "LaunchSpecification": Nothing, "SpotPrice": Nothing, "Type": Nothing, "ValidFrom": Nothing, "ValidUntil": Nothing }



-- | <p>Contains the output of RequestSpotInstances.</p>
newtype RequestSpotInstancesResult = RequestSpotInstancesResult 
  { "SpotInstanceRequests" :: Maybe (SpotInstanceRequestList)
  }
derive instance newtypeRequestSpotInstancesResult :: Newtype RequestSpotInstancesResult _
derive instance repGenericRequestSpotInstancesResult :: Generic RequestSpotInstancesResult _
instance showRequestSpotInstancesResult :: Show RequestSpotInstancesResult where show = genericShow
instance decodeRequestSpotInstancesResult :: Decode RequestSpotInstancesResult where decode = genericDecode options
instance encodeRequestSpotInstancesResult :: Encode RequestSpotInstancesResult where encode = genericEncode options

-- | Constructs RequestSpotInstancesResult from required parameters
newRequestSpotInstancesResult :: RequestSpotInstancesResult
newRequestSpotInstancesResult  = RequestSpotInstancesResult { "SpotInstanceRequests": Nothing }

-- | Constructs RequestSpotInstancesResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newRequestSpotInstancesResult' :: ( { "SpotInstanceRequests" :: Maybe (SpotInstanceRequestList) } -> {"SpotInstanceRequests" :: Maybe (SpotInstanceRequestList) } ) -> RequestSpotInstancesResult
newRequestSpotInstancesResult'  customize = (RequestSpotInstancesResult <<< customize) { "SpotInstanceRequests": Nothing }



-- | <p>Describes the launch specification for an instance.</p>
newtype RequestSpotLaunchSpecification = RequestSpotLaunchSpecification 
  { "SecurityGroupIds" :: Maybe (ValueStringList)
  , "SecurityGroups" :: Maybe (ValueStringList)
  , "AddressingType" :: Maybe (String)
  , "BlockDeviceMappings" :: Maybe (BlockDeviceMappingList)
  , "EbsOptimized" :: Maybe (Boolean)
  , "IamInstanceProfile" :: Maybe (IamInstanceProfileSpecification)
  , "ImageId" :: Maybe (String)
  , "InstanceType" :: Maybe (InstanceType)
  , "KernelId" :: Maybe (String)
  , "KeyName" :: Maybe (String)
  , "Monitoring" :: Maybe (RunInstancesMonitoringEnabled)
  , "NetworkInterfaces" :: Maybe (InstanceNetworkInterfaceSpecificationList)
  , "Placement" :: Maybe (SpotPlacement)
  , "RamdiskId" :: Maybe (String)
  , "SubnetId" :: Maybe (String)
  , "UserData" :: Maybe (String)
  }
derive instance newtypeRequestSpotLaunchSpecification :: Newtype RequestSpotLaunchSpecification _
derive instance repGenericRequestSpotLaunchSpecification :: Generic RequestSpotLaunchSpecification _
instance showRequestSpotLaunchSpecification :: Show RequestSpotLaunchSpecification where show = genericShow
instance decodeRequestSpotLaunchSpecification :: Decode RequestSpotLaunchSpecification where decode = genericDecode options
instance encodeRequestSpotLaunchSpecification :: Encode RequestSpotLaunchSpecification where encode = genericEncode options

-- | Constructs RequestSpotLaunchSpecification from required parameters
newRequestSpotLaunchSpecification :: RequestSpotLaunchSpecification
newRequestSpotLaunchSpecification  = RequestSpotLaunchSpecification { "AddressingType": Nothing, "BlockDeviceMappings": Nothing, "EbsOptimized": Nothing, "IamInstanceProfile": Nothing, "ImageId": Nothing, "InstanceType": Nothing, "KernelId": Nothing, "KeyName": Nothing, "Monitoring": Nothing, "NetworkInterfaces": Nothing, "Placement": Nothing, "RamdiskId": Nothing, "SecurityGroupIds": Nothing, "SecurityGroups": Nothing, "SubnetId": Nothing, "UserData": Nothing }

-- | Constructs RequestSpotLaunchSpecification's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newRequestSpotLaunchSpecification' :: ( { "SecurityGroupIds" :: Maybe (ValueStringList) , "SecurityGroups" :: Maybe (ValueStringList) , "AddressingType" :: Maybe (String) , "BlockDeviceMappings" :: Maybe (BlockDeviceMappingList) , "EbsOptimized" :: Maybe (Boolean) , "IamInstanceProfile" :: Maybe (IamInstanceProfileSpecification) , "ImageId" :: Maybe (String) , "InstanceType" :: Maybe (InstanceType) , "KernelId" :: Maybe (String) , "KeyName" :: Maybe (String) , "Monitoring" :: Maybe (RunInstancesMonitoringEnabled) , "NetworkInterfaces" :: Maybe (InstanceNetworkInterfaceSpecificationList) , "Placement" :: Maybe (SpotPlacement) , "RamdiskId" :: Maybe (String) , "SubnetId" :: Maybe (String) , "UserData" :: Maybe (String) } -> {"SecurityGroupIds" :: Maybe (ValueStringList) , "SecurityGroups" :: Maybe (ValueStringList) , "AddressingType" :: Maybe (String) , "BlockDeviceMappings" :: Maybe (BlockDeviceMappingList) , "EbsOptimized" :: Maybe (Boolean) , "IamInstanceProfile" :: Maybe (IamInstanceProfileSpecification) , "ImageId" :: Maybe (String) , "InstanceType" :: Maybe (InstanceType) , "KernelId" :: Maybe (String) , "KeyName" :: Maybe (String) , "Monitoring" :: Maybe (RunInstancesMonitoringEnabled) , "NetworkInterfaces" :: Maybe (InstanceNetworkInterfaceSpecificationList) , "Placement" :: Maybe (SpotPlacement) , "RamdiskId" :: Maybe (String) , "SubnetId" :: Maybe (String) , "UserData" :: Maybe (String) } ) -> RequestSpotLaunchSpecification
newRequestSpotLaunchSpecification'  customize = (RequestSpotLaunchSpecification <<< customize) { "AddressingType": Nothing, "BlockDeviceMappings": Nothing, "EbsOptimized": Nothing, "IamInstanceProfile": Nothing, "ImageId": Nothing, "InstanceType": Nothing, "KernelId": Nothing, "KeyName": Nothing, "Monitoring": Nothing, "NetworkInterfaces": Nothing, "Placement": Nothing, "RamdiskId": Nothing, "SecurityGroupIds": Nothing, "SecurityGroups": Nothing, "SubnetId": Nothing, "UserData": Nothing }



-- | <p>Describes a reservation.</p>
newtype Reservation = Reservation 
  { "Groups" :: Maybe (GroupIdentifierList)
  , "Instances" :: Maybe (InstanceList)
  , "OwnerId" :: Maybe (String)
  , "RequesterId" :: Maybe (String)
  , "ReservationId" :: Maybe (String)
  }
derive instance newtypeReservation :: Newtype Reservation _
derive instance repGenericReservation :: Generic Reservation _
instance showReservation :: Show Reservation where show = genericShow
instance decodeReservation :: Decode Reservation where decode = genericDecode options
instance encodeReservation :: Encode Reservation where encode = genericEncode options

-- | Constructs Reservation from required parameters
newReservation :: Reservation
newReservation  = Reservation { "Groups": Nothing, "Instances": Nothing, "OwnerId": Nothing, "RequesterId": Nothing, "ReservationId": Nothing }

-- | Constructs Reservation's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newReservation' :: ( { "Groups" :: Maybe (GroupIdentifierList) , "Instances" :: Maybe (InstanceList) , "OwnerId" :: Maybe (String) , "RequesterId" :: Maybe (String) , "ReservationId" :: Maybe (String) } -> {"Groups" :: Maybe (GroupIdentifierList) , "Instances" :: Maybe (InstanceList) , "OwnerId" :: Maybe (String) , "RequesterId" :: Maybe (String) , "ReservationId" :: Maybe (String) } ) -> Reservation
newReservation'  customize = (Reservation <<< customize) { "Groups": Nothing, "Instances": Nothing, "OwnerId": Nothing, "RequesterId": Nothing, "ReservationId": Nothing }



newtype ReservationList = ReservationList (Array Reservation)
derive instance newtypeReservationList :: Newtype ReservationList _
derive instance repGenericReservationList :: Generic ReservationList _
instance showReservationList :: Show ReservationList where show = genericShow
instance decodeReservationList :: Decode ReservationList where decode = genericDecode options
instance encodeReservationList :: Encode ReservationList where encode = genericEncode options



newtype ReservationState = ReservationState String
derive instance newtypeReservationState :: Newtype ReservationState _
derive instance repGenericReservationState :: Generic ReservationState _
instance showReservationState :: Show ReservationState where show = genericShow
instance decodeReservationState :: Decode ReservationState where decode = genericDecode options
instance encodeReservationState :: Encode ReservationState where encode = genericEncode options



-- | <p>The cost associated with the Reserved Instance.</p>
newtype ReservationValue = ReservationValue 
  { "HourlyPrice" :: Maybe (String)
  , "RemainingTotalValue" :: Maybe (String)
  , "RemainingUpfrontValue" :: Maybe (String)
  }
derive instance newtypeReservationValue :: Newtype ReservationValue _
derive instance repGenericReservationValue :: Generic ReservationValue _
instance showReservationValue :: Show ReservationValue where show = genericShow
instance decodeReservationValue :: Decode ReservationValue where decode = genericDecode options
instance encodeReservationValue :: Encode ReservationValue where encode = genericEncode options

-- | Constructs ReservationValue from required parameters
newReservationValue :: ReservationValue
newReservationValue  = ReservationValue { "HourlyPrice": Nothing, "RemainingTotalValue": Nothing, "RemainingUpfrontValue": Nothing }

-- | Constructs ReservationValue's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newReservationValue' :: ( { "HourlyPrice" :: Maybe (String) , "RemainingTotalValue" :: Maybe (String) , "RemainingUpfrontValue" :: Maybe (String) } -> {"HourlyPrice" :: Maybe (String) , "RemainingTotalValue" :: Maybe (String) , "RemainingUpfrontValue" :: Maybe (String) } ) -> ReservationValue
newReservationValue'  customize = (ReservationValue <<< customize) { "HourlyPrice": Nothing, "RemainingTotalValue": Nothing, "RemainingUpfrontValue": Nothing }



newtype ReservedInstanceIdSet = ReservedInstanceIdSet (Array String)
derive instance newtypeReservedInstanceIdSet :: Newtype ReservedInstanceIdSet _
derive instance repGenericReservedInstanceIdSet :: Generic ReservedInstanceIdSet _
instance showReservedInstanceIdSet :: Show ReservedInstanceIdSet where show = genericShow
instance decodeReservedInstanceIdSet :: Decode ReservedInstanceIdSet where decode = genericDecode options
instance encodeReservedInstanceIdSet :: Encode ReservedInstanceIdSet where encode = genericEncode options



-- | <p>Describes the limit price of a Reserved Instance offering.</p>
newtype ReservedInstanceLimitPrice = ReservedInstanceLimitPrice 
  { "Amount" :: Maybe (Number)
  , "CurrencyCode" :: Maybe (CurrencyCodeValues)
  }
derive instance newtypeReservedInstanceLimitPrice :: Newtype ReservedInstanceLimitPrice _
derive instance repGenericReservedInstanceLimitPrice :: Generic ReservedInstanceLimitPrice _
instance showReservedInstanceLimitPrice :: Show ReservedInstanceLimitPrice where show = genericShow
instance decodeReservedInstanceLimitPrice :: Decode ReservedInstanceLimitPrice where decode = genericDecode options
instance encodeReservedInstanceLimitPrice :: Encode ReservedInstanceLimitPrice where encode = genericEncode options

-- | Constructs ReservedInstanceLimitPrice from required parameters
newReservedInstanceLimitPrice :: ReservedInstanceLimitPrice
newReservedInstanceLimitPrice  = ReservedInstanceLimitPrice { "Amount": Nothing, "CurrencyCode": Nothing }

-- | Constructs ReservedInstanceLimitPrice's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newReservedInstanceLimitPrice' :: ( { "Amount" :: Maybe (Number) , "CurrencyCode" :: Maybe (CurrencyCodeValues) } -> {"Amount" :: Maybe (Number) , "CurrencyCode" :: Maybe (CurrencyCodeValues) } ) -> ReservedInstanceLimitPrice
newReservedInstanceLimitPrice'  customize = (ReservedInstanceLimitPrice <<< customize) { "Amount": Nothing, "CurrencyCode": Nothing }



-- | <p>The total value of the Convertible Reserved Instance.</p>
newtype ReservedInstanceReservationValue = ReservedInstanceReservationValue 
  { "ReservationValue" :: Maybe (ReservationValue)
  , "ReservedInstanceId" :: Maybe (String)
  }
derive instance newtypeReservedInstanceReservationValue :: Newtype ReservedInstanceReservationValue _
derive instance repGenericReservedInstanceReservationValue :: Generic ReservedInstanceReservationValue _
instance showReservedInstanceReservationValue :: Show ReservedInstanceReservationValue where show = genericShow
instance decodeReservedInstanceReservationValue :: Decode ReservedInstanceReservationValue where decode = genericDecode options
instance encodeReservedInstanceReservationValue :: Encode ReservedInstanceReservationValue where encode = genericEncode options

-- | Constructs ReservedInstanceReservationValue from required parameters
newReservedInstanceReservationValue :: ReservedInstanceReservationValue
newReservedInstanceReservationValue  = ReservedInstanceReservationValue { "ReservationValue": Nothing, "ReservedInstanceId": Nothing }

-- | Constructs ReservedInstanceReservationValue's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newReservedInstanceReservationValue' :: ( { "ReservationValue" :: Maybe (ReservationValue) , "ReservedInstanceId" :: Maybe (String) } -> {"ReservationValue" :: Maybe (ReservationValue) , "ReservedInstanceId" :: Maybe (String) } ) -> ReservedInstanceReservationValue
newReservedInstanceReservationValue'  customize = (ReservedInstanceReservationValue <<< customize) { "ReservationValue": Nothing, "ReservedInstanceId": Nothing }



newtype ReservedInstanceReservationValueSet = ReservedInstanceReservationValueSet (Array ReservedInstanceReservationValue)
derive instance newtypeReservedInstanceReservationValueSet :: Newtype ReservedInstanceReservationValueSet _
derive instance repGenericReservedInstanceReservationValueSet :: Generic ReservedInstanceReservationValueSet _
instance showReservedInstanceReservationValueSet :: Show ReservedInstanceReservationValueSet where show = genericShow
instance decodeReservedInstanceReservationValueSet :: Decode ReservedInstanceReservationValueSet where decode = genericDecode options
instance encodeReservedInstanceReservationValueSet :: Encode ReservedInstanceReservationValueSet where encode = genericEncode options



newtype ReservedInstanceState = ReservedInstanceState String
derive instance newtypeReservedInstanceState :: Newtype ReservedInstanceState _
derive instance repGenericReservedInstanceState :: Generic ReservedInstanceState _
instance showReservedInstanceState :: Show ReservedInstanceState where show = genericShow
instance decodeReservedInstanceState :: Decode ReservedInstanceState where decode = genericDecode options
instance encodeReservedInstanceState :: Encode ReservedInstanceState where encode = genericEncode options



-- | <p>Describes a Reserved Instance.</p>
newtype ReservedInstances = ReservedInstances 
  { "AvailabilityZone" :: Maybe (String)
  , "Duration" :: Maybe (Number)
  , "End" :: Maybe (DateTime)
  , "FixedPrice" :: Maybe (Number)
  , "InstanceCount" :: Maybe (Int)
  , "InstanceType" :: Maybe (InstanceType)
  , "ProductDescription" :: Maybe (RIProductDescription)
  , "ReservedInstancesId" :: Maybe (String)
  , "Start" :: Maybe (DateTime)
  , "State" :: Maybe (ReservedInstanceState)
  , "UsagePrice" :: Maybe (Number)
  , "CurrencyCode" :: Maybe (CurrencyCodeValues)
  , "InstanceTenancy" :: Maybe (Tenancy)
  , "OfferingClass" :: Maybe (OfferingClassType)
  , "OfferingType" :: Maybe (OfferingTypeValues)
  , "RecurringCharges" :: Maybe (RecurringChargesList)
  , "Scope" :: Maybe (Scope')
  , "Tags" :: Maybe (TagList)
  }
derive instance newtypeReservedInstances :: Newtype ReservedInstances _
derive instance repGenericReservedInstances :: Generic ReservedInstances _
instance showReservedInstances :: Show ReservedInstances where show = genericShow
instance decodeReservedInstances :: Decode ReservedInstances where decode = genericDecode options
instance encodeReservedInstances :: Encode ReservedInstances where encode = genericEncode options

-- | Constructs ReservedInstances from required parameters
newReservedInstances :: ReservedInstances
newReservedInstances  = ReservedInstances { "AvailabilityZone": Nothing, "CurrencyCode": Nothing, "Duration": Nothing, "End": Nothing, "FixedPrice": Nothing, "InstanceCount": Nothing, "InstanceTenancy": Nothing, "InstanceType": Nothing, "OfferingClass": Nothing, "OfferingType": Nothing, "ProductDescription": Nothing, "RecurringCharges": Nothing, "ReservedInstancesId": Nothing, "Scope": Nothing, "Start": Nothing, "State": Nothing, "Tags": Nothing, "UsagePrice": Nothing }

-- | Constructs ReservedInstances's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newReservedInstances' :: ( { "AvailabilityZone" :: Maybe (String) , "Duration" :: Maybe (Number) , "End" :: Maybe (DateTime) , "FixedPrice" :: Maybe (Number) , "InstanceCount" :: Maybe (Int) , "InstanceType" :: Maybe (InstanceType) , "ProductDescription" :: Maybe (RIProductDescription) , "ReservedInstancesId" :: Maybe (String) , "Start" :: Maybe (DateTime) , "State" :: Maybe (ReservedInstanceState) , "UsagePrice" :: Maybe (Number) , "CurrencyCode" :: Maybe (CurrencyCodeValues) , "InstanceTenancy" :: Maybe (Tenancy) , "OfferingClass" :: Maybe (OfferingClassType) , "OfferingType" :: Maybe (OfferingTypeValues) , "RecurringCharges" :: Maybe (RecurringChargesList) , "Scope" :: Maybe (Scope') , "Tags" :: Maybe (TagList) } -> {"AvailabilityZone" :: Maybe (String) , "Duration" :: Maybe (Number) , "End" :: Maybe (DateTime) , "FixedPrice" :: Maybe (Number) , "InstanceCount" :: Maybe (Int) , "InstanceType" :: Maybe (InstanceType) , "ProductDescription" :: Maybe (RIProductDescription) , "ReservedInstancesId" :: Maybe (String) , "Start" :: Maybe (DateTime) , "State" :: Maybe (ReservedInstanceState) , "UsagePrice" :: Maybe (Number) , "CurrencyCode" :: Maybe (CurrencyCodeValues) , "InstanceTenancy" :: Maybe (Tenancy) , "OfferingClass" :: Maybe (OfferingClassType) , "OfferingType" :: Maybe (OfferingTypeValues) , "RecurringCharges" :: Maybe (RecurringChargesList) , "Scope" :: Maybe (Scope') , "Tags" :: Maybe (TagList) } ) -> ReservedInstances
newReservedInstances'  customize = (ReservedInstances <<< customize) { "AvailabilityZone": Nothing, "CurrencyCode": Nothing, "Duration": Nothing, "End": Nothing, "FixedPrice": Nothing, "InstanceCount": Nothing, "InstanceTenancy": Nothing, "InstanceType": Nothing, "OfferingClass": Nothing, "OfferingType": Nothing, "ProductDescription": Nothing, "RecurringCharges": Nothing, "ReservedInstancesId": Nothing, "Scope": Nothing, "Start": Nothing, "State": Nothing, "Tags": Nothing, "UsagePrice": Nothing }



-- | <p>Describes the configuration settings for the modified Reserved Instances.</p>
newtype ReservedInstancesConfiguration = ReservedInstancesConfiguration 
  { "AvailabilityZone" :: Maybe (String)
  , "InstanceCount" :: Maybe (Int)
  , "InstanceType" :: Maybe (InstanceType)
  , "Platform" :: Maybe (String)
  , "Scope" :: Maybe (Scope')
  }
derive instance newtypeReservedInstancesConfiguration :: Newtype ReservedInstancesConfiguration _
derive instance repGenericReservedInstancesConfiguration :: Generic ReservedInstancesConfiguration _
instance showReservedInstancesConfiguration :: Show ReservedInstancesConfiguration where show = genericShow
instance decodeReservedInstancesConfiguration :: Decode ReservedInstancesConfiguration where decode = genericDecode options
instance encodeReservedInstancesConfiguration :: Encode ReservedInstancesConfiguration where encode = genericEncode options

-- | Constructs ReservedInstancesConfiguration from required parameters
newReservedInstancesConfiguration :: ReservedInstancesConfiguration
newReservedInstancesConfiguration  = ReservedInstancesConfiguration { "AvailabilityZone": Nothing, "InstanceCount": Nothing, "InstanceType": Nothing, "Platform": Nothing, "Scope": Nothing }

-- | Constructs ReservedInstancesConfiguration's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newReservedInstancesConfiguration' :: ( { "AvailabilityZone" :: Maybe (String) , "InstanceCount" :: Maybe (Int) , "InstanceType" :: Maybe (InstanceType) , "Platform" :: Maybe (String) , "Scope" :: Maybe (Scope') } -> {"AvailabilityZone" :: Maybe (String) , "InstanceCount" :: Maybe (Int) , "InstanceType" :: Maybe (InstanceType) , "Platform" :: Maybe (String) , "Scope" :: Maybe (Scope') } ) -> ReservedInstancesConfiguration
newReservedInstancesConfiguration'  customize = (ReservedInstancesConfiguration <<< customize) { "AvailabilityZone": Nothing, "InstanceCount": Nothing, "InstanceType": Nothing, "Platform": Nothing, "Scope": Nothing }



newtype ReservedInstancesConfigurationList = ReservedInstancesConfigurationList (Array ReservedInstancesConfiguration)
derive instance newtypeReservedInstancesConfigurationList :: Newtype ReservedInstancesConfigurationList _
derive instance repGenericReservedInstancesConfigurationList :: Generic ReservedInstancesConfigurationList _
instance showReservedInstancesConfigurationList :: Show ReservedInstancesConfigurationList where show = genericShow
instance decodeReservedInstancesConfigurationList :: Decode ReservedInstancesConfigurationList where decode = genericDecode options
instance encodeReservedInstancesConfigurationList :: Encode ReservedInstancesConfigurationList where encode = genericEncode options



-- | <p>Describes the ID of a Reserved Instance.</p>
newtype ReservedInstancesId = ReservedInstancesId 
  { "ReservedInstancesId" :: Maybe (String)
  }
derive instance newtypeReservedInstancesId :: Newtype ReservedInstancesId _
derive instance repGenericReservedInstancesId :: Generic ReservedInstancesId _
instance showReservedInstancesId :: Show ReservedInstancesId where show = genericShow
instance decodeReservedInstancesId :: Decode ReservedInstancesId where decode = genericDecode options
instance encodeReservedInstancesId :: Encode ReservedInstancesId where encode = genericEncode options

-- | Constructs ReservedInstancesId from required parameters
newReservedInstancesId :: ReservedInstancesId
newReservedInstancesId  = ReservedInstancesId { "ReservedInstancesId": Nothing }

-- | Constructs ReservedInstancesId's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newReservedInstancesId' :: ( { "ReservedInstancesId" :: Maybe (String) } -> {"ReservedInstancesId" :: Maybe (String) } ) -> ReservedInstancesId
newReservedInstancesId'  customize = (ReservedInstancesId <<< customize) { "ReservedInstancesId": Nothing }



newtype ReservedInstancesIdStringList = ReservedInstancesIdStringList (Array String)
derive instance newtypeReservedInstancesIdStringList :: Newtype ReservedInstancesIdStringList _
derive instance repGenericReservedInstancesIdStringList :: Generic ReservedInstancesIdStringList _
instance showReservedInstancesIdStringList :: Show ReservedInstancesIdStringList where show = genericShow
instance decodeReservedInstancesIdStringList :: Decode ReservedInstancesIdStringList where decode = genericDecode options
instance encodeReservedInstancesIdStringList :: Encode ReservedInstancesIdStringList where encode = genericEncode options



newtype ReservedInstancesList = ReservedInstancesList (Array ReservedInstances)
derive instance newtypeReservedInstancesList :: Newtype ReservedInstancesList _
derive instance repGenericReservedInstancesList :: Generic ReservedInstancesList _
instance showReservedInstancesList :: Show ReservedInstancesList where show = genericShow
instance decodeReservedInstancesList :: Decode ReservedInstancesList where decode = genericDecode options
instance encodeReservedInstancesList :: Encode ReservedInstancesList where encode = genericEncode options



-- | <p>Describes a Reserved Instance listing.</p>
newtype ReservedInstancesListing = ReservedInstancesListing 
  { "ClientToken" :: Maybe (String)
  , "CreateDate" :: Maybe (DateTime)
  , "InstanceCounts" :: Maybe (InstanceCountList)
  , "PriceSchedules" :: Maybe (PriceScheduleList)
  , "ReservedInstancesId" :: Maybe (String)
  , "ReservedInstancesListingId" :: Maybe (String)
  , "Status" :: Maybe (ListingStatus)
  , "StatusMessage" :: Maybe (String)
  , "Tags" :: Maybe (TagList)
  , "UpdateDate" :: Maybe (DateTime)
  }
derive instance newtypeReservedInstancesListing :: Newtype ReservedInstancesListing _
derive instance repGenericReservedInstancesListing :: Generic ReservedInstancesListing _
instance showReservedInstancesListing :: Show ReservedInstancesListing where show = genericShow
instance decodeReservedInstancesListing :: Decode ReservedInstancesListing where decode = genericDecode options
instance encodeReservedInstancesListing :: Encode ReservedInstancesListing where encode = genericEncode options

-- | Constructs ReservedInstancesListing from required parameters
newReservedInstancesListing :: ReservedInstancesListing
newReservedInstancesListing  = ReservedInstancesListing { "ClientToken": Nothing, "CreateDate": Nothing, "InstanceCounts": Nothing, "PriceSchedules": Nothing, "ReservedInstancesId": Nothing, "ReservedInstancesListingId": Nothing, "Status": Nothing, "StatusMessage": Nothing, "Tags": Nothing, "UpdateDate": Nothing }

-- | Constructs ReservedInstancesListing's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newReservedInstancesListing' :: ( { "ClientToken" :: Maybe (String) , "CreateDate" :: Maybe (DateTime) , "InstanceCounts" :: Maybe (InstanceCountList) , "PriceSchedules" :: Maybe (PriceScheduleList) , "ReservedInstancesId" :: Maybe (String) , "ReservedInstancesListingId" :: Maybe (String) , "Status" :: Maybe (ListingStatus) , "StatusMessage" :: Maybe (String) , "Tags" :: Maybe (TagList) , "UpdateDate" :: Maybe (DateTime) } -> {"ClientToken" :: Maybe (String) , "CreateDate" :: Maybe (DateTime) , "InstanceCounts" :: Maybe (InstanceCountList) , "PriceSchedules" :: Maybe (PriceScheduleList) , "ReservedInstancesId" :: Maybe (String) , "ReservedInstancesListingId" :: Maybe (String) , "Status" :: Maybe (ListingStatus) , "StatusMessage" :: Maybe (String) , "Tags" :: Maybe (TagList) , "UpdateDate" :: Maybe (DateTime) } ) -> ReservedInstancesListing
newReservedInstancesListing'  customize = (ReservedInstancesListing <<< customize) { "ClientToken": Nothing, "CreateDate": Nothing, "InstanceCounts": Nothing, "PriceSchedules": Nothing, "ReservedInstancesId": Nothing, "ReservedInstancesListingId": Nothing, "Status": Nothing, "StatusMessage": Nothing, "Tags": Nothing, "UpdateDate": Nothing }



newtype ReservedInstancesListingList = ReservedInstancesListingList (Array ReservedInstancesListing)
derive instance newtypeReservedInstancesListingList :: Newtype ReservedInstancesListingList _
derive instance repGenericReservedInstancesListingList :: Generic ReservedInstancesListingList _
instance showReservedInstancesListingList :: Show ReservedInstancesListingList where show = genericShow
instance decodeReservedInstancesListingList :: Decode ReservedInstancesListingList where decode = genericDecode options
instance encodeReservedInstancesListingList :: Encode ReservedInstancesListingList where encode = genericEncode options



-- | <p>Describes a Reserved Instance modification.</p>
newtype ReservedInstancesModification = ReservedInstancesModification 
  { "ClientToken" :: Maybe (String)
  , "CreateDate" :: Maybe (DateTime)
  , "EffectiveDate" :: Maybe (DateTime)
  , "ModificationResults" :: Maybe (ReservedInstancesModificationResultList)
  , "ReservedInstancesIds" :: Maybe (ReservedIntancesIds)
  , "ReservedInstancesModificationId" :: Maybe (String)
  , "Status" :: Maybe (String)
  , "StatusMessage" :: Maybe (String)
  , "UpdateDate" :: Maybe (DateTime)
  }
derive instance newtypeReservedInstancesModification :: Newtype ReservedInstancesModification _
derive instance repGenericReservedInstancesModification :: Generic ReservedInstancesModification _
instance showReservedInstancesModification :: Show ReservedInstancesModification where show = genericShow
instance decodeReservedInstancesModification :: Decode ReservedInstancesModification where decode = genericDecode options
instance encodeReservedInstancesModification :: Encode ReservedInstancesModification where encode = genericEncode options

-- | Constructs ReservedInstancesModification from required parameters
newReservedInstancesModification :: ReservedInstancesModification
newReservedInstancesModification  = ReservedInstancesModification { "ClientToken": Nothing, "CreateDate": Nothing, "EffectiveDate": Nothing, "ModificationResults": Nothing, "ReservedInstancesIds": Nothing, "ReservedInstancesModificationId": Nothing, "Status": Nothing, "StatusMessage": Nothing, "UpdateDate": Nothing }

-- | Constructs ReservedInstancesModification's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newReservedInstancesModification' :: ( { "ClientToken" :: Maybe (String) , "CreateDate" :: Maybe (DateTime) , "EffectiveDate" :: Maybe (DateTime) , "ModificationResults" :: Maybe (ReservedInstancesModificationResultList) , "ReservedInstancesIds" :: Maybe (ReservedIntancesIds) , "ReservedInstancesModificationId" :: Maybe (String) , "Status" :: Maybe (String) , "StatusMessage" :: Maybe (String) , "UpdateDate" :: Maybe (DateTime) } -> {"ClientToken" :: Maybe (String) , "CreateDate" :: Maybe (DateTime) , "EffectiveDate" :: Maybe (DateTime) , "ModificationResults" :: Maybe (ReservedInstancesModificationResultList) , "ReservedInstancesIds" :: Maybe (ReservedIntancesIds) , "ReservedInstancesModificationId" :: Maybe (String) , "Status" :: Maybe (String) , "StatusMessage" :: Maybe (String) , "UpdateDate" :: Maybe (DateTime) } ) -> ReservedInstancesModification
newReservedInstancesModification'  customize = (ReservedInstancesModification <<< customize) { "ClientToken": Nothing, "CreateDate": Nothing, "EffectiveDate": Nothing, "ModificationResults": Nothing, "ReservedInstancesIds": Nothing, "ReservedInstancesModificationId": Nothing, "Status": Nothing, "StatusMessage": Nothing, "UpdateDate": Nothing }



newtype ReservedInstancesModificationIdStringList = ReservedInstancesModificationIdStringList (Array String)
derive instance newtypeReservedInstancesModificationIdStringList :: Newtype ReservedInstancesModificationIdStringList _
derive instance repGenericReservedInstancesModificationIdStringList :: Generic ReservedInstancesModificationIdStringList _
instance showReservedInstancesModificationIdStringList :: Show ReservedInstancesModificationIdStringList where show = genericShow
instance decodeReservedInstancesModificationIdStringList :: Decode ReservedInstancesModificationIdStringList where decode = genericDecode options
instance encodeReservedInstancesModificationIdStringList :: Encode ReservedInstancesModificationIdStringList where encode = genericEncode options



newtype ReservedInstancesModificationList = ReservedInstancesModificationList (Array ReservedInstancesModification)
derive instance newtypeReservedInstancesModificationList :: Newtype ReservedInstancesModificationList _
derive instance repGenericReservedInstancesModificationList :: Generic ReservedInstancesModificationList _
instance showReservedInstancesModificationList :: Show ReservedInstancesModificationList where show = genericShow
instance decodeReservedInstancesModificationList :: Decode ReservedInstancesModificationList where decode = genericDecode options
instance encodeReservedInstancesModificationList :: Encode ReservedInstancesModificationList where encode = genericEncode options



-- | <p>Describes the modification request/s.</p>
newtype ReservedInstancesModificationResult = ReservedInstancesModificationResult 
  { "ReservedInstancesId" :: Maybe (String)
  , "TargetConfiguration" :: Maybe (ReservedInstancesConfiguration)
  }
derive instance newtypeReservedInstancesModificationResult :: Newtype ReservedInstancesModificationResult _
derive instance repGenericReservedInstancesModificationResult :: Generic ReservedInstancesModificationResult _
instance showReservedInstancesModificationResult :: Show ReservedInstancesModificationResult where show = genericShow
instance decodeReservedInstancesModificationResult :: Decode ReservedInstancesModificationResult where decode = genericDecode options
instance encodeReservedInstancesModificationResult :: Encode ReservedInstancesModificationResult where encode = genericEncode options

-- | Constructs ReservedInstancesModificationResult from required parameters
newReservedInstancesModificationResult :: ReservedInstancesModificationResult
newReservedInstancesModificationResult  = ReservedInstancesModificationResult { "ReservedInstancesId": Nothing, "TargetConfiguration": Nothing }

-- | Constructs ReservedInstancesModificationResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newReservedInstancesModificationResult' :: ( { "ReservedInstancesId" :: Maybe (String) , "TargetConfiguration" :: Maybe (ReservedInstancesConfiguration) } -> {"ReservedInstancesId" :: Maybe (String) , "TargetConfiguration" :: Maybe (ReservedInstancesConfiguration) } ) -> ReservedInstancesModificationResult
newReservedInstancesModificationResult'  customize = (ReservedInstancesModificationResult <<< customize) { "ReservedInstancesId": Nothing, "TargetConfiguration": Nothing }



newtype ReservedInstancesModificationResultList = ReservedInstancesModificationResultList (Array ReservedInstancesModificationResult)
derive instance newtypeReservedInstancesModificationResultList :: Newtype ReservedInstancesModificationResultList _
derive instance repGenericReservedInstancesModificationResultList :: Generic ReservedInstancesModificationResultList _
instance showReservedInstancesModificationResultList :: Show ReservedInstancesModificationResultList where show = genericShow
instance decodeReservedInstancesModificationResultList :: Decode ReservedInstancesModificationResultList where decode = genericDecode options
instance encodeReservedInstancesModificationResultList :: Encode ReservedInstancesModificationResultList where encode = genericEncode options



-- | <p>Describes a Reserved Instance offering.</p>
newtype ReservedInstancesOffering = ReservedInstancesOffering 
  { "AvailabilityZone" :: Maybe (String)
  , "Duration" :: Maybe (Number)
  , "FixedPrice" :: Maybe (Number)
  , "InstanceType" :: Maybe (InstanceType)
  , "ProductDescription" :: Maybe (RIProductDescription)
  , "ReservedInstancesOfferingId" :: Maybe (String)
  , "UsagePrice" :: Maybe (Number)
  , "CurrencyCode" :: Maybe (CurrencyCodeValues)
  , "InstanceTenancy" :: Maybe (Tenancy)
  , "Marketplace" :: Maybe (Boolean)
  , "OfferingClass" :: Maybe (OfferingClassType)
  , "OfferingType" :: Maybe (OfferingTypeValues)
  , "PricingDetails" :: Maybe (PricingDetailsList)
  , "RecurringCharges" :: Maybe (RecurringChargesList)
  , "Scope" :: Maybe (Scope')
  }
derive instance newtypeReservedInstancesOffering :: Newtype ReservedInstancesOffering _
derive instance repGenericReservedInstancesOffering :: Generic ReservedInstancesOffering _
instance showReservedInstancesOffering :: Show ReservedInstancesOffering where show = genericShow
instance decodeReservedInstancesOffering :: Decode ReservedInstancesOffering where decode = genericDecode options
instance encodeReservedInstancesOffering :: Encode ReservedInstancesOffering where encode = genericEncode options

-- | Constructs ReservedInstancesOffering from required parameters
newReservedInstancesOffering :: ReservedInstancesOffering
newReservedInstancesOffering  = ReservedInstancesOffering { "AvailabilityZone": Nothing, "CurrencyCode": Nothing, "Duration": Nothing, "FixedPrice": Nothing, "InstanceTenancy": Nothing, "InstanceType": Nothing, "Marketplace": Nothing, "OfferingClass": Nothing, "OfferingType": Nothing, "PricingDetails": Nothing, "ProductDescription": Nothing, "RecurringCharges": Nothing, "ReservedInstancesOfferingId": Nothing, "Scope": Nothing, "UsagePrice": Nothing }

-- | Constructs ReservedInstancesOffering's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newReservedInstancesOffering' :: ( { "AvailabilityZone" :: Maybe (String) , "Duration" :: Maybe (Number) , "FixedPrice" :: Maybe (Number) , "InstanceType" :: Maybe (InstanceType) , "ProductDescription" :: Maybe (RIProductDescription) , "ReservedInstancesOfferingId" :: Maybe (String) , "UsagePrice" :: Maybe (Number) , "CurrencyCode" :: Maybe (CurrencyCodeValues) , "InstanceTenancy" :: Maybe (Tenancy) , "Marketplace" :: Maybe (Boolean) , "OfferingClass" :: Maybe (OfferingClassType) , "OfferingType" :: Maybe (OfferingTypeValues) , "PricingDetails" :: Maybe (PricingDetailsList) , "RecurringCharges" :: Maybe (RecurringChargesList) , "Scope" :: Maybe (Scope') } -> {"AvailabilityZone" :: Maybe (String) , "Duration" :: Maybe (Number) , "FixedPrice" :: Maybe (Number) , "InstanceType" :: Maybe (InstanceType) , "ProductDescription" :: Maybe (RIProductDescription) , "ReservedInstancesOfferingId" :: Maybe (String) , "UsagePrice" :: Maybe (Number) , "CurrencyCode" :: Maybe (CurrencyCodeValues) , "InstanceTenancy" :: Maybe (Tenancy) , "Marketplace" :: Maybe (Boolean) , "OfferingClass" :: Maybe (OfferingClassType) , "OfferingType" :: Maybe (OfferingTypeValues) , "PricingDetails" :: Maybe (PricingDetailsList) , "RecurringCharges" :: Maybe (RecurringChargesList) , "Scope" :: Maybe (Scope') } ) -> ReservedInstancesOffering
newReservedInstancesOffering'  customize = (ReservedInstancesOffering <<< customize) { "AvailabilityZone": Nothing, "CurrencyCode": Nothing, "Duration": Nothing, "FixedPrice": Nothing, "InstanceTenancy": Nothing, "InstanceType": Nothing, "Marketplace": Nothing, "OfferingClass": Nothing, "OfferingType": Nothing, "PricingDetails": Nothing, "ProductDescription": Nothing, "RecurringCharges": Nothing, "ReservedInstancesOfferingId": Nothing, "Scope": Nothing, "UsagePrice": Nothing }



newtype ReservedInstancesOfferingIdStringList = ReservedInstancesOfferingIdStringList (Array String)
derive instance newtypeReservedInstancesOfferingIdStringList :: Newtype ReservedInstancesOfferingIdStringList _
derive instance repGenericReservedInstancesOfferingIdStringList :: Generic ReservedInstancesOfferingIdStringList _
instance showReservedInstancesOfferingIdStringList :: Show ReservedInstancesOfferingIdStringList where show = genericShow
instance decodeReservedInstancesOfferingIdStringList :: Decode ReservedInstancesOfferingIdStringList where decode = genericDecode options
instance encodeReservedInstancesOfferingIdStringList :: Encode ReservedInstancesOfferingIdStringList where encode = genericEncode options



newtype ReservedInstancesOfferingList = ReservedInstancesOfferingList (Array ReservedInstancesOffering)
derive instance newtypeReservedInstancesOfferingList :: Newtype ReservedInstancesOfferingList _
derive instance repGenericReservedInstancesOfferingList :: Generic ReservedInstancesOfferingList _
instance showReservedInstancesOfferingList :: Show ReservedInstancesOfferingList where show = genericShow
instance decodeReservedInstancesOfferingList :: Decode ReservedInstancesOfferingList where decode = genericDecode options
instance encodeReservedInstancesOfferingList :: Encode ReservedInstancesOfferingList where encode = genericEncode options



newtype ReservedIntancesIds = ReservedIntancesIds (Array ReservedInstancesId)
derive instance newtypeReservedIntancesIds :: Newtype ReservedIntancesIds _
derive instance repGenericReservedIntancesIds :: Generic ReservedIntancesIds _
instance showReservedIntancesIds :: Show ReservedIntancesIds where show = genericShow
instance decodeReservedIntancesIds :: Decode ReservedIntancesIds where decode = genericDecode options
instance encodeReservedIntancesIds :: Encode ReservedIntancesIds where encode = genericEncode options



newtype ResetFpgaImageAttributeName = ResetFpgaImageAttributeName String
derive instance newtypeResetFpgaImageAttributeName :: Newtype ResetFpgaImageAttributeName _
derive instance repGenericResetFpgaImageAttributeName :: Generic ResetFpgaImageAttributeName _
instance showResetFpgaImageAttributeName :: Show ResetFpgaImageAttributeName where show = genericShow
instance decodeResetFpgaImageAttributeName :: Decode ResetFpgaImageAttributeName where decode = genericDecode options
instance encodeResetFpgaImageAttributeName :: Encode ResetFpgaImageAttributeName where encode = genericEncode options



newtype ResetFpgaImageAttributeRequest = ResetFpgaImageAttributeRequest 
  { "DryRun" :: Maybe (Boolean)
  , "FpgaImageId" :: (String)
  , "Attribute" :: Maybe (ResetFpgaImageAttributeName)
  }
derive instance newtypeResetFpgaImageAttributeRequest :: Newtype ResetFpgaImageAttributeRequest _
derive instance repGenericResetFpgaImageAttributeRequest :: Generic ResetFpgaImageAttributeRequest _
instance showResetFpgaImageAttributeRequest :: Show ResetFpgaImageAttributeRequest where show = genericShow
instance decodeResetFpgaImageAttributeRequest :: Decode ResetFpgaImageAttributeRequest where decode = genericDecode options
instance encodeResetFpgaImageAttributeRequest :: Encode ResetFpgaImageAttributeRequest where encode = genericEncode options

-- | Constructs ResetFpgaImageAttributeRequest from required parameters
newResetFpgaImageAttributeRequest :: String -> ResetFpgaImageAttributeRequest
newResetFpgaImageAttributeRequest _FpgaImageId = ResetFpgaImageAttributeRequest { "FpgaImageId": _FpgaImageId, "Attribute": Nothing, "DryRun": Nothing }

-- | Constructs ResetFpgaImageAttributeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newResetFpgaImageAttributeRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "FpgaImageId" :: (String) , "Attribute" :: Maybe (ResetFpgaImageAttributeName) } -> {"DryRun" :: Maybe (Boolean) , "FpgaImageId" :: (String) , "Attribute" :: Maybe (ResetFpgaImageAttributeName) } ) -> ResetFpgaImageAttributeRequest
newResetFpgaImageAttributeRequest' _FpgaImageId customize = (ResetFpgaImageAttributeRequest <<< customize) { "FpgaImageId": _FpgaImageId, "Attribute": Nothing, "DryRun": Nothing }



newtype ResetFpgaImageAttributeResult = ResetFpgaImageAttributeResult 
  { "Return" :: Maybe (Boolean)
  }
derive instance newtypeResetFpgaImageAttributeResult :: Newtype ResetFpgaImageAttributeResult _
derive instance repGenericResetFpgaImageAttributeResult :: Generic ResetFpgaImageAttributeResult _
instance showResetFpgaImageAttributeResult :: Show ResetFpgaImageAttributeResult where show = genericShow
instance decodeResetFpgaImageAttributeResult :: Decode ResetFpgaImageAttributeResult where decode = genericDecode options
instance encodeResetFpgaImageAttributeResult :: Encode ResetFpgaImageAttributeResult where encode = genericEncode options

-- | Constructs ResetFpgaImageAttributeResult from required parameters
newResetFpgaImageAttributeResult :: ResetFpgaImageAttributeResult
newResetFpgaImageAttributeResult  = ResetFpgaImageAttributeResult { "Return": Nothing }

-- | Constructs ResetFpgaImageAttributeResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newResetFpgaImageAttributeResult' :: ( { "Return" :: Maybe (Boolean) } -> {"Return" :: Maybe (Boolean) } ) -> ResetFpgaImageAttributeResult
newResetFpgaImageAttributeResult'  customize = (ResetFpgaImageAttributeResult <<< customize) { "Return": Nothing }



newtype ResetImageAttributeName = ResetImageAttributeName String
derive instance newtypeResetImageAttributeName :: Newtype ResetImageAttributeName _
derive instance repGenericResetImageAttributeName :: Generic ResetImageAttributeName _
instance showResetImageAttributeName :: Show ResetImageAttributeName where show = genericShow
instance decodeResetImageAttributeName :: Decode ResetImageAttributeName where decode = genericDecode options
instance encodeResetImageAttributeName :: Encode ResetImageAttributeName where encode = genericEncode options



-- | <p>Contains the parameters for ResetImageAttribute.</p>
newtype ResetImageAttributeRequest = ResetImageAttributeRequest 
  { "Attribute" :: (ResetImageAttributeName)
  , "ImageId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeResetImageAttributeRequest :: Newtype ResetImageAttributeRequest _
derive instance repGenericResetImageAttributeRequest :: Generic ResetImageAttributeRequest _
instance showResetImageAttributeRequest :: Show ResetImageAttributeRequest where show = genericShow
instance decodeResetImageAttributeRequest :: Decode ResetImageAttributeRequest where decode = genericDecode options
instance encodeResetImageAttributeRequest :: Encode ResetImageAttributeRequest where encode = genericEncode options

-- | Constructs ResetImageAttributeRequest from required parameters
newResetImageAttributeRequest :: ResetImageAttributeName -> String -> ResetImageAttributeRequest
newResetImageAttributeRequest _Attribute _ImageId = ResetImageAttributeRequest { "Attribute": _Attribute, "ImageId": _ImageId, "DryRun": Nothing }

-- | Constructs ResetImageAttributeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newResetImageAttributeRequest' :: ResetImageAttributeName -> String -> ( { "Attribute" :: (ResetImageAttributeName) , "ImageId" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"Attribute" :: (ResetImageAttributeName) , "ImageId" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> ResetImageAttributeRequest
newResetImageAttributeRequest' _Attribute _ImageId customize = (ResetImageAttributeRequest <<< customize) { "Attribute": _Attribute, "ImageId": _ImageId, "DryRun": Nothing }



-- | <p>Contains the parameters for ResetInstanceAttribute.</p>
newtype ResetInstanceAttributeRequest = ResetInstanceAttributeRequest 
  { "Attribute" :: (InstanceAttributeName)
  , "DryRun" :: Maybe (Boolean)
  , "InstanceId" :: (String)
  }
derive instance newtypeResetInstanceAttributeRequest :: Newtype ResetInstanceAttributeRequest _
derive instance repGenericResetInstanceAttributeRequest :: Generic ResetInstanceAttributeRequest _
instance showResetInstanceAttributeRequest :: Show ResetInstanceAttributeRequest where show = genericShow
instance decodeResetInstanceAttributeRequest :: Decode ResetInstanceAttributeRequest where decode = genericDecode options
instance encodeResetInstanceAttributeRequest :: Encode ResetInstanceAttributeRequest where encode = genericEncode options

-- | Constructs ResetInstanceAttributeRequest from required parameters
newResetInstanceAttributeRequest :: InstanceAttributeName -> String -> ResetInstanceAttributeRequest
newResetInstanceAttributeRequest _Attribute _InstanceId = ResetInstanceAttributeRequest { "Attribute": _Attribute, "InstanceId": _InstanceId, "DryRun": Nothing }

-- | Constructs ResetInstanceAttributeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newResetInstanceAttributeRequest' :: InstanceAttributeName -> String -> ( { "Attribute" :: (InstanceAttributeName) , "DryRun" :: Maybe (Boolean) , "InstanceId" :: (String) } -> {"Attribute" :: (InstanceAttributeName) , "DryRun" :: Maybe (Boolean) , "InstanceId" :: (String) } ) -> ResetInstanceAttributeRequest
newResetInstanceAttributeRequest' _Attribute _InstanceId customize = (ResetInstanceAttributeRequest <<< customize) { "Attribute": _Attribute, "InstanceId": _InstanceId, "DryRun": Nothing }



-- | <p>Contains the parameters for ResetNetworkInterfaceAttribute.</p>
newtype ResetNetworkInterfaceAttributeRequest = ResetNetworkInterfaceAttributeRequest 
  { "DryRun" :: Maybe (Boolean)
  , "NetworkInterfaceId" :: (String)
  , "SourceDestCheck" :: Maybe (String)
  }
derive instance newtypeResetNetworkInterfaceAttributeRequest :: Newtype ResetNetworkInterfaceAttributeRequest _
derive instance repGenericResetNetworkInterfaceAttributeRequest :: Generic ResetNetworkInterfaceAttributeRequest _
instance showResetNetworkInterfaceAttributeRequest :: Show ResetNetworkInterfaceAttributeRequest where show = genericShow
instance decodeResetNetworkInterfaceAttributeRequest :: Decode ResetNetworkInterfaceAttributeRequest where decode = genericDecode options
instance encodeResetNetworkInterfaceAttributeRequest :: Encode ResetNetworkInterfaceAttributeRequest where encode = genericEncode options

-- | Constructs ResetNetworkInterfaceAttributeRequest from required parameters
newResetNetworkInterfaceAttributeRequest :: String -> ResetNetworkInterfaceAttributeRequest
newResetNetworkInterfaceAttributeRequest _NetworkInterfaceId = ResetNetworkInterfaceAttributeRequest { "NetworkInterfaceId": _NetworkInterfaceId, "DryRun": Nothing, "SourceDestCheck": Nothing }

-- | Constructs ResetNetworkInterfaceAttributeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newResetNetworkInterfaceAttributeRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "NetworkInterfaceId" :: (String) , "SourceDestCheck" :: Maybe (String) } -> {"DryRun" :: Maybe (Boolean) , "NetworkInterfaceId" :: (String) , "SourceDestCheck" :: Maybe (String) } ) -> ResetNetworkInterfaceAttributeRequest
newResetNetworkInterfaceAttributeRequest' _NetworkInterfaceId customize = (ResetNetworkInterfaceAttributeRequest <<< customize) { "NetworkInterfaceId": _NetworkInterfaceId, "DryRun": Nothing, "SourceDestCheck": Nothing }



-- | <p>Contains the parameters for ResetSnapshotAttribute.</p>
newtype ResetSnapshotAttributeRequest = ResetSnapshotAttributeRequest 
  { "Attribute" :: (SnapshotAttributeName)
  , "SnapshotId" :: (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeResetSnapshotAttributeRequest :: Newtype ResetSnapshotAttributeRequest _
derive instance repGenericResetSnapshotAttributeRequest :: Generic ResetSnapshotAttributeRequest _
instance showResetSnapshotAttributeRequest :: Show ResetSnapshotAttributeRequest where show = genericShow
instance decodeResetSnapshotAttributeRequest :: Decode ResetSnapshotAttributeRequest where decode = genericDecode options
instance encodeResetSnapshotAttributeRequest :: Encode ResetSnapshotAttributeRequest where encode = genericEncode options

-- | Constructs ResetSnapshotAttributeRequest from required parameters
newResetSnapshotAttributeRequest :: SnapshotAttributeName -> String -> ResetSnapshotAttributeRequest
newResetSnapshotAttributeRequest _Attribute _SnapshotId = ResetSnapshotAttributeRequest { "Attribute": _Attribute, "SnapshotId": _SnapshotId, "DryRun": Nothing }

-- | Constructs ResetSnapshotAttributeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newResetSnapshotAttributeRequest' :: SnapshotAttributeName -> String -> ( { "Attribute" :: (SnapshotAttributeName) , "SnapshotId" :: (String) , "DryRun" :: Maybe (Boolean) } -> {"Attribute" :: (SnapshotAttributeName) , "SnapshotId" :: (String) , "DryRun" :: Maybe (Boolean) } ) -> ResetSnapshotAttributeRequest
newResetSnapshotAttributeRequest' _Attribute _SnapshotId customize = (ResetSnapshotAttributeRequest <<< customize) { "Attribute": _Attribute, "SnapshotId": _SnapshotId, "DryRun": Nothing }



newtype ResourceIdList = ResourceIdList (Array String)
derive instance newtypeResourceIdList :: Newtype ResourceIdList _
derive instance repGenericResourceIdList :: Generic ResourceIdList _
instance showResourceIdList :: Show ResourceIdList where show = genericShow
instance decodeResourceIdList :: Decode ResourceIdList where decode = genericDecode options
instance encodeResourceIdList :: Encode ResourceIdList where encode = genericEncode options



newtype ResourceList = ResourceList (Array String)
derive instance newtypeResourceList :: Newtype ResourceList _
derive instance repGenericResourceList :: Generic ResourceList _
instance showResourceList :: Show ResourceList where show = genericShow
instance decodeResourceList :: Decode ResourceList where decode = genericDecode options
instance encodeResourceList :: Encode ResourceList where encode = genericEncode options



newtype ResourceType = ResourceType String
derive instance newtypeResourceType :: Newtype ResourceType _
derive instance repGenericResourceType :: Generic ResourceType _
instance showResourceType :: Show ResourceType where show = genericShow
instance decodeResourceType :: Decode ResourceType where decode = genericDecode options
instance encodeResourceType :: Encode ResourceType where encode = genericEncode options



-- | <p>Describes the error that's returned when you cannot delete a launch template version.</p>
newtype ResponseError = ResponseError 
  { "Code" :: Maybe (LaunchTemplateErrorCode)
  , "Message" :: Maybe (String)
  }
derive instance newtypeResponseError :: Newtype ResponseError _
derive instance repGenericResponseError :: Generic ResponseError _
instance showResponseError :: Show ResponseError where show = genericShow
instance decodeResponseError :: Decode ResponseError where decode = genericDecode options
instance encodeResponseError :: Encode ResponseError where encode = genericEncode options

-- | Constructs ResponseError from required parameters
newResponseError :: ResponseError
newResponseError  = ResponseError { "Code": Nothing, "Message": Nothing }

-- | Constructs ResponseError's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newResponseError' :: ( { "Code" :: Maybe (LaunchTemplateErrorCode) , "Message" :: Maybe (String) } -> {"Code" :: Maybe (LaunchTemplateErrorCode) , "Message" :: Maybe (String) } ) -> ResponseError
newResponseError'  customize = (ResponseError <<< customize) { "Code": Nothing, "Message": Nothing }



newtype ResponseHostIdList = ResponseHostIdList (Array String)
derive instance newtypeResponseHostIdList :: Newtype ResponseHostIdList _
derive instance repGenericResponseHostIdList :: Generic ResponseHostIdList _
instance showResponseHostIdList :: Show ResponseHostIdList where show = genericShow
instance decodeResponseHostIdList :: Decode ResponseHostIdList where decode = genericDecode options
instance encodeResponseHostIdList :: Encode ResponseHostIdList where encode = genericEncode options



newtype ResponseHostIdSet = ResponseHostIdSet (Array String)
derive instance newtypeResponseHostIdSet :: Newtype ResponseHostIdSet _
derive instance repGenericResponseHostIdSet :: Generic ResponseHostIdSet _
instance showResponseHostIdSet :: Show ResponseHostIdSet where show = genericShow
instance decodeResponseHostIdSet :: Decode ResponseHostIdSet where decode = genericDecode options
instance encodeResponseHostIdSet :: Encode ResponseHostIdSet where encode = genericEncode options



-- | <p>The information for a launch template. </p>
newtype ResponseLaunchTemplateData = ResponseLaunchTemplateData 
  { "KernelId" :: Maybe (String)
  , "EbsOptimized" :: Maybe (Boolean)
  , "IamInstanceProfile" :: Maybe (LaunchTemplateIamInstanceProfileSpecification)
  , "BlockDeviceMappings" :: Maybe (LaunchTemplateBlockDeviceMappingList)
  , "NetworkInterfaces" :: Maybe (LaunchTemplateInstanceNetworkInterfaceSpecificationList)
  , "ImageId" :: Maybe (String)
  , "InstanceType" :: Maybe (InstanceType)
  , "KeyName" :: Maybe (String)
  , "Monitoring" :: Maybe (LaunchTemplatesMonitoring)
  , "Placement" :: Maybe (LaunchTemplatePlacement)
  , "RamDiskId" :: Maybe (String)
  , "DisableApiTermination" :: Maybe (Boolean)
  , "InstanceInitiatedShutdownBehavior" :: Maybe (ShutdownBehavior)
  , "UserData" :: Maybe (String)
  , "TagSpecifications" :: Maybe (LaunchTemplateTagSpecificationList)
  , "ElasticGpuSpecifications" :: Maybe (ElasticGpuSpecificationResponseList)
  , "SecurityGroupIds" :: Maybe (ValueStringList)
  , "SecurityGroups" :: Maybe (ValueStringList)
  , "InstanceMarketOptions" :: Maybe (LaunchTemplateInstanceMarketOptions)
  , "CreditSpecification" :: Maybe (CreditSpecification)
  }
derive instance newtypeResponseLaunchTemplateData :: Newtype ResponseLaunchTemplateData _
derive instance repGenericResponseLaunchTemplateData :: Generic ResponseLaunchTemplateData _
instance showResponseLaunchTemplateData :: Show ResponseLaunchTemplateData where show = genericShow
instance decodeResponseLaunchTemplateData :: Decode ResponseLaunchTemplateData where decode = genericDecode options
instance encodeResponseLaunchTemplateData :: Encode ResponseLaunchTemplateData where encode = genericEncode options

-- | Constructs ResponseLaunchTemplateData from required parameters
newResponseLaunchTemplateData :: ResponseLaunchTemplateData
newResponseLaunchTemplateData  = ResponseLaunchTemplateData { "BlockDeviceMappings": Nothing, "CreditSpecification": Nothing, "DisableApiTermination": Nothing, "EbsOptimized": Nothing, "ElasticGpuSpecifications": Nothing, "IamInstanceProfile": Nothing, "ImageId": Nothing, "InstanceInitiatedShutdownBehavior": Nothing, "InstanceMarketOptions": Nothing, "InstanceType": Nothing, "KernelId": Nothing, "KeyName": Nothing, "Monitoring": Nothing, "NetworkInterfaces": Nothing, "Placement": Nothing, "RamDiskId": Nothing, "SecurityGroupIds": Nothing, "SecurityGroups": Nothing, "TagSpecifications": Nothing, "UserData": Nothing }

-- | Constructs ResponseLaunchTemplateData's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newResponseLaunchTemplateData' :: ( { "KernelId" :: Maybe (String) , "EbsOptimized" :: Maybe (Boolean) , "IamInstanceProfile" :: Maybe (LaunchTemplateIamInstanceProfileSpecification) , "BlockDeviceMappings" :: Maybe (LaunchTemplateBlockDeviceMappingList) , "NetworkInterfaces" :: Maybe (LaunchTemplateInstanceNetworkInterfaceSpecificationList) , "ImageId" :: Maybe (String) , "InstanceType" :: Maybe (InstanceType) , "KeyName" :: Maybe (String) , "Monitoring" :: Maybe (LaunchTemplatesMonitoring) , "Placement" :: Maybe (LaunchTemplatePlacement) , "RamDiskId" :: Maybe (String) , "DisableApiTermination" :: Maybe (Boolean) , "InstanceInitiatedShutdownBehavior" :: Maybe (ShutdownBehavior) , "UserData" :: Maybe (String) , "TagSpecifications" :: Maybe (LaunchTemplateTagSpecificationList) , "ElasticGpuSpecifications" :: Maybe (ElasticGpuSpecificationResponseList) , "SecurityGroupIds" :: Maybe (ValueStringList) , "SecurityGroups" :: Maybe (ValueStringList) , "InstanceMarketOptions" :: Maybe (LaunchTemplateInstanceMarketOptions) , "CreditSpecification" :: Maybe (CreditSpecification) } -> {"KernelId" :: Maybe (String) , "EbsOptimized" :: Maybe (Boolean) , "IamInstanceProfile" :: Maybe (LaunchTemplateIamInstanceProfileSpecification) , "BlockDeviceMappings" :: Maybe (LaunchTemplateBlockDeviceMappingList) , "NetworkInterfaces" :: Maybe (LaunchTemplateInstanceNetworkInterfaceSpecificationList) , "ImageId" :: Maybe (String) , "InstanceType" :: Maybe (InstanceType) , "KeyName" :: Maybe (String) , "Monitoring" :: Maybe (LaunchTemplatesMonitoring) , "Placement" :: Maybe (LaunchTemplatePlacement) , "RamDiskId" :: Maybe (String) , "DisableApiTermination" :: Maybe (Boolean) , "InstanceInitiatedShutdownBehavior" :: Maybe (ShutdownBehavior) , "UserData" :: Maybe (String) , "TagSpecifications" :: Maybe (LaunchTemplateTagSpecificationList) , "ElasticGpuSpecifications" :: Maybe (ElasticGpuSpecificationResponseList) , "SecurityGroupIds" :: Maybe (ValueStringList) , "SecurityGroups" :: Maybe (ValueStringList) , "InstanceMarketOptions" :: Maybe (LaunchTemplateInstanceMarketOptions) , "CreditSpecification" :: Maybe (CreditSpecification) } ) -> ResponseLaunchTemplateData
newResponseLaunchTemplateData'  customize = (ResponseLaunchTemplateData <<< customize) { "BlockDeviceMappings": Nothing, "CreditSpecification": Nothing, "DisableApiTermination": Nothing, "EbsOptimized": Nothing, "ElasticGpuSpecifications": Nothing, "IamInstanceProfile": Nothing, "ImageId": Nothing, "InstanceInitiatedShutdownBehavior": Nothing, "InstanceMarketOptions": Nothing, "InstanceType": Nothing, "KernelId": Nothing, "KeyName": Nothing, "Monitoring": Nothing, "NetworkInterfaces": Nothing, "Placement": Nothing, "RamDiskId": Nothing, "SecurityGroupIds": Nothing, "SecurityGroups": Nothing, "TagSpecifications": Nothing, "UserData": Nothing }



newtype RestorableByStringList = RestorableByStringList (Array String)
derive instance newtypeRestorableByStringList :: Newtype RestorableByStringList _
derive instance repGenericRestorableByStringList :: Generic RestorableByStringList _
instance showRestorableByStringList :: Show RestorableByStringList where show = genericShow
instance decodeRestorableByStringList :: Decode RestorableByStringList where decode = genericDecode options
instance encodeRestorableByStringList :: Encode RestorableByStringList where encode = genericEncode options



-- | <p>Contains the parameters for RestoreAddressToClassic.</p>
newtype RestoreAddressToClassicRequest = RestoreAddressToClassicRequest 
  { "DryRun" :: Maybe (Boolean)
  , "PublicIp" :: (String)
  }
derive instance newtypeRestoreAddressToClassicRequest :: Newtype RestoreAddressToClassicRequest _
derive instance repGenericRestoreAddressToClassicRequest :: Generic RestoreAddressToClassicRequest _
instance showRestoreAddressToClassicRequest :: Show RestoreAddressToClassicRequest where show = genericShow
instance decodeRestoreAddressToClassicRequest :: Decode RestoreAddressToClassicRequest where decode = genericDecode options
instance encodeRestoreAddressToClassicRequest :: Encode RestoreAddressToClassicRequest where encode = genericEncode options

-- | Constructs RestoreAddressToClassicRequest from required parameters
newRestoreAddressToClassicRequest :: String -> RestoreAddressToClassicRequest
newRestoreAddressToClassicRequest _PublicIp = RestoreAddressToClassicRequest { "PublicIp": _PublicIp, "DryRun": Nothing }

-- | Constructs RestoreAddressToClassicRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newRestoreAddressToClassicRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "PublicIp" :: (String) } -> {"DryRun" :: Maybe (Boolean) , "PublicIp" :: (String) } ) -> RestoreAddressToClassicRequest
newRestoreAddressToClassicRequest' _PublicIp customize = (RestoreAddressToClassicRequest <<< customize) { "PublicIp": _PublicIp, "DryRun": Nothing }



-- | <p>Contains the output of RestoreAddressToClassic.</p>
newtype RestoreAddressToClassicResult = RestoreAddressToClassicResult 
  { "PublicIp" :: Maybe (String)
  , "Status" :: Maybe (Status)
  }
derive instance newtypeRestoreAddressToClassicResult :: Newtype RestoreAddressToClassicResult _
derive instance repGenericRestoreAddressToClassicResult :: Generic RestoreAddressToClassicResult _
instance showRestoreAddressToClassicResult :: Show RestoreAddressToClassicResult where show = genericShow
instance decodeRestoreAddressToClassicResult :: Decode RestoreAddressToClassicResult where decode = genericDecode options
instance encodeRestoreAddressToClassicResult :: Encode RestoreAddressToClassicResult where encode = genericEncode options

-- | Constructs RestoreAddressToClassicResult from required parameters
newRestoreAddressToClassicResult :: RestoreAddressToClassicResult
newRestoreAddressToClassicResult  = RestoreAddressToClassicResult { "PublicIp": Nothing, "Status": Nothing }

-- | Constructs RestoreAddressToClassicResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newRestoreAddressToClassicResult' :: ( { "PublicIp" :: Maybe (String) , "Status" :: Maybe (Status) } -> {"PublicIp" :: Maybe (String) , "Status" :: Maybe (Status) } ) -> RestoreAddressToClassicResult
newRestoreAddressToClassicResult'  customize = (RestoreAddressToClassicResult <<< customize) { "PublicIp": Nothing, "Status": Nothing }



-- | <p>Contains the parameters for RevokeSecurityGroupEgress.</p>
newtype RevokeSecurityGroupEgressRequest = RevokeSecurityGroupEgressRequest 
  { "DryRun" :: Maybe (Boolean)
  , "GroupId" :: (String)
  , "IpPermissions" :: Maybe (IpPermissionList)
  , "CidrIp" :: Maybe (String)
  , "FromPort" :: Maybe (Int)
  , "IpProtocol" :: Maybe (String)
  , "ToPort" :: Maybe (Int)
  , "SourceSecurityGroupName" :: Maybe (String)
  , "SourceSecurityGroupOwnerId" :: Maybe (String)
  }
derive instance newtypeRevokeSecurityGroupEgressRequest :: Newtype RevokeSecurityGroupEgressRequest _
derive instance repGenericRevokeSecurityGroupEgressRequest :: Generic RevokeSecurityGroupEgressRequest _
instance showRevokeSecurityGroupEgressRequest :: Show RevokeSecurityGroupEgressRequest where show = genericShow
instance decodeRevokeSecurityGroupEgressRequest :: Decode RevokeSecurityGroupEgressRequest where decode = genericDecode options
instance encodeRevokeSecurityGroupEgressRequest :: Encode RevokeSecurityGroupEgressRequest where encode = genericEncode options

-- | Constructs RevokeSecurityGroupEgressRequest from required parameters
newRevokeSecurityGroupEgressRequest :: String -> RevokeSecurityGroupEgressRequest
newRevokeSecurityGroupEgressRequest _GroupId = RevokeSecurityGroupEgressRequest { "GroupId": _GroupId, "CidrIp": Nothing, "DryRun": Nothing, "FromPort": Nothing, "IpPermissions": Nothing, "IpProtocol": Nothing, "SourceSecurityGroupName": Nothing, "SourceSecurityGroupOwnerId": Nothing, "ToPort": Nothing }

-- | Constructs RevokeSecurityGroupEgressRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newRevokeSecurityGroupEgressRequest' :: String -> ( { "DryRun" :: Maybe (Boolean) , "GroupId" :: (String) , "IpPermissions" :: Maybe (IpPermissionList) , "CidrIp" :: Maybe (String) , "FromPort" :: Maybe (Int) , "IpProtocol" :: Maybe (String) , "ToPort" :: Maybe (Int) , "SourceSecurityGroupName" :: Maybe (String) , "SourceSecurityGroupOwnerId" :: Maybe (String) } -> {"DryRun" :: Maybe (Boolean) , "GroupId" :: (String) , "IpPermissions" :: Maybe (IpPermissionList) , "CidrIp" :: Maybe (String) , "FromPort" :: Maybe (Int) , "IpProtocol" :: Maybe (String) , "ToPort" :: Maybe (Int) , "SourceSecurityGroupName" :: Maybe (String) , "SourceSecurityGroupOwnerId" :: Maybe (String) } ) -> RevokeSecurityGroupEgressRequest
newRevokeSecurityGroupEgressRequest' _GroupId customize = (RevokeSecurityGroupEgressRequest <<< customize) { "GroupId": _GroupId, "CidrIp": Nothing, "DryRun": Nothing, "FromPort": Nothing, "IpPermissions": Nothing, "IpProtocol": Nothing, "SourceSecurityGroupName": Nothing, "SourceSecurityGroupOwnerId": Nothing, "ToPort": Nothing }



-- | <p>Contains the parameters for RevokeSecurityGroupIngress.</p>
newtype RevokeSecurityGroupIngressRequest = RevokeSecurityGroupIngressRequest 
  { "CidrIp" :: Maybe (String)
  , "FromPort" :: Maybe (Int)
  , "GroupId" :: Maybe (String)
  , "GroupName" :: Maybe (String)
  , "IpPermissions" :: Maybe (IpPermissionList)
  , "IpProtocol" :: Maybe (String)
  , "SourceSecurityGroupName" :: Maybe (String)
  , "SourceSecurityGroupOwnerId" :: Maybe (String)
  , "ToPort" :: Maybe (Int)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeRevokeSecurityGroupIngressRequest :: Newtype RevokeSecurityGroupIngressRequest _
derive instance repGenericRevokeSecurityGroupIngressRequest :: Generic RevokeSecurityGroupIngressRequest _
instance showRevokeSecurityGroupIngressRequest :: Show RevokeSecurityGroupIngressRequest where show = genericShow
instance decodeRevokeSecurityGroupIngressRequest :: Decode RevokeSecurityGroupIngressRequest where decode = genericDecode options
instance encodeRevokeSecurityGroupIngressRequest :: Encode RevokeSecurityGroupIngressRequest where encode = genericEncode options

-- | Constructs RevokeSecurityGroupIngressRequest from required parameters
newRevokeSecurityGroupIngressRequest :: RevokeSecurityGroupIngressRequest
newRevokeSecurityGroupIngressRequest  = RevokeSecurityGroupIngressRequest { "CidrIp": Nothing, "DryRun": Nothing, "FromPort": Nothing, "GroupId": Nothing, "GroupName": Nothing, "IpPermissions": Nothing, "IpProtocol": Nothing, "SourceSecurityGroupName": Nothing, "SourceSecurityGroupOwnerId": Nothing, "ToPort": Nothing }

-- | Constructs RevokeSecurityGroupIngressRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newRevokeSecurityGroupIngressRequest' :: ( { "CidrIp" :: Maybe (String) , "FromPort" :: Maybe (Int) , "GroupId" :: Maybe (String) , "GroupName" :: Maybe (String) , "IpPermissions" :: Maybe (IpPermissionList) , "IpProtocol" :: Maybe (String) , "SourceSecurityGroupName" :: Maybe (String) , "SourceSecurityGroupOwnerId" :: Maybe (String) , "ToPort" :: Maybe (Int) , "DryRun" :: Maybe (Boolean) } -> {"CidrIp" :: Maybe (String) , "FromPort" :: Maybe (Int) , "GroupId" :: Maybe (String) , "GroupName" :: Maybe (String) , "IpPermissions" :: Maybe (IpPermissionList) , "IpProtocol" :: Maybe (String) , "SourceSecurityGroupName" :: Maybe (String) , "SourceSecurityGroupOwnerId" :: Maybe (String) , "ToPort" :: Maybe (Int) , "DryRun" :: Maybe (Boolean) } ) -> RevokeSecurityGroupIngressRequest
newRevokeSecurityGroupIngressRequest'  customize = (RevokeSecurityGroupIngressRequest <<< customize) { "CidrIp": Nothing, "DryRun": Nothing, "FromPort": Nothing, "GroupId": Nothing, "GroupName": Nothing, "IpPermissions": Nothing, "IpProtocol": Nothing, "SourceSecurityGroupName": Nothing, "SourceSecurityGroupOwnerId": Nothing, "ToPort": Nothing }



-- | <p>Describes a route in a route table.</p>
newtype Route = Route 
  { "DestinationCidrBlock" :: Maybe (String)
  , "DestinationIpv6CidrBlock" :: Maybe (String)
  , "DestinationPrefixListId" :: Maybe (String)
  , "EgressOnlyInternetGatewayId" :: Maybe (String)
  , "GatewayId" :: Maybe (String)
  , "InstanceId" :: Maybe (String)
  , "InstanceOwnerId" :: Maybe (String)
  , "NatGatewayId" :: Maybe (String)
  , "NetworkInterfaceId" :: Maybe (String)
  , "Origin" :: Maybe (RouteOrigin)
  , "State" :: Maybe (RouteState)
  , "VpcPeeringConnectionId" :: Maybe (String)
  }
derive instance newtypeRoute :: Newtype Route _
derive instance repGenericRoute :: Generic Route _
instance showRoute :: Show Route where show = genericShow
instance decodeRoute :: Decode Route where decode = genericDecode options
instance encodeRoute :: Encode Route where encode = genericEncode options

-- | Constructs Route from required parameters
newRoute :: Route
newRoute  = Route { "DestinationCidrBlock": Nothing, "DestinationIpv6CidrBlock": Nothing, "DestinationPrefixListId": Nothing, "EgressOnlyInternetGatewayId": Nothing, "GatewayId": Nothing, "InstanceId": Nothing, "InstanceOwnerId": Nothing, "NatGatewayId": Nothing, "NetworkInterfaceId": Nothing, "Origin": Nothing, "State": Nothing, "VpcPeeringConnectionId": Nothing }

-- | Constructs Route's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newRoute' :: ( { "DestinationCidrBlock" :: Maybe (String) , "DestinationIpv6CidrBlock" :: Maybe (String) , "DestinationPrefixListId" :: Maybe (String) , "EgressOnlyInternetGatewayId" :: Maybe (String) , "GatewayId" :: Maybe (String) , "InstanceId" :: Maybe (String) , "InstanceOwnerId" :: Maybe (String) , "NatGatewayId" :: Maybe (String) , "NetworkInterfaceId" :: Maybe (String) , "Origin" :: Maybe (RouteOrigin) , "State" :: Maybe (RouteState) , "VpcPeeringConnectionId" :: Maybe (String) } -> {"DestinationCidrBlock" :: Maybe (String) , "DestinationIpv6CidrBlock" :: Maybe (String) , "DestinationPrefixListId" :: Maybe (String) , "EgressOnlyInternetGatewayId" :: Maybe (String) , "GatewayId" :: Maybe (String) , "InstanceId" :: Maybe (String) , "InstanceOwnerId" :: Maybe (String) , "NatGatewayId" :: Maybe (String) , "NetworkInterfaceId" :: Maybe (String) , "Origin" :: Maybe (RouteOrigin) , "State" :: Maybe (RouteState) , "VpcPeeringConnectionId" :: Maybe (String) } ) -> Route
newRoute'  customize = (Route <<< customize) { "DestinationCidrBlock": Nothing, "DestinationIpv6CidrBlock": Nothing, "DestinationPrefixListId": Nothing, "EgressOnlyInternetGatewayId": Nothing, "GatewayId": Nothing, "InstanceId": Nothing, "InstanceOwnerId": Nothing, "NatGatewayId": Nothing, "NetworkInterfaceId": Nothing, "Origin": Nothing, "State": Nothing, "VpcPeeringConnectionId": Nothing }



newtype RouteList = RouteList (Array Route)
derive instance newtypeRouteList :: Newtype RouteList _
derive instance repGenericRouteList :: Generic RouteList _
instance showRouteList :: Show RouteList where show = genericShow
instance decodeRouteList :: Decode RouteList where decode = genericDecode options
instance encodeRouteList :: Encode RouteList where encode = genericEncode options



newtype RouteOrigin = RouteOrigin String
derive instance newtypeRouteOrigin :: Newtype RouteOrigin _
derive instance repGenericRouteOrigin :: Generic RouteOrigin _
instance showRouteOrigin :: Show RouteOrigin where show = genericShow
instance decodeRouteOrigin :: Decode RouteOrigin where decode = genericDecode options
instance encodeRouteOrigin :: Encode RouteOrigin where encode = genericEncode options



newtype RouteState = RouteState String
derive instance newtypeRouteState :: Newtype RouteState _
derive instance repGenericRouteState :: Generic RouteState _
instance showRouteState :: Show RouteState where show = genericShow
instance decodeRouteState :: Decode RouteState where decode = genericDecode options
instance encodeRouteState :: Encode RouteState where encode = genericEncode options



-- | <p>Describes a route table.</p>
newtype RouteTable = RouteTable 
  { "Associations" :: Maybe (RouteTableAssociationList)
  , "PropagatingVgws" :: Maybe (PropagatingVgwList)
  , "RouteTableId" :: Maybe (String)
  , "Routes" :: Maybe (RouteList)
  , "Tags" :: Maybe (TagList)
  , "VpcId" :: Maybe (String)
  }
derive instance newtypeRouteTable :: Newtype RouteTable _
derive instance repGenericRouteTable :: Generic RouteTable _
instance showRouteTable :: Show RouteTable where show = genericShow
instance decodeRouteTable :: Decode RouteTable where decode = genericDecode options
instance encodeRouteTable :: Encode RouteTable where encode = genericEncode options

-- | Constructs RouteTable from required parameters
newRouteTable :: RouteTable
newRouteTable  = RouteTable { "Associations": Nothing, "PropagatingVgws": Nothing, "RouteTableId": Nothing, "Routes": Nothing, "Tags": Nothing, "VpcId": Nothing }

-- | Constructs RouteTable's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newRouteTable' :: ( { "Associations" :: Maybe (RouteTableAssociationList) , "PropagatingVgws" :: Maybe (PropagatingVgwList) , "RouteTableId" :: Maybe (String) , "Routes" :: Maybe (RouteList) , "Tags" :: Maybe (TagList) , "VpcId" :: Maybe (String) } -> {"Associations" :: Maybe (RouteTableAssociationList) , "PropagatingVgws" :: Maybe (PropagatingVgwList) , "RouteTableId" :: Maybe (String) , "Routes" :: Maybe (RouteList) , "Tags" :: Maybe (TagList) , "VpcId" :: Maybe (String) } ) -> RouteTable
newRouteTable'  customize = (RouteTable <<< customize) { "Associations": Nothing, "PropagatingVgws": Nothing, "RouteTableId": Nothing, "Routes": Nothing, "Tags": Nothing, "VpcId": Nothing }



-- | <p>Describes an association between a route table and a subnet.</p>
newtype RouteTableAssociation = RouteTableAssociation 
  { "Main" :: Maybe (Boolean)
  , "RouteTableAssociationId" :: Maybe (String)
  , "RouteTableId" :: Maybe (String)
  , "SubnetId" :: Maybe (String)
  }
derive instance newtypeRouteTableAssociation :: Newtype RouteTableAssociation _
derive instance repGenericRouteTableAssociation :: Generic RouteTableAssociation _
instance showRouteTableAssociation :: Show RouteTableAssociation where show = genericShow
instance decodeRouteTableAssociation :: Decode RouteTableAssociation where decode = genericDecode options
instance encodeRouteTableAssociation :: Encode RouteTableAssociation where encode = genericEncode options

-- | Constructs RouteTableAssociation from required parameters
newRouteTableAssociation :: RouteTableAssociation
newRouteTableAssociation  = RouteTableAssociation { "Main": Nothing, "RouteTableAssociationId": Nothing, "RouteTableId": Nothing, "SubnetId": Nothing }

-- | Constructs RouteTableAssociation's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newRouteTableAssociation' :: ( { "Main" :: Maybe (Boolean) , "RouteTableAssociationId" :: Maybe (String) , "RouteTableId" :: Maybe (String) , "SubnetId" :: Maybe (String) } -> {"Main" :: Maybe (Boolean) , "RouteTableAssociationId" :: Maybe (String) , "RouteTableId" :: Maybe (String) , "SubnetId" :: Maybe (String) } ) -> RouteTableAssociation
newRouteTableAssociation'  customize = (RouteTableAssociation <<< customize) { "Main": Nothing, "RouteTableAssociationId": Nothing, "RouteTableId": Nothing, "SubnetId": Nothing }



newtype RouteTableAssociationList = RouteTableAssociationList (Array RouteTableAssociation)
derive instance newtypeRouteTableAssociationList :: Newtype RouteTableAssociationList _
derive instance repGenericRouteTableAssociationList :: Generic RouteTableAssociationList _
instance showRouteTableAssociationList :: Show RouteTableAssociationList where show = genericShow
instance decodeRouteTableAssociationList :: Decode RouteTableAssociationList where decode = genericDecode options
instance encodeRouteTableAssociationList :: Encode RouteTableAssociationList where encode = genericEncode options



newtype RouteTableList = RouteTableList (Array RouteTable)
derive instance newtypeRouteTableList :: Newtype RouteTableList _
derive instance repGenericRouteTableList :: Generic RouteTableList _
instance showRouteTableList :: Show RouteTableList where show = genericShow
instance decodeRouteTableList :: Decode RouteTableList where decode = genericDecode options
instance encodeRouteTableList :: Encode RouteTableList where encode = genericEncode options



newtype RuleAction = RuleAction String
derive instance newtypeRuleAction :: Newtype RuleAction _
derive instance repGenericRuleAction :: Generic RuleAction _
instance showRuleAction :: Show RuleAction where show = genericShow
instance decodeRuleAction :: Decode RuleAction where decode = genericDecode options
instance encodeRuleAction :: Encode RuleAction where encode = genericEncode options



-- | <p>Describes the monitoring of an instance.</p>
newtype RunInstancesMonitoringEnabled = RunInstancesMonitoringEnabled 
  { "Enabled" :: (Boolean)
  }
derive instance newtypeRunInstancesMonitoringEnabled :: Newtype RunInstancesMonitoringEnabled _
derive instance repGenericRunInstancesMonitoringEnabled :: Generic RunInstancesMonitoringEnabled _
instance showRunInstancesMonitoringEnabled :: Show RunInstancesMonitoringEnabled where show = genericShow
instance decodeRunInstancesMonitoringEnabled :: Decode RunInstancesMonitoringEnabled where decode = genericDecode options
instance encodeRunInstancesMonitoringEnabled :: Encode RunInstancesMonitoringEnabled where encode = genericEncode options

-- | Constructs RunInstancesMonitoringEnabled from required parameters
newRunInstancesMonitoringEnabled :: Boolean -> RunInstancesMonitoringEnabled
newRunInstancesMonitoringEnabled _Enabled = RunInstancesMonitoringEnabled { "Enabled": _Enabled }

-- | Constructs RunInstancesMonitoringEnabled's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newRunInstancesMonitoringEnabled' :: Boolean -> ( { "Enabled" :: (Boolean) } -> {"Enabled" :: (Boolean) } ) -> RunInstancesMonitoringEnabled
newRunInstancesMonitoringEnabled' _Enabled customize = (RunInstancesMonitoringEnabled <<< customize) { "Enabled": _Enabled }



-- | <p>Contains the parameters for RunInstances.</p>
newtype RunInstancesRequest = RunInstancesRequest 
  { "BlockDeviceMappings" :: Maybe (BlockDeviceMappingRequestList)
  , "ImageId" :: Maybe (String)
  , "InstanceType" :: Maybe (InstanceType)
  , "Ipv6AddressCount" :: Maybe (Int)
  , "Ipv6Addresses" :: Maybe (InstanceIpv6AddressList)
  , "KernelId" :: Maybe (String)
  , "KeyName" :: Maybe (String)
  , "MaxCount" :: (Int)
  , "MinCount" :: (Int)
  , "Monitoring" :: Maybe (RunInstancesMonitoringEnabled)
  , "Placement" :: Maybe (Placement)
  , "RamdiskId" :: Maybe (String)
  , "SecurityGroupIds" :: Maybe (SecurityGroupIdStringList)
  , "SecurityGroups" :: Maybe (SecurityGroupStringList)
  , "SubnetId" :: Maybe (String)
  , "UserData" :: Maybe (String)
  , "AdditionalInfo" :: Maybe (String)
  , "ClientToken" :: Maybe (String)
  , "DisableApiTermination" :: Maybe (Boolean)
  , "DryRun" :: Maybe (Boolean)
  , "EbsOptimized" :: Maybe (Boolean)
  , "IamInstanceProfile" :: Maybe (IamInstanceProfileSpecification)
  , "InstanceInitiatedShutdownBehavior" :: Maybe (ShutdownBehavior)
  , "NetworkInterfaces" :: Maybe (InstanceNetworkInterfaceSpecificationList)
  , "PrivateIpAddress" :: Maybe (String)
  , "ElasticGpuSpecification" :: Maybe (ElasticGpuSpecifications)
  , "TagSpecifications" :: Maybe (TagSpecificationList)
  , "LaunchTemplate" :: Maybe (LaunchTemplateSpecification)
  , "InstanceMarketOptions" :: Maybe (InstanceMarketOptionsRequest)
  , "CreditSpecification" :: Maybe (CreditSpecificationRequest)
  }
derive instance newtypeRunInstancesRequest :: Newtype RunInstancesRequest _
derive instance repGenericRunInstancesRequest :: Generic RunInstancesRequest _
instance showRunInstancesRequest :: Show RunInstancesRequest where show = genericShow
instance decodeRunInstancesRequest :: Decode RunInstancesRequest where decode = genericDecode options
instance encodeRunInstancesRequest :: Encode RunInstancesRequest where encode = genericEncode options

-- | Constructs RunInstancesRequest from required parameters
newRunInstancesRequest :: Int -> Int -> RunInstancesRequest
newRunInstancesRequest _MaxCount _MinCount = RunInstancesRequest { "MaxCount": _MaxCount, "MinCount": _MinCount, "AdditionalInfo": Nothing, "BlockDeviceMappings": Nothing, "ClientToken": Nothing, "CreditSpecification": Nothing, "DisableApiTermination": Nothing, "DryRun": Nothing, "EbsOptimized": Nothing, "ElasticGpuSpecification": Nothing, "IamInstanceProfile": Nothing, "ImageId": Nothing, "InstanceInitiatedShutdownBehavior": Nothing, "InstanceMarketOptions": Nothing, "InstanceType": Nothing, "Ipv6AddressCount": Nothing, "Ipv6Addresses": Nothing, "KernelId": Nothing, "KeyName": Nothing, "LaunchTemplate": Nothing, "Monitoring": Nothing, "NetworkInterfaces": Nothing, "Placement": Nothing, "PrivateIpAddress": Nothing, "RamdiskId": Nothing, "SecurityGroupIds": Nothing, "SecurityGroups": Nothing, "SubnetId": Nothing, "TagSpecifications": Nothing, "UserData": Nothing }

-- | Constructs RunInstancesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newRunInstancesRequest' :: Int -> Int -> ( { "BlockDeviceMappings" :: Maybe (BlockDeviceMappingRequestList) , "ImageId" :: Maybe (String) , "InstanceType" :: Maybe (InstanceType) , "Ipv6AddressCount" :: Maybe (Int) , "Ipv6Addresses" :: Maybe (InstanceIpv6AddressList) , "KernelId" :: Maybe (String) , "KeyName" :: Maybe (String) , "MaxCount" :: (Int) , "MinCount" :: (Int) , "Monitoring" :: Maybe (RunInstancesMonitoringEnabled) , "Placement" :: Maybe (Placement) , "RamdiskId" :: Maybe (String) , "SecurityGroupIds" :: Maybe (SecurityGroupIdStringList) , "SecurityGroups" :: Maybe (SecurityGroupStringList) , "SubnetId" :: Maybe (String) , "UserData" :: Maybe (String) , "AdditionalInfo" :: Maybe (String) , "ClientToken" :: Maybe (String) , "DisableApiTermination" :: Maybe (Boolean) , "DryRun" :: Maybe (Boolean) , "EbsOptimized" :: Maybe (Boolean) , "IamInstanceProfile" :: Maybe (IamInstanceProfileSpecification) , "InstanceInitiatedShutdownBehavior" :: Maybe (ShutdownBehavior) , "NetworkInterfaces" :: Maybe (InstanceNetworkInterfaceSpecificationList) , "PrivateIpAddress" :: Maybe (String) , "ElasticGpuSpecification" :: Maybe (ElasticGpuSpecifications) , "TagSpecifications" :: Maybe (TagSpecificationList) , "LaunchTemplate" :: Maybe (LaunchTemplateSpecification) , "InstanceMarketOptions" :: Maybe (InstanceMarketOptionsRequest) , "CreditSpecification" :: Maybe (CreditSpecificationRequest) } -> {"BlockDeviceMappings" :: Maybe (BlockDeviceMappingRequestList) , "ImageId" :: Maybe (String) , "InstanceType" :: Maybe (InstanceType) , "Ipv6AddressCount" :: Maybe (Int) , "Ipv6Addresses" :: Maybe (InstanceIpv6AddressList) , "KernelId" :: Maybe (String) , "KeyName" :: Maybe (String) , "MaxCount" :: (Int) , "MinCount" :: (Int) , "Monitoring" :: Maybe (RunInstancesMonitoringEnabled) , "Placement" :: Maybe (Placement) , "RamdiskId" :: Maybe (String) , "SecurityGroupIds" :: Maybe (SecurityGroupIdStringList) , "SecurityGroups" :: Maybe (SecurityGroupStringList) , "SubnetId" :: Maybe (String) , "UserData" :: Maybe (String) , "AdditionalInfo" :: Maybe (String) , "ClientToken" :: Maybe (String) , "DisableApiTermination" :: Maybe (Boolean) , "DryRun" :: Maybe (Boolean) , "EbsOptimized" :: Maybe (Boolean) , "IamInstanceProfile" :: Maybe (IamInstanceProfileSpecification) , "InstanceInitiatedShutdownBehavior" :: Maybe (ShutdownBehavior) , "NetworkInterfaces" :: Maybe (InstanceNetworkInterfaceSpecificationList) , "PrivateIpAddress" :: Maybe (String) , "ElasticGpuSpecification" :: Maybe (ElasticGpuSpecifications) , "TagSpecifications" :: Maybe (TagSpecificationList) , "LaunchTemplate" :: Maybe (LaunchTemplateSpecification) , "InstanceMarketOptions" :: Maybe (InstanceMarketOptionsRequest) , "CreditSpecification" :: Maybe (CreditSpecificationRequest) } ) -> RunInstancesRequest
newRunInstancesRequest' _MaxCount _MinCount customize = (RunInstancesRequest <<< customize) { "MaxCount": _MaxCount, "MinCount": _MinCount, "AdditionalInfo": Nothing, "BlockDeviceMappings": Nothing, "ClientToken": Nothing, "CreditSpecification": Nothing, "DisableApiTermination": Nothing, "DryRun": Nothing, "EbsOptimized": Nothing, "ElasticGpuSpecification": Nothing, "IamInstanceProfile": Nothing, "ImageId": Nothing, "InstanceInitiatedShutdownBehavior": Nothing, "InstanceMarketOptions": Nothing, "InstanceType": Nothing, "Ipv6AddressCount": Nothing, "Ipv6Addresses": Nothing, "KernelId": Nothing, "KeyName": Nothing, "LaunchTemplate": Nothing, "Monitoring": Nothing, "NetworkInterfaces": Nothing, "Placement": Nothing, "PrivateIpAddress": Nothing, "RamdiskId": Nothing, "SecurityGroupIds": Nothing, "SecurityGroups": Nothing, "SubnetId": Nothing, "TagSpecifications": Nothing, "UserData": Nothing }



-- | <p>Contains the parameters for RunScheduledInstances.</p>
newtype RunScheduledInstancesRequest = RunScheduledInstancesRequest 
  { "ClientToken" :: Maybe (String)
  , "DryRun" :: Maybe (Boolean)
  , "InstanceCount" :: Maybe (Int)
  , "LaunchSpecification" :: (ScheduledInstancesLaunchSpecification)
  , "ScheduledInstanceId" :: (String)
  }
derive instance newtypeRunScheduledInstancesRequest :: Newtype RunScheduledInstancesRequest _
derive instance repGenericRunScheduledInstancesRequest :: Generic RunScheduledInstancesRequest _
instance showRunScheduledInstancesRequest :: Show RunScheduledInstancesRequest where show = genericShow
instance decodeRunScheduledInstancesRequest :: Decode RunScheduledInstancesRequest where decode = genericDecode options
instance encodeRunScheduledInstancesRequest :: Encode RunScheduledInstancesRequest where encode = genericEncode options

-- | Constructs RunScheduledInstancesRequest from required parameters
newRunScheduledInstancesRequest :: ScheduledInstancesLaunchSpecification -> String -> RunScheduledInstancesRequest
newRunScheduledInstancesRequest _LaunchSpecification _ScheduledInstanceId = RunScheduledInstancesRequest { "LaunchSpecification": _LaunchSpecification, "ScheduledInstanceId": _ScheduledInstanceId, "ClientToken": Nothing, "DryRun": Nothing, "InstanceCount": Nothing }

-- | Constructs RunScheduledInstancesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newRunScheduledInstancesRequest' :: ScheduledInstancesLaunchSpecification -> String -> ( { "ClientToken" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "InstanceCount" :: Maybe (Int) , "LaunchSpecification" :: (ScheduledInstancesLaunchSpecification) , "ScheduledInstanceId" :: (String) } -> {"ClientToken" :: Maybe (String) , "DryRun" :: Maybe (Boolean) , "InstanceCount" :: Maybe (Int) , "LaunchSpecification" :: (ScheduledInstancesLaunchSpecification) , "ScheduledInstanceId" :: (String) } ) -> RunScheduledInstancesRequest
newRunScheduledInstancesRequest' _LaunchSpecification _ScheduledInstanceId customize = (RunScheduledInstancesRequest <<< customize) { "LaunchSpecification": _LaunchSpecification, "ScheduledInstanceId": _ScheduledInstanceId, "ClientToken": Nothing, "DryRun": Nothing, "InstanceCount": Nothing }



-- | <p>Contains the output of RunScheduledInstances.</p>
newtype RunScheduledInstancesResult = RunScheduledInstancesResult 
  { "InstanceIdSet" :: Maybe (InstanceIdSet)
  }
derive instance newtypeRunScheduledInstancesResult :: Newtype RunScheduledInstancesResult _
derive instance repGenericRunScheduledInstancesResult :: Generic RunScheduledInstancesResult _
instance showRunScheduledInstancesResult :: Show RunScheduledInstancesResult where show = genericShow
instance decodeRunScheduledInstancesResult :: Decode RunScheduledInstancesResult where decode = genericDecode options
instance encodeRunScheduledInstancesResult :: Encode RunScheduledInstancesResult where encode = genericEncode options

-- | Constructs RunScheduledInstancesResult from required parameters
newRunScheduledInstancesResult :: RunScheduledInstancesResult
newRunScheduledInstancesResult  = RunScheduledInstancesResult { "InstanceIdSet": Nothing }

-- | Constructs RunScheduledInstancesResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newRunScheduledInstancesResult' :: ( { "InstanceIdSet" :: Maybe (InstanceIdSet) } -> {"InstanceIdSet" :: Maybe (InstanceIdSet) } ) -> RunScheduledInstancesResult
newRunScheduledInstancesResult'  customize = (RunScheduledInstancesResult <<< customize) { "InstanceIdSet": Nothing }



-- | <p>Describes the storage parameters for S3 and S3 buckets for an instance store-backed AMI.</p>
newtype S3Storage = S3Storage 
  { "AWSAccessKeyId" :: Maybe (String)
  , "Bucket" :: Maybe (String)
  , "Prefix" :: Maybe (String)
  , "UploadPolicy" :: Maybe (String)
  , "UploadPolicySignature" :: Maybe (String)
  }
derive instance newtypeS3Storage :: Newtype S3Storage _
derive instance repGenericS3Storage :: Generic S3Storage _
instance showS3Storage :: Show S3Storage where show = genericShow
instance decodeS3Storage :: Decode S3Storage where decode = genericDecode options
instance encodeS3Storage :: Encode S3Storage where encode = genericEncode options

-- | Constructs S3Storage from required parameters
newS3Storage :: S3Storage
newS3Storage  = S3Storage { "AWSAccessKeyId": Nothing, "Bucket": Nothing, "Prefix": Nothing, "UploadPolicy": Nothing, "UploadPolicySignature": Nothing }

-- | Constructs S3Storage's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newS3Storage' :: ( { "AWSAccessKeyId" :: Maybe (String) , "Bucket" :: Maybe (String) , "Prefix" :: Maybe (String) , "UploadPolicy" :: Maybe (String) , "UploadPolicySignature" :: Maybe (String) } -> {"AWSAccessKeyId" :: Maybe (String) , "Bucket" :: Maybe (String) , "Prefix" :: Maybe (String) , "UploadPolicy" :: Maybe (String) , "UploadPolicySignature" :: Maybe (String) } ) -> S3Storage
newS3Storage'  customize = (S3Storage <<< customize) { "AWSAccessKeyId": Nothing, "Bucket": Nothing, "Prefix": Nothing, "UploadPolicy": Nothing, "UploadPolicySignature": Nothing }



-- | <p>Describes a Scheduled Instance.</p>
newtype ScheduledInstance = ScheduledInstance 
  { "AvailabilityZone" :: Maybe (String)
  , "CreateDate" :: Maybe (DateTime)
  , "HourlyPrice" :: Maybe (String)
  , "InstanceCount" :: Maybe (Int)
  , "InstanceType" :: Maybe (String)
  , "NetworkPlatform" :: Maybe (String)
  , "NextSlotStartTime" :: Maybe (DateTime)
  , "Platform" :: Maybe (String)
  , "PreviousSlotEndTime" :: Maybe (DateTime)
  , "Recurrence" :: Maybe (ScheduledInstanceRecurrence)
  , "ScheduledInstanceId" :: Maybe (String)
  , "SlotDurationInHours" :: Maybe (Int)
  , "TermEndDate" :: Maybe (DateTime)
  , "TermStartDate" :: Maybe (DateTime)
  , "TotalScheduledInstanceHours" :: Maybe (Int)
  }
derive instance newtypeScheduledInstance :: Newtype ScheduledInstance _
derive instance repGenericScheduledInstance :: Generic ScheduledInstance _
instance showScheduledInstance :: Show ScheduledInstance where show = genericShow
instance decodeScheduledInstance :: Decode ScheduledInstance where decode = genericDecode options
instance encodeScheduledInstance :: Encode ScheduledInstance where encode = genericEncode options

-- | Constructs ScheduledInstance from required parameters
newScheduledInstance :: ScheduledInstance
newScheduledInstance  = ScheduledInstance { "AvailabilityZone": Nothing, "CreateDate": Nothing, "HourlyPrice": Nothing, "InstanceCount": Nothing, "InstanceType": Nothing, "NetworkPlatform": Nothing, "NextSlotStartTime": Nothing, "Platform": Nothing, "PreviousSlotEndTime": Nothing, "Recurrence": Nothing, "ScheduledInstanceId": Nothing, "SlotDurationInHours": Nothing, "TermEndDate": Nothing, "TermStartDate": Nothing, "TotalScheduledInstanceHours": Nothing }

-- | Constructs ScheduledInstance's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newScheduledInstance' :: ( { "AvailabilityZone" :: Maybe (String) , "CreateDate" :: Maybe (DateTime) , "HourlyPrice" :: Maybe (String) , "InstanceCount" :: Maybe (Int) , "InstanceType" :: Maybe (String) , "NetworkPlatform" :: Maybe (String) , "NextSlotStartTime" :: Maybe (DateTime) , "Platform" :: Maybe (String) , "PreviousSlotEndTime" :: Maybe (DateTime) , "Recurrence" :: Maybe (ScheduledInstanceRecurrence) , "ScheduledInstanceId" :: Maybe (String) , "SlotDurationInHours" :: Maybe (Int) , "TermEndDate" :: Maybe (DateTime) , "TermStartDate" :: Maybe (DateTime) , "TotalScheduledInstanceHours" :: Maybe (Int) } -> {"AvailabilityZone" :: Maybe (String) , "CreateDate" :: Maybe (DateTime) , "HourlyPrice" :: Maybe (String) , "InstanceCount" :: Maybe (Int) , "InstanceType" :: Maybe (String) , "NetworkPlatform" :: Maybe (String) , "NextSlotStartTime" :: Maybe (DateTime) , "Platform" :: Maybe (String) , "PreviousSlotEndTime" :: Maybe (DateTime) , "Recurrence" :: Maybe (ScheduledInstanceRecurrence) , "ScheduledInstanceId" :: Maybe (String) , "SlotDurationInHours" :: Maybe (Int) , "TermEndDate" :: Maybe (DateTime) , "TermStartDate" :: Maybe (DateTime) , "TotalScheduledInstanceHours" :: Maybe (Int) } ) -> ScheduledInstance
newScheduledInstance'  customize = (ScheduledInstance <<< customize) { "AvailabilityZone": Nothing, "CreateDate": Nothing, "HourlyPrice": Nothing, "InstanceCount": Nothing, "InstanceType": Nothing, "NetworkPlatform": Nothing, "NextSlotStartTime": Nothing, "Platform": Nothing, "PreviousSlotEndTime": Nothing, "Recurrence": Nothing, "ScheduledInstanceId": Nothing, "SlotDurationInHours": Nothing, "TermEndDate": Nothing, "TermStartDate": Nothing, "TotalScheduledInstanceHours": Nothing }



-- | <p>Describes a schedule that is available for your Scheduled Instances.</p>
newtype ScheduledInstanceAvailability = ScheduledInstanceAvailability 
  { "AvailabilityZone" :: Maybe (String)
  , "AvailableInstanceCount" :: Maybe (Int)
  , "FirstSlotStartTime" :: Maybe (DateTime)
  , "HourlyPrice" :: Maybe (String)
  , "InstanceType" :: Maybe (String)
  , "MaxTermDurationInDays" :: Maybe (Int)
  , "MinTermDurationInDays" :: Maybe (Int)
  , "NetworkPlatform" :: Maybe (String)
  , "Platform" :: Maybe (String)
  , "PurchaseToken" :: Maybe (String)
  , "Recurrence" :: Maybe (ScheduledInstanceRecurrence)
  , "SlotDurationInHours" :: Maybe (Int)
  , "TotalScheduledInstanceHours" :: Maybe (Int)
  }
derive instance newtypeScheduledInstanceAvailability :: Newtype ScheduledInstanceAvailability _
derive instance repGenericScheduledInstanceAvailability :: Generic ScheduledInstanceAvailability _
instance showScheduledInstanceAvailability :: Show ScheduledInstanceAvailability where show = genericShow
instance decodeScheduledInstanceAvailability :: Decode ScheduledInstanceAvailability where decode = genericDecode options
instance encodeScheduledInstanceAvailability :: Encode ScheduledInstanceAvailability where encode = genericEncode options

-- | Constructs ScheduledInstanceAvailability from required parameters
newScheduledInstanceAvailability :: ScheduledInstanceAvailability
newScheduledInstanceAvailability  = ScheduledInstanceAvailability { "AvailabilityZone": Nothing, "AvailableInstanceCount": Nothing, "FirstSlotStartTime": Nothing, "HourlyPrice": Nothing, "InstanceType": Nothing, "MaxTermDurationInDays": Nothing, "MinTermDurationInDays": Nothing, "NetworkPlatform": Nothing, "Platform": Nothing, "PurchaseToken": Nothing, "Recurrence": Nothing, "SlotDurationInHours": Nothing, "TotalScheduledInstanceHours": Nothing }

-- | Constructs ScheduledInstanceAvailability's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newScheduledInstanceAvailability' :: ( { "AvailabilityZone" :: Maybe (String) , "AvailableInstanceCount" :: Maybe (Int) , "FirstSlotStartTime" :: Maybe (DateTime) , "HourlyPrice" :: Maybe (String) , "InstanceType" :: Maybe (String) , "MaxTermDurationInDays" :: Maybe (Int) , "MinTermDurationInDays" :: Maybe (Int) , "NetworkPlatform" :: Maybe (String) , "Platform" :: Maybe (String) , "PurchaseToken" :: Maybe (String) , "Recurrence" :: Maybe (ScheduledInstanceRecurrence) , "SlotDurationInHours" :: Maybe (Int) , "TotalScheduledInstanceHours" :: Maybe (Int) } -> {"AvailabilityZone" :: Maybe (String) , "AvailableInstanceCount" :: Maybe (Int) , "FirstSlotStartTime" :: Maybe (DateTime) , "HourlyPrice" :: Maybe (String) , "InstanceType" :: Maybe (String) , "MaxTermDurationInDays" :: Maybe (Int) , "MinTermDurationInDays" :: Maybe (Int) , "NetworkPlatform" :: Maybe (String) , "Platform" :: Maybe (String) , "PurchaseToken" :: Maybe (String) , "Recurrence" :: Maybe (ScheduledInstanceRecurrence) , "SlotDurationInHours" :: Maybe (Int) , "TotalScheduledInstanceHours" :: Maybe (Int) } ) -> ScheduledInstanceAvailability
newScheduledInstanceAvailability'  customize = (ScheduledInstanceAvailability <<< customize) { "AvailabilityZone": Nothing, "AvailableInstanceCount": Nothing, "FirstSlotStartTime": Nothing, "HourlyPrice": Nothing, "InstanceType": Nothing, "MaxTermDurationInDays": Nothing, "MinTermDurationInDays": Nothing, "NetworkPlatform": Nothing, "Platform": Nothing, "PurchaseToken": Nothing, "Recurrence": Nothing, "SlotDurationInHours": Nothing, "TotalScheduledInstanceHours": Nothing }



newtype ScheduledInstanceAvailabilitySet = ScheduledInstanceAvailabilitySet (Array ScheduledInstanceAvailability)
derive instance newtypeScheduledInstanceAvailabilitySet :: Newtype ScheduledInstanceAvailabilitySet _
derive instance repGenericScheduledInstanceAvailabilitySet :: Generic ScheduledInstanceAvailabilitySet _
instance showScheduledInstanceAvailabilitySet :: Show ScheduledInstanceAvailabilitySet where show = genericShow
instance decodeScheduledInstanceAvailabilitySet :: Decode ScheduledInstanceAvailabilitySet where decode = genericDecode options
instance encodeScheduledInstanceAvailabilitySet :: Encode ScheduledInstanceAvailabilitySet where encode = genericEncode options



newtype ScheduledInstanceIdRequestSet = ScheduledInstanceIdRequestSet (Array String)
derive instance newtypeScheduledInstanceIdRequestSet :: Newtype ScheduledInstanceIdRequestSet _
derive instance repGenericScheduledInstanceIdRequestSet :: Generic ScheduledInstanceIdRequestSet _
instance showScheduledInstanceIdRequestSet :: Show ScheduledInstanceIdRequestSet where show = genericShow
instance decodeScheduledInstanceIdRequestSet :: Decode ScheduledInstanceIdRequestSet where decode = genericDecode options
instance encodeScheduledInstanceIdRequestSet :: Encode ScheduledInstanceIdRequestSet where encode = genericEncode options



-- | <p>Describes the recurring schedule for a Scheduled Instance.</p>
newtype ScheduledInstanceRecurrence = ScheduledInstanceRecurrence 
  { "Frequency" :: Maybe (String)
  , "Interval" :: Maybe (Int)
  , "OccurrenceDaySet" :: Maybe (OccurrenceDaySet)
  , "OccurrenceRelativeToEnd" :: Maybe (Boolean)
  , "OccurrenceUnit" :: Maybe (String)
  }
derive instance newtypeScheduledInstanceRecurrence :: Newtype ScheduledInstanceRecurrence _
derive instance repGenericScheduledInstanceRecurrence :: Generic ScheduledInstanceRecurrence _
instance showScheduledInstanceRecurrence :: Show ScheduledInstanceRecurrence where show = genericShow
instance decodeScheduledInstanceRecurrence :: Decode ScheduledInstanceRecurrence where decode = genericDecode options
instance encodeScheduledInstanceRecurrence :: Encode ScheduledInstanceRecurrence where encode = genericEncode options

-- | Constructs ScheduledInstanceRecurrence from required parameters
newScheduledInstanceRecurrence :: ScheduledInstanceRecurrence
newScheduledInstanceRecurrence  = ScheduledInstanceRecurrence { "Frequency": Nothing, "Interval": Nothing, "OccurrenceDaySet": Nothing, "OccurrenceRelativeToEnd": Nothing, "OccurrenceUnit": Nothing }

-- | Constructs ScheduledInstanceRecurrence's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newScheduledInstanceRecurrence' :: ( { "Frequency" :: Maybe (String) , "Interval" :: Maybe (Int) , "OccurrenceDaySet" :: Maybe (OccurrenceDaySet) , "OccurrenceRelativeToEnd" :: Maybe (Boolean) , "OccurrenceUnit" :: Maybe (String) } -> {"Frequency" :: Maybe (String) , "Interval" :: Maybe (Int) , "OccurrenceDaySet" :: Maybe (OccurrenceDaySet) , "OccurrenceRelativeToEnd" :: Maybe (Boolean) , "OccurrenceUnit" :: Maybe (String) } ) -> ScheduledInstanceRecurrence
newScheduledInstanceRecurrence'  customize = (ScheduledInstanceRecurrence <<< customize) { "Frequency": Nothing, "Interval": Nothing, "OccurrenceDaySet": Nothing, "OccurrenceRelativeToEnd": Nothing, "OccurrenceUnit": Nothing }



-- | <p>Describes the recurring schedule for a Scheduled Instance.</p>
newtype ScheduledInstanceRecurrenceRequest = ScheduledInstanceRecurrenceRequest 
  { "Frequency" :: Maybe (String)
  , "Interval" :: Maybe (Int)
  , "OccurrenceDays" :: Maybe (OccurrenceDayRequestSet)
  , "OccurrenceRelativeToEnd" :: Maybe (Boolean)
  , "OccurrenceUnit" :: Maybe (String)
  }
derive instance newtypeScheduledInstanceRecurrenceRequest :: Newtype ScheduledInstanceRecurrenceRequest _
derive instance repGenericScheduledInstanceRecurrenceRequest :: Generic ScheduledInstanceRecurrenceRequest _
instance showScheduledInstanceRecurrenceRequest :: Show ScheduledInstanceRecurrenceRequest where show = genericShow
instance decodeScheduledInstanceRecurrenceRequest :: Decode ScheduledInstanceRecurrenceRequest where decode = genericDecode options
instance encodeScheduledInstanceRecurrenceRequest :: Encode ScheduledInstanceRecurrenceRequest where encode = genericEncode options

-- | Constructs ScheduledInstanceRecurrenceRequest from required parameters
newScheduledInstanceRecurrenceRequest :: ScheduledInstanceRecurrenceRequest
newScheduledInstanceRecurrenceRequest  = ScheduledInstanceRecurrenceRequest { "Frequency": Nothing, "Interval": Nothing, "OccurrenceDays": Nothing, "OccurrenceRelativeToEnd": Nothing, "OccurrenceUnit": Nothing }

-- | Constructs ScheduledInstanceRecurrenceRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newScheduledInstanceRecurrenceRequest' :: ( { "Frequency" :: Maybe (String) , "Interval" :: Maybe (Int) , "OccurrenceDays" :: Maybe (OccurrenceDayRequestSet) , "OccurrenceRelativeToEnd" :: Maybe (Boolean) , "OccurrenceUnit" :: Maybe (String) } -> {"Frequency" :: Maybe (String) , "Interval" :: Maybe (Int) , "OccurrenceDays" :: Maybe (OccurrenceDayRequestSet) , "OccurrenceRelativeToEnd" :: Maybe (Boolean) , "OccurrenceUnit" :: Maybe (String) } ) -> ScheduledInstanceRecurrenceRequest
newScheduledInstanceRecurrenceRequest'  customize = (ScheduledInstanceRecurrenceRequest <<< customize) { "Frequency": Nothing, "Interval": Nothing, "OccurrenceDays": Nothing, "OccurrenceRelativeToEnd": Nothing, "OccurrenceUnit": Nothing }



newtype ScheduledInstanceSet = ScheduledInstanceSet (Array ScheduledInstance)
derive instance newtypeScheduledInstanceSet :: Newtype ScheduledInstanceSet _
derive instance repGenericScheduledInstanceSet :: Generic ScheduledInstanceSet _
instance showScheduledInstanceSet :: Show ScheduledInstanceSet where show = genericShow
instance decodeScheduledInstanceSet :: Decode ScheduledInstanceSet where decode = genericDecode options
instance encodeScheduledInstanceSet :: Encode ScheduledInstanceSet where encode = genericEncode options



-- | <p>Describes a block device mapping for a Scheduled Instance.</p>
newtype ScheduledInstancesBlockDeviceMapping = ScheduledInstancesBlockDeviceMapping 
  { "DeviceName" :: Maybe (String)
  , "Ebs" :: Maybe (ScheduledInstancesEbs)
  , "NoDevice" :: Maybe (String)
  , "VirtualName" :: Maybe (String)
  }
derive instance newtypeScheduledInstancesBlockDeviceMapping :: Newtype ScheduledInstancesBlockDeviceMapping _
derive instance repGenericScheduledInstancesBlockDeviceMapping :: Generic ScheduledInstancesBlockDeviceMapping _
instance showScheduledInstancesBlockDeviceMapping :: Show ScheduledInstancesBlockDeviceMapping where show = genericShow
instance decodeScheduledInstancesBlockDeviceMapping :: Decode ScheduledInstancesBlockDeviceMapping where decode = genericDecode options
instance encodeScheduledInstancesBlockDeviceMapping :: Encode ScheduledInstancesBlockDeviceMapping where encode = genericEncode options

-- | Constructs ScheduledInstancesBlockDeviceMapping from required parameters
newScheduledInstancesBlockDeviceMapping :: ScheduledInstancesBlockDeviceMapping
newScheduledInstancesBlockDeviceMapping  = ScheduledInstancesBlockDeviceMapping { "DeviceName": Nothing, "Ebs": Nothing, "NoDevice": Nothing, "VirtualName": Nothing }

-- | Constructs ScheduledInstancesBlockDeviceMapping's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newScheduledInstancesBlockDeviceMapping' :: ( { "DeviceName" :: Maybe (String) , "Ebs" :: Maybe (ScheduledInstancesEbs) , "NoDevice" :: Maybe (String) , "VirtualName" :: Maybe (String) } -> {"DeviceName" :: Maybe (String) , "Ebs" :: Maybe (ScheduledInstancesEbs) , "NoDevice" :: Maybe (String) , "VirtualName" :: Maybe (String) } ) -> ScheduledInstancesBlockDeviceMapping
newScheduledInstancesBlockDeviceMapping'  customize = (ScheduledInstancesBlockDeviceMapping <<< customize) { "DeviceName": Nothing, "Ebs": Nothing, "NoDevice": Nothing, "VirtualName": Nothing }



newtype ScheduledInstancesBlockDeviceMappingSet = ScheduledInstancesBlockDeviceMappingSet (Array ScheduledInstancesBlockDeviceMapping)
derive instance newtypeScheduledInstancesBlockDeviceMappingSet :: Newtype ScheduledInstancesBlockDeviceMappingSet _
derive instance repGenericScheduledInstancesBlockDeviceMappingSet :: Generic ScheduledInstancesBlockDeviceMappingSet _
instance showScheduledInstancesBlockDeviceMappingSet :: Show ScheduledInstancesBlockDeviceMappingSet where show = genericShow
instance decodeScheduledInstancesBlockDeviceMappingSet :: Decode ScheduledInstancesBlockDeviceMappingSet where decode = genericDecode options
instance encodeScheduledInstancesBlockDeviceMappingSet :: Encode ScheduledInstancesBlockDeviceMappingSet where encode = genericEncode options



-- | <p>Describes an EBS volume for a Scheduled Instance.</p>
newtype ScheduledInstancesEbs = ScheduledInstancesEbs 
  { "DeleteOnTermination" :: Maybe (Boolean)
  , "Encrypted" :: Maybe (Boolean)
  , "Iops" :: Maybe (Int)
  , "SnapshotId" :: Maybe (String)
  , "VolumeSize" :: Maybe (Int)
  , "VolumeType" :: Maybe (String)
  }
derive instance newtypeScheduledInstancesEbs :: Newtype ScheduledInstancesEbs _
derive instance repGenericScheduledInstancesEbs :: Generic ScheduledInstancesEbs _
instance showScheduledInstancesEbs :: Show ScheduledInstancesEbs where show = genericShow
instance decodeScheduledInstancesEbs :: Decode ScheduledInstancesEbs where decode = genericDecode options
instance encodeScheduledInstancesEbs :: Encode ScheduledInstancesEbs where encode = genericEncode options

-- | Constructs ScheduledInstancesEbs from required parameters
newScheduledInstancesEbs :: ScheduledInstancesEbs
newScheduledInstancesEbs  = ScheduledInstancesEbs { "DeleteOnTermination": Nothing, "Encrypted": Nothing, "Iops": Nothing, "SnapshotId": Nothing, "VolumeSize": Nothing, "VolumeType": Nothing }

-- | Constructs ScheduledInstancesEbs's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newScheduledInstancesEbs' :: ( { "DeleteOnTermination" :: Maybe (Boolean) , "Encrypted" :: Maybe (Boolean) , "Iops" :: Maybe (Int) , "SnapshotId" :: Maybe (String) , "VolumeSize" :: Maybe (Int) , "VolumeType" :: Maybe (String) } -> {"DeleteOnTermination" :: Maybe (Boolean) , "Encrypted" :: Maybe (Boolean) , "Iops" :: Maybe (Int) , "SnapshotId" :: Maybe (String) , "VolumeSize" :: Maybe (Int) , "VolumeType" :: Maybe (String) } ) -> ScheduledInstancesEbs
newScheduledInstancesEbs'  customize = (ScheduledInstancesEbs <<< customize) { "DeleteOnTermination": Nothing, "Encrypted": Nothing, "Iops": Nothing, "SnapshotId": Nothing, "VolumeSize": Nothing, "VolumeType": Nothing }



-- | <p>Describes an IAM instance profile for a Scheduled Instance.</p>
newtype ScheduledInstancesIamInstanceProfile = ScheduledInstancesIamInstanceProfile 
  { "Arn" :: Maybe (String)
  , "Name" :: Maybe (String)
  }
derive instance newtypeScheduledInstancesIamInstanceProfile :: Newtype ScheduledInstancesIamInstanceProfile _
derive instance repGenericScheduledInstancesIamInstanceProfile :: Generic ScheduledInstancesIamInstanceProfile _
instance showScheduledInstancesIamInstanceProfile :: Show ScheduledInstancesIamInstanceProfile where show = genericShow
instance decodeScheduledInstancesIamInstanceProfile :: Decode ScheduledInstancesIamInstanceProfile where decode = genericDecode options
instance encodeScheduledInstancesIamInstanceProfile :: Encode ScheduledInstancesIamInstanceProfile where encode = genericEncode options

-- | Constructs ScheduledInstancesIamInstanceProfile from required parameters
newScheduledInstancesIamInstanceProfile :: ScheduledInstancesIamInstanceProfile
newScheduledInstancesIamInstanceProfile  = ScheduledInstancesIamInstanceProfile { "Arn": Nothing, "Name": Nothing }

-- | Constructs ScheduledInstancesIamInstanceProfile's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newScheduledInstancesIamInstanceProfile' :: ( { "Arn" :: Maybe (String) , "Name" :: Maybe (String) } -> {"Arn" :: Maybe (String) , "Name" :: Maybe (String) } ) -> ScheduledInstancesIamInstanceProfile
newScheduledInstancesIamInstanceProfile'  customize = (ScheduledInstancesIamInstanceProfile <<< customize) { "Arn": Nothing, "Name": Nothing }



-- | <p>Describes an IPv6 address.</p>
newtype ScheduledInstancesIpv6Address = ScheduledInstancesIpv6Address 
  { "Ipv6Address" :: Maybe (Ipv6Address)
  }
derive instance newtypeScheduledInstancesIpv6Address :: Newtype ScheduledInstancesIpv6Address _
derive instance repGenericScheduledInstancesIpv6Address :: Generic ScheduledInstancesIpv6Address _
instance showScheduledInstancesIpv6Address :: Show ScheduledInstancesIpv6Address where show = genericShow
instance decodeScheduledInstancesIpv6Address :: Decode ScheduledInstancesIpv6Address where decode = genericDecode options
instance encodeScheduledInstancesIpv6Address :: Encode ScheduledInstancesIpv6Address where encode = genericEncode options

-- | Constructs ScheduledInstancesIpv6Address from required parameters
newScheduledInstancesIpv6Address :: ScheduledInstancesIpv6Address
newScheduledInstancesIpv6Address  = ScheduledInstancesIpv6Address { "Ipv6Address": Nothing }

-- | Constructs ScheduledInstancesIpv6Address's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newScheduledInstancesIpv6Address' :: ( { "Ipv6Address" :: Maybe (Ipv6Address) } -> {"Ipv6Address" :: Maybe (Ipv6Address) } ) -> ScheduledInstancesIpv6Address
newScheduledInstancesIpv6Address'  customize = (ScheduledInstancesIpv6Address <<< customize) { "Ipv6Address": Nothing }



newtype ScheduledInstancesIpv6AddressList = ScheduledInstancesIpv6AddressList (Array ScheduledInstancesIpv6Address)
derive instance newtypeScheduledInstancesIpv6AddressList :: Newtype ScheduledInstancesIpv6AddressList _
derive instance repGenericScheduledInstancesIpv6AddressList :: Generic ScheduledInstancesIpv6AddressList _
instance showScheduledInstancesIpv6AddressList :: Show ScheduledInstancesIpv6AddressList where show = genericShow
instance decodeScheduledInstancesIpv6AddressList :: Decode ScheduledInstancesIpv6AddressList where decode = genericDecode options
instance encodeScheduledInstancesIpv6AddressList :: Encode ScheduledInstancesIpv6AddressList where encode = genericEncode options



-- | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p>
newtype ScheduledInstancesLaunchSpecification = ScheduledInstancesLaunchSpecification 
  { "BlockDeviceMappings" :: Maybe (ScheduledInstancesBlockDeviceMappingSet)
  , "EbsOptimized" :: Maybe (Boolean)
  , "IamInstanceProfile" :: Maybe (ScheduledInstancesIamInstanceProfile)
  , "ImageId" :: (String)
  , "InstanceType" :: Maybe (String)
  , "KernelId" :: Maybe (String)
  , "KeyName" :: Maybe (String)
  , "Monitoring" :: Maybe (ScheduledInstancesMonitoring)
  , "NetworkInterfaces" :: Maybe (ScheduledInstancesNetworkInterfaceSet)
  , "Placement" :: Maybe (ScheduledInstancesPlacement)
  , "RamdiskId" :: Maybe (String)
  , "SecurityGroupIds" :: Maybe (ScheduledInstancesSecurityGroupIdSet)
  , "SubnetId" :: Maybe (String)
  , "UserData" :: Maybe (String)
  }
derive instance newtypeScheduledInstancesLaunchSpecification :: Newtype ScheduledInstancesLaunchSpecification _
derive instance repGenericScheduledInstancesLaunchSpecification :: Generic ScheduledInstancesLaunchSpecification _
instance showScheduledInstancesLaunchSpecification :: Show ScheduledInstancesLaunchSpecification where show = genericShow
instance decodeScheduledInstancesLaunchSpecification :: Decode ScheduledInstancesLaunchSpecification where decode = genericDecode options
instance encodeScheduledInstancesLaunchSpecification :: Encode ScheduledInstancesLaunchSpecification where encode = genericEncode options

-- | Constructs ScheduledInstancesLaunchSpecification from required parameters
newScheduledInstancesLaunchSpecification :: String -> ScheduledInstancesLaunchSpecification
newScheduledInstancesLaunchSpecification _ImageId = ScheduledInstancesLaunchSpecification { "ImageId": _ImageId, "BlockDeviceMappings": Nothing, "EbsOptimized": Nothing, "IamInstanceProfile": Nothing, "InstanceType": Nothing, "KernelId": Nothing, "KeyName": Nothing, "Monitoring": Nothing, "NetworkInterfaces": Nothing, "Placement": Nothing, "RamdiskId": Nothing, "SecurityGroupIds": Nothing, "SubnetId": Nothing, "UserData": Nothing }

-- | Constructs ScheduledInstancesLaunchSpecification's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newScheduledInstancesLaunchSpecification' :: String -> ( { "BlockDeviceMappings" :: Maybe (ScheduledInstancesBlockDeviceMappingSet) , "EbsOptimized" :: Maybe (Boolean) , "IamInstanceProfile" :: Maybe (ScheduledInstancesIamInstanceProfile) , "ImageId" :: (String) , "InstanceType" :: Maybe (String) , "KernelId" :: Maybe (String) , "KeyName" :: Maybe (String) , "Monitoring" :: Maybe (ScheduledInstancesMonitoring) , "NetworkInterfaces" :: Maybe (ScheduledInstancesNetworkInterfaceSet) , "Placement" :: Maybe (ScheduledInstancesPlacement) , "RamdiskId" :: Maybe (String) , "SecurityGroupIds" :: Maybe (ScheduledInstancesSecurityGroupIdSet) , "SubnetId" :: Maybe (String) , "UserData" :: Maybe (String) } -> {"BlockDeviceMappings" :: Maybe (ScheduledInstancesBlockDeviceMappingSet) , "EbsOptimized" :: Maybe (Boolean) , "IamInstanceProfile" :: Maybe (ScheduledInstancesIamInstanceProfile) , "ImageId" :: (String) , "InstanceType" :: Maybe (String) , "KernelId" :: Maybe (String) , "KeyName" :: Maybe (String) , "Monitoring" :: Maybe (ScheduledInstancesMonitoring) , "NetworkInterfaces" :: Maybe (ScheduledInstancesNetworkInterfaceSet) , "Placement" :: Maybe (ScheduledInstancesPlacement) , "RamdiskId" :: Maybe (String) , "SecurityGroupIds" :: Maybe (ScheduledInstancesSecurityGroupIdSet) , "SubnetId" :: Maybe (String) , "UserData" :: Maybe (String) } ) -> ScheduledInstancesLaunchSpecification
newScheduledInstancesLaunchSpecification' _ImageId customize = (ScheduledInstancesLaunchSpecification <<< customize) { "ImageId": _ImageId, "BlockDeviceMappings": Nothing, "EbsOptimized": Nothing, "IamInstanceProfile": Nothing, "InstanceType": Nothing, "KernelId": Nothing, "KeyName": Nothing, "Monitoring": Nothing, "NetworkInterfaces": Nothing, "Placement": Nothing, "RamdiskId": Nothing, "SecurityGroupIds": Nothing, "SubnetId": Nothing, "UserData": Nothing }



-- | <p>Describes whether monitoring is enabled for a Scheduled Instance.</p>
newtype ScheduledInstancesMonitoring = ScheduledInstancesMonitoring 
  { "Enabled" :: Maybe (Boolean)
  }
derive instance newtypeScheduledInstancesMonitoring :: Newtype ScheduledInstancesMonitoring _
derive instance repGenericScheduledInstancesMonitoring :: Generic ScheduledInstancesMonitoring _
instance showScheduledInstancesMonitoring :: Show ScheduledInstancesMonitoring where show = genericShow
instance decodeScheduledInstancesMonitoring :: Decode ScheduledInstancesMonitoring where decode = genericDecode options
instance encodeScheduledInstancesMonitoring :: Encode ScheduledInstancesMonitoring where encode = genericEncode options

-- | Constructs ScheduledInstancesMonitoring from required parameters
newScheduledInstancesMonitoring :: ScheduledInstancesMonitoring
newScheduledInstancesMonitoring  = ScheduledInstancesMonitoring { "Enabled": Nothing }

-- | Constructs ScheduledInstancesMonitoring's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newScheduledInstancesMonitoring' :: ( { "Enabled" :: Maybe (Boolean) } -> {"Enabled" :: Maybe (Boolean) } ) -> ScheduledInstancesMonitoring
newScheduledInstancesMonitoring'  customize = (ScheduledInstancesMonitoring <<< customize) { "Enabled": Nothing }



-- | <p>Describes a network interface for a Scheduled Instance.</p>
newtype ScheduledInstancesNetworkInterface = ScheduledInstancesNetworkInterface 
  { "AssociatePublicIpAddress" :: Maybe (Boolean)
  , "DeleteOnTermination" :: Maybe (Boolean)
  , "Description" :: Maybe (String)
  , "DeviceIndex" :: Maybe (Int)
  , "Groups" :: Maybe (ScheduledInstancesSecurityGroupIdSet)
  , "Ipv6AddressCount" :: Maybe (Int)
  , "Ipv6Addresses" :: Maybe (ScheduledInstancesIpv6AddressList)
  , "NetworkInterfaceId" :: Maybe (String)
  , "PrivateIpAddress" :: Maybe (String)
  , "PrivateIpAddressConfigs" :: Maybe (PrivateIpAddressConfigSet)
  , "SecondaryPrivateIpAddressCount" :: Maybe (Int)
  , "SubnetId" :: Maybe (String)
  }
derive instance newtypeScheduledInstancesNetworkInterface :: Newtype ScheduledInstancesNetworkInterface _
derive instance repGenericScheduledInstancesNetworkInterface :: Generic ScheduledInstancesNetworkInterface _
instance showScheduledInstancesNetworkInterface :: Show ScheduledInstancesNetworkInterface where show = genericShow
instance decodeScheduledInstancesNetworkInterface :: Decode ScheduledInstancesNetworkInterface where decode = genericDecode options
instance encodeScheduledInstancesNetworkInterface :: Encode ScheduledInstancesNetworkInterface where encode = genericEncode options

-- | Constructs ScheduledInstancesNetworkInterface from required parameters
newScheduledInstancesNetworkInterface :: ScheduledInstancesNetworkInterface
newScheduledInstancesNetworkInterface  = ScheduledInstancesNetworkInterface { "AssociatePublicIpAddress": Nothing, "DeleteOnTermination": Nothing, "Description": Nothing, "DeviceIndex": Nothing, "Groups": Nothing, "Ipv6AddressCount": Nothing, "Ipv6Addresses": Nothing, "NetworkInterfaceId": Nothing, "PrivateIpAddress": Nothing, "PrivateIpAddressConfigs": Nothing, "SecondaryPrivateIpAddressCount": Nothing, "SubnetId": Nothing }

-- | Constructs ScheduledInstancesNetworkInterface's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newScheduledInstancesNetworkInterface' :: ( { "AssociatePublicIpAddress" :: Maybe (Boolean) , "DeleteOnTermination" :: Maybe (Boolean) , "Description" :: Maybe (String) , "DeviceIndex" :: Maybe (Int) , "Groups" :: Maybe (ScheduledInstancesSecurityGroupIdSet) , "Ipv6AddressCount" :: Maybe (Int) , "Ipv6Addresses" :: Maybe (ScheduledInstancesIpv6AddressList) , "NetworkInterfaceId" :: Maybe (String) , "PrivateIpAddress" :: Maybe (String) , "PrivateIpAddressConfigs" :: Maybe (PrivateIpAddressConfigSet) , "SecondaryPrivateIpAddressCount" :: Maybe (Int) , "SubnetId" :: Maybe (String) } -> {"AssociatePublicIpAddress" :: Maybe (Boolean) , "DeleteOnTermination" :: Maybe (Boolean) , "Description" :: Maybe (String) , "DeviceIndex" :: Maybe (Int) , "Groups" :: Maybe (ScheduledInstancesSecurityGroupIdSet) , "Ipv6AddressCount" :: Maybe (Int) , "Ipv6Addresses" :: Maybe (ScheduledInstancesIpv6AddressList) , "NetworkInterfaceId" :: Maybe (String) , "PrivateIpAddress" :: Maybe (String) , "PrivateIpAddressConfigs" :: Maybe (PrivateIpAddressConfigSet) , "SecondaryPrivateIpAddressCount" :: Maybe (Int) , "SubnetId" :: Maybe (String) } ) -> ScheduledInstancesNetworkInterface
newScheduledInstancesNetworkInterface'  customize = (ScheduledInstancesNetworkInterface <<< customize) { "AssociatePublicIpAddress": Nothing, "DeleteOnTermination": Nothing, "Description": Nothing, "DeviceIndex": Nothing, "Groups": Nothing, "Ipv6AddressCount": Nothing, "Ipv6Addresses": Nothing, "NetworkInterfaceId": Nothing, "PrivateIpAddress": Nothing, "PrivateIpAddressConfigs": Nothing, "SecondaryPrivateIpAddressCount": Nothing, "SubnetId": Nothing }



newtype ScheduledInstancesNetworkInterfaceSet = ScheduledInstancesNetworkInterfaceSet (Array ScheduledInstancesNetworkInterface)
derive instance newtypeScheduledInstancesNetworkInterfaceSet :: Newtype ScheduledInstancesNetworkInterfaceSet _
derive instance repGenericScheduledInstancesNetworkInterfaceSet :: Generic ScheduledInstancesNetworkInterfaceSet _
instance showScheduledInstancesNetworkInterfaceSet :: Show ScheduledInstancesNetworkInterfaceSet where show = genericShow
instance decodeScheduledInstancesNetworkInterfaceSet :: Decode ScheduledInstancesNetworkInterfaceSet where decode = genericDecode options
instance encodeScheduledInstancesNetworkInterfaceSet :: Encode ScheduledInstancesNetworkInterfaceSet where encode = genericEncode options



-- | <p>Describes the placement for a Scheduled Instance.</p>
newtype ScheduledInstancesPlacement = ScheduledInstancesPlacement 
  { "AvailabilityZone" :: Maybe (String)
  , "GroupName" :: Maybe (String)
  }
derive instance newtypeScheduledInstancesPlacement :: Newtype ScheduledInstancesPlacement _
derive instance repGenericScheduledInstancesPlacement :: Generic ScheduledInstancesPlacement _
instance showScheduledInstancesPlacement :: Show ScheduledInstancesPlacement where show = genericShow
instance decodeScheduledInstancesPlacement :: Decode ScheduledInstancesPlacement where decode = genericDecode options
instance encodeScheduledInstancesPlacement :: Encode ScheduledInstancesPlacement where encode = genericEncode options

-- | Constructs ScheduledInstancesPlacement from required parameters
newScheduledInstancesPlacement :: ScheduledInstancesPlacement
newScheduledInstancesPlacement  = ScheduledInstancesPlacement { "AvailabilityZone": Nothing, "GroupName": Nothing }

-- | Constructs ScheduledInstancesPlacement's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newScheduledInstancesPlacement' :: ( { "AvailabilityZone" :: Maybe (String) , "GroupName" :: Maybe (String) } -> {"AvailabilityZone" :: Maybe (String) , "GroupName" :: Maybe (String) } ) -> ScheduledInstancesPlacement
newScheduledInstancesPlacement'  customize = (ScheduledInstancesPlacement <<< customize) { "AvailabilityZone": Nothing, "GroupName": Nothing }



-- | <p>Describes a private IPv4 address for a Scheduled Instance.</p>
newtype ScheduledInstancesPrivateIpAddressConfig = ScheduledInstancesPrivateIpAddressConfig 
  { "Primary" :: Maybe (Boolean)
  , "PrivateIpAddress" :: Maybe (String)
  }
derive instance newtypeScheduledInstancesPrivateIpAddressConfig :: Newtype ScheduledInstancesPrivateIpAddressConfig _
derive instance repGenericScheduledInstancesPrivateIpAddressConfig :: Generic ScheduledInstancesPrivateIpAddressConfig _
instance showScheduledInstancesPrivateIpAddressConfig :: Show ScheduledInstancesPrivateIpAddressConfig where show = genericShow
instance decodeScheduledInstancesPrivateIpAddressConfig :: Decode ScheduledInstancesPrivateIpAddressConfig where decode = genericDecode options
instance encodeScheduledInstancesPrivateIpAddressConfig :: Encode ScheduledInstancesPrivateIpAddressConfig where encode = genericEncode options

-- | Constructs ScheduledInstancesPrivateIpAddressConfig from required parameters
newScheduledInstancesPrivateIpAddressConfig :: ScheduledInstancesPrivateIpAddressConfig
newScheduledInstancesPrivateIpAddressConfig  = ScheduledInstancesPrivateIpAddressConfig { "Primary": Nothing, "PrivateIpAddress": Nothing }

-- | Constructs ScheduledInstancesPrivateIpAddressConfig's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newScheduledInstancesPrivateIpAddressConfig' :: ( { "Primary" :: Maybe (Boolean) , "PrivateIpAddress" :: Maybe (String) } -> {"Primary" :: Maybe (Boolean) , "PrivateIpAddress" :: Maybe (String) } ) -> ScheduledInstancesPrivateIpAddressConfig
newScheduledInstancesPrivateIpAddressConfig'  customize = (ScheduledInstancesPrivateIpAddressConfig <<< customize) { "Primary": Nothing, "PrivateIpAddress": Nothing }



newtype ScheduledInstancesSecurityGroupIdSet = ScheduledInstancesSecurityGroupIdSet (Array String)
derive instance newtypeScheduledInstancesSecurityGroupIdSet :: Newtype ScheduledInstancesSecurityGroupIdSet _
derive instance repGenericScheduledInstancesSecurityGroupIdSet :: Generic ScheduledInstancesSecurityGroupIdSet _
instance showScheduledInstancesSecurityGroupIdSet :: Show ScheduledInstancesSecurityGroupIdSet where show = genericShow
instance decodeScheduledInstancesSecurityGroupIdSet :: Decode ScheduledInstancesSecurityGroupIdSet where decode = genericDecode options
instance encodeScheduledInstancesSecurityGroupIdSet :: Encode ScheduledInstancesSecurityGroupIdSet where encode = genericEncode options



-- | <p>Describes a security group</p>
newtype SecurityGroup = SecurityGroup 
  { "Description" :: Maybe (String)
  , "GroupName" :: Maybe (String)
  , "IpPermissions" :: Maybe (IpPermissionList)
  , "OwnerId" :: Maybe (String)
  , "GroupId" :: Maybe (String)
  , "IpPermissionsEgress" :: Maybe (IpPermissionList)
  , "Tags" :: Maybe (TagList)
  , "VpcId" :: Maybe (String)
  }
derive instance newtypeSecurityGroup :: Newtype SecurityGroup _
derive instance repGenericSecurityGroup :: Generic SecurityGroup _
instance showSecurityGroup :: Show SecurityGroup where show = genericShow
instance decodeSecurityGroup :: Decode SecurityGroup where decode = genericDecode options
instance encodeSecurityGroup :: Encode SecurityGroup where encode = genericEncode options

-- | Constructs SecurityGroup from required parameters
newSecurityGroup :: SecurityGroup
newSecurityGroup  = SecurityGroup { "Description": Nothing, "GroupId": Nothing, "GroupName": Nothing, "IpPermissions": Nothing, "IpPermissionsEgress": Nothing, "OwnerId": Nothing, "Tags": Nothing, "VpcId": Nothing }

-- | Constructs SecurityGroup's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newSecurityGroup' :: ( { "Description" :: Maybe (String) , "GroupName" :: Maybe (String) , "IpPermissions" :: Maybe (IpPermissionList) , "OwnerId" :: Maybe (String) , "GroupId" :: Maybe (String) , "IpPermissionsEgress" :: Maybe (IpPermissionList) , "Tags" :: Maybe (TagList) , "VpcId" :: Maybe (String) } -> {"Description" :: Maybe (String) , "GroupName" :: Maybe (String) , "IpPermissions" :: Maybe (IpPermissionList) , "OwnerId" :: Maybe (String) , "GroupId" :: Maybe (String) , "IpPermissionsEgress" :: Maybe (IpPermissionList) , "Tags" :: Maybe (TagList) , "VpcId" :: Maybe (String) } ) -> SecurityGroup
newSecurityGroup'  customize = (SecurityGroup <<< customize) { "Description": Nothing, "GroupId": Nothing, "GroupName": Nothing, "IpPermissions": Nothing, "IpPermissionsEgress": Nothing, "OwnerId": Nothing, "Tags": Nothing, "VpcId": Nothing }



newtype SecurityGroupIdStringList = SecurityGroupIdStringList (Array String)
derive instance newtypeSecurityGroupIdStringList :: Newtype SecurityGroupIdStringList _
derive instance repGenericSecurityGroupIdStringList :: Generic SecurityGroupIdStringList _
instance showSecurityGroupIdStringList :: Show SecurityGroupIdStringList where show = genericShow
instance decodeSecurityGroupIdStringList :: Decode SecurityGroupIdStringList where decode = genericDecode options
instance encodeSecurityGroupIdStringList :: Encode SecurityGroupIdStringList where encode = genericEncode options



-- | <p>Describes a security group.</p>
newtype SecurityGroupIdentifier = SecurityGroupIdentifier 
  { "GroupId" :: Maybe (String)
  , "GroupName" :: Maybe (String)
  }
derive instance newtypeSecurityGroupIdentifier :: Newtype SecurityGroupIdentifier _
derive instance repGenericSecurityGroupIdentifier :: Generic SecurityGroupIdentifier _
instance showSecurityGroupIdentifier :: Show SecurityGroupIdentifier where show = genericShow
instance decodeSecurityGroupIdentifier :: Decode SecurityGroupIdentifier where decode = genericDecode options
instance encodeSecurityGroupIdentifier :: Encode SecurityGroupIdentifier where encode = genericEncode options

-- | Constructs SecurityGroupIdentifier from required parameters
newSecurityGroupIdentifier :: SecurityGroupIdentifier
newSecurityGroupIdentifier  = SecurityGroupIdentifier { "GroupId": Nothing, "GroupName": Nothing }

-- | Constructs SecurityGroupIdentifier's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newSecurityGroupIdentifier' :: ( { "GroupId" :: Maybe (String) , "GroupName" :: Maybe (String) } -> {"GroupId" :: Maybe (String) , "GroupName" :: Maybe (String) } ) -> SecurityGroupIdentifier
newSecurityGroupIdentifier'  customize = (SecurityGroupIdentifier <<< customize) { "GroupId": Nothing, "GroupName": Nothing }



newtype SecurityGroupList = SecurityGroupList (Array SecurityGroup)
derive instance newtypeSecurityGroupList :: Newtype SecurityGroupList _
derive instance repGenericSecurityGroupList :: Generic SecurityGroupList _
instance showSecurityGroupList :: Show SecurityGroupList where show = genericShow
instance decodeSecurityGroupList :: Decode SecurityGroupList where decode = genericDecode options
instance encodeSecurityGroupList :: Encode SecurityGroupList where encode = genericEncode options



-- | <p>Describes a VPC with a security group that references your security group.</p>
newtype SecurityGroupReference = SecurityGroupReference 
  { "GroupId" :: (String)
  , "ReferencingVpcId" :: (String)
  , "VpcPeeringConnectionId" :: Maybe (String)
  }
derive instance newtypeSecurityGroupReference :: Newtype SecurityGroupReference _
derive instance repGenericSecurityGroupReference :: Generic SecurityGroupReference _
instance showSecurityGroupReference :: Show SecurityGroupReference where show = genericShow
instance decodeSecurityGroupReference :: Decode SecurityGroupReference where decode = genericDecode options
instance encodeSecurityGroupReference :: Encode SecurityGroupReference where encode = genericEncode options

-- | Constructs SecurityGroupReference from required parameters
newSecurityGroupReference :: String -> String -> SecurityGroupReference
newSecurityGroupReference _GroupId _ReferencingVpcId = SecurityGroupReference { "GroupId": _GroupId, "ReferencingVpcId": _ReferencingVpcId, "VpcPeeringConnectionId": Nothing }

-- | Constructs SecurityGroupReference's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newSecurityGroupReference' :: String -> String -> ( { "GroupId" :: (String) , "ReferencingVpcId" :: (String) , "VpcPeeringConnectionId" :: Maybe (String) } -> {"GroupId" :: (String) , "ReferencingVpcId" :: (String) , "VpcPeeringConnectionId" :: Maybe (String) } ) -> SecurityGroupReference
newSecurityGroupReference' _GroupId _ReferencingVpcId customize = (SecurityGroupReference <<< customize) { "GroupId": _GroupId, "ReferencingVpcId": _ReferencingVpcId, "VpcPeeringConnectionId": Nothing }



newtype SecurityGroupReferences = SecurityGroupReferences (Array SecurityGroupReference)
derive instance newtypeSecurityGroupReferences :: Newtype SecurityGroupReferences _
derive instance repGenericSecurityGroupReferences :: Generic SecurityGroupReferences _
instance showSecurityGroupReferences :: Show SecurityGroupReferences where show = genericShow
instance decodeSecurityGroupReferences :: Decode SecurityGroupReferences where decode = genericDecode options
instance encodeSecurityGroupReferences :: Encode SecurityGroupReferences where encode = genericEncode options



newtype SecurityGroupStringList = SecurityGroupStringList (Array String)
derive instance newtypeSecurityGroupStringList :: Newtype SecurityGroupStringList _
derive instance repGenericSecurityGroupStringList :: Generic SecurityGroupStringList _
instance showSecurityGroupStringList :: Show SecurityGroupStringList where show = genericShow
instance decodeSecurityGroupStringList :: Decode SecurityGroupStringList where decode = genericDecode options
instance encodeSecurityGroupStringList :: Encode SecurityGroupStringList where encode = genericEncode options



-- | <p>Describes a service configuration for a VPC endpoint service.</p>
newtype ServiceConfiguration = ServiceConfiguration 
  { "ServiceType" :: Maybe (ServiceTypeDetailSet)
  , "ServiceId" :: Maybe (String)
  , "ServiceName" :: Maybe (String)
  , "ServiceState" :: Maybe (ServiceState)
  , "AvailabilityZones" :: Maybe (ValueStringList)
  , "AcceptanceRequired" :: Maybe (Boolean)
  , "NetworkLoadBalancerArns" :: Maybe (ValueStringList)
  , "BaseEndpointDnsNames" :: Maybe (ValueStringList)
  , "PrivateDnsName" :: Maybe (String)
  }
derive instance newtypeServiceConfiguration :: Newtype ServiceConfiguration _
derive instance repGenericServiceConfiguration :: Generic ServiceConfiguration _
instance showServiceConfiguration :: Show ServiceConfiguration where show = genericShow
instance decodeServiceConfiguration :: Decode ServiceConfiguration where decode = genericDecode options
instance encodeServiceConfiguration :: Encode ServiceConfiguration where encode = genericEncode options

-- | Constructs ServiceConfiguration from required parameters
newServiceConfiguration :: ServiceConfiguration
newServiceConfiguration  = ServiceConfiguration { "AcceptanceRequired": Nothing, "AvailabilityZones": Nothing, "BaseEndpointDnsNames": Nothing, "NetworkLoadBalancerArns": Nothing, "PrivateDnsName": Nothing, "ServiceId": Nothing, "ServiceName": Nothing, "ServiceState": Nothing, "ServiceType": Nothing }

-- | Constructs ServiceConfiguration's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newServiceConfiguration' :: ( { "ServiceType" :: Maybe (ServiceTypeDetailSet) , "ServiceId" :: Maybe (String) , "ServiceName" :: Maybe (String) , "ServiceState" :: Maybe (ServiceState) , "AvailabilityZones" :: Maybe (ValueStringList) , "AcceptanceRequired" :: Maybe (Boolean) , "NetworkLoadBalancerArns" :: Maybe (ValueStringList) , "BaseEndpointDnsNames" :: Maybe (ValueStringList) , "PrivateDnsName" :: Maybe (String) } -> {"ServiceType" :: Maybe (ServiceTypeDetailSet) , "ServiceId" :: Maybe (String) , "ServiceName" :: Maybe (String) , "ServiceState" :: Maybe (ServiceState) , "AvailabilityZones" :: Maybe (ValueStringList) , "AcceptanceRequired" :: Maybe (Boolean) , "NetworkLoadBalancerArns" :: Maybe (ValueStringList) , "BaseEndpointDnsNames" :: Maybe (ValueStringList) , "PrivateDnsName" :: Maybe (String) } ) -> ServiceConfiguration
newServiceConfiguration'  customize = (ServiceConfiguration <<< customize) { "AcceptanceRequired": Nothing, "AvailabilityZones": Nothing, "BaseEndpointDnsNames": Nothing, "NetworkLoadBalancerArns": Nothing, "PrivateDnsName": Nothing, "ServiceId": Nothing, "ServiceName": Nothing, "ServiceState": Nothing, "ServiceType": Nothing }



newtype ServiceConfigurationSet = ServiceConfigurationSet (Array ServiceConfiguration)
derive instance newtypeServiceConfigurationSet :: Newtype ServiceConfigurationSet _
derive instance repGenericServiceConfigurationSet :: Generic ServiceConfigurationSet _
instance showServiceConfigurationSet :: Show ServiceConfigurationSet where show = genericShow
instance decodeServiceConfigurationSet :: Decode ServiceConfigurationSet where decode = genericDecode options
instance encodeServiceConfigurationSet :: Encode ServiceConfigurationSet where encode = genericEncode options



-- | <p>Describes a VPC endpoint service.</p>
newtype ServiceDetail = ServiceDetail 
  { "ServiceName" :: Maybe (String)
  , "ServiceType" :: Maybe (ServiceTypeDetailSet)
  , "AvailabilityZones" :: Maybe (ValueStringList)
  , "Owner" :: Maybe (String)
  , "BaseEndpointDnsNames" :: Maybe (ValueStringList)
  , "PrivateDnsName" :: Maybe (String)
  , "VpcEndpointPolicySupported" :: Maybe (Boolean)
  , "AcceptanceRequired" :: Maybe (Boolean)
  }
derive instance newtypeServiceDetail :: Newtype ServiceDetail _
derive instance repGenericServiceDetail :: Generic ServiceDetail _
instance showServiceDetail :: Show ServiceDetail where show = genericShow
instance decodeServiceDetail :: Decode ServiceDetail where decode = genericDecode options
instance encodeServiceDetail :: Encode ServiceDetail where encode = genericEncode options

-- | Constructs ServiceDetail from required parameters
newServiceDetail :: ServiceDetail
newServiceDetail  = ServiceDetail { "AcceptanceRequired": Nothing, "AvailabilityZones": Nothing, "BaseEndpointDnsNames": Nothing, "Owner": Nothing, "PrivateDnsName": Nothing, "ServiceName": Nothing, "ServiceType": Nothing, "VpcEndpointPolicySupported": Nothing }

-- | Constructs ServiceDetail's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newServiceDetail' :: ( { "ServiceName" :: Maybe (String) , "ServiceType" :: Maybe (ServiceTypeDetailSet) , "AvailabilityZones" :: Maybe (ValueStringList) , "Owner" :: Maybe (String) , "BaseEndpointDnsNames" :: Maybe (ValueStringList) , "PrivateDnsName" :: Maybe (String) , "VpcEndpointPolicySupported" :: Maybe (Boolean) , "AcceptanceRequired" :: Maybe (Boolean) } -> {"ServiceName" :: Maybe (String) , "ServiceType" :: Maybe (ServiceTypeDetailSet) , "AvailabilityZones" :: Maybe (ValueStringList) , "Owner" :: Maybe (String) , "BaseEndpointDnsNames" :: Maybe (ValueStringList) , "PrivateDnsName" :: Maybe (String) , "VpcEndpointPolicySupported" :: Maybe (Boolean) , "AcceptanceRequired" :: Maybe (Boolean) } ) -> ServiceDetail
newServiceDetail'  customize = (ServiceDetail <<< customize) { "AcceptanceRequired": Nothing, "AvailabilityZones": Nothing, "BaseEndpointDnsNames": Nothing, "Owner": Nothing, "PrivateDnsName": Nothing, "ServiceName": Nothing, "ServiceType": Nothing, "VpcEndpointPolicySupported": Nothing }



newtype ServiceDetailSet = ServiceDetailSet (Array ServiceDetail)
derive instance newtypeServiceDetailSet :: Newtype ServiceDetailSet _
derive instance repGenericServiceDetailSet :: Generic ServiceDetailSet _
instance showServiceDetailSet :: Show ServiceDetailSet where show = genericShow
instance decodeServiceDetailSet :: Decode ServiceDetailSet where decode = genericDecode options
instance encodeServiceDetailSet :: Encode ServiceDetailSet where encode = genericEncode options



newtype ServiceState = ServiceState String
derive instance newtypeServiceState :: Newtype ServiceState _
derive instance repGenericServiceState :: Generic ServiceState _
instance showServiceState :: Show ServiceState where show = genericShow
instance decodeServiceState :: Decode ServiceState where decode = genericDecode options
instance encodeServiceState :: Encode ServiceState where encode = genericEncode options



newtype ServiceType = ServiceType String
derive instance newtypeServiceType :: Newtype ServiceType _
derive instance repGenericServiceType :: Generic ServiceType _
instance showServiceType :: Show ServiceType where show = genericShow
instance decodeServiceType :: Decode ServiceType where decode = genericDecode options
instance encodeServiceType :: Encode ServiceType where encode = genericEncode options



-- | <p>Describes the type of service for a VPC endpoint.</p>
newtype ServiceTypeDetail = ServiceTypeDetail 
  { "ServiceType" :: Maybe (ServiceType)
  }
derive instance newtypeServiceTypeDetail :: Newtype ServiceTypeDetail _
derive instance repGenericServiceTypeDetail :: Generic ServiceTypeDetail _
instance showServiceTypeDetail :: Show ServiceTypeDetail where show = genericShow
instance decodeServiceTypeDetail :: Decode ServiceTypeDetail where decode = genericDecode options
instance encodeServiceTypeDetail :: Encode ServiceTypeDetail where encode = genericEncode options

-- | Constructs ServiceTypeDetail from required parameters
newServiceTypeDetail :: ServiceTypeDetail
newServiceTypeDetail  = ServiceTypeDetail { "ServiceType": Nothing }

-- | Constructs ServiceTypeDetail's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newServiceTypeDetail' :: ( { "ServiceType" :: Maybe (ServiceType) } -> {"ServiceType" :: Maybe (ServiceType) } ) -> ServiceTypeDetail
newServiceTypeDetail'  customize = (ServiceTypeDetail <<< customize) { "ServiceType": Nothing }



newtype ServiceTypeDetailSet = ServiceTypeDetailSet (Array ServiceTypeDetail)
derive instance newtypeServiceTypeDetailSet :: Newtype ServiceTypeDetailSet _
derive instance repGenericServiceTypeDetailSet :: Generic ServiceTypeDetailSet _
instance showServiceTypeDetailSet :: Show ServiceTypeDetailSet where show = genericShow
instance decodeServiceTypeDetailSet :: Decode ServiceTypeDetailSet where decode = genericDecode options
instance encodeServiceTypeDetailSet :: Encode ServiceTypeDetailSet where encode = genericEncode options



newtype ShutdownBehavior = ShutdownBehavior String
derive instance newtypeShutdownBehavior :: Newtype ShutdownBehavior _
derive instance repGenericShutdownBehavior :: Generic ShutdownBehavior _
instance showShutdownBehavior :: Show ShutdownBehavior where show = genericShow
instance decodeShutdownBehavior :: Decode ShutdownBehavior where decode = genericDecode options
instance encodeShutdownBehavior :: Encode ShutdownBehavior where encode = genericEncode options



-- | <p>Describes the time period for a Scheduled Instance to start its first schedule. The time period must span less than one day.</p>
newtype SlotDateTimeRangeRequest = SlotDateTimeRangeRequest 
  { "EarliestTime" :: (DateTime)
  , "LatestTime" :: (DateTime)
  }
derive instance newtypeSlotDateTimeRangeRequest :: Newtype SlotDateTimeRangeRequest _
derive instance repGenericSlotDateTimeRangeRequest :: Generic SlotDateTimeRangeRequest _
instance showSlotDateTimeRangeRequest :: Show SlotDateTimeRangeRequest where show = genericShow
instance decodeSlotDateTimeRangeRequest :: Decode SlotDateTimeRangeRequest where decode = genericDecode options
instance encodeSlotDateTimeRangeRequest :: Encode SlotDateTimeRangeRequest where encode = genericEncode options

-- | Constructs SlotDateTimeRangeRequest from required parameters
newSlotDateTimeRangeRequest :: DateTime -> DateTime -> SlotDateTimeRangeRequest
newSlotDateTimeRangeRequest _EarliestTime _LatestTime = SlotDateTimeRangeRequest { "EarliestTime": _EarliestTime, "LatestTime": _LatestTime }

-- | Constructs SlotDateTimeRangeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newSlotDateTimeRangeRequest' :: DateTime -> DateTime -> ( { "EarliestTime" :: (DateTime) , "LatestTime" :: (DateTime) } -> {"EarliestTime" :: (DateTime) , "LatestTime" :: (DateTime) } ) -> SlotDateTimeRangeRequest
newSlotDateTimeRangeRequest' _EarliestTime _LatestTime customize = (SlotDateTimeRangeRequest <<< customize) { "EarliestTime": _EarliestTime, "LatestTime": _LatestTime }



-- | <p>Describes the time period for a Scheduled Instance to start its first schedule.</p>
newtype SlotStartTimeRangeRequest = SlotStartTimeRangeRequest 
  { "EarliestTime" :: Maybe (DateTime)
  , "LatestTime" :: Maybe (DateTime)
  }
derive instance newtypeSlotStartTimeRangeRequest :: Newtype SlotStartTimeRangeRequest _
derive instance repGenericSlotStartTimeRangeRequest :: Generic SlotStartTimeRangeRequest _
instance showSlotStartTimeRangeRequest :: Show SlotStartTimeRangeRequest where show = genericShow
instance decodeSlotStartTimeRangeRequest :: Decode SlotStartTimeRangeRequest where decode = genericDecode options
instance encodeSlotStartTimeRangeRequest :: Encode SlotStartTimeRangeRequest where encode = genericEncode options

-- | Constructs SlotStartTimeRangeRequest from required parameters
newSlotStartTimeRangeRequest :: SlotStartTimeRangeRequest
newSlotStartTimeRangeRequest  = SlotStartTimeRangeRequest { "EarliestTime": Nothing, "LatestTime": Nothing }

-- | Constructs SlotStartTimeRangeRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newSlotStartTimeRangeRequest' :: ( { "EarliestTime" :: Maybe (DateTime) , "LatestTime" :: Maybe (DateTime) } -> {"EarliestTime" :: Maybe (DateTime) , "LatestTime" :: Maybe (DateTime) } ) -> SlotStartTimeRangeRequest
newSlotStartTimeRangeRequest'  customize = (SlotStartTimeRangeRequest <<< customize) { "EarliestTime": Nothing, "LatestTime": Nothing }



-- | <p>Describes a snapshot.</p>
newtype Snapshot = Snapshot 
  { "DataEncryptionKeyId" :: Maybe (String)
  , "Description" :: Maybe (String)
  , "Encrypted" :: Maybe (Boolean)
  , "KmsKeyId" :: Maybe (String)
  , "OwnerId" :: Maybe (String)
  , "Progress" :: Maybe (String)
  , "SnapshotId" :: Maybe (String)
  , "StartTime" :: Maybe (DateTime)
  , "State" :: Maybe (SnapshotState)
  , "StateMessage" :: Maybe (String)
  , "VolumeId" :: Maybe (String)
  , "VolumeSize" :: Maybe (Int)
  , "OwnerAlias" :: Maybe (String)
  , "Tags" :: Maybe (TagList)
  }
derive instance newtypeSnapshot :: Newtype Snapshot _
derive instance repGenericSnapshot :: Generic Snapshot _
instance showSnapshot :: Show Snapshot where show = genericShow
instance decodeSnapshot :: Decode Snapshot where decode = genericDecode options
instance encodeSnapshot :: Encode Snapshot where encode = genericEncode options

-- | Constructs Snapshot from required parameters
newSnapshot :: Snapshot
newSnapshot  = Snapshot { "DataEncryptionKeyId": Nothing, "Description": Nothing, "Encrypted": Nothing, "KmsKeyId": Nothing, "OwnerAlias": Nothing, "OwnerId": Nothing, "Progress": Nothing, "SnapshotId": Nothing, "StartTime": Nothing, "State": Nothing, "StateMessage": Nothing, "Tags": Nothing, "VolumeId": Nothing, "VolumeSize": Nothing }

-- | Constructs Snapshot's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newSnapshot' :: ( { "DataEncryptionKeyId" :: Maybe (String) , "Description" :: Maybe (String) , "Encrypted" :: Maybe (Boolean) , "KmsKeyId" :: Maybe (String) , "OwnerId" :: Maybe (String) , "Progress" :: Maybe (String) , "SnapshotId" :: Maybe (String) , "StartTime" :: Maybe (DateTime) , "State" :: Maybe (SnapshotState) , "StateMessage" :: Maybe (String) , "VolumeId" :: Maybe (String) , "VolumeSize" :: Maybe (Int) , "OwnerAlias" :: Maybe (String) , "Tags" :: Maybe (TagList) } -> {"DataEncryptionKeyId" :: Maybe (String) , "Description" :: Maybe (String) , "Encrypted" :: Maybe (Boolean) , "KmsKeyId" :: Maybe (String) , "OwnerId" :: Maybe (String) , "Progress" :: Maybe (String) , "SnapshotId" :: Maybe (String) , "StartTime" :: Maybe (DateTime) , "State" :: Maybe (SnapshotState) , "StateMessage" :: Maybe (String) , "VolumeId" :: Maybe (String) , "VolumeSize" :: Maybe (Int) , "OwnerAlias" :: Maybe (String) , "Tags" :: Maybe (TagList) } ) -> Snapshot
newSnapshot'  customize = (Snapshot <<< customize) { "DataEncryptionKeyId": Nothing, "Description": Nothing, "Encrypted": Nothing, "KmsKeyId": Nothing, "OwnerAlias": Nothing, "OwnerId": Nothing, "Progress": Nothing, "SnapshotId": Nothing, "StartTime": Nothing, "State": Nothing, "StateMessage": Nothing, "Tags": Nothing, "VolumeId": Nothing, "VolumeSize": Nothing }



newtype SnapshotAttributeName = SnapshotAttributeName String
derive instance newtypeSnapshotAttributeName :: Newtype SnapshotAttributeName _
derive instance repGenericSnapshotAttributeName :: Generic SnapshotAttributeName _
instance showSnapshotAttributeName :: Show SnapshotAttributeName where show = genericShow
instance decodeSnapshotAttributeName :: Decode SnapshotAttributeName where decode = genericDecode options
instance encodeSnapshotAttributeName :: Encode SnapshotAttributeName where encode = genericEncode options



-- | <p>Describes the snapshot created from the imported disk.</p>
newtype SnapshotDetail = SnapshotDetail 
  { "Description" :: Maybe (String)
  , "DeviceName" :: Maybe (String)
  , "DiskImageSize" :: Maybe (Number)
  , "Format" :: Maybe (String)
  , "Progress" :: Maybe (String)
  , "SnapshotId" :: Maybe (String)
  , "Status" :: Maybe (String)
  , "StatusMessage" :: Maybe (String)
  , "Url" :: Maybe (String)
  , "UserBucket" :: Maybe (UserBucketDetails)
  }
derive instance newtypeSnapshotDetail :: Newtype SnapshotDetail _
derive instance repGenericSnapshotDetail :: Generic SnapshotDetail _
instance showSnapshotDetail :: Show SnapshotDetail where show = genericShow
instance decodeSnapshotDetail :: Decode SnapshotDetail where decode = genericDecode options
instance encodeSnapshotDetail :: Encode SnapshotDetail where encode = genericEncode options

-- | Constructs SnapshotDetail from required parameters
newSnapshotDetail :: SnapshotDetail
newSnapshotDetail  = SnapshotDetail { "Description": Nothing, "DeviceName": Nothing, "DiskImageSize": Nothing, "Format": Nothing, "Progress": Nothing, "SnapshotId": Nothing, "Status": Nothing, "StatusMessage": Nothing, "Url": Nothing, "UserBucket": Nothing }

-- | Constructs SnapshotDetail's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newSnapshotDetail' :: ( { "Description" :: Maybe (String) , "DeviceName" :: Maybe (String) , "DiskImageSize" :: Maybe (Number) , "Format" :: Maybe (String) , "Progress" :: Maybe (String) , "SnapshotId" :: Maybe (String) , "Status" :: Maybe (String) , "StatusMessage" :: Maybe (String) , "Url" :: Maybe (String) , "UserBucket" :: Maybe (UserBucketDetails) } -> {"Description" :: Maybe (String) , "DeviceName" :: Maybe (String) , "DiskImageSize" :: Maybe (Number) , "Format" :: Maybe (String) , "Progress" :: Maybe (String) , "SnapshotId" :: Maybe (String) , "Status" :: Maybe (String) , "StatusMessage" :: Maybe (String) , "Url" :: Maybe (String) , "UserBucket" :: Maybe (UserBucketDetails) } ) -> SnapshotDetail
newSnapshotDetail'  customize = (SnapshotDetail <<< customize) { "Description": Nothing, "DeviceName": Nothing, "DiskImageSize": Nothing, "Format": Nothing, "Progress": Nothing, "SnapshotId": Nothing, "Status": Nothing, "StatusMessage": Nothing, "Url": Nothing, "UserBucket": Nothing }



newtype SnapshotDetailList = SnapshotDetailList (Array SnapshotDetail)
derive instance newtypeSnapshotDetailList :: Newtype SnapshotDetailList _
derive instance repGenericSnapshotDetailList :: Generic SnapshotDetailList _
instance showSnapshotDetailList :: Show SnapshotDetailList where show = genericShow
instance decodeSnapshotDetailList :: Decode SnapshotDetailList where decode = genericDecode options
instance encodeSnapshotDetailList :: Encode SnapshotDetailList where encode = genericEncode options



-- | <p>The disk container object for the import snapshot request.</p>
newtype SnapshotDiskContainer = SnapshotDiskContainer 
  { "Description" :: Maybe (String)
  , "Format" :: Maybe (String)
  , "Url" :: Maybe (String)
  , "UserBucket" :: Maybe (UserBucket)
  }
derive instance newtypeSnapshotDiskContainer :: Newtype SnapshotDiskContainer _
derive instance repGenericSnapshotDiskContainer :: Generic SnapshotDiskContainer _
instance showSnapshotDiskContainer :: Show SnapshotDiskContainer where show = genericShow
instance decodeSnapshotDiskContainer :: Decode SnapshotDiskContainer where decode = genericDecode options
instance encodeSnapshotDiskContainer :: Encode SnapshotDiskContainer where encode = genericEncode options

-- | Constructs SnapshotDiskContainer from required parameters
newSnapshotDiskContainer :: SnapshotDiskContainer
newSnapshotDiskContainer  = SnapshotDiskContainer { "Description": Nothing, "Format": Nothing, "Url": Nothing, "UserBucket": Nothing }

-- | Constructs SnapshotDiskContainer's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newSnapshotDiskContainer' :: ( { "Description" :: Maybe (String) , "Format" :: Maybe (String) , "Url" :: Maybe (String) , "UserBucket" :: Maybe (UserBucket) } -> {"Description" :: Maybe (String) , "Format" :: Maybe (String) , "Url" :: Maybe (String) , "UserBucket" :: Maybe (UserBucket) } ) -> SnapshotDiskContainer
newSnapshotDiskContainer'  customize = (SnapshotDiskContainer <<< customize) { "Description": Nothing, "Format": Nothing, "Url": Nothing, "UserBucket": Nothing }



newtype SnapshotIdStringList = SnapshotIdStringList (Array String)
derive instance newtypeSnapshotIdStringList :: Newtype SnapshotIdStringList _
derive instance repGenericSnapshotIdStringList :: Generic SnapshotIdStringList _
instance showSnapshotIdStringList :: Show SnapshotIdStringList where show = genericShow
instance decodeSnapshotIdStringList :: Decode SnapshotIdStringList where decode = genericDecode options
instance encodeSnapshotIdStringList :: Encode SnapshotIdStringList where encode = genericEncode options



newtype SnapshotList = SnapshotList (Array Snapshot)
derive instance newtypeSnapshotList :: Newtype SnapshotList _
derive instance repGenericSnapshotList :: Generic SnapshotList _
instance showSnapshotList :: Show SnapshotList where show = genericShow
instance decodeSnapshotList :: Decode SnapshotList where decode = genericDecode options
instance encodeSnapshotList :: Encode SnapshotList where encode = genericEncode options



newtype SnapshotState = SnapshotState String
derive instance newtypeSnapshotState :: Newtype SnapshotState _
derive instance repGenericSnapshotState :: Generic SnapshotState _
instance showSnapshotState :: Show SnapshotState where show = genericShow
instance decodeSnapshotState :: Decode SnapshotState where decode = genericDecode options
instance encodeSnapshotState :: Encode SnapshotState where encode = genericEncode options



-- | <p>Details about the import snapshot task.</p>
newtype SnapshotTaskDetail = SnapshotTaskDetail 
  { "Description" :: Maybe (String)
  , "DiskImageSize" :: Maybe (Number)
  , "Format" :: Maybe (String)
  , "Progress" :: Maybe (String)
  , "SnapshotId" :: Maybe (String)
  , "Status" :: Maybe (String)
  , "StatusMessage" :: Maybe (String)
  , "Url" :: Maybe (String)
  , "UserBucket" :: Maybe (UserBucketDetails)
  }
derive instance newtypeSnapshotTaskDetail :: Newtype SnapshotTaskDetail _
derive instance repGenericSnapshotTaskDetail :: Generic SnapshotTaskDetail _
instance showSnapshotTaskDetail :: Show SnapshotTaskDetail where show = genericShow
instance decodeSnapshotTaskDetail :: Decode SnapshotTaskDetail where decode = genericDecode options
instance encodeSnapshotTaskDetail :: Encode SnapshotTaskDetail where encode = genericEncode options

-- | Constructs SnapshotTaskDetail from required parameters
newSnapshotTaskDetail :: SnapshotTaskDetail
newSnapshotTaskDetail  = SnapshotTaskDetail { "Description": Nothing, "DiskImageSize": Nothing, "Format": Nothing, "Progress": Nothing, "SnapshotId": Nothing, "Status": Nothing, "StatusMessage": Nothing, "Url": Nothing, "UserBucket": Nothing }

-- | Constructs SnapshotTaskDetail's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newSnapshotTaskDetail' :: ( { "Description" :: Maybe (String) , "DiskImageSize" :: Maybe (Number) , "Format" :: Maybe (String) , "Progress" :: Maybe (String) , "SnapshotId" :: Maybe (String) , "Status" :: Maybe (String) , "StatusMessage" :: Maybe (String) , "Url" :: Maybe (String) , "UserBucket" :: Maybe (UserBucketDetails) } -> {"Description" :: Maybe (String) , "DiskImageSize" :: Maybe (Number) , "Format" :: Maybe (String) , "Progress" :: Maybe (String) , "SnapshotId" :: Maybe (String) , "Status" :: Maybe (String) , "StatusMessage" :: Maybe (String) , "Url" :: Maybe (String) , "UserBucket" :: Maybe (UserBucketDetails) } ) -> SnapshotTaskDetail
newSnapshotTaskDetail'  customize = (SnapshotTaskDetail <<< customize) { "Description": Nothing, "DiskImageSize": Nothing, "Format": Nothing, "Progress": Nothing, "SnapshotId": Nothing, "Status": Nothing, "StatusMessage": Nothing, "Url": Nothing, "UserBucket": Nothing }



-- | <p>Describes the data feed for a Spot Instance.</p>
newtype SpotDatafeedSubscription = SpotDatafeedSubscription 
  { "Bucket" :: Maybe (String)
  , "Fault" :: Maybe (SpotInstanceStateFault)
  , "OwnerId" :: Maybe (String)
  , "Prefix" :: Maybe (String)
  , "State" :: Maybe (DatafeedSubscriptionState)
  }
derive instance newtypeSpotDatafeedSubscription :: Newtype SpotDatafeedSubscription _
derive instance repGenericSpotDatafeedSubscription :: Generic SpotDatafeedSubscription _
instance showSpotDatafeedSubscription :: Show SpotDatafeedSubscription where show = genericShow
instance decodeSpotDatafeedSubscription :: Decode SpotDatafeedSubscription where decode = genericDecode options
instance encodeSpotDatafeedSubscription :: Encode SpotDatafeedSubscription where encode = genericEncode options

-- | Constructs SpotDatafeedSubscription from required parameters
newSpotDatafeedSubscription :: SpotDatafeedSubscription
newSpotDatafeedSubscription  = SpotDatafeedSubscription { "Bucket": Nothing, "Fault": Nothing, "OwnerId": Nothing, "Prefix": Nothing, "State": Nothing }

-- | Constructs SpotDatafeedSubscription's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newSpotDatafeedSubscription' :: ( { "Bucket" :: Maybe (String) , "Fault" :: Maybe (SpotInstanceStateFault) , "OwnerId" :: Maybe (String) , "Prefix" :: Maybe (String) , "State" :: Maybe (DatafeedSubscriptionState) } -> {"Bucket" :: Maybe (String) , "Fault" :: Maybe (SpotInstanceStateFault) , "OwnerId" :: Maybe (String) , "Prefix" :: Maybe (String) , "State" :: Maybe (DatafeedSubscriptionState) } ) -> SpotDatafeedSubscription
newSpotDatafeedSubscription'  customize = (SpotDatafeedSubscription <<< customize) { "Bucket": Nothing, "Fault": Nothing, "OwnerId": Nothing, "Prefix": Nothing, "State": Nothing }



-- | <p>Describes the launch specification for one or more Spot Instances.</p>
newtype SpotFleetLaunchSpecification = SpotFleetLaunchSpecification 
  { "SecurityGroups" :: Maybe (GroupIdentifierList)
  , "AddressingType" :: Maybe (String)
  , "BlockDeviceMappings" :: Maybe (BlockDeviceMappingList)
  , "EbsOptimized" :: Maybe (Boolean)
  , "IamInstanceProfile" :: Maybe (IamInstanceProfileSpecification)
  , "ImageId" :: Maybe (String)
  , "InstanceType" :: Maybe (InstanceType)
  , "KernelId" :: Maybe (String)
  , "KeyName" :: Maybe (String)
  , "Monitoring" :: Maybe (SpotFleetMonitoring)
  , "NetworkInterfaces" :: Maybe (InstanceNetworkInterfaceSpecificationList)
  , "Placement" :: Maybe (SpotPlacement)
  , "RamdiskId" :: Maybe (String)
  , "SpotPrice" :: Maybe (String)
  , "SubnetId" :: Maybe (String)
  , "UserData" :: Maybe (String)
  , "WeightedCapacity" :: Maybe (Number)
  , "TagSpecifications" :: Maybe (SpotFleetTagSpecificationList)
  }
derive instance newtypeSpotFleetLaunchSpecification :: Newtype SpotFleetLaunchSpecification _
derive instance repGenericSpotFleetLaunchSpecification :: Generic SpotFleetLaunchSpecification _
instance showSpotFleetLaunchSpecification :: Show SpotFleetLaunchSpecification where show = genericShow
instance decodeSpotFleetLaunchSpecification :: Decode SpotFleetLaunchSpecification where decode = genericDecode options
instance encodeSpotFleetLaunchSpecification :: Encode SpotFleetLaunchSpecification where encode = genericEncode options

-- | Constructs SpotFleetLaunchSpecification from required parameters
newSpotFleetLaunchSpecification :: SpotFleetLaunchSpecification
newSpotFleetLaunchSpecification  = SpotFleetLaunchSpecification { "AddressingType": Nothing, "BlockDeviceMappings": Nothing, "EbsOptimized": Nothing, "IamInstanceProfile": Nothing, "ImageId": Nothing, "InstanceType": Nothing, "KernelId": Nothing, "KeyName": Nothing, "Monitoring": Nothing, "NetworkInterfaces": Nothing, "Placement": Nothing, "RamdiskId": Nothing, "SecurityGroups": Nothing, "SpotPrice": Nothing, "SubnetId": Nothing, "TagSpecifications": Nothing, "UserData": Nothing, "WeightedCapacity": Nothing }

-- | Constructs SpotFleetLaunchSpecification's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newSpotFleetLaunchSpecification' :: ( { "SecurityGroups" :: Maybe (GroupIdentifierList) , "AddressingType" :: Maybe (String) , "BlockDeviceMappings" :: Maybe (BlockDeviceMappingList) , "EbsOptimized" :: Maybe (Boolean) , "IamInstanceProfile" :: Maybe (IamInstanceProfileSpecification) , "ImageId" :: Maybe (String) , "InstanceType" :: Maybe (InstanceType) , "KernelId" :: Maybe (String) , "KeyName" :: Maybe (String) , "Monitoring" :: Maybe (SpotFleetMonitoring) , "NetworkInterfaces" :: Maybe (InstanceNetworkInterfaceSpecificationList) , "Placement" :: Maybe (SpotPlacement) , "RamdiskId" :: Maybe (String) , "SpotPrice" :: Maybe (String) , "SubnetId" :: Maybe (String) , "UserData" :: Maybe (String) , "WeightedCapacity" :: Maybe (Number) , "TagSpecifications" :: Maybe (SpotFleetTagSpecificationList) } -> {"SecurityGroups" :: Maybe (GroupIdentifierList) , "AddressingType" :: Maybe (String) , "BlockDeviceMappings" :: Maybe (BlockDeviceMappingList) , "EbsOptimized" :: Maybe (Boolean) , "IamInstanceProfile" :: Maybe (IamInstanceProfileSpecification) , "ImageId" :: Maybe (String) , "InstanceType" :: Maybe (InstanceType) , "KernelId" :: Maybe (String) , "KeyName" :: Maybe (String) , "Monitoring" :: Maybe (SpotFleetMonitoring) , "NetworkInterfaces" :: Maybe (InstanceNetworkInterfaceSpecificationList) , "Placement" :: Maybe (SpotPlacement) , "RamdiskId" :: Maybe (String) , "SpotPrice" :: Maybe (String) , "SubnetId" :: Maybe (String) , "UserData" :: Maybe (String) , "WeightedCapacity" :: Maybe (Number) , "TagSpecifications" :: Maybe (SpotFleetTagSpecificationList) } ) -> SpotFleetLaunchSpecification
newSpotFleetLaunchSpecification'  customize = (SpotFleetLaunchSpecification <<< customize) { "AddressingType": Nothing, "BlockDeviceMappings": Nothing, "EbsOptimized": Nothing, "IamInstanceProfile": Nothing, "ImageId": Nothing, "InstanceType": Nothing, "KernelId": Nothing, "KeyName": Nothing, "Monitoring": Nothing, "NetworkInterfaces": Nothing, "Placement": Nothing, "RamdiskId": Nothing, "SecurityGroups": Nothing, "SpotPrice": Nothing, "SubnetId": Nothing, "TagSpecifications": Nothing, "UserData": Nothing, "WeightedCapacity": Nothing }



-- | <p>Describes whether monitoring is enabled.</p>
newtype SpotFleetMonitoring = SpotFleetMonitoring 
  { "Enabled" :: Maybe (Boolean)
  }
derive instance newtypeSpotFleetMonitoring :: Newtype SpotFleetMonitoring _
derive instance repGenericSpotFleetMonitoring :: Generic SpotFleetMonitoring _
instance showSpotFleetMonitoring :: Show SpotFleetMonitoring where show = genericShow
instance decodeSpotFleetMonitoring :: Decode SpotFleetMonitoring where decode = genericDecode options
instance encodeSpotFleetMonitoring :: Encode SpotFleetMonitoring where encode = genericEncode options

-- | Constructs SpotFleetMonitoring from required parameters
newSpotFleetMonitoring :: SpotFleetMonitoring
newSpotFleetMonitoring  = SpotFleetMonitoring { "Enabled": Nothing }

-- | Constructs SpotFleetMonitoring's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newSpotFleetMonitoring' :: ( { "Enabled" :: Maybe (Boolean) } -> {"Enabled" :: Maybe (Boolean) } ) -> SpotFleetMonitoring
newSpotFleetMonitoring'  customize = (SpotFleetMonitoring <<< customize) { "Enabled": Nothing }



-- | <p>Describes a Spot Fleet request.</p>
newtype SpotFleetRequestConfig = SpotFleetRequestConfig 
  { "ActivityStatus" :: Maybe (ActivityStatus)
  , "CreateTime" :: (DateTime)
  , "SpotFleetRequestConfig" :: (SpotFleetRequestConfigData)
  , "SpotFleetRequestId" :: (String)
  , "SpotFleetRequestState" :: (BatchState)
  }
derive instance newtypeSpotFleetRequestConfig :: Newtype SpotFleetRequestConfig _
derive instance repGenericSpotFleetRequestConfig :: Generic SpotFleetRequestConfig _
instance showSpotFleetRequestConfig :: Show SpotFleetRequestConfig where show = genericShow
instance decodeSpotFleetRequestConfig :: Decode SpotFleetRequestConfig where decode = genericDecode options
instance encodeSpotFleetRequestConfig :: Encode SpotFleetRequestConfig where encode = genericEncode options

-- | Constructs SpotFleetRequestConfig from required parameters
newSpotFleetRequestConfig :: DateTime -> SpotFleetRequestConfigData -> String -> BatchState -> SpotFleetRequestConfig
newSpotFleetRequestConfig _CreateTime _SpotFleetRequestConfig _SpotFleetRequestId _SpotFleetRequestState = SpotFleetRequestConfig { "CreateTime": _CreateTime, "SpotFleetRequestConfig": _SpotFleetRequestConfig, "SpotFleetRequestId": _SpotFleetRequestId, "SpotFleetRequestState": _SpotFleetRequestState, "ActivityStatus": Nothing }

-- | Constructs SpotFleetRequestConfig's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newSpotFleetRequestConfig' :: DateTime -> SpotFleetRequestConfigData -> String -> BatchState -> ( { "ActivityStatus" :: Maybe (ActivityStatus) , "CreateTime" :: (DateTime) , "SpotFleetRequestConfig" :: (SpotFleetRequestConfigData) , "SpotFleetRequestId" :: (String) , "SpotFleetRequestState" :: (BatchState) } -> {"ActivityStatus" :: Maybe (ActivityStatus) , "CreateTime" :: (DateTime) , "SpotFleetRequestConfig" :: (SpotFleetRequestConfigData) , "SpotFleetRequestId" :: (String) , "SpotFleetRequestState" :: (BatchState) } ) -> SpotFleetRequestConfig
newSpotFleetRequestConfig' _CreateTime _SpotFleetRequestConfig _SpotFleetRequestId _SpotFleetRequestState customize = (SpotFleetRequestConfig <<< customize) { "CreateTime": _CreateTime, "SpotFleetRequestConfig": _SpotFleetRequestConfig, "SpotFleetRequestId": _SpotFleetRequestId, "SpotFleetRequestState": _SpotFleetRequestState, "ActivityStatus": Nothing }



-- | <p>Describes the configuration of a Spot Fleet request.</p>
newtype SpotFleetRequestConfigData = SpotFleetRequestConfigData 
  { "AllocationStrategy" :: Maybe (AllocationStrategy)
  , "ClientToken" :: Maybe (String)
  , "ExcessCapacityTerminationPolicy" :: Maybe (ExcessCapacityTerminationPolicy)
  , "FulfilledCapacity" :: Maybe (Number)
  , "IamFleetRole" :: (String)
  , "LaunchSpecifications" :: Maybe (LaunchSpecsList)
  , "LaunchTemplateConfigs" :: Maybe (LaunchTemplateConfigList)
  , "SpotPrice" :: Maybe (String)
  , "TargetCapacity" :: (Int)
  , "TerminateInstancesWithExpiration" :: Maybe (Boolean)
  , "Type" :: Maybe (FleetType)
  , "ValidFrom" :: Maybe (DateTime)
  , "ValidUntil" :: Maybe (DateTime)
  , "ReplaceUnhealthyInstances" :: Maybe (Boolean)
  , "InstanceInterruptionBehavior" :: Maybe (InstanceInterruptionBehavior)
  , "LoadBalancersConfig" :: Maybe (LoadBalancersConfig)
  }
derive instance newtypeSpotFleetRequestConfigData :: Newtype SpotFleetRequestConfigData _
derive instance repGenericSpotFleetRequestConfigData :: Generic SpotFleetRequestConfigData _
instance showSpotFleetRequestConfigData :: Show SpotFleetRequestConfigData where show = genericShow
instance decodeSpotFleetRequestConfigData :: Decode SpotFleetRequestConfigData where decode = genericDecode options
instance encodeSpotFleetRequestConfigData :: Encode SpotFleetRequestConfigData where encode = genericEncode options

-- | Constructs SpotFleetRequestConfigData from required parameters
newSpotFleetRequestConfigData :: String -> Int -> SpotFleetRequestConfigData
newSpotFleetRequestConfigData _IamFleetRole _TargetCapacity = SpotFleetRequestConfigData { "IamFleetRole": _IamFleetRole, "TargetCapacity": _TargetCapacity, "AllocationStrategy": Nothing, "ClientToken": Nothing, "ExcessCapacityTerminationPolicy": Nothing, "FulfilledCapacity": Nothing, "InstanceInterruptionBehavior": Nothing, "LaunchSpecifications": Nothing, "LaunchTemplateConfigs": Nothing, "LoadBalancersConfig": Nothing, "ReplaceUnhealthyInstances": Nothing, "SpotPrice": Nothing, "TerminateInstancesWithExpiration": Nothing, "Type": Nothing, "ValidFrom": Nothing, "ValidUntil": Nothing }

-- | Constructs SpotFleetRequestConfigData's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newSpotFleetRequestConfigData' :: String -> Int -> ( { "AllocationStrategy" :: Maybe (AllocationStrategy) , "ClientToken" :: Maybe (String) , "ExcessCapacityTerminationPolicy" :: Maybe (ExcessCapacityTerminationPolicy) , "FulfilledCapacity" :: Maybe (Number) , "IamFleetRole" :: (String) , "LaunchSpecifications" :: Maybe (LaunchSpecsList) , "LaunchTemplateConfigs" :: Maybe (LaunchTemplateConfigList) , "SpotPrice" :: Maybe (String) , "TargetCapacity" :: (Int) , "TerminateInstancesWithExpiration" :: Maybe (Boolean) , "Type" :: Maybe (FleetType) , "ValidFrom" :: Maybe (DateTime) , "ValidUntil" :: Maybe (DateTime) , "ReplaceUnhealthyInstances" :: Maybe (Boolean) , "InstanceInterruptionBehavior" :: Maybe (InstanceInterruptionBehavior) , "LoadBalancersConfig" :: Maybe (LoadBalancersConfig) } -> {"AllocationStrategy" :: Maybe (AllocationStrategy) , "ClientToken" :: Maybe (String) , "ExcessCapacityTerminationPolicy" :: Maybe (ExcessCapacityTerminationPolicy) , "FulfilledCapacity" :: Maybe (Number) , "IamFleetRole" :: (String) , "LaunchSpecifications" :: Maybe (LaunchSpecsList) , "LaunchTemplateConfigs" :: Maybe (LaunchTemplateConfigList) , "SpotPrice" :: Maybe (String) , "TargetCapacity" :: (Int) , "TerminateInstancesWithExpiration" :: Maybe (Boolean) , "Type" :: Maybe (FleetType) , "ValidFrom" :: Maybe (DateTime) , "ValidUntil" :: Maybe (DateTime) , "ReplaceUnhealthyInstances" :: Maybe (Boolean) , "InstanceInterruptionBehavior" :: Maybe (InstanceInterruptionBehavior) , "LoadBalancersConfig" :: Maybe (LoadBalancersConfig) } ) -> SpotFleetRequestConfigData
newSpotFleetRequestConfigData' _IamFleetRole _TargetCapacity customize = (SpotFleetRequestConfigData <<< customize) { "IamFleetRole": _IamFleetRole, "TargetCapacity": _TargetCapacity, "AllocationStrategy": Nothing, "ClientToken": Nothing, "ExcessCapacityTerminationPolicy": Nothing, "FulfilledCapacity": Nothing, "InstanceInterruptionBehavior": Nothing, "LaunchSpecifications": Nothing, "LaunchTemplateConfigs": Nothing, "LoadBalancersConfig": Nothing, "ReplaceUnhealthyInstances": Nothing, "SpotPrice": Nothing, "TerminateInstancesWithExpiration": Nothing, "Type": Nothing, "ValidFrom": Nothing, "ValidUntil": Nothing }



newtype SpotFleetRequestConfigSet = SpotFleetRequestConfigSet (Array SpotFleetRequestConfig)
derive instance newtypeSpotFleetRequestConfigSet :: Newtype SpotFleetRequestConfigSet _
derive instance repGenericSpotFleetRequestConfigSet :: Generic SpotFleetRequestConfigSet _
instance showSpotFleetRequestConfigSet :: Show SpotFleetRequestConfigSet where show = genericShow
instance decodeSpotFleetRequestConfigSet :: Decode SpotFleetRequestConfigSet where decode = genericDecode options
instance encodeSpotFleetRequestConfigSet :: Encode SpotFleetRequestConfigSet where encode = genericEncode options



-- | <p>The tags for a Spot Fleet resource.</p>
newtype SpotFleetTagSpecification = SpotFleetTagSpecification 
  { "ResourceType" :: Maybe (ResourceType)
  , "Tags" :: Maybe (TagList)
  }
derive instance newtypeSpotFleetTagSpecification :: Newtype SpotFleetTagSpecification _
derive instance repGenericSpotFleetTagSpecification :: Generic SpotFleetTagSpecification _
instance showSpotFleetTagSpecification :: Show SpotFleetTagSpecification where show = genericShow
instance decodeSpotFleetTagSpecification :: Decode SpotFleetTagSpecification where decode = genericDecode options
instance encodeSpotFleetTagSpecification :: Encode SpotFleetTagSpecification where encode = genericEncode options

-- | Constructs SpotFleetTagSpecification from required parameters
newSpotFleetTagSpecification :: SpotFleetTagSpecification
newSpotFleetTagSpecification  = SpotFleetTagSpecification { "ResourceType": Nothing, "Tags": Nothing }

-- | Constructs SpotFleetTagSpecification's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newSpotFleetTagSpecification' :: ( { "ResourceType" :: Maybe (ResourceType) , "Tags" :: Maybe (TagList) } -> {"ResourceType" :: Maybe (ResourceType) , "Tags" :: Maybe (TagList) } ) -> SpotFleetTagSpecification
newSpotFleetTagSpecification'  customize = (SpotFleetTagSpecification <<< customize) { "ResourceType": Nothing, "Tags": Nothing }



newtype SpotFleetTagSpecificationList = SpotFleetTagSpecificationList (Array SpotFleetTagSpecification)
derive instance newtypeSpotFleetTagSpecificationList :: Newtype SpotFleetTagSpecificationList _
derive instance repGenericSpotFleetTagSpecificationList :: Generic SpotFleetTagSpecificationList _
instance showSpotFleetTagSpecificationList :: Show SpotFleetTagSpecificationList where show = genericShow
instance decodeSpotFleetTagSpecificationList :: Decode SpotFleetTagSpecificationList where decode = genericDecode options
instance encodeSpotFleetTagSpecificationList :: Encode SpotFleetTagSpecificationList where encode = genericEncode options



-- | <p>Describes a Spot Instance request.</p>
newtype SpotInstanceRequest = SpotInstanceRequest 
  { "ActualBlockHourlyPrice" :: Maybe (String)
  , "AvailabilityZoneGroup" :: Maybe (String)
  , "BlockDurationMinutes" :: Maybe (Int)
  , "CreateTime" :: Maybe (DateTime)
  , "Fault" :: Maybe (SpotInstanceStateFault)
  , "InstanceId" :: Maybe (String)
  , "LaunchGroup" :: Maybe (String)
  , "LaunchSpecification" :: Maybe (LaunchSpecification)
  , "LaunchedAvailabilityZone" :: Maybe (String)
  , "ProductDescription" :: Maybe (RIProductDescription)
  , "SpotInstanceRequestId" :: Maybe (String)
  , "SpotPrice" :: Maybe (String)
  , "State" :: Maybe (SpotInstanceState)
  , "Status" :: Maybe (SpotInstanceStatus)
  , "Tags" :: Maybe (TagList)
  , "Type" :: Maybe (SpotInstanceType)
  , "ValidFrom" :: Maybe (DateTime)
  , "ValidUntil" :: Maybe (DateTime)
  , "InstanceInterruptionBehavior" :: Maybe (InstanceInterruptionBehavior)
  }
derive instance newtypeSpotInstanceRequest :: Newtype SpotInstanceRequest _
derive instance repGenericSpotInstanceRequest :: Generic SpotInstanceRequest _
instance showSpotInstanceRequest :: Show SpotInstanceRequest where show = genericShow
instance decodeSpotInstanceRequest :: Decode SpotInstanceRequest where decode = genericDecode options
instance encodeSpotInstanceRequest :: Encode SpotInstanceRequest where encode = genericEncode options

-- | Constructs SpotInstanceRequest from required parameters
newSpotInstanceRequest :: SpotInstanceRequest
newSpotInstanceRequest  = SpotInstanceRequest { "ActualBlockHourlyPrice": Nothing, "AvailabilityZoneGroup": Nothing, "BlockDurationMinutes": Nothing, "CreateTime": Nothing, "Fault": Nothing, "InstanceId": Nothing, "InstanceInterruptionBehavior": Nothing, "LaunchGroup": Nothing, "LaunchSpecification": Nothing, "LaunchedAvailabilityZone": Nothing, "ProductDescription": Nothing, "SpotInstanceRequestId": Nothing, "SpotPrice": Nothing, "State": Nothing, "Status": Nothing, "Tags": Nothing, "Type": Nothing, "ValidFrom": Nothing, "ValidUntil": Nothing }

-- | Constructs SpotInstanceRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newSpotInstanceRequest' :: ( { "ActualBlockHourlyPrice" :: Maybe (String) , "AvailabilityZoneGroup" :: Maybe (String) , "BlockDurationMinutes" :: Maybe (Int) , "CreateTime" :: Maybe (DateTime) , "Fault" :: Maybe (SpotInstanceStateFault) , "InstanceId" :: Maybe (String) , "LaunchGroup" :: Maybe (String) , "LaunchSpecification" :: Maybe (LaunchSpecification) , "LaunchedAvailabilityZone" :: Maybe (String) , "ProductDescription" :: Maybe (RIProductDescription) , "SpotInstanceRequestId" :: Maybe (String) , "SpotPrice" :: Maybe (String) , "State" :: Maybe (SpotInstanceState) , "Status" :: Maybe (SpotInstanceStatus) , "Tags" :: Maybe (TagList) , "Type" :: Maybe (SpotInstanceType) , "ValidFrom" :: Maybe (DateTime) , "ValidUntil" :: Maybe (DateTime) , "InstanceInterruptionBehavior" :: Maybe (InstanceInterruptionBehavior) } -> {"ActualBlockHourlyPrice" :: Maybe (String) , "AvailabilityZoneGroup" :: Maybe (String) , "BlockDurationMinutes" :: Maybe (Int) , "CreateTime" :: Maybe (DateTime) , "Fault" :: Maybe (SpotInstanceStateFault) , "InstanceId" :: Maybe (String) , "LaunchGroup" :: Maybe (String) , "LaunchSpecification" :: Maybe (LaunchSpecification) , "LaunchedAvailabilityZone" :: Maybe (String) , "ProductDescription" :: Maybe (RIProductDescription) , "SpotInstanceRequestId" :: Maybe (String) , "SpotPrice" :: Maybe (String) , "State" :: Maybe (SpotInstanceState) , "Status" :: Maybe (SpotInstanceStatus) , "Tags" :: Maybe (TagList) , "Type" :: Maybe (SpotInstanceType) , "ValidFrom" :: Maybe (DateTime) , "ValidUntil" :: Maybe (DateTime) , "InstanceInterruptionBehavior" :: Maybe (InstanceInterruptionBehavior) } ) -> SpotInstanceRequest
newSpotInstanceRequest'  customize = (SpotInstanceRequest <<< customize) { "ActualBlockHourlyPrice": Nothing, "AvailabilityZoneGroup": Nothing, "BlockDurationMinutes": Nothing, "CreateTime": Nothing, "Fault": Nothing, "InstanceId": Nothing, "InstanceInterruptionBehavior": Nothing, "LaunchGroup": Nothing, "LaunchSpecification": Nothing, "LaunchedAvailabilityZone": Nothing, "ProductDescription": Nothing, "SpotInstanceRequestId": Nothing, "SpotPrice": Nothing, "State": Nothing, "Status": Nothing, "Tags": Nothing, "Type": Nothing, "ValidFrom": Nothing, "ValidUntil": Nothing }



newtype SpotInstanceRequestIdList = SpotInstanceRequestIdList (Array String)
derive instance newtypeSpotInstanceRequestIdList :: Newtype SpotInstanceRequestIdList _
derive instance repGenericSpotInstanceRequestIdList :: Generic SpotInstanceRequestIdList _
instance showSpotInstanceRequestIdList :: Show SpotInstanceRequestIdList where show = genericShow
instance decodeSpotInstanceRequestIdList :: Decode SpotInstanceRequestIdList where decode = genericDecode options
instance encodeSpotInstanceRequestIdList :: Encode SpotInstanceRequestIdList where encode = genericEncode options



newtype SpotInstanceRequestList = SpotInstanceRequestList (Array SpotInstanceRequest)
derive instance newtypeSpotInstanceRequestList :: Newtype SpotInstanceRequestList _
derive instance repGenericSpotInstanceRequestList :: Generic SpotInstanceRequestList _
instance showSpotInstanceRequestList :: Show SpotInstanceRequestList where show = genericShow
instance decodeSpotInstanceRequestList :: Decode SpotInstanceRequestList where decode = genericDecode options
instance encodeSpotInstanceRequestList :: Encode SpotInstanceRequestList where encode = genericEncode options



newtype SpotInstanceState = SpotInstanceState String
derive instance newtypeSpotInstanceState :: Newtype SpotInstanceState _
derive instance repGenericSpotInstanceState :: Generic SpotInstanceState _
instance showSpotInstanceState :: Show SpotInstanceState where show = genericShow
instance decodeSpotInstanceState :: Decode SpotInstanceState where decode = genericDecode options
instance encodeSpotInstanceState :: Encode SpotInstanceState where encode = genericEncode options



-- | <p>Describes a Spot Instance state change.</p>
newtype SpotInstanceStateFault = SpotInstanceStateFault 
  { "Code" :: Maybe (String)
  , "Message" :: Maybe (String)
  }
derive instance newtypeSpotInstanceStateFault :: Newtype SpotInstanceStateFault _
derive instance repGenericSpotInstanceStateFault :: Generic SpotInstanceStateFault _
instance showSpotInstanceStateFault :: Show SpotInstanceStateFault where show = genericShow
instance decodeSpotInstanceStateFault :: Decode SpotInstanceStateFault where decode = genericDecode options
instance encodeSpotInstanceStateFault :: Encode SpotInstanceStateFault where encode = genericEncode options

-- | Constructs SpotInstanceStateFault from required parameters
newSpotInstanceStateFault :: SpotInstanceStateFault
newSpotInstanceStateFault  = SpotInstanceStateFault { "Code": Nothing, "Message": Nothing }

-- | Constructs SpotInstanceStateFault's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newSpotInstanceStateFault' :: ( { "Code" :: Maybe (String) , "Message" :: Maybe (String) } -> {"Code" :: Maybe (String) , "Message" :: Maybe (String) } ) -> SpotInstanceStateFault
newSpotInstanceStateFault'  customize = (SpotInstanceStateFault <<< customize) { "Code": Nothing, "Message": Nothing }



-- | <p>Describes the status of a Spot Instance request.</p>
newtype SpotInstanceStatus = SpotInstanceStatus 
  { "Code" :: Maybe (String)
  , "Message" :: Maybe (String)
  , "UpdateTime" :: Maybe (DateTime)
  }
derive instance newtypeSpotInstanceStatus :: Newtype SpotInstanceStatus _
derive instance repGenericSpotInstanceStatus :: Generic SpotInstanceStatus _
instance showSpotInstanceStatus :: Show SpotInstanceStatus where show = genericShow
instance decodeSpotInstanceStatus :: Decode SpotInstanceStatus where decode = genericDecode options
instance encodeSpotInstanceStatus :: Encode SpotInstanceStatus where encode = genericEncode options

-- | Constructs SpotInstanceStatus from required parameters
newSpotInstanceStatus :: SpotInstanceStatus
newSpotInstanceStatus  = SpotInstanceStatus { "Code": Nothing, "Message": Nothing, "UpdateTime": Nothing }

-- | Constructs SpotInstanceStatus's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newSpotInstanceStatus' :: ( { "Code" :: Maybe (String) , "Message" :: Maybe (String) , "UpdateTime" :: Maybe (DateTime) } -> {"Code" :: Maybe (String) , "Message" :: Maybe (String) , "UpdateTime" :: Maybe (DateTime) } ) -> SpotInstanceStatus
newSpotInstanceStatus'  customize = (SpotInstanceStatus <<< customize) { "Code": Nothing, "Message": Nothing, "UpdateTime": Nothing }



newtype SpotInstanceType = SpotInstanceType String
derive instance newtypeSpotInstanceType :: Newtype SpotInstanceType _
derive instance repGenericSpotInstanceType :: Generic SpotInstanceType _
instance showSpotInstanceType :: Show SpotInstanceType where show = genericShow
instance decodeSpotInstanceType :: Decode SpotInstanceType where decode = genericDecode options
instance encodeSpotInstanceType :: Encode SpotInstanceType where encode = genericEncode options



-- | <p>The options for Spot Instances.</p>
newtype SpotMarketOptions = SpotMarketOptions 
  { "MaxPrice" :: Maybe (String)
  , "SpotInstanceType" :: Maybe (SpotInstanceType)
  , "BlockDurationMinutes" :: Maybe (Int)
  , "ValidUntil" :: Maybe (DateTime)
  , "InstanceInterruptionBehavior" :: Maybe (InstanceInterruptionBehavior)
  }
derive instance newtypeSpotMarketOptions :: Newtype SpotMarketOptions _
derive instance repGenericSpotMarketOptions :: Generic SpotMarketOptions _
instance showSpotMarketOptions :: Show SpotMarketOptions where show = genericShow
instance decodeSpotMarketOptions :: Decode SpotMarketOptions where decode = genericDecode options
instance encodeSpotMarketOptions :: Encode SpotMarketOptions where encode = genericEncode options

-- | Constructs SpotMarketOptions from required parameters
newSpotMarketOptions :: SpotMarketOptions
newSpotMarketOptions  = SpotMarketOptions { "BlockDurationMinutes": Nothing, "InstanceInterruptionBehavior": Nothing, "MaxPrice": Nothing, "SpotInstanceType": Nothing, "ValidUntil": Nothing }

-- | Constructs SpotMarketOptions's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newSpotMarketOptions' :: ( { "MaxPrice" :: Maybe (String) , "SpotInstanceType" :: Maybe (SpotInstanceType) , "BlockDurationMinutes" :: Maybe (Int) , "ValidUntil" :: Maybe (DateTime) , "InstanceInterruptionBehavior" :: Maybe (InstanceInterruptionBehavior) } -> {"MaxPrice" :: Maybe (String) , "SpotInstanceType" :: Maybe (SpotInstanceType) , "BlockDurationMinutes" :: Maybe (Int) , "ValidUntil" :: Maybe (DateTime) , "InstanceInterruptionBehavior" :: Maybe (InstanceInterruptionBehavior) } ) -> SpotMarketOptions
newSpotMarketOptions'  customize = (SpotMarketOptions <<< customize) { "BlockDurationMinutes": Nothing, "InstanceInterruptionBehavior": Nothing, "MaxPrice": Nothing, "SpotInstanceType": Nothing, "ValidUntil": Nothing }



-- | <p>Describes Spot Instance placement.</p>
newtype SpotPlacement = SpotPlacement 
  { "AvailabilityZone" :: Maybe (String)
  , "GroupName" :: Maybe (String)
  , "Tenancy" :: Maybe (Tenancy)
  }
derive instance newtypeSpotPlacement :: Newtype SpotPlacement _
derive instance repGenericSpotPlacement :: Generic SpotPlacement _
instance showSpotPlacement :: Show SpotPlacement where show = genericShow
instance decodeSpotPlacement :: Decode SpotPlacement where decode = genericDecode options
instance encodeSpotPlacement :: Encode SpotPlacement where encode = genericEncode options

-- | Constructs SpotPlacement from required parameters
newSpotPlacement :: SpotPlacement
newSpotPlacement  = SpotPlacement { "AvailabilityZone": Nothing, "GroupName": Nothing, "Tenancy": Nothing }

-- | Constructs SpotPlacement's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newSpotPlacement' :: ( { "AvailabilityZone" :: Maybe (String) , "GroupName" :: Maybe (String) , "Tenancy" :: Maybe (Tenancy) } -> {"AvailabilityZone" :: Maybe (String) , "GroupName" :: Maybe (String) , "Tenancy" :: Maybe (Tenancy) } ) -> SpotPlacement
newSpotPlacement'  customize = (SpotPlacement <<< customize) { "AvailabilityZone": Nothing, "GroupName": Nothing, "Tenancy": Nothing }



-- | <p>Describes the maximum price per hour that you are willing to pay for a Spot Instance.</p>
newtype SpotPrice = SpotPrice 
  { "AvailabilityZone" :: Maybe (String)
  , "InstanceType" :: Maybe (InstanceType)
  , "ProductDescription" :: Maybe (RIProductDescription)
  , "SpotPrice" :: Maybe (String)
  , "Timestamp" :: Maybe (DateTime)
  }
derive instance newtypeSpotPrice :: Newtype SpotPrice _
derive instance repGenericSpotPrice :: Generic SpotPrice _
instance showSpotPrice :: Show SpotPrice where show = genericShow
instance decodeSpotPrice :: Decode SpotPrice where decode = genericDecode options
instance encodeSpotPrice :: Encode SpotPrice where encode = genericEncode options

-- | Constructs SpotPrice from required parameters
newSpotPrice :: SpotPrice
newSpotPrice  = SpotPrice { "AvailabilityZone": Nothing, "InstanceType": Nothing, "ProductDescription": Nothing, "SpotPrice": Nothing, "Timestamp": Nothing }

-- | Constructs SpotPrice's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newSpotPrice' :: ( { "AvailabilityZone" :: Maybe (String) , "InstanceType" :: Maybe (InstanceType) , "ProductDescription" :: Maybe (RIProductDescription) , "SpotPrice" :: Maybe (String) , "Timestamp" :: Maybe (DateTime) } -> {"AvailabilityZone" :: Maybe (String) , "InstanceType" :: Maybe (InstanceType) , "ProductDescription" :: Maybe (RIProductDescription) , "SpotPrice" :: Maybe (String) , "Timestamp" :: Maybe (DateTime) } ) -> SpotPrice
newSpotPrice'  customize = (SpotPrice <<< customize) { "AvailabilityZone": Nothing, "InstanceType": Nothing, "ProductDescription": Nothing, "SpotPrice": Nothing, "Timestamp": Nothing }



newtype SpotPriceHistoryList = SpotPriceHistoryList (Array SpotPrice)
derive instance newtypeSpotPriceHistoryList :: Newtype SpotPriceHistoryList _
derive instance repGenericSpotPriceHistoryList :: Generic SpotPriceHistoryList _
instance showSpotPriceHistoryList :: Show SpotPriceHistoryList where show = genericShow
instance decodeSpotPriceHistoryList :: Decode SpotPriceHistoryList where decode = genericDecode options
instance encodeSpotPriceHistoryList :: Encode SpotPriceHistoryList where encode = genericEncode options



-- | <p>Describes a stale rule in a security group.</p>
newtype StaleIpPermission = StaleIpPermission 
  { "FromPort" :: Maybe (Int)
  , "IpProtocol" :: Maybe (String)
  , "IpRanges" :: Maybe (IpRanges)
  , "PrefixListIds" :: Maybe (PrefixListIdSet)
  , "ToPort" :: Maybe (Int)
  , "UserIdGroupPairs" :: Maybe (UserIdGroupPairSet)
  }
derive instance newtypeStaleIpPermission :: Newtype StaleIpPermission _
derive instance repGenericStaleIpPermission :: Generic StaleIpPermission _
instance showStaleIpPermission :: Show StaleIpPermission where show = genericShow
instance decodeStaleIpPermission :: Decode StaleIpPermission where decode = genericDecode options
instance encodeStaleIpPermission :: Encode StaleIpPermission where encode = genericEncode options

-- | Constructs StaleIpPermission from required parameters
newStaleIpPermission :: StaleIpPermission
newStaleIpPermission  = StaleIpPermission { "FromPort": Nothing, "IpProtocol": Nothing, "IpRanges": Nothing, "PrefixListIds": Nothing, "ToPort": Nothing, "UserIdGroupPairs": Nothing }

-- | Constructs StaleIpPermission's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newStaleIpPermission' :: ( { "FromPort" :: Maybe (Int) , "IpProtocol" :: Maybe (String) , "IpRanges" :: Maybe (IpRanges) , "PrefixListIds" :: Maybe (PrefixListIdSet) , "ToPort" :: Maybe (Int) , "UserIdGroupPairs" :: Maybe (UserIdGroupPairSet) } -> {"FromPort" :: Maybe (Int) , "IpProtocol" :: Maybe (String) , "IpRanges" :: Maybe (IpRanges) , "PrefixListIds" :: Maybe (PrefixListIdSet) , "ToPort" :: Maybe (Int) , "UserIdGroupPairs" :: Maybe (UserIdGroupPairSet) } ) -> StaleIpPermission
newStaleIpPermission'  customize = (StaleIpPermission <<< customize) { "FromPort": Nothing, "IpProtocol": Nothing, "IpRanges": Nothing, "PrefixListIds": Nothing, "ToPort": Nothing, "UserIdGroupPairs": Nothing }



newtype StaleIpPermissionSet = StaleIpPermissionSet (Array StaleIpPermission)
derive instance newtypeStaleIpPermissionSet :: Newtype StaleIpPermissionSet _
derive instance repGenericStaleIpPermissionSet :: Generic StaleIpPermissionSet _
instance showStaleIpPermissionSet :: Show StaleIpPermissionSet where show = genericShow
instance decodeStaleIpPermissionSet :: Decode StaleIpPermissionSet where decode = genericDecode options
instance encodeStaleIpPermissionSet :: Encode StaleIpPermissionSet where encode = genericEncode options



-- | <p>Describes a stale security group (a security group that contains stale rules).</p>
newtype StaleSecurityGroup = StaleSecurityGroup 
  { "Description" :: Maybe (String)
  , "GroupId" :: (String)
  , "GroupName" :: Maybe (String)
  , "StaleIpPermissions" :: Maybe (StaleIpPermissionSet)
  , "StaleIpPermissionsEgress" :: Maybe (StaleIpPermissionSet)
  , "VpcId" :: Maybe (String)
  }
derive instance newtypeStaleSecurityGroup :: Newtype StaleSecurityGroup _
derive instance repGenericStaleSecurityGroup :: Generic StaleSecurityGroup _
instance showStaleSecurityGroup :: Show StaleSecurityGroup where show = genericShow
instance decodeStaleSecurityGroup :: Decode StaleSecurityGroup where decode = genericDecode options
instance encodeStaleSecurityGroup :: Encode StaleSecurityGroup where encode = genericEncode options

-- | Constructs StaleSecurityGroup from required parameters
newStaleSecurityGroup :: String -> StaleSecurityGroup
newStaleSecurityGroup _GroupId = StaleSecurityGroup { "GroupId": _GroupId, "Description": Nothing, "GroupName": Nothing, "StaleIpPermissions": Nothing, "StaleIpPermissionsEgress": Nothing, "VpcId": Nothing }

-- | Constructs StaleSecurityGroup's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newStaleSecurityGroup' :: String -> ( { "Description" :: Maybe (String) , "GroupId" :: (String) , "GroupName" :: Maybe (String) , "StaleIpPermissions" :: Maybe (StaleIpPermissionSet) , "StaleIpPermissionsEgress" :: Maybe (StaleIpPermissionSet) , "VpcId" :: Maybe (String) } -> {"Description" :: Maybe (String) , "GroupId" :: (String) , "GroupName" :: Maybe (String) , "StaleIpPermissions" :: Maybe (StaleIpPermissionSet) , "StaleIpPermissionsEgress" :: Maybe (StaleIpPermissionSet) , "VpcId" :: Maybe (String) } ) -> StaleSecurityGroup
newStaleSecurityGroup' _GroupId customize = (StaleSecurityGroup <<< customize) { "GroupId": _GroupId, "Description": Nothing, "GroupName": Nothing, "StaleIpPermissions": Nothing, "StaleIpPermissionsEgress": Nothing, "VpcId": Nothing }



newtype StaleSecurityGroupSet = StaleSecurityGroupSet (Array StaleSecurityGroup)
derive instance newtypeStaleSecurityGroupSet :: Newtype StaleSecurityGroupSet _
derive instance repGenericStaleSecurityGroupSet :: Generic StaleSecurityGroupSet _
instance showStaleSecurityGroupSet :: Show StaleSecurityGroupSet where show = genericShow
instance decodeStaleSecurityGroupSet :: Decode StaleSecurityGroupSet where decode = genericDecode options
instance encodeStaleSecurityGroupSet :: Encode StaleSecurityGroupSet where encode = genericEncode options



-- | <p>Contains the parameters for StartInstances.</p>
newtype StartInstancesRequest = StartInstancesRequest 
  { "InstanceIds" :: (InstanceIdStringList)
  , "AdditionalInfo" :: Maybe (String)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeStartInstancesRequest :: Newtype StartInstancesRequest _
derive instance repGenericStartInstancesRequest :: Generic StartInstancesRequest _
instance showStartInstancesRequest :: Show StartInstancesRequest where show = genericShow
instance decodeStartInstancesRequest :: Decode StartInstancesRequest where decode = genericDecode options
instance encodeStartInstancesRequest :: Encode StartInstancesRequest where encode = genericEncode options

-- | Constructs StartInstancesRequest from required parameters
newStartInstancesRequest :: InstanceIdStringList -> StartInstancesRequest
newStartInstancesRequest _InstanceIds = StartInstancesRequest { "InstanceIds": _InstanceIds, "AdditionalInfo": Nothing, "DryRun": Nothing }

-- | Constructs StartInstancesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newStartInstancesRequest' :: InstanceIdStringList -> ( { "InstanceIds" :: (InstanceIdStringList) , "AdditionalInfo" :: Maybe (String) , "DryRun" :: Maybe (Boolean) } -> {"InstanceIds" :: (InstanceIdStringList) , "AdditionalInfo" :: Maybe (String) , "DryRun" :: Maybe (Boolean) } ) -> StartInstancesRequest
newStartInstancesRequest' _InstanceIds customize = (StartInstancesRequest <<< customize) { "InstanceIds": _InstanceIds, "AdditionalInfo": Nothing, "DryRun": Nothing }



-- | <p>Contains the output of StartInstances.</p>
newtype StartInstancesResult = StartInstancesResult 
  { "StartingInstances" :: Maybe (InstanceStateChangeList)
  }
derive instance newtypeStartInstancesResult :: Newtype StartInstancesResult _
derive instance repGenericStartInstancesResult :: Generic StartInstancesResult _
instance showStartInstancesResult :: Show StartInstancesResult where show = genericShow
instance decodeStartInstancesResult :: Decode StartInstancesResult where decode = genericDecode options
instance encodeStartInstancesResult :: Encode StartInstancesResult where encode = genericEncode options

-- | Constructs StartInstancesResult from required parameters
newStartInstancesResult :: StartInstancesResult
newStartInstancesResult  = StartInstancesResult { "StartingInstances": Nothing }

-- | Constructs StartInstancesResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newStartInstancesResult' :: ( { "StartingInstances" :: Maybe (InstanceStateChangeList) } -> {"StartingInstances" :: Maybe (InstanceStateChangeList) } ) -> StartInstancesResult
newStartInstancesResult'  customize = (StartInstancesResult <<< customize) { "StartingInstances": Nothing }



newtype State = State String
derive instance newtypeState :: Newtype State _
derive instance repGenericState :: Generic State _
instance showState :: Show State where show = genericShow
instance decodeState :: Decode State where decode = genericDecode options
instance encodeState :: Encode State where encode = genericEncode options



-- | <p>Describes a state change.</p>
newtype StateReason = StateReason 
  { "Code" :: Maybe (String)
  , "Message" :: Maybe (String)
  }
derive instance newtypeStateReason :: Newtype StateReason _
derive instance repGenericStateReason :: Generic StateReason _
instance showStateReason :: Show StateReason where show = genericShow
instance decodeStateReason :: Decode StateReason where decode = genericDecode options
instance encodeStateReason :: Encode StateReason where encode = genericEncode options

-- | Constructs StateReason from required parameters
newStateReason :: StateReason
newStateReason  = StateReason { "Code": Nothing, "Message": Nothing }

-- | Constructs StateReason's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newStateReason' :: ( { "Code" :: Maybe (String) , "Message" :: Maybe (String) } -> {"Code" :: Maybe (String) , "Message" :: Maybe (String) } ) -> StateReason
newStateReason'  customize = (StateReason <<< customize) { "Code": Nothing, "Message": Nothing }



newtype Status = Status String
derive instance newtypeStatus :: Newtype Status _
derive instance repGenericStatus :: Generic Status _
instance showStatus :: Show Status where show = genericShow
instance decodeStatus :: Decode Status where decode = genericDecode options
instance encodeStatus :: Encode Status where encode = genericEncode options



newtype StatusName = StatusName String
derive instance newtypeStatusName :: Newtype StatusName _
derive instance repGenericStatusName :: Generic StatusName _
instance showStatusName :: Show StatusName where show = genericShow
instance decodeStatusName :: Decode StatusName where decode = genericDecode options
instance encodeStatusName :: Encode StatusName where encode = genericEncode options



newtype StatusType = StatusType String
derive instance newtypeStatusType :: Newtype StatusType _
derive instance repGenericStatusType :: Generic StatusType _
instance showStatusType :: Show StatusType where show = genericShow
instance decodeStatusType :: Decode StatusType where decode = genericDecode options
instance encodeStatusType :: Encode StatusType where encode = genericEncode options



-- | <p>Contains the parameters for StopInstances.</p>
newtype StopInstancesRequest = StopInstancesRequest 
  { "InstanceIds" :: (InstanceIdStringList)
  , "DryRun" :: Maybe (Boolean)
  , "Force" :: Maybe (Boolean)
  }
derive instance newtypeStopInstancesRequest :: Newtype StopInstancesRequest _
derive instance repGenericStopInstancesRequest :: Generic StopInstancesRequest _
instance showStopInstancesRequest :: Show StopInstancesRequest where show = genericShow
instance decodeStopInstancesRequest :: Decode StopInstancesRequest where decode = genericDecode options
instance encodeStopInstancesRequest :: Encode StopInstancesRequest where encode = genericEncode options

-- | Constructs StopInstancesRequest from required parameters
newStopInstancesRequest :: InstanceIdStringList -> StopInstancesRequest
newStopInstancesRequest _InstanceIds = StopInstancesRequest { "InstanceIds": _InstanceIds, "DryRun": Nothing, "Force": Nothing }

-- | Constructs StopInstancesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newStopInstancesRequest' :: InstanceIdStringList -> ( { "InstanceIds" :: (InstanceIdStringList) , "DryRun" :: Maybe (Boolean) , "Force" :: Maybe (Boolean) } -> {"InstanceIds" :: (InstanceIdStringList) , "DryRun" :: Maybe (Boolean) , "Force" :: Maybe (Boolean) } ) -> StopInstancesRequest
newStopInstancesRequest' _InstanceIds customize = (StopInstancesRequest <<< customize) { "InstanceIds": _InstanceIds, "DryRun": Nothing, "Force": Nothing }



-- | <p>Contains the output of StopInstances.</p>
newtype StopInstancesResult = StopInstancesResult 
  { "StoppingInstances" :: Maybe (InstanceStateChangeList)
  }
derive instance newtypeStopInstancesResult :: Newtype StopInstancesResult _
derive instance repGenericStopInstancesResult :: Generic StopInstancesResult _
instance showStopInstancesResult :: Show StopInstancesResult where show = genericShow
instance decodeStopInstancesResult :: Decode StopInstancesResult where decode = genericDecode options
instance encodeStopInstancesResult :: Encode StopInstancesResult where encode = genericEncode options

-- | Constructs StopInstancesResult from required parameters
newStopInstancesResult :: StopInstancesResult
newStopInstancesResult  = StopInstancesResult { "StoppingInstances": Nothing }

-- | Constructs StopInstancesResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newStopInstancesResult' :: ( { "StoppingInstances" :: Maybe (InstanceStateChangeList) } -> {"StoppingInstances" :: Maybe (InstanceStateChangeList) } ) -> StopInstancesResult
newStopInstancesResult'  customize = (StopInstancesResult <<< customize) { "StoppingInstances": Nothing }



-- | <p>Describes the storage location for an instance store-backed AMI.</p>
newtype Storage = Storage 
  { "S3" :: Maybe (S3Storage)
  }
derive instance newtypeStorage :: Newtype Storage _
derive instance repGenericStorage :: Generic Storage _
instance showStorage :: Show Storage where show = genericShow
instance decodeStorage :: Decode Storage where decode = genericDecode options
instance encodeStorage :: Encode Storage where encode = genericEncode options

-- | Constructs Storage from required parameters
newStorage :: Storage
newStorage  = Storage { "S3": Nothing }

-- | Constructs Storage's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newStorage' :: ( { "S3" :: Maybe (S3Storage) } -> {"S3" :: Maybe (S3Storage) } ) -> Storage
newStorage'  customize = (Storage <<< customize) { "S3": Nothing }



-- | <p>Describes a storage location in Amazon S3.</p>
newtype StorageLocation = StorageLocation 
  { "Bucket" :: Maybe (String)
  , "Key" :: Maybe (String)
  }
derive instance newtypeStorageLocation :: Newtype StorageLocation _
derive instance repGenericStorageLocation :: Generic StorageLocation _
instance showStorageLocation :: Show StorageLocation where show = genericShow
instance decodeStorageLocation :: Decode StorageLocation where decode = genericDecode options
instance encodeStorageLocation :: Encode StorageLocation where encode = genericEncode options

-- | Constructs StorageLocation from required parameters
newStorageLocation :: StorageLocation
newStorageLocation  = StorageLocation { "Bucket": Nothing, "Key": Nothing }

-- | Constructs StorageLocation's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newStorageLocation' :: ( { "Bucket" :: Maybe (String) , "Key" :: Maybe (String) } -> {"Bucket" :: Maybe (String) , "Key" :: Maybe (String) } ) -> StorageLocation
newStorageLocation'  customize = (StorageLocation <<< customize) { "Bucket": Nothing, "Key": Nothing }



-- | <p>Describes a subnet.</p>
newtype Subnet = Subnet 
  { "AvailabilityZone" :: Maybe (String)
  , "AvailableIpAddressCount" :: Maybe (Int)
  , "CidrBlock" :: Maybe (String)
  , "DefaultForAz" :: Maybe (Boolean)
  , "MapPublicIpOnLaunch" :: Maybe (Boolean)
  , "State" :: Maybe (SubnetState)
  , "SubnetId" :: Maybe (String)
  , "VpcId" :: Maybe (String)
  , "AssignIpv6AddressOnCreation" :: Maybe (Boolean)
  , "Ipv6CidrBlockAssociationSet" :: Maybe (SubnetIpv6CidrBlockAssociationSet)
  , "Tags" :: Maybe (TagList)
  }
derive instance newtypeSubnet :: Newtype Subnet _
derive instance repGenericSubnet :: Generic Subnet _
instance showSubnet :: Show Subnet where show = genericShow
instance decodeSubnet :: Decode Subnet where decode = genericDecode options
instance encodeSubnet :: Encode Subnet where encode = genericEncode options

-- | Constructs Subnet from required parameters
newSubnet :: Subnet
newSubnet  = Subnet { "AssignIpv6AddressOnCreation": Nothing, "AvailabilityZone": Nothing, "AvailableIpAddressCount": Nothing, "CidrBlock": Nothing, "DefaultForAz": Nothing, "Ipv6CidrBlockAssociationSet": Nothing, "MapPublicIpOnLaunch": Nothing, "State": Nothing, "SubnetId": Nothing, "Tags": Nothing, "VpcId": Nothing }

-- | Constructs Subnet's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newSubnet' :: ( { "AvailabilityZone" :: Maybe (String) , "AvailableIpAddressCount" :: Maybe (Int) , "CidrBlock" :: Maybe (String) , "DefaultForAz" :: Maybe (Boolean) , "MapPublicIpOnLaunch" :: Maybe (Boolean) , "State" :: Maybe (SubnetState) , "SubnetId" :: Maybe (String) , "VpcId" :: Maybe (String) , "AssignIpv6AddressOnCreation" :: Maybe (Boolean) , "Ipv6CidrBlockAssociationSet" :: Maybe (SubnetIpv6CidrBlockAssociationSet) , "Tags" :: Maybe (TagList) } -> {"AvailabilityZone" :: Maybe (String) , "AvailableIpAddressCount" :: Maybe (Int) , "CidrBlock" :: Maybe (String) , "DefaultForAz" :: Maybe (Boolean) , "MapPublicIpOnLaunch" :: Maybe (Boolean) , "State" :: Maybe (SubnetState) , "SubnetId" :: Maybe (String) , "VpcId" :: Maybe (String) , "AssignIpv6AddressOnCreation" :: Maybe (Boolean) , "Ipv6CidrBlockAssociationSet" :: Maybe (SubnetIpv6CidrBlockAssociationSet) , "Tags" :: Maybe (TagList) } ) -> Subnet
newSubnet'  customize = (Subnet <<< customize) { "AssignIpv6AddressOnCreation": Nothing, "AvailabilityZone": Nothing, "AvailableIpAddressCount": Nothing, "CidrBlock": Nothing, "DefaultForAz": Nothing, "Ipv6CidrBlockAssociationSet": Nothing, "MapPublicIpOnLaunch": Nothing, "State": Nothing, "SubnetId": Nothing, "Tags": Nothing, "VpcId": Nothing }



-- | <p>Describes the state of a CIDR block.</p>
newtype SubnetCidrBlockState = SubnetCidrBlockState 
  { "State" :: Maybe (SubnetCidrBlockStateCode)
  , "StatusMessage" :: Maybe (String)
  }
derive instance newtypeSubnetCidrBlockState :: Newtype SubnetCidrBlockState _
derive instance repGenericSubnetCidrBlockState :: Generic SubnetCidrBlockState _
instance showSubnetCidrBlockState :: Show SubnetCidrBlockState where show = genericShow
instance decodeSubnetCidrBlockState :: Decode SubnetCidrBlockState where decode = genericDecode options
instance encodeSubnetCidrBlockState :: Encode SubnetCidrBlockState where encode = genericEncode options

-- | Constructs SubnetCidrBlockState from required parameters
newSubnetCidrBlockState :: SubnetCidrBlockState
newSubnetCidrBlockState  = SubnetCidrBlockState { "State": Nothing, "StatusMessage": Nothing }

-- | Constructs SubnetCidrBlockState's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newSubnetCidrBlockState' :: ( { "State" :: Maybe (SubnetCidrBlockStateCode) , "StatusMessage" :: Maybe (String) } -> {"State" :: Maybe (SubnetCidrBlockStateCode) , "StatusMessage" :: Maybe (String) } ) -> SubnetCidrBlockState
newSubnetCidrBlockState'  customize = (SubnetCidrBlockState <<< customize) { "State": Nothing, "StatusMessage": Nothing }



newtype SubnetCidrBlockStateCode = SubnetCidrBlockStateCode String
derive instance newtypeSubnetCidrBlockStateCode :: Newtype SubnetCidrBlockStateCode _
derive instance repGenericSubnetCidrBlockStateCode :: Generic SubnetCidrBlockStateCode _
instance showSubnetCidrBlockStateCode :: Show SubnetCidrBlockStateCode where show = genericShow
instance decodeSubnetCidrBlockStateCode :: Decode SubnetCidrBlockStateCode where decode = genericDecode options
instance encodeSubnetCidrBlockStateCode :: Encode SubnetCidrBlockStateCode where encode = genericEncode options



newtype SubnetIdStringList = SubnetIdStringList (Array String)
derive instance newtypeSubnetIdStringList :: Newtype SubnetIdStringList _
derive instance repGenericSubnetIdStringList :: Generic SubnetIdStringList _
instance showSubnetIdStringList :: Show SubnetIdStringList where show = genericShow
instance decodeSubnetIdStringList :: Decode SubnetIdStringList where decode = genericDecode options
instance encodeSubnetIdStringList :: Encode SubnetIdStringList where encode = genericEncode options



-- | <p>Describes an IPv6 CIDR block associated with a subnet.</p>
newtype SubnetIpv6CidrBlockAssociation = SubnetIpv6CidrBlockAssociation 
  { "AssociationId" :: Maybe (String)
  , "Ipv6CidrBlock" :: Maybe (String)
  , "Ipv6CidrBlockState" :: Maybe (SubnetCidrBlockState)
  }
derive instance newtypeSubnetIpv6CidrBlockAssociation :: Newtype SubnetIpv6CidrBlockAssociation _
derive instance repGenericSubnetIpv6CidrBlockAssociation :: Generic SubnetIpv6CidrBlockAssociation _
instance showSubnetIpv6CidrBlockAssociation :: Show SubnetIpv6CidrBlockAssociation where show = genericShow
instance decodeSubnetIpv6CidrBlockAssociation :: Decode SubnetIpv6CidrBlockAssociation where decode = genericDecode options
instance encodeSubnetIpv6CidrBlockAssociation :: Encode SubnetIpv6CidrBlockAssociation where encode = genericEncode options

-- | Constructs SubnetIpv6CidrBlockAssociation from required parameters
newSubnetIpv6CidrBlockAssociation :: SubnetIpv6CidrBlockAssociation
newSubnetIpv6CidrBlockAssociation  = SubnetIpv6CidrBlockAssociation { "AssociationId": Nothing, "Ipv6CidrBlock": Nothing, "Ipv6CidrBlockState": Nothing }

-- | Constructs SubnetIpv6CidrBlockAssociation's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newSubnetIpv6CidrBlockAssociation' :: ( { "AssociationId" :: Maybe (String) , "Ipv6CidrBlock" :: Maybe (String) , "Ipv6CidrBlockState" :: Maybe (SubnetCidrBlockState) } -> {"AssociationId" :: Maybe (String) , "Ipv6CidrBlock" :: Maybe (String) , "Ipv6CidrBlockState" :: Maybe (SubnetCidrBlockState) } ) -> SubnetIpv6CidrBlockAssociation
newSubnetIpv6CidrBlockAssociation'  customize = (SubnetIpv6CidrBlockAssociation <<< customize) { "AssociationId": Nothing, "Ipv6CidrBlock": Nothing, "Ipv6CidrBlockState": Nothing }



newtype SubnetIpv6CidrBlockAssociationSet = SubnetIpv6CidrBlockAssociationSet (Array SubnetIpv6CidrBlockAssociation)
derive instance newtypeSubnetIpv6CidrBlockAssociationSet :: Newtype SubnetIpv6CidrBlockAssociationSet _
derive instance repGenericSubnetIpv6CidrBlockAssociationSet :: Generic SubnetIpv6CidrBlockAssociationSet _
instance showSubnetIpv6CidrBlockAssociationSet :: Show SubnetIpv6CidrBlockAssociationSet where show = genericShow
instance decodeSubnetIpv6CidrBlockAssociationSet :: Decode SubnetIpv6CidrBlockAssociationSet where decode = genericDecode options
instance encodeSubnetIpv6CidrBlockAssociationSet :: Encode SubnetIpv6CidrBlockAssociationSet where encode = genericEncode options



newtype SubnetList = SubnetList (Array Subnet)
derive instance newtypeSubnetList :: Newtype SubnetList _
derive instance repGenericSubnetList :: Generic SubnetList _
instance showSubnetList :: Show SubnetList where show = genericShow
instance decodeSubnetList :: Decode SubnetList where decode = genericDecode options
instance encodeSubnetList :: Encode SubnetList where encode = genericEncode options



newtype SubnetState = SubnetState String
derive instance newtypeSubnetState :: Newtype SubnetState _
derive instance repGenericSubnetState :: Generic SubnetState _
instance showSubnetState :: Show SubnetState where show = genericShow
instance decodeSubnetState :: Decode SubnetState where decode = genericDecode options
instance encodeSubnetState :: Encode SubnetState where encode = genericEncode options



-- | <p>Describes the T2 instance whose credit option for CPU usage was successfully modified.</p>
newtype SuccessfulInstanceCreditSpecificationItem = SuccessfulInstanceCreditSpecificationItem 
  { "InstanceId" :: Maybe (String)
  }
derive instance newtypeSuccessfulInstanceCreditSpecificationItem :: Newtype SuccessfulInstanceCreditSpecificationItem _
derive instance repGenericSuccessfulInstanceCreditSpecificationItem :: Generic SuccessfulInstanceCreditSpecificationItem _
instance showSuccessfulInstanceCreditSpecificationItem :: Show SuccessfulInstanceCreditSpecificationItem where show = genericShow
instance decodeSuccessfulInstanceCreditSpecificationItem :: Decode SuccessfulInstanceCreditSpecificationItem where decode = genericDecode options
instance encodeSuccessfulInstanceCreditSpecificationItem :: Encode SuccessfulInstanceCreditSpecificationItem where encode = genericEncode options

-- | Constructs SuccessfulInstanceCreditSpecificationItem from required parameters
newSuccessfulInstanceCreditSpecificationItem :: SuccessfulInstanceCreditSpecificationItem
newSuccessfulInstanceCreditSpecificationItem  = SuccessfulInstanceCreditSpecificationItem { "InstanceId": Nothing }

-- | Constructs SuccessfulInstanceCreditSpecificationItem's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newSuccessfulInstanceCreditSpecificationItem' :: ( { "InstanceId" :: Maybe (String) } -> {"InstanceId" :: Maybe (String) } ) -> SuccessfulInstanceCreditSpecificationItem
newSuccessfulInstanceCreditSpecificationItem'  customize = (SuccessfulInstanceCreditSpecificationItem <<< customize) { "InstanceId": Nothing }



newtype SuccessfulInstanceCreditSpecificationSet = SuccessfulInstanceCreditSpecificationSet (Array SuccessfulInstanceCreditSpecificationItem)
derive instance newtypeSuccessfulInstanceCreditSpecificationSet :: Newtype SuccessfulInstanceCreditSpecificationSet _
derive instance repGenericSuccessfulInstanceCreditSpecificationSet :: Generic SuccessfulInstanceCreditSpecificationSet _
instance showSuccessfulInstanceCreditSpecificationSet :: Show SuccessfulInstanceCreditSpecificationSet where show = genericShow
instance decodeSuccessfulInstanceCreditSpecificationSet :: Decode SuccessfulInstanceCreditSpecificationSet where decode = genericDecode options
instance encodeSuccessfulInstanceCreditSpecificationSet :: Encode SuccessfulInstanceCreditSpecificationSet where encode = genericEncode options



newtype SummaryStatus = SummaryStatus String
derive instance newtypeSummaryStatus :: Newtype SummaryStatus _
derive instance repGenericSummaryStatus :: Generic SummaryStatus _
instance showSummaryStatus :: Show SummaryStatus where show = genericShow
instance decodeSummaryStatus :: Decode SummaryStatus where decode = genericDecode options
instance encodeSummaryStatus :: Encode SummaryStatus where encode = genericEncode options



-- | <p>Describes a tag.</p>
newtype Tag = Tag 
  { "Key" :: Maybe (String)
  , "Value" :: Maybe (String)
  }
derive instance newtypeTag :: Newtype Tag _
derive instance repGenericTag :: Generic Tag _
instance showTag :: Show Tag where show = genericShow
instance decodeTag :: Decode Tag where decode = genericDecode options
instance encodeTag :: Encode Tag where encode = genericEncode options

-- | Constructs Tag from required parameters
newTag :: Tag
newTag  = Tag { "Key": Nothing, "Value": Nothing }

-- | Constructs Tag's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newTag' :: ( { "Key" :: Maybe (String) , "Value" :: Maybe (String) } -> {"Key" :: Maybe (String) , "Value" :: Maybe (String) } ) -> Tag
newTag'  customize = (Tag <<< customize) { "Key": Nothing, "Value": Nothing }



-- | <p>Describes a tag.</p>
newtype TagDescription = TagDescription 
  { "Key" :: Maybe (String)
  , "ResourceId" :: Maybe (String)
  , "ResourceType" :: Maybe (ResourceType)
  , "Value" :: Maybe (String)
  }
derive instance newtypeTagDescription :: Newtype TagDescription _
derive instance repGenericTagDescription :: Generic TagDescription _
instance showTagDescription :: Show TagDescription where show = genericShow
instance decodeTagDescription :: Decode TagDescription where decode = genericDecode options
instance encodeTagDescription :: Encode TagDescription where encode = genericEncode options

-- | Constructs TagDescription from required parameters
newTagDescription :: TagDescription
newTagDescription  = TagDescription { "Key": Nothing, "ResourceId": Nothing, "ResourceType": Nothing, "Value": Nothing }

-- | Constructs TagDescription's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newTagDescription' :: ( { "Key" :: Maybe (String) , "ResourceId" :: Maybe (String) , "ResourceType" :: Maybe (ResourceType) , "Value" :: Maybe (String) } -> {"Key" :: Maybe (String) , "ResourceId" :: Maybe (String) , "ResourceType" :: Maybe (ResourceType) , "Value" :: Maybe (String) } ) -> TagDescription
newTagDescription'  customize = (TagDescription <<< customize) { "Key": Nothing, "ResourceId": Nothing, "ResourceType": Nothing, "Value": Nothing }



newtype TagDescriptionList = TagDescriptionList (Array TagDescription)
derive instance newtypeTagDescriptionList :: Newtype TagDescriptionList _
derive instance repGenericTagDescriptionList :: Generic TagDescriptionList _
instance showTagDescriptionList :: Show TagDescriptionList where show = genericShow
instance decodeTagDescriptionList :: Decode TagDescriptionList where decode = genericDecode options
instance encodeTagDescriptionList :: Encode TagDescriptionList where encode = genericEncode options



newtype TagList = TagList (Array Tag)
derive instance newtypeTagList :: Newtype TagList _
derive instance repGenericTagList :: Generic TagList _
instance showTagList :: Show TagList where show = genericShow
instance decodeTagList :: Decode TagList where decode = genericDecode options
instance encodeTagList :: Encode TagList where encode = genericEncode options



-- | <p>The tags to apply to a resource when the resource is being created.</p>
newtype TagSpecification = TagSpecification 
  { "ResourceType" :: Maybe (ResourceType)
  , "Tags" :: Maybe (TagList)
  }
derive instance newtypeTagSpecification :: Newtype TagSpecification _
derive instance repGenericTagSpecification :: Generic TagSpecification _
instance showTagSpecification :: Show TagSpecification where show = genericShow
instance decodeTagSpecification :: Decode TagSpecification where decode = genericDecode options
instance encodeTagSpecification :: Encode TagSpecification where encode = genericEncode options

-- | Constructs TagSpecification from required parameters
newTagSpecification :: TagSpecification
newTagSpecification  = TagSpecification { "ResourceType": Nothing, "Tags": Nothing }

-- | Constructs TagSpecification's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newTagSpecification' :: ( { "ResourceType" :: Maybe (ResourceType) , "Tags" :: Maybe (TagList) } -> {"ResourceType" :: Maybe (ResourceType) , "Tags" :: Maybe (TagList) } ) -> TagSpecification
newTagSpecification'  customize = (TagSpecification <<< customize) { "ResourceType": Nothing, "Tags": Nothing }



newtype TagSpecificationList = TagSpecificationList (Array TagSpecification)
derive instance newtypeTagSpecificationList :: Newtype TagSpecificationList _
derive instance repGenericTagSpecificationList :: Generic TagSpecificationList _
instance showTagSpecificationList :: Show TagSpecificationList where show = genericShow
instance decodeTagSpecificationList :: Decode TagSpecificationList where decode = genericDecode options
instance encodeTagSpecificationList :: Encode TagSpecificationList where encode = genericEncode options



-- | <p>Information about the Convertible Reserved Instance offering.</p>
newtype TargetConfiguration = TargetConfiguration 
  { "InstanceCount" :: Maybe (Int)
  , "OfferingId" :: Maybe (String)
  }
derive instance newtypeTargetConfiguration :: Newtype TargetConfiguration _
derive instance repGenericTargetConfiguration :: Generic TargetConfiguration _
instance showTargetConfiguration :: Show TargetConfiguration where show = genericShow
instance decodeTargetConfiguration :: Decode TargetConfiguration where decode = genericDecode options
instance encodeTargetConfiguration :: Encode TargetConfiguration where encode = genericEncode options

-- | Constructs TargetConfiguration from required parameters
newTargetConfiguration :: TargetConfiguration
newTargetConfiguration  = TargetConfiguration { "InstanceCount": Nothing, "OfferingId": Nothing }

-- | Constructs TargetConfiguration's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newTargetConfiguration' :: ( { "InstanceCount" :: Maybe (Int) , "OfferingId" :: Maybe (String) } -> {"InstanceCount" :: Maybe (Int) , "OfferingId" :: Maybe (String) } ) -> TargetConfiguration
newTargetConfiguration'  customize = (TargetConfiguration <<< customize) { "InstanceCount": Nothing, "OfferingId": Nothing }



-- | <p>Details about the target configuration.</p>
newtype TargetConfigurationRequest = TargetConfigurationRequest 
  { "InstanceCount" :: Maybe (Int)
  , "OfferingId" :: (String)
  }
derive instance newtypeTargetConfigurationRequest :: Newtype TargetConfigurationRequest _
derive instance repGenericTargetConfigurationRequest :: Generic TargetConfigurationRequest _
instance showTargetConfigurationRequest :: Show TargetConfigurationRequest where show = genericShow
instance decodeTargetConfigurationRequest :: Decode TargetConfigurationRequest where decode = genericDecode options
instance encodeTargetConfigurationRequest :: Encode TargetConfigurationRequest where encode = genericEncode options

-- | Constructs TargetConfigurationRequest from required parameters
newTargetConfigurationRequest :: String -> TargetConfigurationRequest
newTargetConfigurationRequest _OfferingId = TargetConfigurationRequest { "OfferingId": _OfferingId, "InstanceCount": Nothing }

-- | Constructs TargetConfigurationRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newTargetConfigurationRequest' :: String -> ( { "InstanceCount" :: Maybe (Int) , "OfferingId" :: (String) } -> {"InstanceCount" :: Maybe (Int) , "OfferingId" :: (String) } ) -> TargetConfigurationRequest
newTargetConfigurationRequest' _OfferingId customize = (TargetConfigurationRequest <<< customize) { "OfferingId": _OfferingId, "InstanceCount": Nothing }



newtype TargetConfigurationRequestSet = TargetConfigurationRequestSet (Array TargetConfigurationRequest)
derive instance newtypeTargetConfigurationRequestSet :: Newtype TargetConfigurationRequestSet _
derive instance repGenericTargetConfigurationRequestSet :: Generic TargetConfigurationRequestSet _
instance showTargetConfigurationRequestSet :: Show TargetConfigurationRequestSet where show = genericShow
instance decodeTargetConfigurationRequestSet :: Decode TargetConfigurationRequestSet where decode = genericDecode options
instance encodeTargetConfigurationRequestSet :: Encode TargetConfigurationRequestSet where encode = genericEncode options



-- | <p>Describes a load balancer target group.</p>
newtype TargetGroup = TargetGroup 
  { "Arn" :: (String)
  }
derive instance newtypeTargetGroup :: Newtype TargetGroup _
derive instance repGenericTargetGroup :: Generic TargetGroup _
instance showTargetGroup :: Show TargetGroup where show = genericShow
instance decodeTargetGroup :: Decode TargetGroup where decode = genericDecode options
instance encodeTargetGroup :: Encode TargetGroup where encode = genericEncode options

-- | Constructs TargetGroup from required parameters
newTargetGroup :: String -> TargetGroup
newTargetGroup _Arn = TargetGroup { "Arn": _Arn }

-- | Constructs TargetGroup's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newTargetGroup' :: String -> ( { "Arn" :: (String) } -> {"Arn" :: (String) } ) -> TargetGroup
newTargetGroup' _Arn customize = (TargetGroup <<< customize) { "Arn": _Arn }



newtype TargetGroups = TargetGroups (Array TargetGroup)
derive instance newtypeTargetGroups :: Newtype TargetGroups _
derive instance repGenericTargetGroups :: Generic TargetGroups _
instance showTargetGroups :: Show TargetGroups where show = genericShow
instance decodeTargetGroups :: Decode TargetGroups where decode = genericDecode options
instance encodeTargetGroups :: Encode TargetGroups where encode = genericEncode options



-- | <p>Describes the target groups to attach to a Spot Fleet. Spot Fleet registers the running Spot Instances with these target groups.</p>
newtype TargetGroupsConfig = TargetGroupsConfig 
  { "TargetGroups" :: (TargetGroups)
  }
derive instance newtypeTargetGroupsConfig :: Newtype TargetGroupsConfig _
derive instance repGenericTargetGroupsConfig :: Generic TargetGroupsConfig _
instance showTargetGroupsConfig :: Show TargetGroupsConfig where show = genericShow
instance decodeTargetGroupsConfig :: Decode TargetGroupsConfig where decode = genericDecode options
instance encodeTargetGroupsConfig :: Encode TargetGroupsConfig where encode = genericEncode options

-- | Constructs TargetGroupsConfig from required parameters
newTargetGroupsConfig :: TargetGroups -> TargetGroupsConfig
newTargetGroupsConfig _TargetGroups = TargetGroupsConfig { "TargetGroups": _TargetGroups }

-- | Constructs TargetGroupsConfig's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newTargetGroupsConfig' :: TargetGroups -> ( { "TargetGroups" :: (TargetGroups) } -> {"TargetGroups" :: (TargetGroups) } ) -> TargetGroupsConfig
newTargetGroupsConfig' _TargetGroups customize = (TargetGroupsConfig <<< customize) { "TargetGroups": _TargetGroups }



-- | <p>The total value of the new Convertible Reserved Instances.</p>
newtype TargetReservationValue = TargetReservationValue 
  { "ReservationValue" :: Maybe (ReservationValue)
  , "TargetConfiguration" :: Maybe (TargetConfiguration)
  }
derive instance newtypeTargetReservationValue :: Newtype TargetReservationValue _
derive instance repGenericTargetReservationValue :: Generic TargetReservationValue _
instance showTargetReservationValue :: Show TargetReservationValue where show = genericShow
instance decodeTargetReservationValue :: Decode TargetReservationValue where decode = genericDecode options
instance encodeTargetReservationValue :: Encode TargetReservationValue where encode = genericEncode options

-- | Constructs TargetReservationValue from required parameters
newTargetReservationValue :: TargetReservationValue
newTargetReservationValue  = TargetReservationValue { "ReservationValue": Nothing, "TargetConfiguration": Nothing }

-- | Constructs TargetReservationValue's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newTargetReservationValue' :: ( { "ReservationValue" :: Maybe (ReservationValue) , "TargetConfiguration" :: Maybe (TargetConfiguration) } -> {"ReservationValue" :: Maybe (ReservationValue) , "TargetConfiguration" :: Maybe (TargetConfiguration) } ) -> TargetReservationValue
newTargetReservationValue'  customize = (TargetReservationValue <<< customize) { "ReservationValue": Nothing, "TargetConfiguration": Nothing }



newtype TargetReservationValueSet = TargetReservationValueSet (Array TargetReservationValue)
derive instance newtypeTargetReservationValueSet :: Newtype TargetReservationValueSet _
derive instance repGenericTargetReservationValueSet :: Generic TargetReservationValueSet _
instance showTargetReservationValueSet :: Show TargetReservationValueSet where show = genericShow
instance decodeTargetReservationValueSet :: Decode TargetReservationValueSet where decode = genericDecode options
instance encodeTargetReservationValueSet :: Encode TargetReservationValueSet where encode = genericEncode options



newtype TelemetryStatus = TelemetryStatus String
derive instance newtypeTelemetryStatus :: Newtype TelemetryStatus _
derive instance repGenericTelemetryStatus :: Generic TelemetryStatus _
instance showTelemetryStatus :: Show TelemetryStatus where show = genericShow
instance decodeTelemetryStatus :: Decode TelemetryStatus where decode = genericDecode options
instance encodeTelemetryStatus :: Encode TelemetryStatus where encode = genericEncode options



newtype Tenancy = Tenancy String
derive instance newtypeTenancy :: Newtype Tenancy _
derive instance repGenericTenancy :: Generic Tenancy _
instance showTenancy :: Show Tenancy where show = genericShow
instance decodeTenancy :: Decode Tenancy where decode = genericDecode options
instance encodeTenancy :: Encode Tenancy where encode = genericEncode options



-- | <p>Contains the parameters for TerminateInstances.</p>
newtype TerminateInstancesRequest = TerminateInstancesRequest 
  { "InstanceIds" :: (InstanceIdStringList)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeTerminateInstancesRequest :: Newtype TerminateInstancesRequest _
derive instance repGenericTerminateInstancesRequest :: Generic TerminateInstancesRequest _
instance showTerminateInstancesRequest :: Show TerminateInstancesRequest where show = genericShow
instance decodeTerminateInstancesRequest :: Decode TerminateInstancesRequest where decode = genericDecode options
instance encodeTerminateInstancesRequest :: Encode TerminateInstancesRequest where encode = genericEncode options

-- | Constructs TerminateInstancesRequest from required parameters
newTerminateInstancesRequest :: InstanceIdStringList -> TerminateInstancesRequest
newTerminateInstancesRequest _InstanceIds = TerminateInstancesRequest { "InstanceIds": _InstanceIds, "DryRun": Nothing }

-- | Constructs TerminateInstancesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newTerminateInstancesRequest' :: InstanceIdStringList -> ( { "InstanceIds" :: (InstanceIdStringList) , "DryRun" :: Maybe (Boolean) } -> {"InstanceIds" :: (InstanceIdStringList) , "DryRun" :: Maybe (Boolean) } ) -> TerminateInstancesRequest
newTerminateInstancesRequest' _InstanceIds customize = (TerminateInstancesRequest <<< customize) { "InstanceIds": _InstanceIds, "DryRun": Nothing }



-- | <p>Contains the output of TerminateInstances.</p>
newtype TerminateInstancesResult = TerminateInstancesResult 
  { "TerminatingInstances" :: Maybe (InstanceStateChangeList)
  }
derive instance newtypeTerminateInstancesResult :: Newtype TerminateInstancesResult _
derive instance repGenericTerminateInstancesResult :: Generic TerminateInstancesResult _
instance showTerminateInstancesResult :: Show TerminateInstancesResult where show = genericShow
instance decodeTerminateInstancesResult :: Decode TerminateInstancesResult where decode = genericDecode options
instance encodeTerminateInstancesResult :: Encode TerminateInstancesResult where encode = genericEncode options

-- | Constructs TerminateInstancesResult from required parameters
newTerminateInstancesResult :: TerminateInstancesResult
newTerminateInstancesResult  = TerminateInstancesResult { "TerminatingInstances": Nothing }

-- | Constructs TerminateInstancesResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newTerminateInstancesResult' :: ( { "TerminatingInstances" :: Maybe (InstanceStateChangeList) } -> {"TerminatingInstances" :: Maybe (InstanceStateChangeList) } ) -> TerminateInstancesResult
newTerminateInstancesResult'  customize = (TerminateInstancesResult <<< customize) { "TerminatingInstances": Nothing }



newtype TrafficType = TrafficType String
derive instance newtypeTrafficType :: Newtype TrafficType _
derive instance repGenericTrafficType :: Generic TrafficType _
instance showTrafficType :: Show TrafficType where show = genericShow
instance decodeTrafficType :: Decode TrafficType where decode = genericDecode options
instance encodeTrafficType :: Encode TrafficType where encode = genericEncode options



newtype TunnelOptionsList = TunnelOptionsList (Array VpnTunnelOptionsSpecification)
derive instance newtypeTunnelOptionsList :: Newtype TunnelOptionsList _
derive instance repGenericTunnelOptionsList :: Generic TunnelOptionsList _
instance showTunnelOptionsList :: Show TunnelOptionsList where show = genericShow
instance decodeTunnelOptionsList :: Decode TunnelOptionsList where decode = genericDecode options
instance encodeTunnelOptionsList :: Encode TunnelOptionsList where encode = genericEncode options



newtype UnassignIpv6AddressesRequest = UnassignIpv6AddressesRequest 
  { "Ipv6Addresses" :: (Ipv6AddressList)
  , "NetworkInterfaceId" :: (String)
  }
derive instance newtypeUnassignIpv6AddressesRequest :: Newtype UnassignIpv6AddressesRequest _
derive instance repGenericUnassignIpv6AddressesRequest :: Generic UnassignIpv6AddressesRequest _
instance showUnassignIpv6AddressesRequest :: Show UnassignIpv6AddressesRequest where show = genericShow
instance decodeUnassignIpv6AddressesRequest :: Decode UnassignIpv6AddressesRequest where decode = genericDecode options
instance encodeUnassignIpv6AddressesRequest :: Encode UnassignIpv6AddressesRequest where encode = genericEncode options

-- | Constructs UnassignIpv6AddressesRequest from required parameters
newUnassignIpv6AddressesRequest :: Ipv6AddressList -> String -> UnassignIpv6AddressesRequest
newUnassignIpv6AddressesRequest _Ipv6Addresses _NetworkInterfaceId = UnassignIpv6AddressesRequest { "Ipv6Addresses": _Ipv6Addresses, "NetworkInterfaceId": _NetworkInterfaceId }

-- | Constructs UnassignIpv6AddressesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newUnassignIpv6AddressesRequest' :: Ipv6AddressList -> String -> ( { "Ipv6Addresses" :: (Ipv6AddressList) , "NetworkInterfaceId" :: (String) } -> {"Ipv6Addresses" :: (Ipv6AddressList) , "NetworkInterfaceId" :: (String) } ) -> UnassignIpv6AddressesRequest
newUnassignIpv6AddressesRequest' _Ipv6Addresses _NetworkInterfaceId customize = (UnassignIpv6AddressesRequest <<< customize) { "Ipv6Addresses": _Ipv6Addresses, "NetworkInterfaceId": _NetworkInterfaceId }



newtype UnassignIpv6AddressesResult = UnassignIpv6AddressesResult 
  { "NetworkInterfaceId" :: Maybe (String)
  , "UnassignedIpv6Addresses" :: Maybe (Ipv6AddressList)
  }
derive instance newtypeUnassignIpv6AddressesResult :: Newtype UnassignIpv6AddressesResult _
derive instance repGenericUnassignIpv6AddressesResult :: Generic UnassignIpv6AddressesResult _
instance showUnassignIpv6AddressesResult :: Show UnassignIpv6AddressesResult where show = genericShow
instance decodeUnassignIpv6AddressesResult :: Decode UnassignIpv6AddressesResult where decode = genericDecode options
instance encodeUnassignIpv6AddressesResult :: Encode UnassignIpv6AddressesResult where encode = genericEncode options

-- | Constructs UnassignIpv6AddressesResult from required parameters
newUnassignIpv6AddressesResult :: UnassignIpv6AddressesResult
newUnassignIpv6AddressesResult  = UnassignIpv6AddressesResult { "NetworkInterfaceId": Nothing, "UnassignedIpv6Addresses": Nothing }

-- | Constructs UnassignIpv6AddressesResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newUnassignIpv6AddressesResult' :: ( { "NetworkInterfaceId" :: Maybe (String) , "UnassignedIpv6Addresses" :: Maybe (Ipv6AddressList) } -> {"NetworkInterfaceId" :: Maybe (String) , "UnassignedIpv6Addresses" :: Maybe (Ipv6AddressList) } ) -> UnassignIpv6AddressesResult
newUnassignIpv6AddressesResult'  customize = (UnassignIpv6AddressesResult <<< customize) { "NetworkInterfaceId": Nothing, "UnassignedIpv6Addresses": Nothing }



-- | <p>Contains the parameters for UnassignPrivateIpAddresses.</p>
newtype UnassignPrivateIpAddressesRequest = UnassignPrivateIpAddressesRequest 
  { "NetworkInterfaceId" :: (String)
  , "PrivateIpAddresses" :: (PrivateIpAddressStringList)
  }
derive instance newtypeUnassignPrivateIpAddressesRequest :: Newtype UnassignPrivateIpAddressesRequest _
derive instance repGenericUnassignPrivateIpAddressesRequest :: Generic UnassignPrivateIpAddressesRequest _
instance showUnassignPrivateIpAddressesRequest :: Show UnassignPrivateIpAddressesRequest where show = genericShow
instance decodeUnassignPrivateIpAddressesRequest :: Decode UnassignPrivateIpAddressesRequest where decode = genericDecode options
instance encodeUnassignPrivateIpAddressesRequest :: Encode UnassignPrivateIpAddressesRequest where encode = genericEncode options

-- | Constructs UnassignPrivateIpAddressesRequest from required parameters
newUnassignPrivateIpAddressesRequest :: String -> PrivateIpAddressStringList -> UnassignPrivateIpAddressesRequest
newUnassignPrivateIpAddressesRequest _NetworkInterfaceId _PrivateIpAddresses = UnassignPrivateIpAddressesRequest { "NetworkInterfaceId": _NetworkInterfaceId, "PrivateIpAddresses": _PrivateIpAddresses }

-- | Constructs UnassignPrivateIpAddressesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newUnassignPrivateIpAddressesRequest' :: String -> PrivateIpAddressStringList -> ( { "NetworkInterfaceId" :: (String) , "PrivateIpAddresses" :: (PrivateIpAddressStringList) } -> {"NetworkInterfaceId" :: (String) , "PrivateIpAddresses" :: (PrivateIpAddressStringList) } ) -> UnassignPrivateIpAddressesRequest
newUnassignPrivateIpAddressesRequest' _NetworkInterfaceId _PrivateIpAddresses customize = (UnassignPrivateIpAddressesRequest <<< customize) { "NetworkInterfaceId": _NetworkInterfaceId, "PrivateIpAddresses": _PrivateIpAddresses }



-- | <p>Contains the parameters for UnmonitorInstances.</p>
newtype UnmonitorInstancesRequest = UnmonitorInstancesRequest 
  { "InstanceIds" :: (InstanceIdStringList)
  , "DryRun" :: Maybe (Boolean)
  }
derive instance newtypeUnmonitorInstancesRequest :: Newtype UnmonitorInstancesRequest _
derive instance repGenericUnmonitorInstancesRequest :: Generic UnmonitorInstancesRequest _
instance showUnmonitorInstancesRequest :: Show UnmonitorInstancesRequest where show = genericShow
instance decodeUnmonitorInstancesRequest :: Decode UnmonitorInstancesRequest where decode = genericDecode options
instance encodeUnmonitorInstancesRequest :: Encode UnmonitorInstancesRequest where encode = genericEncode options

-- | Constructs UnmonitorInstancesRequest from required parameters
newUnmonitorInstancesRequest :: InstanceIdStringList -> UnmonitorInstancesRequest
newUnmonitorInstancesRequest _InstanceIds = UnmonitorInstancesRequest { "InstanceIds": _InstanceIds, "DryRun": Nothing }

-- | Constructs UnmonitorInstancesRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newUnmonitorInstancesRequest' :: InstanceIdStringList -> ( { "InstanceIds" :: (InstanceIdStringList) , "DryRun" :: Maybe (Boolean) } -> {"InstanceIds" :: (InstanceIdStringList) , "DryRun" :: Maybe (Boolean) } ) -> UnmonitorInstancesRequest
newUnmonitorInstancesRequest' _InstanceIds customize = (UnmonitorInstancesRequest <<< customize) { "InstanceIds": _InstanceIds, "DryRun": Nothing }



-- | <p>Contains the output of UnmonitorInstances.</p>
newtype UnmonitorInstancesResult = UnmonitorInstancesResult 
  { "InstanceMonitorings" :: Maybe (InstanceMonitoringList)
  }
derive instance newtypeUnmonitorInstancesResult :: Newtype UnmonitorInstancesResult _
derive instance repGenericUnmonitorInstancesResult :: Generic UnmonitorInstancesResult _
instance showUnmonitorInstancesResult :: Show UnmonitorInstancesResult where show = genericShow
instance decodeUnmonitorInstancesResult :: Decode UnmonitorInstancesResult where decode = genericDecode options
instance encodeUnmonitorInstancesResult :: Encode UnmonitorInstancesResult where encode = genericEncode options

-- | Constructs UnmonitorInstancesResult from required parameters
newUnmonitorInstancesResult :: UnmonitorInstancesResult
newUnmonitorInstancesResult  = UnmonitorInstancesResult { "InstanceMonitorings": Nothing }

-- | Constructs UnmonitorInstancesResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newUnmonitorInstancesResult' :: ( { "InstanceMonitorings" :: Maybe (InstanceMonitoringList) } -> {"InstanceMonitorings" :: Maybe (InstanceMonitoringList) } ) -> UnmonitorInstancesResult
newUnmonitorInstancesResult'  customize = (UnmonitorInstancesResult <<< customize) { "InstanceMonitorings": Nothing }



newtype UnsuccessfulInstanceCreditSpecificationErrorCode = UnsuccessfulInstanceCreditSpecificationErrorCode String
derive instance newtypeUnsuccessfulInstanceCreditSpecificationErrorCode :: Newtype UnsuccessfulInstanceCreditSpecificationErrorCode _
derive instance repGenericUnsuccessfulInstanceCreditSpecificationErrorCode :: Generic UnsuccessfulInstanceCreditSpecificationErrorCode _
instance showUnsuccessfulInstanceCreditSpecificationErrorCode :: Show UnsuccessfulInstanceCreditSpecificationErrorCode where show = genericShow
instance decodeUnsuccessfulInstanceCreditSpecificationErrorCode :: Decode UnsuccessfulInstanceCreditSpecificationErrorCode where decode = genericDecode options
instance encodeUnsuccessfulInstanceCreditSpecificationErrorCode :: Encode UnsuccessfulInstanceCreditSpecificationErrorCode where encode = genericEncode options



-- | <p>Describes the T2 instance whose credit option for CPU usage was not modified.</p>
newtype UnsuccessfulInstanceCreditSpecificationItem = UnsuccessfulInstanceCreditSpecificationItem 
  { "InstanceId" :: Maybe (String)
  , "Error" :: Maybe (UnsuccessfulInstanceCreditSpecificationItemError)
  }
derive instance newtypeUnsuccessfulInstanceCreditSpecificationItem :: Newtype UnsuccessfulInstanceCreditSpecificationItem _
derive instance repGenericUnsuccessfulInstanceCreditSpecificationItem :: Generic UnsuccessfulInstanceCreditSpecificationItem _
instance showUnsuccessfulInstanceCreditSpecificationItem :: Show UnsuccessfulInstanceCreditSpecificationItem where show = genericShow
instance decodeUnsuccessfulInstanceCreditSpecificationItem :: Decode UnsuccessfulInstanceCreditSpecificationItem where decode = genericDecode options
instance encodeUnsuccessfulInstanceCreditSpecificationItem :: Encode UnsuccessfulInstanceCreditSpecificationItem where encode = genericEncode options

-- | Constructs UnsuccessfulInstanceCreditSpecificationItem from required parameters
newUnsuccessfulInstanceCreditSpecificationItem :: UnsuccessfulInstanceCreditSpecificationItem
newUnsuccessfulInstanceCreditSpecificationItem  = UnsuccessfulInstanceCreditSpecificationItem { "Error": Nothing, "InstanceId": Nothing }

-- | Constructs UnsuccessfulInstanceCreditSpecificationItem's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newUnsuccessfulInstanceCreditSpecificationItem' :: ( { "InstanceId" :: Maybe (String) , "Error" :: Maybe (UnsuccessfulInstanceCreditSpecificationItemError) } -> {"InstanceId" :: Maybe (String) , "Error" :: Maybe (UnsuccessfulInstanceCreditSpecificationItemError) } ) -> UnsuccessfulInstanceCreditSpecificationItem
newUnsuccessfulInstanceCreditSpecificationItem'  customize = (UnsuccessfulInstanceCreditSpecificationItem <<< customize) { "Error": Nothing, "InstanceId": Nothing }



-- | <p>Information about the error for the T2 instance whose credit option for CPU usage was not modified.</p>
newtype UnsuccessfulInstanceCreditSpecificationItemError = UnsuccessfulInstanceCreditSpecificationItemError 
  { "Code" :: Maybe (UnsuccessfulInstanceCreditSpecificationErrorCode)
  , "Message" :: Maybe (String)
  }
derive instance newtypeUnsuccessfulInstanceCreditSpecificationItemError :: Newtype UnsuccessfulInstanceCreditSpecificationItemError _
derive instance repGenericUnsuccessfulInstanceCreditSpecificationItemError :: Generic UnsuccessfulInstanceCreditSpecificationItemError _
instance showUnsuccessfulInstanceCreditSpecificationItemError :: Show UnsuccessfulInstanceCreditSpecificationItemError where show = genericShow
instance decodeUnsuccessfulInstanceCreditSpecificationItemError :: Decode UnsuccessfulInstanceCreditSpecificationItemError where decode = genericDecode options
instance encodeUnsuccessfulInstanceCreditSpecificationItemError :: Encode UnsuccessfulInstanceCreditSpecificationItemError where encode = genericEncode options

-- | Constructs UnsuccessfulInstanceCreditSpecificationItemError from required parameters
newUnsuccessfulInstanceCreditSpecificationItemError :: UnsuccessfulInstanceCreditSpecificationItemError
newUnsuccessfulInstanceCreditSpecificationItemError  = UnsuccessfulInstanceCreditSpecificationItemError { "Code": Nothing, "Message": Nothing }

-- | Constructs UnsuccessfulInstanceCreditSpecificationItemError's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newUnsuccessfulInstanceCreditSpecificationItemError' :: ( { "Code" :: Maybe (UnsuccessfulInstanceCreditSpecificationErrorCode) , "Message" :: Maybe (String) } -> {"Code" :: Maybe (UnsuccessfulInstanceCreditSpecificationErrorCode) , "Message" :: Maybe (String) } ) -> UnsuccessfulInstanceCreditSpecificationItemError
newUnsuccessfulInstanceCreditSpecificationItemError'  customize = (UnsuccessfulInstanceCreditSpecificationItemError <<< customize) { "Code": Nothing, "Message": Nothing }



newtype UnsuccessfulInstanceCreditSpecificationSet = UnsuccessfulInstanceCreditSpecificationSet (Array UnsuccessfulInstanceCreditSpecificationItem)
derive instance newtypeUnsuccessfulInstanceCreditSpecificationSet :: Newtype UnsuccessfulInstanceCreditSpecificationSet _
derive instance repGenericUnsuccessfulInstanceCreditSpecificationSet :: Generic UnsuccessfulInstanceCreditSpecificationSet _
instance showUnsuccessfulInstanceCreditSpecificationSet :: Show UnsuccessfulInstanceCreditSpecificationSet where show = genericShow
instance decodeUnsuccessfulInstanceCreditSpecificationSet :: Decode UnsuccessfulInstanceCreditSpecificationSet where decode = genericDecode options
instance encodeUnsuccessfulInstanceCreditSpecificationSet :: Encode UnsuccessfulInstanceCreditSpecificationSet where encode = genericEncode options



-- | <p>Information about items that were not successfully processed in a batch call.</p>
newtype UnsuccessfulItem = UnsuccessfulItem 
  { "Error" :: (UnsuccessfulItemError)
  , "ResourceId" :: Maybe (String)
  }
derive instance newtypeUnsuccessfulItem :: Newtype UnsuccessfulItem _
derive instance repGenericUnsuccessfulItem :: Generic UnsuccessfulItem _
instance showUnsuccessfulItem :: Show UnsuccessfulItem where show = genericShow
instance decodeUnsuccessfulItem :: Decode UnsuccessfulItem where decode = genericDecode options
instance encodeUnsuccessfulItem :: Encode UnsuccessfulItem where encode = genericEncode options

-- | Constructs UnsuccessfulItem from required parameters
newUnsuccessfulItem :: UnsuccessfulItemError -> UnsuccessfulItem
newUnsuccessfulItem _Error = UnsuccessfulItem { "Error": _Error, "ResourceId": Nothing }

-- | Constructs UnsuccessfulItem's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newUnsuccessfulItem' :: UnsuccessfulItemError -> ( { "Error" :: (UnsuccessfulItemError) , "ResourceId" :: Maybe (String) } -> {"Error" :: (UnsuccessfulItemError) , "ResourceId" :: Maybe (String) } ) -> UnsuccessfulItem
newUnsuccessfulItem' _Error customize = (UnsuccessfulItem <<< customize) { "Error": _Error, "ResourceId": Nothing }



-- | <p>Information about the error that occurred. For more information about errors, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html">Error Codes</a>.</p>
newtype UnsuccessfulItemError = UnsuccessfulItemError 
  { "Code" :: (String)
  , "Message" :: (String)
  }
derive instance newtypeUnsuccessfulItemError :: Newtype UnsuccessfulItemError _
derive instance repGenericUnsuccessfulItemError :: Generic UnsuccessfulItemError _
instance showUnsuccessfulItemError :: Show UnsuccessfulItemError where show = genericShow
instance decodeUnsuccessfulItemError :: Decode UnsuccessfulItemError where decode = genericDecode options
instance encodeUnsuccessfulItemError :: Encode UnsuccessfulItemError where encode = genericEncode options

-- | Constructs UnsuccessfulItemError from required parameters
newUnsuccessfulItemError :: String -> String -> UnsuccessfulItemError
newUnsuccessfulItemError _Code _Message = UnsuccessfulItemError { "Code": _Code, "Message": _Message }

-- | Constructs UnsuccessfulItemError's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newUnsuccessfulItemError' :: String -> String -> ( { "Code" :: (String) , "Message" :: (String) } -> {"Code" :: (String) , "Message" :: (String) } ) -> UnsuccessfulItemError
newUnsuccessfulItemError' _Code _Message customize = (UnsuccessfulItemError <<< customize) { "Code": _Code, "Message": _Message }



newtype UnsuccessfulItemList = UnsuccessfulItemList (Array UnsuccessfulItem)
derive instance newtypeUnsuccessfulItemList :: Newtype UnsuccessfulItemList _
derive instance repGenericUnsuccessfulItemList :: Generic UnsuccessfulItemList _
instance showUnsuccessfulItemList :: Show UnsuccessfulItemList where show = genericShow
instance decodeUnsuccessfulItemList :: Decode UnsuccessfulItemList where decode = genericDecode options
instance encodeUnsuccessfulItemList :: Encode UnsuccessfulItemList where encode = genericEncode options



newtype UnsuccessfulItemSet = UnsuccessfulItemSet (Array UnsuccessfulItem)
derive instance newtypeUnsuccessfulItemSet :: Newtype UnsuccessfulItemSet _
derive instance repGenericUnsuccessfulItemSet :: Generic UnsuccessfulItemSet _
instance showUnsuccessfulItemSet :: Show UnsuccessfulItemSet where show = genericShow
instance decodeUnsuccessfulItemSet :: Decode UnsuccessfulItemSet where decode = genericDecode options
instance encodeUnsuccessfulItemSet :: Encode UnsuccessfulItemSet where encode = genericEncode options



-- | <p>Contains the parameters for UpdateSecurityGroupRuleDescriptionsEgress.</p>
newtype UpdateSecurityGroupRuleDescriptionsEgressRequest = UpdateSecurityGroupRuleDescriptionsEgressRequest 
  { "DryRun" :: Maybe (Boolean)
  , "GroupId" :: Maybe (String)
  , "GroupName" :: Maybe (String)
  , "IpPermissions" :: (IpPermissionList)
  }
derive instance newtypeUpdateSecurityGroupRuleDescriptionsEgressRequest :: Newtype UpdateSecurityGroupRuleDescriptionsEgressRequest _
derive instance repGenericUpdateSecurityGroupRuleDescriptionsEgressRequest :: Generic UpdateSecurityGroupRuleDescriptionsEgressRequest _
instance showUpdateSecurityGroupRuleDescriptionsEgressRequest :: Show UpdateSecurityGroupRuleDescriptionsEgressRequest where show = genericShow
instance decodeUpdateSecurityGroupRuleDescriptionsEgressRequest :: Decode UpdateSecurityGroupRuleDescriptionsEgressRequest where decode = genericDecode options
instance encodeUpdateSecurityGroupRuleDescriptionsEgressRequest :: Encode UpdateSecurityGroupRuleDescriptionsEgressRequest where encode = genericEncode options

-- | Constructs UpdateSecurityGroupRuleDescriptionsEgressRequest from required parameters
newUpdateSecurityGroupRuleDescriptionsEgressRequest :: IpPermissionList -> UpdateSecurityGroupRuleDescriptionsEgressRequest
newUpdateSecurityGroupRuleDescriptionsEgressRequest _IpPermissions = UpdateSecurityGroupRuleDescriptionsEgressRequest { "IpPermissions": _IpPermissions, "DryRun": Nothing, "GroupId": Nothing, "GroupName": Nothing }

-- | Constructs UpdateSecurityGroupRuleDescriptionsEgressRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newUpdateSecurityGroupRuleDescriptionsEgressRequest' :: IpPermissionList -> ( { "DryRun" :: Maybe (Boolean) , "GroupId" :: Maybe (String) , "GroupName" :: Maybe (String) , "IpPermissions" :: (IpPermissionList) } -> {"DryRun" :: Maybe (Boolean) , "GroupId" :: Maybe (String) , "GroupName" :: Maybe (String) , "IpPermissions" :: (IpPermissionList) } ) -> UpdateSecurityGroupRuleDescriptionsEgressRequest
newUpdateSecurityGroupRuleDescriptionsEgressRequest' _IpPermissions customize = (UpdateSecurityGroupRuleDescriptionsEgressRequest <<< customize) { "IpPermissions": _IpPermissions, "DryRun": Nothing, "GroupId": Nothing, "GroupName": Nothing }



-- | <p>Contains the output of UpdateSecurityGroupRuleDescriptionsEgress.</p>
newtype UpdateSecurityGroupRuleDescriptionsEgressResult = UpdateSecurityGroupRuleDescriptionsEgressResult 
  { "Return" :: Maybe (Boolean)
  }
derive instance newtypeUpdateSecurityGroupRuleDescriptionsEgressResult :: Newtype UpdateSecurityGroupRuleDescriptionsEgressResult _
derive instance repGenericUpdateSecurityGroupRuleDescriptionsEgressResult :: Generic UpdateSecurityGroupRuleDescriptionsEgressResult _
instance showUpdateSecurityGroupRuleDescriptionsEgressResult :: Show UpdateSecurityGroupRuleDescriptionsEgressResult where show = genericShow
instance decodeUpdateSecurityGroupRuleDescriptionsEgressResult :: Decode UpdateSecurityGroupRuleDescriptionsEgressResult where decode = genericDecode options
instance encodeUpdateSecurityGroupRuleDescriptionsEgressResult :: Encode UpdateSecurityGroupRuleDescriptionsEgressResult where encode = genericEncode options

-- | Constructs UpdateSecurityGroupRuleDescriptionsEgressResult from required parameters
newUpdateSecurityGroupRuleDescriptionsEgressResult :: UpdateSecurityGroupRuleDescriptionsEgressResult
newUpdateSecurityGroupRuleDescriptionsEgressResult  = UpdateSecurityGroupRuleDescriptionsEgressResult { "Return": Nothing }

-- | Constructs UpdateSecurityGroupRuleDescriptionsEgressResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newUpdateSecurityGroupRuleDescriptionsEgressResult' :: ( { "Return" :: Maybe (Boolean) } -> {"Return" :: Maybe (Boolean) } ) -> UpdateSecurityGroupRuleDescriptionsEgressResult
newUpdateSecurityGroupRuleDescriptionsEgressResult'  customize = (UpdateSecurityGroupRuleDescriptionsEgressResult <<< customize) { "Return": Nothing }



-- | <p>Contains the parameters for UpdateSecurityGroupRuleDescriptionsIngress.</p>
newtype UpdateSecurityGroupRuleDescriptionsIngressRequest = UpdateSecurityGroupRuleDescriptionsIngressRequest 
  { "DryRun" :: Maybe (Boolean)
  , "GroupId" :: Maybe (String)
  , "GroupName" :: Maybe (String)
  , "IpPermissions" :: (IpPermissionList)
  }
derive instance newtypeUpdateSecurityGroupRuleDescriptionsIngressRequest :: Newtype UpdateSecurityGroupRuleDescriptionsIngressRequest _
derive instance repGenericUpdateSecurityGroupRuleDescriptionsIngressRequest :: Generic UpdateSecurityGroupRuleDescriptionsIngressRequest _
instance showUpdateSecurityGroupRuleDescriptionsIngressRequest :: Show UpdateSecurityGroupRuleDescriptionsIngressRequest where show = genericShow
instance decodeUpdateSecurityGroupRuleDescriptionsIngressRequest :: Decode UpdateSecurityGroupRuleDescriptionsIngressRequest where decode = genericDecode options
instance encodeUpdateSecurityGroupRuleDescriptionsIngressRequest :: Encode UpdateSecurityGroupRuleDescriptionsIngressRequest where encode = genericEncode options

-- | Constructs UpdateSecurityGroupRuleDescriptionsIngressRequest from required parameters
newUpdateSecurityGroupRuleDescriptionsIngressRequest :: IpPermissionList -> UpdateSecurityGroupRuleDescriptionsIngressRequest
newUpdateSecurityGroupRuleDescriptionsIngressRequest _IpPermissions = UpdateSecurityGroupRuleDescriptionsIngressRequest { "IpPermissions": _IpPermissions, "DryRun": Nothing, "GroupId": Nothing, "GroupName": Nothing }

-- | Constructs UpdateSecurityGroupRuleDescriptionsIngressRequest's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newUpdateSecurityGroupRuleDescriptionsIngressRequest' :: IpPermissionList -> ( { "DryRun" :: Maybe (Boolean) , "GroupId" :: Maybe (String) , "GroupName" :: Maybe (String) , "IpPermissions" :: (IpPermissionList) } -> {"DryRun" :: Maybe (Boolean) , "GroupId" :: Maybe (String) , "GroupName" :: Maybe (String) , "IpPermissions" :: (IpPermissionList) } ) -> UpdateSecurityGroupRuleDescriptionsIngressRequest
newUpdateSecurityGroupRuleDescriptionsIngressRequest' _IpPermissions customize = (UpdateSecurityGroupRuleDescriptionsIngressRequest <<< customize) { "IpPermissions": _IpPermissions, "DryRun": Nothing, "GroupId": Nothing, "GroupName": Nothing }



-- | <p>Contains the output of UpdateSecurityGroupRuleDescriptionsIngress.</p>
newtype UpdateSecurityGroupRuleDescriptionsIngressResult = UpdateSecurityGroupRuleDescriptionsIngressResult 
  { "Return" :: Maybe (Boolean)
  }
derive instance newtypeUpdateSecurityGroupRuleDescriptionsIngressResult :: Newtype UpdateSecurityGroupRuleDescriptionsIngressResult _
derive instance repGenericUpdateSecurityGroupRuleDescriptionsIngressResult :: Generic UpdateSecurityGroupRuleDescriptionsIngressResult _
instance showUpdateSecurityGroupRuleDescriptionsIngressResult :: Show UpdateSecurityGroupRuleDescriptionsIngressResult where show = genericShow
instance decodeUpdateSecurityGroupRuleDescriptionsIngressResult :: Decode UpdateSecurityGroupRuleDescriptionsIngressResult where decode = genericDecode options
instance encodeUpdateSecurityGroupRuleDescriptionsIngressResult :: Encode UpdateSecurityGroupRuleDescriptionsIngressResult where encode = genericEncode options

-- | Constructs UpdateSecurityGroupRuleDescriptionsIngressResult from required parameters
newUpdateSecurityGroupRuleDescriptionsIngressResult :: UpdateSecurityGroupRuleDescriptionsIngressResult
newUpdateSecurityGroupRuleDescriptionsIngressResult  = UpdateSecurityGroupRuleDescriptionsIngressResult { "Return": Nothing }

-- | Constructs UpdateSecurityGroupRuleDescriptionsIngressResult's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newUpdateSecurityGroupRuleDescriptionsIngressResult' :: ( { "Return" :: Maybe (Boolean) } -> {"Return" :: Maybe (Boolean) } ) -> UpdateSecurityGroupRuleDescriptionsIngressResult
newUpdateSecurityGroupRuleDescriptionsIngressResult'  customize = (UpdateSecurityGroupRuleDescriptionsIngressResult <<< customize) { "Return": Nothing }



-- | <p>Describes the S3 bucket for the disk image.</p>
newtype UserBucket = UserBucket 
  { "S3Bucket" :: Maybe (String)
  , "S3Key" :: Maybe (String)
  }
derive instance newtypeUserBucket :: Newtype UserBucket _
derive instance repGenericUserBucket :: Generic UserBucket _
instance showUserBucket :: Show UserBucket where show = genericShow
instance decodeUserBucket :: Decode UserBucket where decode = genericDecode options
instance encodeUserBucket :: Encode UserBucket where encode = genericEncode options

-- | Constructs UserBucket from required parameters
newUserBucket :: UserBucket
newUserBucket  = UserBucket { "S3Bucket": Nothing, "S3Key": Nothing }

-- | Constructs UserBucket's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newUserBucket' :: ( { "S3Bucket" :: Maybe (String) , "S3Key" :: Maybe (String) } -> {"S3Bucket" :: Maybe (String) , "S3Key" :: Maybe (String) } ) -> UserBucket
newUserBucket'  customize = (UserBucket <<< customize) { "S3Bucket": Nothing, "S3Key": Nothing }



-- | <p>Describes the S3 bucket for the disk image.</p>
newtype UserBucketDetails = UserBucketDetails 
  { "S3Bucket" :: Maybe (String)
  , "S3Key" :: Maybe (String)
  }
derive instance newtypeUserBucketDetails :: Newtype UserBucketDetails _
derive instance repGenericUserBucketDetails :: Generic UserBucketDetails _
instance showUserBucketDetails :: Show UserBucketDetails where show = genericShow
instance decodeUserBucketDetails :: Decode UserBucketDetails where decode = genericDecode options
instance encodeUserBucketDetails :: Encode UserBucketDetails where encode = genericEncode options

-- | Constructs UserBucketDetails from required parameters
newUserBucketDetails :: UserBucketDetails
newUserBucketDetails  = UserBucketDetails { "S3Bucket": Nothing, "S3Key": Nothing }

-- | Constructs UserBucketDetails's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newUserBucketDetails' :: ( { "S3Bucket" :: Maybe (String) , "S3Key" :: Maybe (String) } -> {"S3Bucket" :: Maybe (String) , "S3Key" :: Maybe (String) } ) -> UserBucketDetails
newUserBucketDetails'  customize = (UserBucketDetails <<< customize) { "S3Bucket": Nothing, "S3Key": Nothing }



-- | <p>Describes the user data for an instance.</p>
newtype UserData = UserData 
  { "Data" :: Maybe (String)
  }
derive instance newtypeUserData :: Newtype UserData _
derive instance repGenericUserData :: Generic UserData _
instance showUserData :: Show UserData where show = genericShow
instance decodeUserData :: Decode UserData where decode = genericDecode options
instance encodeUserData :: Encode UserData where encode = genericEncode options

-- | Constructs UserData from required parameters
newUserData :: UserData
newUserData  = UserData { "Data": Nothing }

-- | Constructs UserData's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newUserData' :: ( { "Data" :: Maybe (String) } -> {"Data" :: Maybe (String) } ) -> UserData
newUserData'  customize = (UserData <<< customize) { "Data": Nothing }



newtype UserGroupStringList = UserGroupStringList (Array String)
derive instance newtypeUserGroupStringList :: Newtype UserGroupStringList _
derive instance repGenericUserGroupStringList :: Generic UserGroupStringList _
instance showUserGroupStringList :: Show UserGroupStringList where show = genericShow
instance decodeUserGroupStringList :: Decode UserGroupStringList where decode = genericDecode options
instance encodeUserGroupStringList :: Encode UserGroupStringList where encode = genericEncode options



-- | <p>Describes a security group and AWS account ID pair.</p>
newtype UserIdGroupPair = UserIdGroupPair 
  { "Description" :: Maybe (String)
  , "GroupId" :: Maybe (String)
  , "GroupName" :: Maybe (String)
  , "PeeringStatus" :: Maybe (String)
  , "UserId" :: Maybe (String)
  , "VpcId" :: Maybe (String)
  , "VpcPeeringConnectionId" :: Maybe (String)
  }
derive instance newtypeUserIdGroupPair :: Newtype UserIdGroupPair _
derive instance repGenericUserIdGroupPair :: Generic UserIdGroupPair _
instance showUserIdGroupPair :: Show UserIdGroupPair where show = genericShow
instance decodeUserIdGroupPair :: Decode UserIdGroupPair where decode = genericDecode options
instance encodeUserIdGroupPair :: Encode UserIdGroupPair where encode = genericEncode options

-- | Constructs UserIdGroupPair from required parameters
newUserIdGroupPair :: UserIdGroupPair
newUserIdGroupPair  = UserIdGroupPair { "Description": Nothing, "GroupId": Nothing, "GroupName": Nothing, "PeeringStatus": Nothing, "UserId": Nothing, "VpcId": Nothing, "VpcPeeringConnectionId": Nothing }

-- | Constructs UserIdGroupPair's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newUserIdGroupPair' :: ( { "Description" :: Maybe (String) , "GroupId" :: Maybe (String) , "GroupName" :: Maybe (String) , "PeeringStatus" :: Maybe (String) , "UserId" :: Maybe (String) , "VpcId" :: Maybe (String) , "VpcPeeringConnectionId" :: Maybe (String) } -> {"Description" :: Maybe (String) , "GroupId" :: Maybe (String) , "GroupName" :: Maybe (String) , "PeeringStatus" :: Maybe (String) , "UserId" :: Maybe (String) , "VpcId" :: Maybe (String) , "VpcPeeringConnectionId" :: Maybe (String) } ) -> UserIdGroupPair
newUserIdGroupPair'  customize = (UserIdGroupPair <<< customize) { "Description": Nothing, "GroupId": Nothing, "GroupName": Nothing, "PeeringStatus": Nothing, "UserId": Nothing, "VpcId": Nothing, "VpcPeeringConnectionId": Nothing }



newtype UserIdGroupPairList = UserIdGroupPairList (Array UserIdGroupPair)
derive instance newtypeUserIdGroupPairList :: Newtype UserIdGroupPairList _
derive instance repGenericUserIdGroupPairList :: Generic UserIdGroupPairList _
instance showUserIdGroupPairList :: Show UserIdGroupPairList where show = genericShow
instance decodeUserIdGroupPairList :: Decode UserIdGroupPairList where decode = genericDecode options
instance encodeUserIdGroupPairList :: Encode UserIdGroupPairList where encode = genericEncode options



newtype UserIdGroupPairSet = UserIdGroupPairSet (Array UserIdGroupPair)
derive instance newtypeUserIdGroupPairSet :: Newtype UserIdGroupPairSet _
derive instance repGenericUserIdGroupPairSet :: Generic UserIdGroupPairSet _
instance showUserIdGroupPairSet :: Show UserIdGroupPairSet where show = genericShow
instance decodeUserIdGroupPairSet :: Decode UserIdGroupPairSet where decode = genericDecode options
instance encodeUserIdGroupPairSet :: Encode UserIdGroupPairSet where encode = genericEncode options



newtype UserIdStringList = UserIdStringList (Array String)
derive instance newtypeUserIdStringList :: Newtype UserIdStringList _
derive instance repGenericUserIdStringList :: Generic UserIdStringList _
instance showUserIdStringList :: Show UserIdStringList where show = genericShow
instance decodeUserIdStringList :: Decode UserIdStringList where decode = genericDecode options
instance encodeUserIdStringList :: Encode UserIdStringList where encode = genericEncode options



newtype ValueStringList = ValueStringList (Array String)
derive instance newtypeValueStringList :: Newtype ValueStringList _
derive instance repGenericValueStringList :: Generic ValueStringList _
instance showValueStringList :: Show ValueStringList where show = genericShow
instance decodeValueStringList :: Decode ValueStringList where decode = genericDecode options
instance encodeValueStringList :: Encode ValueStringList where encode = genericEncode options



newtype VersionDescription = VersionDescription String
derive instance newtypeVersionDescription :: Newtype VersionDescription _
derive instance repGenericVersionDescription :: Generic VersionDescription _
instance showVersionDescription :: Show VersionDescription where show = genericShow
instance decodeVersionDescription :: Decode VersionDescription where decode = genericDecode options
instance encodeVersionDescription :: Encode VersionDescription where encode = genericEncode options



newtype VersionStringList = VersionStringList (Array String)
derive instance newtypeVersionStringList :: Newtype VersionStringList _
derive instance repGenericVersionStringList :: Generic VersionStringList _
instance showVersionStringList :: Show VersionStringList where show = genericShow
instance decodeVersionStringList :: Decode VersionStringList where decode = genericDecode options
instance encodeVersionStringList :: Encode VersionStringList where encode = genericEncode options



-- | <p>Describes telemetry for a VPN tunnel.</p>
newtype VgwTelemetry = VgwTelemetry 
  { "AcceptedRouteCount" :: Maybe (Int)
  , "LastStatusChange" :: Maybe (DateTime)
  , "OutsideIpAddress" :: Maybe (String)
  , "Status" :: Maybe (TelemetryStatus)
  , "StatusMessage" :: Maybe (String)
  }
derive instance newtypeVgwTelemetry :: Newtype VgwTelemetry _
derive instance repGenericVgwTelemetry :: Generic VgwTelemetry _
instance showVgwTelemetry :: Show VgwTelemetry where show = genericShow
instance decodeVgwTelemetry :: Decode VgwTelemetry where decode = genericDecode options
instance encodeVgwTelemetry :: Encode VgwTelemetry where encode = genericEncode options

-- | Constructs VgwTelemetry from required parameters
newVgwTelemetry :: VgwTelemetry
newVgwTelemetry  = VgwTelemetry { "AcceptedRouteCount": Nothing, "LastStatusChange": Nothing, "OutsideIpAddress": Nothing, "Status": Nothing, "StatusMessage": Nothing }

-- | Constructs VgwTelemetry's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVgwTelemetry' :: ( { "AcceptedRouteCount" :: Maybe (Int) , "LastStatusChange" :: Maybe (DateTime) , "OutsideIpAddress" :: Maybe (String) , "Status" :: Maybe (TelemetryStatus) , "StatusMessage" :: Maybe (String) } -> {"AcceptedRouteCount" :: Maybe (Int) , "LastStatusChange" :: Maybe (DateTime) , "OutsideIpAddress" :: Maybe (String) , "Status" :: Maybe (TelemetryStatus) , "StatusMessage" :: Maybe (String) } ) -> VgwTelemetry
newVgwTelemetry'  customize = (VgwTelemetry <<< customize) { "AcceptedRouteCount": Nothing, "LastStatusChange": Nothing, "OutsideIpAddress": Nothing, "Status": Nothing, "StatusMessage": Nothing }



newtype VgwTelemetryList = VgwTelemetryList (Array VgwTelemetry)
derive instance newtypeVgwTelemetryList :: Newtype VgwTelemetryList _
derive instance repGenericVgwTelemetryList :: Generic VgwTelemetryList _
instance showVgwTelemetryList :: Show VgwTelemetryList where show = genericShow
instance decodeVgwTelemetryList :: Decode VgwTelemetryList where decode = genericDecode options
instance encodeVgwTelemetryList :: Encode VgwTelemetryList where encode = genericEncode options



newtype VirtualizationType = VirtualizationType String
derive instance newtypeVirtualizationType :: Newtype VirtualizationType _
derive instance repGenericVirtualizationType :: Generic VirtualizationType _
instance showVirtualizationType :: Show VirtualizationType where show = genericShow
instance decodeVirtualizationType :: Decode VirtualizationType where decode = genericDecode options
instance encodeVirtualizationType :: Encode VirtualizationType where encode = genericEncode options



-- | <p>Describes a volume.</p>
newtype Volume = Volume 
  { "Attachments" :: Maybe (VolumeAttachmentList)
  , "AvailabilityZone" :: Maybe (String)
  , "CreateTime" :: Maybe (DateTime)
  , "Encrypted" :: Maybe (Boolean)
  , "KmsKeyId" :: Maybe (String)
  , "Size" :: Maybe (Int)
  , "SnapshotId" :: Maybe (String)
  , "State" :: Maybe (VolumeState)
  , "VolumeId" :: Maybe (String)
  , "Iops" :: Maybe (Int)
  , "Tags" :: Maybe (TagList)
  , "VolumeType" :: Maybe (VolumeType)
  }
derive instance newtypeVolume :: Newtype Volume _
derive instance repGenericVolume :: Generic Volume _
instance showVolume :: Show Volume where show = genericShow
instance decodeVolume :: Decode Volume where decode = genericDecode options
instance encodeVolume :: Encode Volume where encode = genericEncode options

-- | Constructs Volume from required parameters
newVolume :: Volume
newVolume  = Volume { "Attachments": Nothing, "AvailabilityZone": Nothing, "CreateTime": Nothing, "Encrypted": Nothing, "Iops": Nothing, "KmsKeyId": Nothing, "Size": Nothing, "SnapshotId": Nothing, "State": Nothing, "Tags": Nothing, "VolumeId": Nothing, "VolumeType": Nothing }

-- | Constructs Volume's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVolume' :: ( { "Attachments" :: Maybe (VolumeAttachmentList) , "AvailabilityZone" :: Maybe (String) , "CreateTime" :: Maybe (DateTime) , "Encrypted" :: Maybe (Boolean) , "KmsKeyId" :: Maybe (String) , "Size" :: Maybe (Int) , "SnapshotId" :: Maybe (String) , "State" :: Maybe (VolumeState) , "VolumeId" :: Maybe (String) , "Iops" :: Maybe (Int) , "Tags" :: Maybe (TagList) , "VolumeType" :: Maybe (VolumeType) } -> {"Attachments" :: Maybe (VolumeAttachmentList) , "AvailabilityZone" :: Maybe (String) , "CreateTime" :: Maybe (DateTime) , "Encrypted" :: Maybe (Boolean) , "KmsKeyId" :: Maybe (String) , "Size" :: Maybe (Int) , "SnapshotId" :: Maybe (String) , "State" :: Maybe (VolumeState) , "VolumeId" :: Maybe (String) , "Iops" :: Maybe (Int) , "Tags" :: Maybe (TagList) , "VolumeType" :: Maybe (VolumeType) } ) -> Volume
newVolume'  customize = (Volume <<< customize) { "Attachments": Nothing, "AvailabilityZone": Nothing, "CreateTime": Nothing, "Encrypted": Nothing, "Iops": Nothing, "KmsKeyId": Nothing, "Size": Nothing, "SnapshotId": Nothing, "State": Nothing, "Tags": Nothing, "VolumeId": Nothing, "VolumeType": Nothing }



-- | <p>Describes volume attachment details.</p>
newtype VolumeAttachment = VolumeAttachment 
  { "AttachTime" :: Maybe (DateTime)
  , "Device" :: Maybe (String)
  , "InstanceId" :: Maybe (String)
  , "State" :: Maybe (VolumeAttachmentState)
  , "VolumeId" :: Maybe (String)
  , "DeleteOnTermination" :: Maybe (Boolean)
  }
derive instance newtypeVolumeAttachment :: Newtype VolumeAttachment _
derive instance repGenericVolumeAttachment :: Generic VolumeAttachment _
instance showVolumeAttachment :: Show VolumeAttachment where show = genericShow
instance decodeVolumeAttachment :: Decode VolumeAttachment where decode = genericDecode options
instance encodeVolumeAttachment :: Encode VolumeAttachment where encode = genericEncode options

-- | Constructs VolumeAttachment from required parameters
newVolumeAttachment :: VolumeAttachment
newVolumeAttachment  = VolumeAttachment { "AttachTime": Nothing, "DeleteOnTermination": Nothing, "Device": Nothing, "InstanceId": Nothing, "State": Nothing, "VolumeId": Nothing }

-- | Constructs VolumeAttachment's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVolumeAttachment' :: ( { "AttachTime" :: Maybe (DateTime) , "Device" :: Maybe (String) , "InstanceId" :: Maybe (String) , "State" :: Maybe (VolumeAttachmentState) , "VolumeId" :: Maybe (String) , "DeleteOnTermination" :: Maybe (Boolean) } -> {"AttachTime" :: Maybe (DateTime) , "Device" :: Maybe (String) , "InstanceId" :: Maybe (String) , "State" :: Maybe (VolumeAttachmentState) , "VolumeId" :: Maybe (String) , "DeleteOnTermination" :: Maybe (Boolean) } ) -> VolumeAttachment
newVolumeAttachment'  customize = (VolumeAttachment <<< customize) { "AttachTime": Nothing, "DeleteOnTermination": Nothing, "Device": Nothing, "InstanceId": Nothing, "State": Nothing, "VolumeId": Nothing }



newtype VolumeAttachmentList = VolumeAttachmentList (Array VolumeAttachment)
derive instance newtypeVolumeAttachmentList :: Newtype VolumeAttachmentList _
derive instance repGenericVolumeAttachmentList :: Generic VolumeAttachmentList _
instance showVolumeAttachmentList :: Show VolumeAttachmentList where show = genericShow
instance decodeVolumeAttachmentList :: Decode VolumeAttachmentList where decode = genericDecode options
instance encodeVolumeAttachmentList :: Encode VolumeAttachmentList where encode = genericEncode options



newtype VolumeAttachmentState = VolumeAttachmentState String
derive instance newtypeVolumeAttachmentState :: Newtype VolumeAttachmentState _
derive instance repGenericVolumeAttachmentState :: Generic VolumeAttachmentState _
instance showVolumeAttachmentState :: Show VolumeAttachmentState where show = genericShow
instance decodeVolumeAttachmentState :: Decode VolumeAttachmentState where decode = genericDecode options
instance encodeVolumeAttachmentState :: Encode VolumeAttachmentState where encode = genericEncode options



newtype VolumeAttributeName = VolumeAttributeName String
derive instance newtypeVolumeAttributeName :: Newtype VolumeAttributeName _
derive instance repGenericVolumeAttributeName :: Generic VolumeAttributeName _
instance showVolumeAttributeName :: Show VolumeAttributeName where show = genericShow
instance decodeVolumeAttributeName :: Decode VolumeAttributeName where decode = genericDecode options
instance encodeVolumeAttributeName :: Encode VolumeAttributeName where encode = genericEncode options



-- | <p>Describes an EBS volume.</p>
newtype VolumeDetail = VolumeDetail 
  { "Size" :: (Number)
  }
derive instance newtypeVolumeDetail :: Newtype VolumeDetail _
derive instance repGenericVolumeDetail :: Generic VolumeDetail _
instance showVolumeDetail :: Show VolumeDetail where show = genericShow
instance decodeVolumeDetail :: Decode VolumeDetail where decode = genericDecode options
instance encodeVolumeDetail :: Encode VolumeDetail where encode = genericEncode options

-- | Constructs VolumeDetail from required parameters
newVolumeDetail :: Number -> VolumeDetail
newVolumeDetail _Size = VolumeDetail { "Size": _Size }

-- | Constructs VolumeDetail's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVolumeDetail' :: Number -> ( { "Size" :: (Number) } -> {"Size" :: (Number) } ) -> VolumeDetail
newVolumeDetail' _Size customize = (VolumeDetail <<< customize) { "Size": _Size }



newtype VolumeIdStringList = VolumeIdStringList (Array String)
derive instance newtypeVolumeIdStringList :: Newtype VolumeIdStringList _
derive instance repGenericVolumeIdStringList :: Generic VolumeIdStringList _
instance showVolumeIdStringList :: Show VolumeIdStringList where show = genericShow
instance decodeVolumeIdStringList :: Decode VolumeIdStringList where decode = genericDecode options
instance encodeVolumeIdStringList :: Encode VolumeIdStringList where encode = genericEncode options



newtype VolumeList = VolumeList (Array Volume)
derive instance newtypeVolumeList :: Newtype VolumeList _
derive instance repGenericVolumeList :: Generic VolumeList _
instance showVolumeList :: Show VolumeList where show = genericShow
instance decodeVolumeList :: Decode VolumeList where decode = genericDecode options
instance encodeVolumeList :: Encode VolumeList where encode = genericEncode options



-- | <p>Describes the modification status of an EBS volume.</p> <p>If the volume has never been modified, some element values will be null.</p>
newtype VolumeModification = VolumeModification 
  { "VolumeId" :: Maybe (String)
  , "ModificationState" :: Maybe (VolumeModificationState)
  , "StatusMessage" :: Maybe (String)
  , "TargetSize" :: Maybe (Int)
  , "TargetIops" :: Maybe (Int)
  , "TargetVolumeType" :: Maybe (VolumeType)
  , "OriginalSize" :: Maybe (Int)
  , "OriginalIops" :: Maybe (Int)
  , "OriginalVolumeType" :: Maybe (VolumeType)
  , "Progress" :: Maybe (Number)
  , "StartTime" :: Maybe (DateTime)
  , "EndTime" :: Maybe (DateTime)
  }
derive instance newtypeVolumeModification :: Newtype VolumeModification _
derive instance repGenericVolumeModification :: Generic VolumeModification _
instance showVolumeModification :: Show VolumeModification where show = genericShow
instance decodeVolumeModification :: Decode VolumeModification where decode = genericDecode options
instance encodeVolumeModification :: Encode VolumeModification where encode = genericEncode options

-- | Constructs VolumeModification from required parameters
newVolumeModification :: VolumeModification
newVolumeModification  = VolumeModification { "EndTime": Nothing, "ModificationState": Nothing, "OriginalIops": Nothing, "OriginalSize": Nothing, "OriginalVolumeType": Nothing, "Progress": Nothing, "StartTime": Nothing, "StatusMessage": Nothing, "TargetIops": Nothing, "TargetSize": Nothing, "TargetVolumeType": Nothing, "VolumeId": Nothing }

-- | Constructs VolumeModification's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVolumeModification' :: ( { "VolumeId" :: Maybe (String) , "ModificationState" :: Maybe (VolumeModificationState) , "StatusMessage" :: Maybe (String) , "TargetSize" :: Maybe (Int) , "TargetIops" :: Maybe (Int) , "TargetVolumeType" :: Maybe (VolumeType) , "OriginalSize" :: Maybe (Int) , "OriginalIops" :: Maybe (Int) , "OriginalVolumeType" :: Maybe (VolumeType) , "Progress" :: Maybe (Number) , "StartTime" :: Maybe (DateTime) , "EndTime" :: Maybe (DateTime) } -> {"VolumeId" :: Maybe (String) , "ModificationState" :: Maybe (VolumeModificationState) , "StatusMessage" :: Maybe (String) , "TargetSize" :: Maybe (Int) , "TargetIops" :: Maybe (Int) , "TargetVolumeType" :: Maybe (VolumeType) , "OriginalSize" :: Maybe (Int) , "OriginalIops" :: Maybe (Int) , "OriginalVolumeType" :: Maybe (VolumeType) , "Progress" :: Maybe (Number) , "StartTime" :: Maybe (DateTime) , "EndTime" :: Maybe (DateTime) } ) -> VolumeModification
newVolumeModification'  customize = (VolumeModification <<< customize) { "EndTime": Nothing, "ModificationState": Nothing, "OriginalIops": Nothing, "OriginalSize": Nothing, "OriginalVolumeType": Nothing, "Progress": Nothing, "StartTime": Nothing, "StatusMessage": Nothing, "TargetIops": Nothing, "TargetSize": Nothing, "TargetVolumeType": Nothing, "VolumeId": Nothing }



newtype VolumeModificationList = VolumeModificationList (Array VolumeModification)
derive instance newtypeVolumeModificationList :: Newtype VolumeModificationList _
derive instance repGenericVolumeModificationList :: Generic VolumeModificationList _
instance showVolumeModificationList :: Show VolumeModificationList where show = genericShow
instance decodeVolumeModificationList :: Decode VolumeModificationList where decode = genericDecode options
instance encodeVolumeModificationList :: Encode VolumeModificationList where encode = genericEncode options



newtype VolumeModificationState = VolumeModificationState String
derive instance newtypeVolumeModificationState :: Newtype VolumeModificationState _
derive instance repGenericVolumeModificationState :: Generic VolumeModificationState _
instance showVolumeModificationState :: Show VolumeModificationState where show = genericShow
instance decodeVolumeModificationState :: Decode VolumeModificationState where decode = genericDecode options
instance encodeVolumeModificationState :: Encode VolumeModificationState where encode = genericEncode options



newtype VolumeState = VolumeState String
derive instance newtypeVolumeState :: Newtype VolumeState _
derive instance repGenericVolumeState :: Generic VolumeState _
instance showVolumeState :: Show VolumeState where show = genericShow
instance decodeVolumeState :: Decode VolumeState where decode = genericDecode options
instance encodeVolumeState :: Encode VolumeState where encode = genericEncode options



-- | <p>Describes a volume status operation code.</p>
newtype VolumeStatusAction = VolumeStatusAction 
  { "Code" :: Maybe (String)
  , "Description" :: Maybe (String)
  , "EventId" :: Maybe (String)
  , "EventType" :: Maybe (String)
  }
derive instance newtypeVolumeStatusAction :: Newtype VolumeStatusAction _
derive instance repGenericVolumeStatusAction :: Generic VolumeStatusAction _
instance showVolumeStatusAction :: Show VolumeStatusAction where show = genericShow
instance decodeVolumeStatusAction :: Decode VolumeStatusAction where decode = genericDecode options
instance encodeVolumeStatusAction :: Encode VolumeStatusAction where encode = genericEncode options

-- | Constructs VolumeStatusAction from required parameters
newVolumeStatusAction :: VolumeStatusAction
newVolumeStatusAction  = VolumeStatusAction { "Code": Nothing, "Description": Nothing, "EventId": Nothing, "EventType": Nothing }

-- | Constructs VolumeStatusAction's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVolumeStatusAction' :: ( { "Code" :: Maybe (String) , "Description" :: Maybe (String) , "EventId" :: Maybe (String) , "EventType" :: Maybe (String) } -> {"Code" :: Maybe (String) , "Description" :: Maybe (String) , "EventId" :: Maybe (String) , "EventType" :: Maybe (String) } ) -> VolumeStatusAction
newVolumeStatusAction'  customize = (VolumeStatusAction <<< customize) { "Code": Nothing, "Description": Nothing, "EventId": Nothing, "EventType": Nothing }



newtype VolumeStatusActionsList = VolumeStatusActionsList (Array VolumeStatusAction)
derive instance newtypeVolumeStatusActionsList :: Newtype VolumeStatusActionsList _
derive instance repGenericVolumeStatusActionsList :: Generic VolumeStatusActionsList _
instance showVolumeStatusActionsList :: Show VolumeStatusActionsList where show = genericShow
instance decodeVolumeStatusActionsList :: Decode VolumeStatusActionsList where decode = genericDecode options
instance encodeVolumeStatusActionsList :: Encode VolumeStatusActionsList where encode = genericEncode options



-- | <p>Describes a volume status.</p>
newtype VolumeStatusDetails = VolumeStatusDetails 
  { "Name" :: Maybe (VolumeStatusName)
  , "Status" :: Maybe (String)
  }
derive instance newtypeVolumeStatusDetails :: Newtype VolumeStatusDetails _
derive instance repGenericVolumeStatusDetails :: Generic VolumeStatusDetails _
instance showVolumeStatusDetails :: Show VolumeStatusDetails where show = genericShow
instance decodeVolumeStatusDetails :: Decode VolumeStatusDetails where decode = genericDecode options
instance encodeVolumeStatusDetails :: Encode VolumeStatusDetails where encode = genericEncode options

-- | Constructs VolumeStatusDetails from required parameters
newVolumeStatusDetails :: VolumeStatusDetails
newVolumeStatusDetails  = VolumeStatusDetails { "Name": Nothing, "Status": Nothing }

-- | Constructs VolumeStatusDetails's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVolumeStatusDetails' :: ( { "Name" :: Maybe (VolumeStatusName) , "Status" :: Maybe (String) } -> {"Name" :: Maybe (VolumeStatusName) , "Status" :: Maybe (String) } ) -> VolumeStatusDetails
newVolumeStatusDetails'  customize = (VolumeStatusDetails <<< customize) { "Name": Nothing, "Status": Nothing }



newtype VolumeStatusDetailsList = VolumeStatusDetailsList (Array VolumeStatusDetails)
derive instance newtypeVolumeStatusDetailsList :: Newtype VolumeStatusDetailsList _
derive instance repGenericVolumeStatusDetailsList :: Generic VolumeStatusDetailsList _
instance showVolumeStatusDetailsList :: Show VolumeStatusDetailsList where show = genericShow
instance decodeVolumeStatusDetailsList :: Decode VolumeStatusDetailsList where decode = genericDecode options
instance encodeVolumeStatusDetailsList :: Encode VolumeStatusDetailsList where encode = genericEncode options



-- | <p>Describes a volume status event.</p>
newtype VolumeStatusEvent = VolumeStatusEvent 
  { "Description" :: Maybe (String)
  , "EventId" :: Maybe (String)
  , "EventType" :: Maybe (String)
  , "NotAfter" :: Maybe (DateTime)
  , "NotBefore" :: Maybe (DateTime)
  }
derive instance newtypeVolumeStatusEvent :: Newtype VolumeStatusEvent _
derive instance repGenericVolumeStatusEvent :: Generic VolumeStatusEvent _
instance showVolumeStatusEvent :: Show VolumeStatusEvent where show = genericShow
instance decodeVolumeStatusEvent :: Decode VolumeStatusEvent where decode = genericDecode options
instance encodeVolumeStatusEvent :: Encode VolumeStatusEvent where encode = genericEncode options

-- | Constructs VolumeStatusEvent from required parameters
newVolumeStatusEvent :: VolumeStatusEvent
newVolumeStatusEvent  = VolumeStatusEvent { "Description": Nothing, "EventId": Nothing, "EventType": Nothing, "NotAfter": Nothing, "NotBefore": Nothing }

-- | Constructs VolumeStatusEvent's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVolumeStatusEvent' :: ( { "Description" :: Maybe (String) , "EventId" :: Maybe (String) , "EventType" :: Maybe (String) , "NotAfter" :: Maybe (DateTime) , "NotBefore" :: Maybe (DateTime) } -> {"Description" :: Maybe (String) , "EventId" :: Maybe (String) , "EventType" :: Maybe (String) , "NotAfter" :: Maybe (DateTime) , "NotBefore" :: Maybe (DateTime) } ) -> VolumeStatusEvent
newVolumeStatusEvent'  customize = (VolumeStatusEvent <<< customize) { "Description": Nothing, "EventId": Nothing, "EventType": Nothing, "NotAfter": Nothing, "NotBefore": Nothing }



newtype VolumeStatusEventsList = VolumeStatusEventsList (Array VolumeStatusEvent)
derive instance newtypeVolumeStatusEventsList :: Newtype VolumeStatusEventsList _
derive instance repGenericVolumeStatusEventsList :: Generic VolumeStatusEventsList _
instance showVolumeStatusEventsList :: Show VolumeStatusEventsList where show = genericShow
instance decodeVolumeStatusEventsList :: Decode VolumeStatusEventsList where decode = genericDecode options
instance encodeVolumeStatusEventsList :: Encode VolumeStatusEventsList where encode = genericEncode options



-- | <p>Describes the status of a volume.</p>
newtype VolumeStatusInfo = VolumeStatusInfo 
  { "Details" :: Maybe (VolumeStatusDetailsList)
  , "Status" :: Maybe (VolumeStatusInfoStatus)
  }
derive instance newtypeVolumeStatusInfo :: Newtype VolumeStatusInfo _
derive instance repGenericVolumeStatusInfo :: Generic VolumeStatusInfo _
instance showVolumeStatusInfo :: Show VolumeStatusInfo where show = genericShow
instance decodeVolumeStatusInfo :: Decode VolumeStatusInfo where decode = genericDecode options
instance encodeVolumeStatusInfo :: Encode VolumeStatusInfo where encode = genericEncode options

-- | Constructs VolumeStatusInfo from required parameters
newVolumeStatusInfo :: VolumeStatusInfo
newVolumeStatusInfo  = VolumeStatusInfo { "Details": Nothing, "Status": Nothing }

-- | Constructs VolumeStatusInfo's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVolumeStatusInfo' :: ( { "Details" :: Maybe (VolumeStatusDetailsList) , "Status" :: Maybe (VolumeStatusInfoStatus) } -> {"Details" :: Maybe (VolumeStatusDetailsList) , "Status" :: Maybe (VolumeStatusInfoStatus) } ) -> VolumeStatusInfo
newVolumeStatusInfo'  customize = (VolumeStatusInfo <<< customize) { "Details": Nothing, "Status": Nothing }



newtype VolumeStatusInfoStatus = VolumeStatusInfoStatus String
derive instance newtypeVolumeStatusInfoStatus :: Newtype VolumeStatusInfoStatus _
derive instance repGenericVolumeStatusInfoStatus :: Generic VolumeStatusInfoStatus _
instance showVolumeStatusInfoStatus :: Show VolumeStatusInfoStatus where show = genericShow
instance decodeVolumeStatusInfoStatus :: Decode VolumeStatusInfoStatus where decode = genericDecode options
instance encodeVolumeStatusInfoStatus :: Encode VolumeStatusInfoStatus where encode = genericEncode options



-- | <p>Describes the volume status.</p>
newtype VolumeStatusItem = VolumeStatusItem 
  { "Actions" :: Maybe (VolumeStatusActionsList)
  , "AvailabilityZone" :: Maybe (String)
  , "Events" :: Maybe (VolumeStatusEventsList)
  , "VolumeId" :: Maybe (String)
  , "VolumeStatus" :: Maybe (VolumeStatusInfo)
  }
derive instance newtypeVolumeStatusItem :: Newtype VolumeStatusItem _
derive instance repGenericVolumeStatusItem :: Generic VolumeStatusItem _
instance showVolumeStatusItem :: Show VolumeStatusItem where show = genericShow
instance decodeVolumeStatusItem :: Decode VolumeStatusItem where decode = genericDecode options
instance encodeVolumeStatusItem :: Encode VolumeStatusItem where encode = genericEncode options

-- | Constructs VolumeStatusItem from required parameters
newVolumeStatusItem :: VolumeStatusItem
newVolumeStatusItem  = VolumeStatusItem { "Actions": Nothing, "AvailabilityZone": Nothing, "Events": Nothing, "VolumeId": Nothing, "VolumeStatus": Nothing }

-- | Constructs VolumeStatusItem's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVolumeStatusItem' :: ( { "Actions" :: Maybe (VolumeStatusActionsList) , "AvailabilityZone" :: Maybe (String) , "Events" :: Maybe (VolumeStatusEventsList) , "VolumeId" :: Maybe (String) , "VolumeStatus" :: Maybe (VolumeStatusInfo) } -> {"Actions" :: Maybe (VolumeStatusActionsList) , "AvailabilityZone" :: Maybe (String) , "Events" :: Maybe (VolumeStatusEventsList) , "VolumeId" :: Maybe (String) , "VolumeStatus" :: Maybe (VolumeStatusInfo) } ) -> VolumeStatusItem
newVolumeStatusItem'  customize = (VolumeStatusItem <<< customize) { "Actions": Nothing, "AvailabilityZone": Nothing, "Events": Nothing, "VolumeId": Nothing, "VolumeStatus": Nothing }



newtype VolumeStatusList = VolumeStatusList (Array VolumeStatusItem)
derive instance newtypeVolumeStatusList :: Newtype VolumeStatusList _
derive instance repGenericVolumeStatusList :: Generic VolumeStatusList _
instance showVolumeStatusList :: Show VolumeStatusList where show = genericShow
instance decodeVolumeStatusList :: Decode VolumeStatusList where decode = genericDecode options
instance encodeVolumeStatusList :: Encode VolumeStatusList where encode = genericEncode options



newtype VolumeStatusName = VolumeStatusName String
derive instance newtypeVolumeStatusName :: Newtype VolumeStatusName _
derive instance repGenericVolumeStatusName :: Generic VolumeStatusName _
instance showVolumeStatusName :: Show VolumeStatusName where show = genericShow
instance decodeVolumeStatusName :: Decode VolumeStatusName where decode = genericDecode options
instance encodeVolumeStatusName :: Encode VolumeStatusName where encode = genericEncode options



newtype VolumeType = VolumeType String
derive instance newtypeVolumeType :: Newtype VolumeType _
derive instance repGenericVolumeType :: Generic VolumeType _
instance showVolumeType :: Show VolumeType where show = genericShow
instance decodeVolumeType :: Decode VolumeType where decode = genericDecode options
instance encodeVolumeType :: Encode VolumeType where encode = genericEncode options



-- | <p>Describes a VPC.</p>
newtype Vpc = Vpc 
  { "CidrBlock" :: Maybe (String)
  , "DhcpOptionsId" :: Maybe (String)
  , "State" :: Maybe (VpcState)
  , "VpcId" :: Maybe (String)
  , "InstanceTenancy" :: Maybe (Tenancy)
  , "Ipv6CidrBlockAssociationSet" :: Maybe (VpcIpv6CidrBlockAssociationSet)
  , "CidrBlockAssociationSet" :: Maybe (VpcCidrBlockAssociationSet)
  , "IsDefault" :: Maybe (Boolean)
  , "Tags" :: Maybe (TagList)
  }
derive instance newtypeVpc :: Newtype Vpc _
derive instance repGenericVpc :: Generic Vpc _
instance showVpc :: Show Vpc where show = genericShow
instance decodeVpc :: Decode Vpc where decode = genericDecode options
instance encodeVpc :: Encode Vpc where encode = genericEncode options

-- | Constructs Vpc from required parameters
newVpc :: Vpc
newVpc  = Vpc { "CidrBlock": Nothing, "CidrBlockAssociationSet": Nothing, "DhcpOptionsId": Nothing, "InstanceTenancy": Nothing, "Ipv6CidrBlockAssociationSet": Nothing, "IsDefault": Nothing, "State": Nothing, "Tags": Nothing, "VpcId": Nothing }

-- | Constructs Vpc's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVpc' :: ( { "CidrBlock" :: Maybe (String) , "DhcpOptionsId" :: Maybe (String) , "State" :: Maybe (VpcState) , "VpcId" :: Maybe (String) , "InstanceTenancy" :: Maybe (Tenancy) , "Ipv6CidrBlockAssociationSet" :: Maybe (VpcIpv6CidrBlockAssociationSet) , "CidrBlockAssociationSet" :: Maybe (VpcCidrBlockAssociationSet) , "IsDefault" :: Maybe (Boolean) , "Tags" :: Maybe (TagList) } -> {"CidrBlock" :: Maybe (String) , "DhcpOptionsId" :: Maybe (String) , "State" :: Maybe (VpcState) , "VpcId" :: Maybe (String) , "InstanceTenancy" :: Maybe (Tenancy) , "Ipv6CidrBlockAssociationSet" :: Maybe (VpcIpv6CidrBlockAssociationSet) , "CidrBlockAssociationSet" :: Maybe (VpcCidrBlockAssociationSet) , "IsDefault" :: Maybe (Boolean) , "Tags" :: Maybe (TagList) } ) -> Vpc
newVpc'  customize = (Vpc <<< customize) { "CidrBlock": Nothing, "CidrBlockAssociationSet": Nothing, "DhcpOptionsId": Nothing, "InstanceTenancy": Nothing, "Ipv6CidrBlockAssociationSet": Nothing, "IsDefault": Nothing, "State": Nothing, "Tags": Nothing, "VpcId": Nothing }



-- | <p>Describes an attachment between a virtual private gateway and a VPC.</p>
newtype VpcAttachment = VpcAttachment 
  { "State" :: Maybe (AttachmentStatus)
  , "VpcId" :: Maybe (String)
  }
derive instance newtypeVpcAttachment :: Newtype VpcAttachment _
derive instance repGenericVpcAttachment :: Generic VpcAttachment _
instance showVpcAttachment :: Show VpcAttachment where show = genericShow
instance decodeVpcAttachment :: Decode VpcAttachment where decode = genericDecode options
instance encodeVpcAttachment :: Encode VpcAttachment where encode = genericEncode options

-- | Constructs VpcAttachment from required parameters
newVpcAttachment :: VpcAttachment
newVpcAttachment  = VpcAttachment { "State": Nothing, "VpcId": Nothing }

-- | Constructs VpcAttachment's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVpcAttachment' :: ( { "State" :: Maybe (AttachmentStatus) , "VpcId" :: Maybe (String) } -> {"State" :: Maybe (AttachmentStatus) , "VpcId" :: Maybe (String) } ) -> VpcAttachment
newVpcAttachment'  customize = (VpcAttachment <<< customize) { "State": Nothing, "VpcId": Nothing }



newtype VpcAttachmentList = VpcAttachmentList (Array VpcAttachment)
derive instance newtypeVpcAttachmentList :: Newtype VpcAttachmentList _
derive instance repGenericVpcAttachmentList :: Generic VpcAttachmentList _
instance showVpcAttachmentList :: Show VpcAttachmentList where show = genericShow
instance decodeVpcAttachmentList :: Decode VpcAttachmentList where decode = genericDecode options
instance encodeVpcAttachmentList :: Encode VpcAttachmentList where encode = genericEncode options



newtype VpcAttributeName = VpcAttributeName String
derive instance newtypeVpcAttributeName :: Newtype VpcAttributeName _
derive instance repGenericVpcAttributeName :: Generic VpcAttributeName _
instance showVpcAttributeName :: Show VpcAttributeName where show = genericShow
instance decodeVpcAttributeName :: Decode VpcAttributeName where decode = genericDecode options
instance encodeVpcAttributeName :: Encode VpcAttributeName where encode = genericEncode options



-- | <p>Describes an IPv4 CIDR block associated with a VPC.</p>
newtype VpcCidrBlockAssociation = VpcCidrBlockAssociation 
  { "AssociationId" :: Maybe (String)
  , "CidrBlock" :: Maybe (String)
  , "CidrBlockState" :: Maybe (VpcCidrBlockState)
  }
derive instance newtypeVpcCidrBlockAssociation :: Newtype VpcCidrBlockAssociation _
derive instance repGenericVpcCidrBlockAssociation :: Generic VpcCidrBlockAssociation _
instance showVpcCidrBlockAssociation :: Show VpcCidrBlockAssociation where show = genericShow
instance decodeVpcCidrBlockAssociation :: Decode VpcCidrBlockAssociation where decode = genericDecode options
instance encodeVpcCidrBlockAssociation :: Encode VpcCidrBlockAssociation where encode = genericEncode options

-- | Constructs VpcCidrBlockAssociation from required parameters
newVpcCidrBlockAssociation :: VpcCidrBlockAssociation
newVpcCidrBlockAssociation  = VpcCidrBlockAssociation { "AssociationId": Nothing, "CidrBlock": Nothing, "CidrBlockState": Nothing }

-- | Constructs VpcCidrBlockAssociation's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVpcCidrBlockAssociation' :: ( { "AssociationId" :: Maybe (String) , "CidrBlock" :: Maybe (String) , "CidrBlockState" :: Maybe (VpcCidrBlockState) } -> {"AssociationId" :: Maybe (String) , "CidrBlock" :: Maybe (String) , "CidrBlockState" :: Maybe (VpcCidrBlockState) } ) -> VpcCidrBlockAssociation
newVpcCidrBlockAssociation'  customize = (VpcCidrBlockAssociation <<< customize) { "AssociationId": Nothing, "CidrBlock": Nothing, "CidrBlockState": Nothing }



newtype VpcCidrBlockAssociationSet = VpcCidrBlockAssociationSet (Array VpcCidrBlockAssociation)
derive instance newtypeVpcCidrBlockAssociationSet :: Newtype VpcCidrBlockAssociationSet _
derive instance repGenericVpcCidrBlockAssociationSet :: Generic VpcCidrBlockAssociationSet _
instance showVpcCidrBlockAssociationSet :: Show VpcCidrBlockAssociationSet where show = genericShow
instance decodeVpcCidrBlockAssociationSet :: Decode VpcCidrBlockAssociationSet where decode = genericDecode options
instance encodeVpcCidrBlockAssociationSet :: Encode VpcCidrBlockAssociationSet where encode = genericEncode options



-- | <p>Describes the state of a CIDR block.</p>
newtype VpcCidrBlockState = VpcCidrBlockState 
  { "State" :: Maybe (VpcCidrBlockStateCode)
  , "StatusMessage" :: Maybe (String)
  }
derive instance newtypeVpcCidrBlockState :: Newtype VpcCidrBlockState _
derive instance repGenericVpcCidrBlockState :: Generic VpcCidrBlockState _
instance showVpcCidrBlockState :: Show VpcCidrBlockState where show = genericShow
instance decodeVpcCidrBlockState :: Decode VpcCidrBlockState where decode = genericDecode options
instance encodeVpcCidrBlockState :: Encode VpcCidrBlockState where encode = genericEncode options

-- | Constructs VpcCidrBlockState from required parameters
newVpcCidrBlockState :: VpcCidrBlockState
newVpcCidrBlockState  = VpcCidrBlockState { "State": Nothing, "StatusMessage": Nothing }

-- | Constructs VpcCidrBlockState's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVpcCidrBlockState' :: ( { "State" :: Maybe (VpcCidrBlockStateCode) , "StatusMessage" :: Maybe (String) } -> {"State" :: Maybe (VpcCidrBlockStateCode) , "StatusMessage" :: Maybe (String) } ) -> VpcCidrBlockState
newVpcCidrBlockState'  customize = (VpcCidrBlockState <<< customize) { "State": Nothing, "StatusMessage": Nothing }



newtype VpcCidrBlockStateCode = VpcCidrBlockStateCode String
derive instance newtypeVpcCidrBlockStateCode :: Newtype VpcCidrBlockStateCode _
derive instance repGenericVpcCidrBlockStateCode :: Generic VpcCidrBlockStateCode _
instance showVpcCidrBlockStateCode :: Show VpcCidrBlockStateCode where show = genericShow
instance decodeVpcCidrBlockStateCode :: Decode VpcCidrBlockStateCode where decode = genericDecode options
instance encodeVpcCidrBlockStateCode :: Encode VpcCidrBlockStateCode where encode = genericEncode options



-- | <p>Describes whether a VPC is enabled for ClassicLink.</p>
newtype VpcClassicLink = VpcClassicLink 
  { "ClassicLinkEnabled" :: Maybe (Boolean)
  , "Tags" :: Maybe (TagList)
  , "VpcId" :: Maybe (String)
  }
derive instance newtypeVpcClassicLink :: Newtype VpcClassicLink _
derive instance repGenericVpcClassicLink :: Generic VpcClassicLink _
instance showVpcClassicLink :: Show VpcClassicLink where show = genericShow
instance decodeVpcClassicLink :: Decode VpcClassicLink where decode = genericDecode options
instance encodeVpcClassicLink :: Encode VpcClassicLink where encode = genericEncode options

-- | Constructs VpcClassicLink from required parameters
newVpcClassicLink :: VpcClassicLink
newVpcClassicLink  = VpcClassicLink { "ClassicLinkEnabled": Nothing, "Tags": Nothing, "VpcId": Nothing }

-- | Constructs VpcClassicLink's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVpcClassicLink' :: ( { "ClassicLinkEnabled" :: Maybe (Boolean) , "Tags" :: Maybe (TagList) , "VpcId" :: Maybe (String) } -> {"ClassicLinkEnabled" :: Maybe (Boolean) , "Tags" :: Maybe (TagList) , "VpcId" :: Maybe (String) } ) -> VpcClassicLink
newVpcClassicLink'  customize = (VpcClassicLink <<< customize) { "ClassicLinkEnabled": Nothing, "Tags": Nothing, "VpcId": Nothing }



newtype VpcClassicLinkIdList = VpcClassicLinkIdList (Array String)
derive instance newtypeVpcClassicLinkIdList :: Newtype VpcClassicLinkIdList _
derive instance repGenericVpcClassicLinkIdList :: Generic VpcClassicLinkIdList _
instance showVpcClassicLinkIdList :: Show VpcClassicLinkIdList where show = genericShow
instance decodeVpcClassicLinkIdList :: Decode VpcClassicLinkIdList where decode = genericDecode options
instance encodeVpcClassicLinkIdList :: Encode VpcClassicLinkIdList where encode = genericEncode options



newtype VpcClassicLinkList = VpcClassicLinkList (Array VpcClassicLink)
derive instance newtypeVpcClassicLinkList :: Newtype VpcClassicLinkList _
derive instance repGenericVpcClassicLinkList :: Generic VpcClassicLinkList _
instance showVpcClassicLinkList :: Show VpcClassicLinkList where show = genericShow
instance decodeVpcClassicLinkList :: Decode VpcClassicLinkList where decode = genericDecode options
instance encodeVpcClassicLinkList :: Encode VpcClassicLinkList where encode = genericEncode options



-- | <p>Describes a VPC endpoint.</p>
newtype VpcEndpoint = VpcEndpoint 
  { "VpcEndpointId" :: Maybe (String)
  , "VpcEndpointType" :: Maybe (VpcEndpointType)
  , "VpcId" :: Maybe (String)
  , "ServiceName" :: Maybe (String)
  , "State" :: Maybe (State)
  , "PolicyDocument" :: Maybe (String)
  , "RouteTableIds" :: Maybe (ValueStringList)
  , "SubnetIds" :: Maybe (ValueStringList)
  , "Groups" :: Maybe (GroupIdentifierSet)
  , "PrivateDnsEnabled" :: Maybe (Boolean)
  , "NetworkInterfaceIds" :: Maybe (ValueStringList)
  , "DnsEntries" :: Maybe (DnsEntrySet)
  , "CreationTimestamp" :: Maybe (DateTime)
  }
derive instance newtypeVpcEndpoint :: Newtype VpcEndpoint _
derive instance repGenericVpcEndpoint :: Generic VpcEndpoint _
instance showVpcEndpoint :: Show VpcEndpoint where show = genericShow
instance decodeVpcEndpoint :: Decode VpcEndpoint where decode = genericDecode options
instance encodeVpcEndpoint :: Encode VpcEndpoint where encode = genericEncode options

-- | Constructs VpcEndpoint from required parameters
newVpcEndpoint :: VpcEndpoint
newVpcEndpoint  = VpcEndpoint { "CreationTimestamp": Nothing, "DnsEntries": Nothing, "Groups": Nothing, "NetworkInterfaceIds": Nothing, "PolicyDocument": Nothing, "PrivateDnsEnabled": Nothing, "RouteTableIds": Nothing, "ServiceName": Nothing, "State": Nothing, "SubnetIds": Nothing, "VpcEndpointId": Nothing, "VpcEndpointType": Nothing, "VpcId": Nothing }

-- | Constructs VpcEndpoint's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVpcEndpoint' :: ( { "VpcEndpointId" :: Maybe (String) , "VpcEndpointType" :: Maybe (VpcEndpointType) , "VpcId" :: Maybe (String) , "ServiceName" :: Maybe (String) , "State" :: Maybe (State) , "PolicyDocument" :: Maybe (String) , "RouteTableIds" :: Maybe (ValueStringList) , "SubnetIds" :: Maybe (ValueStringList) , "Groups" :: Maybe (GroupIdentifierSet) , "PrivateDnsEnabled" :: Maybe (Boolean) , "NetworkInterfaceIds" :: Maybe (ValueStringList) , "DnsEntries" :: Maybe (DnsEntrySet) , "CreationTimestamp" :: Maybe (DateTime) } -> {"VpcEndpointId" :: Maybe (String) , "VpcEndpointType" :: Maybe (VpcEndpointType) , "VpcId" :: Maybe (String) , "ServiceName" :: Maybe (String) , "State" :: Maybe (State) , "PolicyDocument" :: Maybe (String) , "RouteTableIds" :: Maybe (ValueStringList) , "SubnetIds" :: Maybe (ValueStringList) , "Groups" :: Maybe (GroupIdentifierSet) , "PrivateDnsEnabled" :: Maybe (Boolean) , "NetworkInterfaceIds" :: Maybe (ValueStringList) , "DnsEntries" :: Maybe (DnsEntrySet) , "CreationTimestamp" :: Maybe (DateTime) } ) -> VpcEndpoint
newVpcEndpoint'  customize = (VpcEndpoint <<< customize) { "CreationTimestamp": Nothing, "DnsEntries": Nothing, "Groups": Nothing, "NetworkInterfaceIds": Nothing, "PolicyDocument": Nothing, "PrivateDnsEnabled": Nothing, "RouteTableIds": Nothing, "ServiceName": Nothing, "State": Nothing, "SubnetIds": Nothing, "VpcEndpointId": Nothing, "VpcEndpointType": Nothing, "VpcId": Nothing }



-- | <p>Describes a VPC endpoint connection to a service.</p>
newtype VpcEndpointConnection = VpcEndpointConnection 
  { "ServiceId" :: Maybe (String)
  , "VpcEndpointId" :: Maybe (String)
  , "VpcEndpointOwner" :: Maybe (String)
  , "VpcEndpointState" :: Maybe (State)
  , "CreationTimestamp" :: Maybe (DateTime)
  }
derive instance newtypeVpcEndpointConnection :: Newtype VpcEndpointConnection _
derive instance repGenericVpcEndpointConnection :: Generic VpcEndpointConnection _
instance showVpcEndpointConnection :: Show VpcEndpointConnection where show = genericShow
instance decodeVpcEndpointConnection :: Decode VpcEndpointConnection where decode = genericDecode options
instance encodeVpcEndpointConnection :: Encode VpcEndpointConnection where encode = genericEncode options

-- | Constructs VpcEndpointConnection from required parameters
newVpcEndpointConnection :: VpcEndpointConnection
newVpcEndpointConnection  = VpcEndpointConnection { "CreationTimestamp": Nothing, "ServiceId": Nothing, "VpcEndpointId": Nothing, "VpcEndpointOwner": Nothing, "VpcEndpointState": Nothing }

-- | Constructs VpcEndpointConnection's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVpcEndpointConnection' :: ( { "ServiceId" :: Maybe (String) , "VpcEndpointId" :: Maybe (String) , "VpcEndpointOwner" :: Maybe (String) , "VpcEndpointState" :: Maybe (State) , "CreationTimestamp" :: Maybe (DateTime) } -> {"ServiceId" :: Maybe (String) , "VpcEndpointId" :: Maybe (String) , "VpcEndpointOwner" :: Maybe (String) , "VpcEndpointState" :: Maybe (State) , "CreationTimestamp" :: Maybe (DateTime) } ) -> VpcEndpointConnection
newVpcEndpointConnection'  customize = (VpcEndpointConnection <<< customize) { "CreationTimestamp": Nothing, "ServiceId": Nothing, "VpcEndpointId": Nothing, "VpcEndpointOwner": Nothing, "VpcEndpointState": Nothing }



newtype VpcEndpointConnectionSet = VpcEndpointConnectionSet (Array VpcEndpointConnection)
derive instance newtypeVpcEndpointConnectionSet :: Newtype VpcEndpointConnectionSet _
derive instance repGenericVpcEndpointConnectionSet :: Generic VpcEndpointConnectionSet _
instance showVpcEndpointConnectionSet :: Show VpcEndpointConnectionSet where show = genericShow
instance decodeVpcEndpointConnectionSet :: Decode VpcEndpointConnectionSet where decode = genericDecode options
instance encodeVpcEndpointConnectionSet :: Encode VpcEndpointConnectionSet where encode = genericEncode options



newtype VpcEndpointSet = VpcEndpointSet (Array VpcEndpoint)
derive instance newtypeVpcEndpointSet :: Newtype VpcEndpointSet _
derive instance repGenericVpcEndpointSet :: Generic VpcEndpointSet _
instance showVpcEndpointSet :: Show VpcEndpointSet where show = genericShow
instance decodeVpcEndpointSet :: Decode VpcEndpointSet where decode = genericDecode options
instance encodeVpcEndpointSet :: Encode VpcEndpointSet where encode = genericEncode options



newtype VpcEndpointType = VpcEndpointType String
derive instance newtypeVpcEndpointType :: Newtype VpcEndpointType _
derive instance repGenericVpcEndpointType :: Generic VpcEndpointType _
instance showVpcEndpointType :: Show VpcEndpointType where show = genericShow
instance decodeVpcEndpointType :: Decode VpcEndpointType where decode = genericDecode options
instance encodeVpcEndpointType :: Encode VpcEndpointType where encode = genericEncode options



newtype VpcIdStringList = VpcIdStringList (Array String)
derive instance newtypeVpcIdStringList :: Newtype VpcIdStringList _
derive instance repGenericVpcIdStringList :: Generic VpcIdStringList _
instance showVpcIdStringList :: Show VpcIdStringList where show = genericShow
instance decodeVpcIdStringList :: Decode VpcIdStringList where decode = genericDecode options
instance encodeVpcIdStringList :: Encode VpcIdStringList where encode = genericEncode options



-- | <p>Describes an IPv6 CIDR block associated with a VPC.</p>
newtype VpcIpv6CidrBlockAssociation = VpcIpv6CidrBlockAssociation 
  { "AssociationId" :: Maybe (String)
  , "Ipv6CidrBlock" :: Maybe (String)
  , "Ipv6CidrBlockState" :: Maybe (VpcCidrBlockState)
  }
derive instance newtypeVpcIpv6CidrBlockAssociation :: Newtype VpcIpv6CidrBlockAssociation _
derive instance repGenericVpcIpv6CidrBlockAssociation :: Generic VpcIpv6CidrBlockAssociation _
instance showVpcIpv6CidrBlockAssociation :: Show VpcIpv6CidrBlockAssociation where show = genericShow
instance decodeVpcIpv6CidrBlockAssociation :: Decode VpcIpv6CidrBlockAssociation where decode = genericDecode options
instance encodeVpcIpv6CidrBlockAssociation :: Encode VpcIpv6CidrBlockAssociation where encode = genericEncode options

-- | Constructs VpcIpv6CidrBlockAssociation from required parameters
newVpcIpv6CidrBlockAssociation :: VpcIpv6CidrBlockAssociation
newVpcIpv6CidrBlockAssociation  = VpcIpv6CidrBlockAssociation { "AssociationId": Nothing, "Ipv6CidrBlock": Nothing, "Ipv6CidrBlockState": Nothing }

-- | Constructs VpcIpv6CidrBlockAssociation's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVpcIpv6CidrBlockAssociation' :: ( { "AssociationId" :: Maybe (String) , "Ipv6CidrBlock" :: Maybe (String) , "Ipv6CidrBlockState" :: Maybe (VpcCidrBlockState) } -> {"AssociationId" :: Maybe (String) , "Ipv6CidrBlock" :: Maybe (String) , "Ipv6CidrBlockState" :: Maybe (VpcCidrBlockState) } ) -> VpcIpv6CidrBlockAssociation
newVpcIpv6CidrBlockAssociation'  customize = (VpcIpv6CidrBlockAssociation <<< customize) { "AssociationId": Nothing, "Ipv6CidrBlock": Nothing, "Ipv6CidrBlockState": Nothing }



newtype VpcIpv6CidrBlockAssociationSet = VpcIpv6CidrBlockAssociationSet (Array VpcIpv6CidrBlockAssociation)
derive instance newtypeVpcIpv6CidrBlockAssociationSet :: Newtype VpcIpv6CidrBlockAssociationSet _
derive instance repGenericVpcIpv6CidrBlockAssociationSet :: Generic VpcIpv6CidrBlockAssociationSet _
instance showVpcIpv6CidrBlockAssociationSet :: Show VpcIpv6CidrBlockAssociationSet where show = genericShow
instance decodeVpcIpv6CidrBlockAssociationSet :: Decode VpcIpv6CidrBlockAssociationSet where decode = genericDecode options
instance encodeVpcIpv6CidrBlockAssociationSet :: Encode VpcIpv6CidrBlockAssociationSet where encode = genericEncode options



newtype VpcList = VpcList (Array Vpc)
derive instance newtypeVpcList :: Newtype VpcList _
derive instance repGenericVpcList :: Generic VpcList _
instance showVpcList :: Show VpcList where show = genericShow
instance decodeVpcList :: Decode VpcList where decode = genericDecode options
instance encodeVpcList :: Encode VpcList where encode = genericEncode options



-- | <p>Describes a VPC peering connection.</p>
newtype VpcPeeringConnection = VpcPeeringConnection 
  { "AccepterVpcInfo" :: Maybe (VpcPeeringConnectionVpcInfo)
  , "ExpirationTime" :: Maybe (DateTime)
  , "RequesterVpcInfo" :: Maybe (VpcPeeringConnectionVpcInfo)
  , "Status" :: Maybe (VpcPeeringConnectionStateReason)
  , "Tags" :: Maybe (TagList)
  , "VpcPeeringConnectionId" :: Maybe (String)
  }
derive instance newtypeVpcPeeringConnection :: Newtype VpcPeeringConnection _
derive instance repGenericVpcPeeringConnection :: Generic VpcPeeringConnection _
instance showVpcPeeringConnection :: Show VpcPeeringConnection where show = genericShow
instance decodeVpcPeeringConnection :: Decode VpcPeeringConnection where decode = genericDecode options
instance encodeVpcPeeringConnection :: Encode VpcPeeringConnection where encode = genericEncode options

-- | Constructs VpcPeeringConnection from required parameters
newVpcPeeringConnection :: VpcPeeringConnection
newVpcPeeringConnection  = VpcPeeringConnection { "AccepterVpcInfo": Nothing, "ExpirationTime": Nothing, "RequesterVpcInfo": Nothing, "Status": Nothing, "Tags": Nothing, "VpcPeeringConnectionId": Nothing }

-- | Constructs VpcPeeringConnection's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVpcPeeringConnection' :: ( { "AccepterVpcInfo" :: Maybe (VpcPeeringConnectionVpcInfo) , "ExpirationTime" :: Maybe (DateTime) , "RequesterVpcInfo" :: Maybe (VpcPeeringConnectionVpcInfo) , "Status" :: Maybe (VpcPeeringConnectionStateReason) , "Tags" :: Maybe (TagList) , "VpcPeeringConnectionId" :: Maybe (String) } -> {"AccepterVpcInfo" :: Maybe (VpcPeeringConnectionVpcInfo) , "ExpirationTime" :: Maybe (DateTime) , "RequesterVpcInfo" :: Maybe (VpcPeeringConnectionVpcInfo) , "Status" :: Maybe (VpcPeeringConnectionStateReason) , "Tags" :: Maybe (TagList) , "VpcPeeringConnectionId" :: Maybe (String) } ) -> VpcPeeringConnection
newVpcPeeringConnection'  customize = (VpcPeeringConnection <<< customize) { "AccepterVpcInfo": Nothing, "ExpirationTime": Nothing, "RequesterVpcInfo": Nothing, "Status": Nothing, "Tags": Nothing, "VpcPeeringConnectionId": Nothing }



newtype VpcPeeringConnectionList = VpcPeeringConnectionList (Array VpcPeeringConnection)
derive instance newtypeVpcPeeringConnectionList :: Newtype VpcPeeringConnectionList _
derive instance repGenericVpcPeeringConnectionList :: Generic VpcPeeringConnectionList _
instance showVpcPeeringConnectionList :: Show VpcPeeringConnectionList where show = genericShow
instance decodeVpcPeeringConnectionList :: Decode VpcPeeringConnectionList where decode = genericDecode options
instance encodeVpcPeeringConnectionList :: Encode VpcPeeringConnectionList where encode = genericEncode options



-- | <p>Describes the VPC peering connection options.</p>
newtype VpcPeeringConnectionOptionsDescription = VpcPeeringConnectionOptionsDescription 
  { "AllowDnsResolutionFromRemoteVpc" :: Maybe (Boolean)
  , "AllowEgressFromLocalClassicLinkToRemoteVpc" :: Maybe (Boolean)
  , "AllowEgressFromLocalVpcToRemoteClassicLink" :: Maybe (Boolean)
  }
derive instance newtypeVpcPeeringConnectionOptionsDescription :: Newtype VpcPeeringConnectionOptionsDescription _
derive instance repGenericVpcPeeringConnectionOptionsDescription :: Generic VpcPeeringConnectionOptionsDescription _
instance showVpcPeeringConnectionOptionsDescription :: Show VpcPeeringConnectionOptionsDescription where show = genericShow
instance decodeVpcPeeringConnectionOptionsDescription :: Decode VpcPeeringConnectionOptionsDescription where decode = genericDecode options
instance encodeVpcPeeringConnectionOptionsDescription :: Encode VpcPeeringConnectionOptionsDescription where encode = genericEncode options

-- | Constructs VpcPeeringConnectionOptionsDescription from required parameters
newVpcPeeringConnectionOptionsDescription :: VpcPeeringConnectionOptionsDescription
newVpcPeeringConnectionOptionsDescription  = VpcPeeringConnectionOptionsDescription { "AllowDnsResolutionFromRemoteVpc": Nothing, "AllowEgressFromLocalClassicLinkToRemoteVpc": Nothing, "AllowEgressFromLocalVpcToRemoteClassicLink": Nothing }

-- | Constructs VpcPeeringConnectionOptionsDescription's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVpcPeeringConnectionOptionsDescription' :: ( { "AllowDnsResolutionFromRemoteVpc" :: Maybe (Boolean) , "AllowEgressFromLocalClassicLinkToRemoteVpc" :: Maybe (Boolean) , "AllowEgressFromLocalVpcToRemoteClassicLink" :: Maybe (Boolean) } -> {"AllowDnsResolutionFromRemoteVpc" :: Maybe (Boolean) , "AllowEgressFromLocalClassicLinkToRemoteVpc" :: Maybe (Boolean) , "AllowEgressFromLocalVpcToRemoteClassicLink" :: Maybe (Boolean) } ) -> VpcPeeringConnectionOptionsDescription
newVpcPeeringConnectionOptionsDescription'  customize = (VpcPeeringConnectionOptionsDescription <<< customize) { "AllowDnsResolutionFromRemoteVpc": Nothing, "AllowEgressFromLocalClassicLinkToRemoteVpc": Nothing, "AllowEgressFromLocalVpcToRemoteClassicLink": Nothing }



-- | <p>Describes the status of a VPC peering connection.</p>
newtype VpcPeeringConnectionStateReason = VpcPeeringConnectionStateReason 
  { "Code" :: Maybe (VpcPeeringConnectionStateReasonCode)
  , "Message" :: Maybe (String)
  }
derive instance newtypeVpcPeeringConnectionStateReason :: Newtype VpcPeeringConnectionStateReason _
derive instance repGenericVpcPeeringConnectionStateReason :: Generic VpcPeeringConnectionStateReason _
instance showVpcPeeringConnectionStateReason :: Show VpcPeeringConnectionStateReason where show = genericShow
instance decodeVpcPeeringConnectionStateReason :: Decode VpcPeeringConnectionStateReason where decode = genericDecode options
instance encodeVpcPeeringConnectionStateReason :: Encode VpcPeeringConnectionStateReason where encode = genericEncode options

-- | Constructs VpcPeeringConnectionStateReason from required parameters
newVpcPeeringConnectionStateReason :: VpcPeeringConnectionStateReason
newVpcPeeringConnectionStateReason  = VpcPeeringConnectionStateReason { "Code": Nothing, "Message": Nothing }

-- | Constructs VpcPeeringConnectionStateReason's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVpcPeeringConnectionStateReason' :: ( { "Code" :: Maybe (VpcPeeringConnectionStateReasonCode) , "Message" :: Maybe (String) } -> {"Code" :: Maybe (VpcPeeringConnectionStateReasonCode) , "Message" :: Maybe (String) } ) -> VpcPeeringConnectionStateReason
newVpcPeeringConnectionStateReason'  customize = (VpcPeeringConnectionStateReason <<< customize) { "Code": Nothing, "Message": Nothing }



newtype VpcPeeringConnectionStateReasonCode = VpcPeeringConnectionStateReasonCode String
derive instance newtypeVpcPeeringConnectionStateReasonCode :: Newtype VpcPeeringConnectionStateReasonCode _
derive instance repGenericVpcPeeringConnectionStateReasonCode :: Generic VpcPeeringConnectionStateReasonCode _
instance showVpcPeeringConnectionStateReasonCode :: Show VpcPeeringConnectionStateReasonCode where show = genericShow
instance decodeVpcPeeringConnectionStateReasonCode :: Decode VpcPeeringConnectionStateReasonCode where decode = genericDecode options
instance encodeVpcPeeringConnectionStateReasonCode :: Encode VpcPeeringConnectionStateReasonCode where encode = genericEncode options



-- | <p>Describes a VPC in a VPC peering connection.</p>
newtype VpcPeeringConnectionVpcInfo = VpcPeeringConnectionVpcInfo 
  { "CidrBlock" :: Maybe (String)
  , "Ipv6CidrBlockSet" :: Maybe (Ipv6CidrBlockSet)
  , "CidrBlockSet" :: Maybe (CidrBlockSet)
  , "OwnerId" :: Maybe (String)
  , "PeeringOptions" :: Maybe (VpcPeeringConnectionOptionsDescription)
  , "VpcId" :: Maybe (String)
  , "Region" :: Maybe (String)
  }
derive instance newtypeVpcPeeringConnectionVpcInfo :: Newtype VpcPeeringConnectionVpcInfo _
derive instance repGenericVpcPeeringConnectionVpcInfo :: Generic VpcPeeringConnectionVpcInfo _
instance showVpcPeeringConnectionVpcInfo :: Show VpcPeeringConnectionVpcInfo where show = genericShow
instance decodeVpcPeeringConnectionVpcInfo :: Decode VpcPeeringConnectionVpcInfo where decode = genericDecode options
instance encodeVpcPeeringConnectionVpcInfo :: Encode VpcPeeringConnectionVpcInfo where encode = genericEncode options

-- | Constructs VpcPeeringConnectionVpcInfo from required parameters
newVpcPeeringConnectionVpcInfo :: VpcPeeringConnectionVpcInfo
newVpcPeeringConnectionVpcInfo  = VpcPeeringConnectionVpcInfo { "CidrBlock": Nothing, "CidrBlockSet": Nothing, "Ipv6CidrBlockSet": Nothing, "OwnerId": Nothing, "PeeringOptions": Nothing, "Region": Nothing, "VpcId": Nothing }

-- | Constructs VpcPeeringConnectionVpcInfo's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVpcPeeringConnectionVpcInfo' :: ( { "CidrBlock" :: Maybe (String) , "Ipv6CidrBlockSet" :: Maybe (Ipv6CidrBlockSet) , "CidrBlockSet" :: Maybe (CidrBlockSet) , "OwnerId" :: Maybe (String) , "PeeringOptions" :: Maybe (VpcPeeringConnectionOptionsDescription) , "VpcId" :: Maybe (String) , "Region" :: Maybe (String) } -> {"CidrBlock" :: Maybe (String) , "Ipv6CidrBlockSet" :: Maybe (Ipv6CidrBlockSet) , "CidrBlockSet" :: Maybe (CidrBlockSet) , "OwnerId" :: Maybe (String) , "PeeringOptions" :: Maybe (VpcPeeringConnectionOptionsDescription) , "VpcId" :: Maybe (String) , "Region" :: Maybe (String) } ) -> VpcPeeringConnectionVpcInfo
newVpcPeeringConnectionVpcInfo'  customize = (VpcPeeringConnectionVpcInfo <<< customize) { "CidrBlock": Nothing, "CidrBlockSet": Nothing, "Ipv6CidrBlockSet": Nothing, "OwnerId": Nothing, "PeeringOptions": Nothing, "Region": Nothing, "VpcId": Nothing }



newtype VpcState = VpcState String
derive instance newtypeVpcState :: Newtype VpcState _
derive instance repGenericVpcState :: Generic VpcState _
instance showVpcState :: Show VpcState where show = genericShow
instance decodeVpcState :: Decode VpcState where decode = genericDecode options
instance encodeVpcState :: Encode VpcState where encode = genericEncode options



newtype VpcTenancy = VpcTenancy String
derive instance newtypeVpcTenancy :: Newtype VpcTenancy _
derive instance repGenericVpcTenancy :: Generic VpcTenancy _
instance showVpcTenancy :: Show VpcTenancy where show = genericShow
instance decodeVpcTenancy :: Decode VpcTenancy where decode = genericDecode options
instance encodeVpcTenancy :: Encode VpcTenancy where encode = genericEncode options



-- | <p>Describes a VPN connection.</p>
newtype VpnConnection = VpnConnection 
  { "CustomerGatewayConfiguration" :: Maybe (String)
  , "CustomerGatewayId" :: Maybe (String)
  , "Category" :: Maybe (String)
  , "State" :: Maybe (VpnState)
  , "Type" :: Maybe (GatewayType)
  , "VpnConnectionId" :: Maybe (String)
  , "VpnGatewayId" :: Maybe (String)
  , "Options" :: Maybe (VpnConnectionOptions)
  , "Routes" :: Maybe (VpnStaticRouteList)
  , "Tags" :: Maybe (TagList)
  , "VgwTelemetry" :: Maybe (VgwTelemetryList)
  }
derive instance newtypeVpnConnection :: Newtype VpnConnection _
derive instance repGenericVpnConnection :: Generic VpnConnection _
instance showVpnConnection :: Show VpnConnection where show = genericShow
instance decodeVpnConnection :: Decode VpnConnection where decode = genericDecode options
instance encodeVpnConnection :: Encode VpnConnection where encode = genericEncode options

-- | Constructs VpnConnection from required parameters
newVpnConnection :: VpnConnection
newVpnConnection  = VpnConnection { "Category": Nothing, "CustomerGatewayConfiguration": Nothing, "CustomerGatewayId": Nothing, "Options": Nothing, "Routes": Nothing, "State": Nothing, "Tags": Nothing, "Type": Nothing, "VgwTelemetry": Nothing, "VpnConnectionId": Nothing, "VpnGatewayId": Nothing }

-- | Constructs VpnConnection's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVpnConnection' :: ( { "CustomerGatewayConfiguration" :: Maybe (String) , "CustomerGatewayId" :: Maybe (String) , "Category" :: Maybe (String) , "State" :: Maybe (VpnState) , "Type" :: Maybe (GatewayType) , "VpnConnectionId" :: Maybe (String) , "VpnGatewayId" :: Maybe (String) , "Options" :: Maybe (VpnConnectionOptions) , "Routes" :: Maybe (VpnStaticRouteList) , "Tags" :: Maybe (TagList) , "VgwTelemetry" :: Maybe (VgwTelemetryList) } -> {"CustomerGatewayConfiguration" :: Maybe (String) , "CustomerGatewayId" :: Maybe (String) , "Category" :: Maybe (String) , "State" :: Maybe (VpnState) , "Type" :: Maybe (GatewayType) , "VpnConnectionId" :: Maybe (String) , "VpnGatewayId" :: Maybe (String) , "Options" :: Maybe (VpnConnectionOptions) , "Routes" :: Maybe (VpnStaticRouteList) , "Tags" :: Maybe (TagList) , "VgwTelemetry" :: Maybe (VgwTelemetryList) } ) -> VpnConnection
newVpnConnection'  customize = (VpnConnection <<< customize) { "Category": Nothing, "CustomerGatewayConfiguration": Nothing, "CustomerGatewayId": Nothing, "Options": Nothing, "Routes": Nothing, "State": Nothing, "Tags": Nothing, "Type": Nothing, "VgwTelemetry": Nothing, "VpnConnectionId": Nothing, "VpnGatewayId": Nothing }



newtype VpnConnectionIdStringList = VpnConnectionIdStringList (Array String)
derive instance newtypeVpnConnectionIdStringList :: Newtype VpnConnectionIdStringList _
derive instance repGenericVpnConnectionIdStringList :: Generic VpnConnectionIdStringList _
instance showVpnConnectionIdStringList :: Show VpnConnectionIdStringList where show = genericShow
instance decodeVpnConnectionIdStringList :: Decode VpnConnectionIdStringList where decode = genericDecode options
instance encodeVpnConnectionIdStringList :: Encode VpnConnectionIdStringList where encode = genericEncode options



newtype VpnConnectionList = VpnConnectionList (Array VpnConnection)
derive instance newtypeVpnConnectionList :: Newtype VpnConnectionList _
derive instance repGenericVpnConnectionList :: Generic VpnConnectionList _
instance showVpnConnectionList :: Show VpnConnectionList where show = genericShow
instance decodeVpnConnectionList :: Decode VpnConnectionList where decode = genericDecode options
instance encodeVpnConnectionList :: Encode VpnConnectionList where encode = genericEncode options



-- | <p>Describes VPN connection options.</p>
newtype VpnConnectionOptions = VpnConnectionOptions 
  { "StaticRoutesOnly" :: Maybe (Boolean)
  }
derive instance newtypeVpnConnectionOptions :: Newtype VpnConnectionOptions _
derive instance repGenericVpnConnectionOptions :: Generic VpnConnectionOptions _
instance showVpnConnectionOptions :: Show VpnConnectionOptions where show = genericShow
instance decodeVpnConnectionOptions :: Decode VpnConnectionOptions where decode = genericDecode options
instance encodeVpnConnectionOptions :: Encode VpnConnectionOptions where encode = genericEncode options

-- | Constructs VpnConnectionOptions from required parameters
newVpnConnectionOptions :: VpnConnectionOptions
newVpnConnectionOptions  = VpnConnectionOptions { "StaticRoutesOnly": Nothing }

-- | Constructs VpnConnectionOptions's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVpnConnectionOptions' :: ( { "StaticRoutesOnly" :: Maybe (Boolean) } -> {"StaticRoutesOnly" :: Maybe (Boolean) } ) -> VpnConnectionOptions
newVpnConnectionOptions'  customize = (VpnConnectionOptions <<< customize) { "StaticRoutesOnly": Nothing }



-- | <p>Describes VPN connection options.</p>
newtype VpnConnectionOptionsSpecification = VpnConnectionOptionsSpecification 
  { "StaticRoutesOnly" :: Maybe (Boolean)
  , "TunnelOptions" :: Maybe (TunnelOptionsList)
  }
derive instance newtypeVpnConnectionOptionsSpecification :: Newtype VpnConnectionOptionsSpecification _
derive instance repGenericVpnConnectionOptionsSpecification :: Generic VpnConnectionOptionsSpecification _
instance showVpnConnectionOptionsSpecification :: Show VpnConnectionOptionsSpecification where show = genericShow
instance decodeVpnConnectionOptionsSpecification :: Decode VpnConnectionOptionsSpecification where decode = genericDecode options
instance encodeVpnConnectionOptionsSpecification :: Encode VpnConnectionOptionsSpecification where encode = genericEncode options

-- | Constructs VpnConnectionOptionsSpecification from required parameters
newVpnConnectionOptionsSpecification :: VpnConnectionOptionsSpecification
newVpnConnectionOptionsSpecification  = VpnConnectionOptionsSpecification { "StaticRoutesOnly": Nothing, "TunnelOptions": Nothing }

-- | Constructs VpnConnectionOptionsSpecification's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVpnConnectionOptionsSpecification' :: ( { "StaticRoutesOnly" :: Maybe (Boolean) , "TunnelOptions" :: Maybe (TunnelOptionsList) } -> {"StaticRoutesOnly" :: Maybe (Boolean) , "TunnelOptions" :: Maybe (TunnelOptionsList) } ) -> VpnConnectionOptionsSpecification
newVpnConnectionOptionsSpecification'  customize = (VpnConnectionOptionsSpecification <<< customize) { "StaticRoutesOnly": Nothing, "TunnelOptions": Nothing }



-- | <p>Describes a virtual private gateway.</p>
newtype VpnGateway = VpnGateway 
  { "AvailabilityZone" :: Maybe (String)
  , "State" :: Maybe (VpnState)
  , "Type" :: Maybe (GatewayType)
  , "VpcAttachments" :: Maybe (VpcAttachmentList)
  , "VpnGatewayId" :: Maybe (String)
  , "AmazonSideAsn" :: Maybe (Number)
  , "Tags" :: Maybe (TagList)
  }
derive instance newtypeVpnGateway :: Newtype VpnGateway _
derive instance repGenericVpnGateway :: Generic VpnGateway _
instance showVpnGateway :: Show VpnGateway where show = genericShow
instance decodeVpnGateway :: Decode VpnGateway where decode = genericDecode options
instance encodeVpnGateway :: Encode VpnGateway where encode = genericEncode options

-- | Constructs VpnGateway from required parameters
newVpnGateway :: VpnGateway
newVpnGateway  = VpnGateway { "AmazonSideAsn": Nothing, "AvailabilityZone": Nothing, "State": Nothing, "Tags": Nothing, "Type": Nothing, "VpcAttachments": Nothing, "VpnGatewayId": Nothing }

-- | Constructs VpnGateway's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVpnGateway' :: ( { "AvailabilityZone" :: Maybe (String) , "State" :: Maybe (VpnState) , "Type" :: Maybe (GatewayType) , "VpcAttachments" :: Maybe (VpcAttachmentList) , "VpnGatewayId" :: Maybe (String) , "AmazonSideAsn" :: Maybe (Number) , "Tags" :: Maybe (TagList) } -> {"AvailabilityZone" :: Maybe (String) , "State" :: Maybe (VpnState) , "Type" :: Maybe (GatewayType) , "VpcAttachments" :: Maybe (VpcAttachmentList) , "VpnGatewayId" :: Maybe (String) , "AmazonSideAsn" :: Maybe (Number) , "Tags" :: Maybe (TagList) } ) -> VpnGateway
newVpnGateway'  customize = (VpnGateway <<< customize) { "AmazonSideAsn": Nothing, "AvailabilityZone": Nothing, "State": Nothing, "Tags": Nothing, "Type": Nothing, "VpcAttachments": Nothing, "VpnGatewayId": Nothing }



newtype VpnGatewayIdStringList = VpnGatewayIdStringList (Array String)
derive instance newtypeVpnGatewayIdStringList :: Newtype VpnGatewayIdStringList _
derive instance repGenericVpnGatewayIdStringList :: Generic VpnGatewayIdStringList _
instance showVpnGatewayIdStringList :: Show VpnGatewayIdStringList where show = genericShow
instance decodeVpnGatewayIdStringList :: Decode VpnGatewayIdStringList where decode = genericDecode options
instance encodeVpnGatewayIdStringList :: Encode VpnGatewayIdStringList where encode = genericEncode options



newtype VpnGatewayList = VpnGatewayList (Array VpnGateway)
derive instance newtypeVpnGatewayList :: Newtype VpnGatewayList _
derive instance repGenericVpnGatewayList :: Generic VpnGatewayList _
instance showVpnGatewayList :: Show VpnGatewayList where show = genericShow
instance decodeVpnGatewayList :: Decode VpnGatewayList where decode = genericDecode options
instance encodeVpnGatewayList :: Encode VpnGatewayList where encode = genericEncode options



newtype VpnState = VpnState String
derive instance newtypeVpnState :: Newtype VpnState _
derive instance repGenericVpnState :: Generic VpnState _
instance showVpnState :: Show VpnState where show = genericShow
instance decodeVpnState :: Decode VpnState where decode = genericDecode options
instance encodeVpnState :: Encode VpnState where encode = genericEncode options



-- | <p>Describes a static route for a VPN connection.</p>
newtype VpnStaticRoute = VpnStaticRoute 
  { "DestinationCidrBlock" :: Maybe (String)
  , "Source" :: Maybe (VpnStaticRouteSource)
  , "State" :: Maybe (VpnState)
  }
derive instance newtypeVpnStaticRoute :: Newtype VpnStaticRoute _
derive instance repGenericVpnStaticRoute :: Generic VpnStaticRoute _
instance showVpnStaticRoute :: Show VpnStaticRoute where show = genericShow
instance decodeVpnStaticRoute :: Decode VpnStaticRoute where decode = genericDecode options
instance encodeVpnStaticRoute :: Encode VpnStaticRoute where encode = genericEncode options

-- | Constructs VpnStaticRoute from required parameters
newVpnStaticRoute :: VpnStaticRoute
newVpnStaticRoute  = VpnStaticRoute { "DestinationCidrBlock": Nothing, "Source": Nothing, "State": Nothing }

-- | Constructs VpnStaticRoute's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVpnStaticRoute' :: ( { "DestinationCidrBlock" :: Maybe (String) , "Source" :: Maybe (VpnStaticRouteSource) , "State" :: Maybe (VpnState) } -> {"DestinationCidrBlock" :: Maybe (String) , "Source" :: Maybe (VpnStaticRouteSource) , "State" :: Maybe (VpnState) } ) -> VpnStaticRoute
newVpnStaticRoute'  customize = (VpnStaticRoute <<< customize) { "DestinationCidrBlock": Nothing, "Source": Nothing, "State": Nothing }



newtype VpnStaticRouteList = VpnStaticRouteList (Array VpnStaticRoute)
derive instance newtypeVpnStaticRouteList :: Newtype VpnStaticRouteList _
derive instance repGenericVpnStaticRouteList :: Generic VpnStaticRouteList _
instance showVpnStaticRouteList :: Show VpnStaticRouteList where show = genericShow
instance decodeVpnStaticRouteList :: Decode VpnStaticRouteList where decode = genericDecode options
instance encodeVpnStaticRouteList :: Encode VpnStaticRouteList where encode = genericEncode options



newtype VpnStaticRouteSource = VpnStaticRouteSource String
derive instance newtypeVpnStaticRouteSource :: Newtype VpnStaticRouteSource _
derive instance repGenericVpnStaticRouteSource :: Generic VpnStaticRouteSource _
instance showVpnStaticRouteSource :: Show VpnStaticRouteSource where show = genericShow
instance decodeVpnStaticRouteSource :: Decode VpnStaticRouteSource where decode = genericDecode options
instance encodeVpnStaticRouteSource :: Encode VpnStaticRouteSource where encode = genericEncode options



-- | <p>The tunnel options for a VPN connection.</p>
newtype VpnTunnelOptionsSpecification = VpnTunnelOptionsSpecification 
  { "TunnelInsideCidr" :: Maybe (String)
  , "PreSharedKey" :: Maybe (String)
  }
derive instance newtypeVpnTunnelOptionsSpecification :: Newtype VpnTunnelOptionsSpecification _
derive instance repGenericVpnTunnelOptionsSpecification :: Generic VpnTunnelOptionsSpecification _
instance showVpnTunnelOptionsSpecification :: Show VpnTunnelOptionsSpecification where show = genericShow
instance decodeVpnTunnelOptionsSpecification :: Decode VpnTunnelOptionsSpecification where decode = genericDecode options
instance encodeVpnTunnelOptionsSpecification :: Encode VpnTunnelOptionsSpecification where encode = genericEncode options

-- | Constructs VpnTunnelOptionsSpecification from required parameters
newVpnTunnelOptionsSpecification :: VpnTunnelOptionsSpecification
newVpnTunnelOptionsSpecification  = VpnTunnelOptionsSpecification { "PreSharedKey": Nothing, "TunnelInsideCidr": Nothing }

-- | Constructs VpnTunnelOptionsSpecification's fields from required parameters
--   This may be useful if you need to immediately overwrite some of the optional values
newVpnTunnelOptionsSpecification' :: ( { "TunnelInsideCidr" :: Maybe (String) , "PreSharedKey" :: Maybe (String) } -> {"TunnelInsideCidr" :: Maybe (String) , "PreSharedKey" :: Maybe (String) } ) -> VpnTunnelOptionsSpecification
newVpnTunnelOptionsSpecification'  customize = (VpnTunnelOptionsSpecification <<< customize) { "PreSharedKey": Nothing, "TunnelInsideCidr": Nothing }



newtype ZoneNameStringList = ZoneNameStringList (Array String)
derive instance newtypeZoneNameStringList :: Newtype ZoneNameStringList _
derive instance repGenericZoneNameStringList :: Generic ZoneNameStringList _
instance showZoneNameStringList :: Show ZoneNameStringList where show = genericShow
instance decodeZoneNameStringList :: Decode ZoneNameStringList where decode = genericDecode options
instance encodeZoneNameStringList :: Encode ZoneNameStringList where encode = genericEncode options



newtype Scope' = Scope' String
derive instance newtypeScope' :: Newtype Scope' _
derive instance repGenericScope' :: Generic Scope' _
instance showScope' :: Show Scope' where show = genericShow
instance decodeScope' :: Decode Scope' where decode = genericDecode options
instance encodeScope' :: Encode Scope' where encode = genericEncode options

